
DonkeyKong.elf:     file format elf32-littlenios2
DonkeyKong.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00014ad4 memsz 0x00014ad4 flags r-x
    LOAD off    0x00015af4 vaddr 0x00814af4 paddr 0x008166f4 align 2**12
         filesz 0x00001c00 memsz 0x00001c00 flags rw-
    LOAD off    0x000182f4 vaddr 0x008182f4 paddr 0x008182f4 align 2**12
         filesz 0x00000000 memsz 0x00038cb4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014144  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007fc  008142f8  008142f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c00  00814af4  008166f4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00038cb4  008182f4  008182f4  000182f4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000176f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  00017720  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001fb9  00000000  00000000  000184d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029b83  00000000  00000000  0001a491  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000086de  00000000  00000000  00044014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00017c12  00000000  00000000  0004c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002378  00000000  00000000  00064304  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002772  00000000  00000000  0006667c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cdc1  00000000  00000000  00068dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00075bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00075bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007a87a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  0007a87d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007a88c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007a88d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0007a88e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0007a897  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0007a8a0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0007a8a9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  0007a8b4  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a68  00000000  00000000  0007a8db  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007ec0e  00000000  00000000  00080343  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
008142f8 l    d  .rodata	00000000 .rodata
00814af4 l    d  .rwdata	00000000 .rwdata
008182f4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 background.c
00818388 l     O .bss	00038400 background_map
00000000 l    df *ABS*	00000000 bitmap.c
00800b64 l     F .text	00000088 fill_bmp_header
00800bec l     F .text	00000088 fill_info_header
00800c74 l     F .text	000000a0 verify_bmp_type
00000000 l    df *ABS*	00000000 display.c
008182f4 l     O .bss	00000004 pixel_buffer
008182f8 l     O .bss	00000004 char_buffer
008182fc l     O .bss	00000004 pixel_buffer_addr1
00818300 l     O .bss	00000004 pixel_buffer_addr2
00000000 l    df *ABS*	00000000 main.c
00814af4 l     O .rwdata	000000b0 file_list
00818308 l     O .bss	00000004 bmp
0081830c l     O .bss	00000004 ticks_per_sec
00818310 l     O .bss	00000004 num_ticks
00801344 l     F .text	000000cc update
00818304 l     O .bss	00000004 x.2445
00000000 l    df *ABS*	00000000 sdcard.c
00818316 l     O .bss	00000002 sdcard_connected
00818314 l     O .bss	00000002 FAT16
00000000 l    df *ABS*	00000000 lib2-divmod.c
00801668 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802164 l     F .text	00000058 __sprint_r
008147a2 l     O .rodata	00000010 blanks.3452
00814792 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008041e0 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805c08 l     F .text	00000058 std
00805d14 l     F .text	00000008 __fp_lock
00805d1c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00814fac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
008166c8 l     O .rwdata	00000004 charset
008147d8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00814920 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00809918 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080b350 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080b3b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080b4b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080b5d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080b6b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080b818 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ba48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008166e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080bea4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815560 l     O .rwdata	00001060 jtag_uart
008165c0 l     O .rwdata	0000002c character_lcd_0
008165ec l     O .rwdata	00000048 char_drawer
00816634 l     O .rwdata	00000054 dma_buffer
00816688 l     O .rwdata	0000002c sdcard_interface
0080c294 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080c4d4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080c6fc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080cd78 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008132f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008137ac l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008138fc l     F .text	000000f8 alt_file_locked
00813b80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00814074 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00814228 l     F .text	00000040 alt_sim_halt
00818358 g     O .bss	00000004 aux_status_register
008072b8 g     F .text	00000094 _mprec_log10
008073a4 g     F .text	00000088 __any_on
00808aec g     F .text	00000070 _isatty_r
008148f8 g     O .rodata	00000028 __mprec_tinytens
0080b878 g     F .text	0000006c alt_main
0080e33c g     F .text	000003d8 alt_up_pixel_buffer_dma_draw_vline
00801fcc g     F .text	000000a0 _puts_r
00850d18 g     O .bss	00000100 alt_irq
00808b5c g     F .text	00000078 _lseek_r
008166f4 g       *ABS*	00000000 __flash_rwdata_start
0080cef4 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080a438 g     F .text	00000088 __eqdf2
0080effc g     F .text	000001b0 Check_for_Master_Boot_Record
008006c4 g     F .text	00000300 load_bmp
00850fa8 g       *ABS*	00000000 __alt_heap_start
00812ec4 g     F .text	000001d4 alt_up_sd_card_fclose
00801f54 g     F .text	00000044 printf
008085a4 g     F .text	00000068 __sseek
00805c70 g     F .text	000000a4 __sinit
00801194 g     F .text	00000074 colourToInt
0080d53c g     F .text	00000114 alt_up_char_buffer_string
0080697c g     F .text	00000084 _setlocale_r
00805d70 g     F .text	0000009c __sfmoreglue
0080b904 g     F .text	00000020 __malloc_unlock
0081837c g     O .bss	00000004 current_sector_modified
00800eb0 g     F .text	000000a8 draw_line
0080d46c g     F .text	000000d0 alt_up_char_buffer_draw
00813194 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
0081834c g     O .bss	00000004 altera_avalon_timer_ts_freq
00806d34 g     F .text	000000e0 memmove
00805d60 g     F .text	00000010 _cleanup
0080742c g     F .text	000000bc _Balloc
00811a80 g     F .text	000000c8 alt_up_sd_card_is_Present
0080ed14 g     F .text	00000050 Save_Modified_Sector
0080d6ec g     F .text	000001ac alt_up_pixel_buffer_dma_draw
0080a548 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080ce78 g     F .text	0000007c get_DDRAM_addr
0080d6ac g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00800000 g     F .entry	0000001c __reset
00818374 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00800020 g       *ABS*	00000000 __flash_exceptions_start
00808a78 g     F .text	00000074 _fstat_r
00818324 g     O .bss	00000004 errno
00818338 g     O .bss	00000004 alt_argv
0081e6b4 g       *ABS*	00000000 _gp
00812040 g     F .text	000003a8 alt_up_sd_card_fopen
00811bbc g     F .text	000000d4 alt_up_sd_card_find_first
00818368 g     O .bss	00000004 command_argument_register
0080d898 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
008153e0 g     O .rwdata	00000180 alt_fd_list
00800dbc g     F .text	0000003c swap_buffers
008112a8 g     F .text	0000012c find_first_empty_record_in_root_directory
0081341c g     F .text	00000094 alt_find_dev
00806c94 g     F .text	000000a0 memcpy
00801000 g     F .text	000000c4 makeCol
0080d08c g     F .text	0000004c alt_up_character_lcd_write_fd
0080d650 g     F .text	0000005c alt_up_char_buffer_clear
00805d54 g     F .text	0000000c _cleanup_r
0080a6e0 g     F .text	000000f8 __floatsidf
00813884 g     F .text	00000078 alt_io_redirect
0080a658 g     F .text	00000088 __ltdf2
008142f8 g       *ABS*	00000000 __DTOR_END__
0080206c g     F .text	00000014 puts
00810eb8 g     F .text	000001a4 find_first_empty_cluster
00807208 g     F .text	000000b0 __ratio
008119bc g     F .text	000000c4 alt_up_sd_card_open_dev
0080d948 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0080c914 g     F .text	00000224 altera_avalon_jtag_uart_read
00801800 g     F .text	00000014 malloc
00801f98 g     F .text	00000034 _printf_r
008017a4 g     F .text	00000008 __udivsi3
0080b514 g     F .text	000000c4 isatty
00814808 g     O .rodata	000000c8 __mprec_tens
00801410 g     F .text	000000ac init_sdcard
0080dfe4 g     F .text	00000358 alt_up_pixel_buffer_dma_draw_hline
00806958 g     F .text	00000008 __locale_charset
008001f0 g     F .text	0000018c loadBackground
00813df0 g     F .text	00000090 alt_icache_flush
00818318 g     O .bss	00000004 __malloc_top_pad
008166c4 g     O .rwdata	00000004 __mb_cur_max
00806960 g     F .text	0000000c _localeconv_r
00807b90 g     F .text	0000003c __i2b
0080633c g     F .text	0000049c __sfvwrite_r
008009c4 g     F .text	00000090 close_bmp
00810194 g     F .text	000000c0 get_dir_divider_location
00801108 g     F .text	0000008c draw_pixel
008003b4 g     F .text	00000104 drawBackgroundSection
00802080 g     F .text	00000070 _sbrk_r
0080e7d8 g     F .text	000000d8 helper_plot_pixel
0080fe34 g     F .text	000000d0 filename_to_upper_case
008123e8 g     F .text	00000090 alt_up_sd_card_set_attributes
0080f1ac g     F .text	00000284 Read_File_Record_At_Offset
00808bd4 g     F .text	00000078 _read_r
008153ac g     O .rwdata	0000000c __lc_ctype
008166dc g     O .rwdata	00000004 alt_max_fd
0080aefc g     F .text	00000138 __unpack_d
00810a54 g     F .text	00000464 find_file_in_directory
00808954 g     F .text	00000110 _fclose_r
00805bd4 g     F .text	00000034 fflush
0081831c g     O .bss	00000004 __malloc_max_sbrked_mem
00811b48 g     F .text	00000074 alt_up_sd_card_is_FAT16
00809da8 g     F .text	00000074 __adddf3
008070e8 g     F .text	00000120 __b2d
0080d97c g     F .text	0000016c alt_up_pixel_buffer_dma_clear_screen
008092b8 g     F .text	00000660 __umoddi3
0080b724 g     F .text	000000f4 lseek
008166c0 g     O .rwdata	00000004 _global_impure_ptr
00810540 g     F .text	00000514 get_home_directory_cluster_for_file
00807f38 g     F .text	000005f4 _realloc_r
00850fa8 g       *ABS*	00000000 __bss_end
008136b4 g     F .text	000000f8 alt_iic_isr_register
0080dae8 g     F .text	000004fc alt_up_pixel_buffer_dma_draw_box
0080bc74 g     F .text	0000010c alt_tick
008015f4 g     F .text	00000074 checkConnectedAndFat
00808c4c g     F .text	0000066c __udivdi3
008148d0 g     O .rodata	00000028 __mprec_bigtens
00807e18 g     F .text	00000120 __s2b
0080a8b0 g     F .text	00000194 __floatunsidf
00807008 g     F .text	00000060 __mcmp
00818380 g     O .bss	00000004 current_sector_index
00805d3c g     F .text	00000018 __fp_lock_all
0081366c g     F .text	00000048 alt_ic_irq_enabled
0080bbdc g     F .text	00000098 alt_alarm_stop
0080ef18 g     F .text	000000e4 mark_cluster
00818384 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
008153b8 g     O .rwdata	00000028 alt_dev_null
008113d4 g     F .text	000001b8 convert_filename_to_name_extension
0080d374 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00813224 g     F .text	0000001c alt_dcache_flush_all
00806ed4 g     F .text	00000070 __hi0bits
00818354 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0080e714 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0080a7d8 g     F .text	000000d8 __fixdfsi
0081105c g     F .text	0000024c find_first_empty_record_in_a_subdirectory
008166f4 g       *ABS*	00000000 __ram_rwdata_end
008166d4 g     O .rwdata	00000008 alt_dev_list
0080bd80 g     F .text	00000124 write
00818378 g     O .bss	00000004 device_pointer
0080e8b0 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00814af4 g       *ABS*	00000000 __ram_rodata_end
0080b3dc g     F .text	000000d8 fstat
00800d14 g     F .text	000000a8 init_display
00807cf8 g     F .text	00000120 __pow5mult
00818328 g     O .bss	00000004 __nlocale_changed
008017ac g     F .text	00000008 __umodsi3
00850fa8 g       *ABS*	00000000 end
0080d3a8 g     F .text	00000084 alt_up_char_buffer_init
0080c414 g     F .text	000000c0 altera_avalon_jtag_uart_init
008142f4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080cde8 g     F .text	00000090 alt_avalon_timer_sc_init
0080ab68 g     F .text	00000080 __clzsi2
0080cb38 g     F .text	00000240 altera_avalon_jtag_uart_write
00800e24 g     F .text	00000038 clear_character_buffer
00805c60 g     F .text	00000004 __sfp_lock_acquire
00806bb0 g     F .text	000000e4 memchr
0080cf9c g     F .text	00000078 alt_up_character_lcd_write
008021bc g     F .text	00001ec4 ___vfprintf_internal_r
00806028 g     F .text	00000314 _free_r
00814078 g     F .text	000001b0 __call_exitprocs
0081832c g     O .bss	00000004 __mlocale_changed
008166b8 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00818340 g     O .bss	00000004 _alt_tick_rate
008010c4 g     F .text	00000044 draw_string
00801594 g     F .text	00000060 read_file
008077f0 g     F .text	0000014c __lshift
00818344 g     O .bss	00000004 _alt_nticks
0080b924 g     F .text	00000124 read
0080bf38 g     F .text	0000035c alt_sys_init
0080d200 g     F .text	000000b0 alt_up_character_lcd_shift_display
00813f40 g     F .text	00000134 __register_exitproc
0080793c g     F .text	00000254 __multiply
0080d2b0 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080c7ac g     F .text	00000074 altera_avalon_jtag_uart_close
008017b4 g     F .text	00000038 __mulsi3
00814af4 g       *ABS*	00000000 __ram_rwdata_start
008142f8 g       *ABS*	00000000 __ram_rodata_start
00850788 g     O .bss	00000028 __malloc_current_mallinfo
008074e8 g     F .text	0000017c __d2b
00818350 g     O .bss	00000004 initialized
0080c2cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00813d20 g     F .text	000000d0 alt_get_fd
008507b0 g     O .bss	00000014 search_data
0080b034 g     F .text	000000c8 __fpcmp_parts_d
00800df8 g     F .text	0000002c clear_display
008088e4 g     F .text	00000070 _close_r
00813ecc g     F .text	00000074 memcmp
0080c37c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00850fa8 g       *ABS*	00000000 __alt_stack_base
0080c3c4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00800f58 g     F .text	000000a8 draw_box
008040a4 g     F .text	0000013c __swsetup_r
00800e5c g     F .text	00000054 clear_pixel_buffer
0080a1e0 g     F .text	00000258 __divdf3
00805e0c g     F .text	000000f0 __sfp
008507c4 g     O .bss	00000054 boot_sector_data
0080734c g     F .text	00000058 __copybits
00814ba4 g     O .rwdata	00000408 __malloc_av_
00805c6c g     F .text	00000004 __sinit_lock_release
00809e1c g     F .text	000003c4 __muldf3
00808688 g     F .text	00000060 __sread
00801524 g     F .text	00000070 open_file
008014f0 g     F .text	00000034 is_FAT16
00813c00 g     F .text	00000120 alt_find_file
00813240 g     F .text	000000b4 alt_dev_llist_insert
0080b8e4 g     F .text	00000020 __malloc_lock
0080bb20 g     F .text	000000bc sbrk
008059d8 g     F .text	000001fc _fflush_r
0080881c g     F .text	000000c8 _calloc_r
00800a54 g     F .text	00000110 dump_header_info
008182f4 g       *ABS*	00000000 __bss_start
00806e14 g     F .text	00000098 memset
00801254 g     F .text	000000f0 main
0081833c g     O .bss	00000004 alt_envp
00818320 g     O .bss	00000004 __malloc_max_total_mem
0080d8f0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080d42c g     F .text	00000040 alt_up_char_buffer_open_dev
0080c324 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00812478 g     F .text	0000008c alt_up_sd_card_get_attributes
0080ec4c g     F .text	000000c8 Write_Sector_Data
008128a0 g     F .text	00000624 alt_up_sd_card_write
0080d150 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080859c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00808a64 g     F .text	00000014 fclose
00850e18 g     O .bss	00000190 _atexit0
00804424 g     F .text	000015b4 _dtoa_r
00801814 g     F .text	00000740 _malloc_r
008166e0 g     O .rwdata	00000004 alt_errno
008068a0 g     F .text	000000b8 _fwalk
008016e4 g     F .text	00000060 __divsi3
0081492c g     O .rodata	00000014 __thenan_df
00801208 g     F .text	0000004c intToColour
0080cf5c g     F .text	00000040 alt_up_character_lcd_open_dev
00805efc g     F .text	0000012c _malloc_trim_r
008142f8 g       *ABS*	00000000 __CTOR_END__
008014bc g     F .text	00000034 card_connected
0081835c g     O .bss	00000004 status_register
0080cf28 g     F .text	00000034 alt_up_character_lcd_init
008086e8 g     F .text	000000bc strcmp
00818364 g     O .bss	00000004 command_register
008142f8 g       *ABS*	00000000 __flash_rodata_start
008142f8 g       *ABS*	00000000 __DTOR_LIST__
0080a4c0 g     F .text	00000088 __nedf2
0080bf04 g     F .text	00000034 alt_irq_init
0080baa8 g     F .text	00000078 alt_release_fd
0080ee60 g     F .text	000000b8 get_cluster_flag
0080d340 g     F .text	00000034 alt_up_character_lcd_cursor_off
00814940 g     O .rodata	00000100 __clz_tab
0080f430 g     F .text	000002b8 Write_File_Record_At_Offset
00818330 g     O .bss	00000004 _PathLocale
00813e80 g     F .text	00000014 atexit
008087a4 g     F .text	00000078 _write_r
00806a00 g     F .text	0000001c setlocale
0080037c g     F .text	00000038 drawBackground
0080f6e8 g     F .text	00000648 Check_for_DOS_FAT
0081158c g     F .text	000002dc create_file
008166bc g     O .rwdata	00000004 _impure_ptr
00818360 g     O .bss	00000004 CSD_register_w0
00818334 g     O .bss	00000004 alt_argc
00818348 g     O .bss	00000004 altera_avalon_timer_ts_base
008133b8 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00807068 g     F .text	00000080 __ulp
0080852c g     F .text	00000040 __isinfd
00805d24 g     F .text	00000018 __fp_unlock_all
008166cc g     O .rwdata	00000008 alt_fs_list
0080ff04 g     F .text	00000290 check_file_name_for_FAT16_compliance
0081836c g     O .bss	00000004 buffer_memory
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080696c g     F .text	00000010 localeconv
008134e0 g     F .text	00000050 alt_ic_isr_register
00818370 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
008166f4 g       *ABS*	00000000 _edata
00850fa8 g       *ABS*	00000000 _end
00850818 g     O .bss	00000500 active_files
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00811868 g     F .text	00000154 copy_file_record_name_to_string
0080c820 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080fd30 g     F .text	00000104 Look_for_FAT16
008135cc g     F .text	000000a0 alt_ic_irq_disable
0080860c g     F .text	0000007c __swrite
008166b4 g     O .rwdata	00000004 __malloc_trim_threshold
00813be0 g     F .text	00000020 altera_nios2_qsys_irq_init
00813e94 g     F .text	00000038 exit
00811c90 g     F .text	000003b0 alt_up_sd_card_find_next
008067d8 g     F .text	000000c8 _fwalk_reent
00807664 g     F .text	0000018c __mdiff
00801744 g     F .text	00000060 __modsi3
0080ed64 g     F .text	000000fc Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00805c64 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080d014 g     F .text	00000078 alt_up_character_lcd_string
00814268 g     F .text	00000020 _exit
0080856c g     F .text	00000030 __isnand
0080b0fc g     F .text	00000154 alt_alarm_start
0080aa44 g     F .text	00000124 __muldi3
00813098 g     F .text	000000fc Read_Sector_Data_CRC
00812504 g     F .text	0000039c alt_up_sd_card_read
00806a1c g     F .text	00000194 __smakebuf_r
008020f0 g     F .text	00000074 strlen
008139f4 g     F .text	0000018c open
0080a5d0 g     F .text	00000088 __gedf2
008134b0 g     F .text	00000030 alt_icache_flush_all
0080d0d8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
008166f0 g     O .rwdata	00000004 alt_priority_mask
008004b8 g     F .text	0000020c draw_bmp
00813530 g     F .text	0000009c alt_ic_irq_enable
00804080 g     F .text	00000024 __vfprintf_internal
00809d28 g     F .text	00000080 __subdf3
00806f44 g     F .text	000000c4 __lo0bits
008166e8 g     O .rwdata	00000008 alt_alarm_list
00813354 g     F .text	00000064 _do_ctors
0080b250 g     F .text	00000100 close
0080b638 g     F .text	00000080 alt_load
0080abe8 g     F .text	00000314 __pack_d
00810254 g     F .text	000002ec match_file_record_to_name_ext
008017ec g     F .text	00000014 free
00805c68 g     F .text	00000004 __sinit_lock_acquire
00807bcc g     F .text	0000012c __multadd
00806eac g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02174 	movhi	r3,133
  800134:	18c34604 	addi	r3,r3,3352
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02174 	movhi	r3,133
  80014c:	18c34604 	addi	r3,r3,3352
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6b9ad14 	ori	gp,gp,59060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10a0bd14 	ori	r2,r2,33524

    movhi r3, %hi(__bss_end)
  8001cc:	00c02174 	movhi	r3,133
    ori r3, r3, %lo(__bss_end)
  8001d0:	18c3ea14 	ori	r3,r3,4008

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080b6380 	call	80b638 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080b8780 	call	80b878 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <loadBackground>:
#define SCREEN_HEIGHT 240

static colour background_map[SCREEN_WIDTH][SCREEN_HEIGHT];

short int loadBackground(char *filename)
{
  8001f0:	defff404 	addi	sp,sp,-48
  8001f4:	dfc00b15 	stw	ra,44(sp)
  8001f8:	df000a15 	stw	fp,40(sp)
  8001fc:	dc800915 	stw	r18,36(sp)
  800200:	dc400815 	stw	r17,32(sp)
  800204:	dc000715 	stw	r16,28(sp)
  800208:	df000704 	addi	fp,sp,28
  80020c:	e13ffe15 	stw	r4,-8(fp)
	BitmapHandle *bmp;

	short int ret = load_bmp(filename, &bmp);
  800210:	e17ffd04 	addi	r5,fp,-12
  800214:	e13ffe17 	ldw	r4,-8(fp)
  800218:	08006c40 	call	8006c4 <load_bmp>
  80021c:	e0bffc0d 	sth	r2,-16(fp)

	if (ret < 0) return ret;
  800220:	e0bffc0f 	ldh	r2,-16(fp)
  800224:	1004403a 	cmpge	r2,r2,zero
  800228:	1000031e 	bne	r2,zero,800238 <loadBackground+0x48>
  80022c:	e0bffc0f 	ldh	r2,-16(fp)
  800230:	e0bfff15 	stw	r2,-4(fp)
  800234:	00004806 	br	800358 <loadBackground+0x168>

	if (bmp->bmp_info_header->width > SCREEN_WIDTH ||
  800238:	e0bffd17 	ldw	r2,-12(fp)
  80023c:	10800117 	ldw	r2,4(r2)
  800240:	10800117 	ldw	r2,4(r2)
  800244:	10805048 	cmpgei	r2,r2,321
  800248:	1000051e 	bne	r2,zero,800260 <loadBackground+0x70>
  80024c:	e0bffd17 	ldw	r2,-12(fp)
  800250:	10800117 	ldw	r2,4(r2)
  800254:	10800217 	ldw	r2,8(r2)
  800258:	10803c50 	cmplti	r2,r2,241
  80025c:	1000031e 	bne	r2,zero,80026c <loadBackground+0x7c>
			bmp->bmp_info_header->height > SCREEN_HEIGHT) return -4;
  800260:	00bfff04 	movi	r2,-4
  800264:	e0bfff15 	stw	r2,-4(fp)
  800268:	00003b06 	br	800358 <loadBackground+0x168>

	int col, row;

	for (row = 0; row < bmp->bmp_info_header->height; row++)
  80026c:	e03ffa15 	stw	zero,-24(fp)
  800270:	00003106 	br	800338 <loadBackground+0x148>
	{
		for (col = 0; col < bmp->bmp_info_header->width; col++)
  800274:	e03ffb15 	stw	zero,-20(fp)
  800278:	00002706 	br	800318 <loadBackground+0x128>
		{
			int ind = row * bmp->bmp_info_header->width + col;
  80027c:	e0bffd17 	ldw	r2,-12(fp)
  800280:	10800117 	ldw	r2,4(r2)
  800284:	11000117 	ldw	r4,4(r2)
  800288:	e17ffa17 	ldw	r5,-24(fp)
  80028c:	08017b40 	call	8017b4 <__mulsi3>
  800290:	1007883a 	mov	r3,r2
  800294:	e0bffb17 	ldw	r2,-20(fp)
  800298:	1885883a 	add	r2,r3,r2
  80029c:	e0bff915 	stw	r2,-28(fp)
			background_map[col][SCREEN_HEIGHT-row-1] = bmp->pixel_map[ind];
  8002a0:	e1bffb17 	ldw	r6,-20(fp)
  8002a4:	00c03bc4 	movi	r3,239
  8002a8:	e0bffa17 	ldw	r2,-24(fp)
  8002ac:	1889c83a 	sub	r4,r3,r2
  8002b0:	e0bffd17 	ldw	r2,-12(fp)
  8002b4:	11400217 	ldw	r5,8(r2)
  8002b8:	e0fff917 	ldw	r3,-28(fp)
  8002bc:	1805883a 	mov	r2,r3
  8002c0:	1085883a 	add	r2,r2,r2
  8002c4:	10c5883a 	add	r2,r2,r3
  8002c8:	28a3883a 	add	r17,r5,r2
  8002cc:	048020b4 	movhi	r18,130
  8002d0:	94a0e204 	addi	r18,r18,-31864
  8002d4:	2005883a 	mov	r2,r4
  8002d8:	10a1883a 	add	r16,r2,r2
  8002dc:	8121883a 	add	r16,r16,r4
  8002e0:	3009883a 	mov	r4,r6
  8002e4:	0140b404 	movi	r5,720
  8002e8:	08017b40 	call	8017b4 <__mulsi3>
  8002ec:	8085883a 	add	r2,r16,r2
  8002f0:	1487883a 	add	r3,r2,r18
  8002f4:	88800003 	ldbu	r2,0(r17)
  8002f8:	18800005 	stb	r2,0(r3)
  8002fc:	88800043 	ldbu	r2,1(r17)
  800300:	18800045 	stb	r2,1(r3)
  800304:	88800083 	ldbu	r2,2(r17)
  800308:	18800085 	stb	r2,2(r3)

	int col, row;

	for (row = 0; row < bmp->bmp_info_header->height; row++)
	{
		for (col = 0; col < bmp->bmp_info_header->width; col++)
  80030c:	e0bffb17 	ldw	r2,-20(fp)
  800310:	10800044 	addi	r2,r2,1
  800314:	e0bffb15 	stw	r2,-20(fp)
  800318:	e0bffd17 	ldw	r2,-12(fp)
  80031c:	10800117 	ldw	r2,4(r2)
  800320:	10c00117 	ldw	r3,4(r2)
  800324:	e0bffb17 	ldw	r2,-20(fp)
  800328:	10ffd416 	blt	r2,r3,80027c <loadBackground+0x8c>
	if (bmp->bmp_info_header->width > SCREEN_WIDTH ||
			bmp->bmp_info_header->height > SCREEN_HEIGHT) return -4;

	int col, row;

	for (row = 0; row < bmp->bmp_info_header->height; row++)
  80032c:	e0bffa17 	ldw	r2,-24(fp)
  800330:	10800044 	addi	r2,r2,1
  800334:	e0bffa15 	stw	r2,-24(fp)
  800338:	e0bffd17 	ldw	r2,-12(fp)
  80033c:	10800117 	ldw	r2,4(r2)
  800340:	10c00217 	ldw	r3,8(r2)
  800344:	e0bffa17 	ldw	r2,-24(fp)
  800348:	10ffca16 	blt	r2,r3,800274 <loadBackground+0x84>
			int ind = row * bmp->bmp_info_header->width + col;
			background_map[col][SCREEN_HEIGHT-row-1] = bmp->pixel_map[ind];
		}
	}

	close_bmp(bmp);
  80034c:	e13ffd17 	ldw	r4,-12(fp)
  800350:	08009c40 	call	8009c4 <close_bmp>

	return 0;
  800354:	e03fff15 	stw	zero,-4(fp)
  800358:	e0bfff17 	ldw	r2,-4(fp)
}
  80035c:	e037883a 	mov	sp,fp
  800360:	dfc00417 	ldw	ra,16(sp)
  800364:	df000317 	ldw	fp,12(sp)
  800368:	dc800217 	ldw	r18,8(sp)
  80036c:	dc400117 	ldw	r17,4(sp)
  800370:	dc000017 	ldw	r16,0(sp)
  800374:	dec00504 	addi	sp,sp,20
  800378:	f800283a 	ret

0080037c <drawBackground>:

void drawBackground()
{
  80037c:	defffe04 	addi	sp,sp,-8
  800380:	dfc00115 	stw	ra,4(sp)
  800384:	df000015 	stw	fp,0(sp)
  800388:	d839883a 	mov	fp,sp
	drawBackgroundSection(0, 0, SCREEN_WIDTH-1, SCREEN_HEIGHT-1);
  80038c:	0009883a 	mov	r4,zero
  800390:	000b883a 	mov	r5,zero
  800394:	01804fc4 	movi	r6,319
  800398:	01c03bc4 	movi	r7,239
  80039c:	08003b40 	call	8003b4 <drawBackgroundSection>
}
  8003a0:	e037883a 	mov	sp,fp
  8003a4:	dfc00117 	ldw	ra,4(sp)
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00204 	addi	sp,sp,8
  8003b0:	f800283a 	ret

008003b4 <drawBackgroundSection>:

void drawBackgroundSection(int x0, int y0, int x1, int y1)
{
  8003b4:	defff504 	addi	sp,sp,-44
  8003b8:	dfc00a15 	stw	ra,40(sp)
  8003bc:	df000915 	stw	fp,36(sp)
  8003c0:	dc400815 	stw	r17,32(sp)
  8003c4:	dc000715 	stw	r16,28(sp)
  8003c8:	df000704 	addi	fp,sp,28
  8003cc:	e13ffb15 	stw	r4,-20(fp)
  8003d0:	e17ffc15 	stw	r5,-16(fp)
  8003d4:	e1bffd15 	stw	r6,-12(fp)
  8003d8:	e1fffe15 	stw	r7,-8(fp)
	int x, y;

	for (y = y0; y <= y1; y++)
  8003dc:	e0bffc17 	ldw	r2,-16(fp)
  8003e0:	e0bff915 	stw	r2,-28(fp)
  8003e4:	00002a06 	br	800490 <drawBackgroundSection+0xdc>
		for (x = x0; x <= x1; x++)
  8003e8:	e0bffb17 	ldw	r2,-20(fp)
  8003ec:	e0bffa15 	stw	r2,-24(fp)
  8003f0:	00002106 	br	800478 <drawBackgroundSection+0xc4>
			draw_pixel(x, y, background_map[x][y]);
  8003f4:	e13ffa17 	ldw	r4,-24(fp)
  8003f8:	e0fff917 	ldw	r3,-28(fp)
  8003fc:	044020b4 	movhi	r17,130
  800400:	8c60e204 	addi	r17,r17,-31864
  800404:	1805883a 	mov	r2,r3
  800408:	10a1883a 	add	r16,r2,r2
  80040c:	80e1883a 	add	r16,r16,r3
  800410:	0140b404 	movi	r5,720
  800414:	08017b40 	call	8017b4 <__mulsi3>
  800418:	8085883a 	add	r2,r16,r2
  80041c:	1447883a 	add	r3,r2,r17
  800420:	19000003 	ldbu	r4,0(r3)
  800424:	18800043 	ldbu	r2,1(r3)
  800428:	1004923a 	slli	r2,r2,8
  80042c:	1108b03a 	or	r4,r2,r4
  800430:	18800083 	ldbu	r2,2(r3)
  800434:	1004943a 	slli	r2,r2,16
  800438:	1106b03a 	or	r3,r2,r4
  80043c:	e03fff15 	stw	zero,-4(fp)
  800440:	00804034 	movhi	r2,256
  800444:	10bfffc4 	addi	r2,r2,-1
  800448:	1886703a 	and	r3,r3,r2
  80044c:	e13fff17 	ldw	r4,-4(fp)
  800450:	20bfc02c 	andhi	r2,r4,65280
  800454:	10c4b03a 	or	r2,r2,r3
  800458:	e0bfff15 	stw	r2,-4(fp)
  80045c:	e13ffa17 	ldw	r4,-24(fp)
  800460:	e17ff917 	ldw	r5,-28(fp)
  800464:	e1bfff17 	ldw	r6,-4(fp)
  800468:	08011080 	call	801108 <draw_pixel>
void drawBackgroundSection(int x0, int y0, int x1, int y1)
{
	int x, y;

	for (y = y0; y <= y1; y++)
		for (x = x0; x <= x1; x++)
  80046c:	e0bffa17 	ldw	r2,-24(fp)
  800470:	10800044 	addi	r2,r2,1
  800474:	e0bffa15 	stw	r2,-24(fp)
  800478:	e0fffa17 	ldw	r3,-24(fp)
  80047c:	e0bffd17 	ldw	r2,-12(fp)
  800480:	10ffdc0e 	bge	r2,r3,8003f4 <drawBackgroundSection+0x40>

void drawBackgroundSection(int x0, int y0, int x1, int y1)
{
	int x, y;

	for (y = y0; y <= y1; y++)
  800484:	e0bff917 	ldw	r2,-28(fp)
  800488:	10800044 	addi	r2,r2,1
  80048c:	e0bff915 	stw	r2,-28(fp)
  800490:	e0fff917 	ldw	r3,-28(fp)
  800494:	e0bffe17 	ldw	r2,-8(fp)
  800498:	10ffd30e 	bge	r2,r3,8003e8 <drawBackgroundSection+0x34>
		for (x = x0; x <= x1; x++)
			draw_pixel(x, y, background_map[x][y]);
}
  80049c:	e037883a 	mov	sp,fp
  8004a0:	dfc00317 	ldw	ra,12(sp)
  8004a4:	df000217 	ldw	fp,8(sp)
  8004a8:	dc400117 	ldw	r17,4(sp)
  8004ac:	dc000017 	ldw	r16,0(sp)
  8004b0:	dec00404 	addi	sp,sp,16
  8004b4:	f800283a 	ret

008004b8 <draw_bmp>:
static BmpFileHeader* fill_bmp_header(file_handle file);
static BmpInfoHeader* fill_info_header(file_handle file);
static short int verify_bmp_type(BmpFileHeader* bmp_file_header);

void draw_bmp(BitmapHandle* handle, int x, int y, bool alpha_enable, colour alpha_col)
{
  8004b8:	defff204 	addi	sp,sp,-56
  8004bc:	dfc00d15 	stw	ra,52(sp)
  8004c0:	df000c15 	stw	fp,48(sp)
  8004c4:	df000c04 	addi	fp,sp,48
  8004c8:	e13ffb15 	stw	r4,-20(fp)
  8004cc:	e17ffc15 	stw	r5,-16(fp)
  8004d0:	e1bffd15 	stw	r6,-12(fp)
  8004d4:	e1fffe15 	stw	r7,-8(fp)
	if (handle->pixel_map == NULL || handle->bmp_info_header == NULL) return;
  8004d8:	e0bffb17 	ldw	r2,-20(fp)
  8004dc:	10800217 	ldw	r2,8(r2)
  8004e0:	1005003a 	cmpeq	r2,r2,zero
  8004e4:	1000721e 	bne	r2,zero,8006b0 <draw_bmp+0x1f8>
  8004e8:	e0bffb17 	ldw	r2,-20(fp)
  8004ec:	10800117 	ldw	r2,4(r2)
  8004f0:	1004c03a 	cmpne	r2,r2,zero
  8004f4:	1000011e 	bne	r2,zero,8004fc <draw_bmp+0x44>
  8004f8:	00006d06 	br	8006b0 <draw_bmp+0x1f8>

	int col, row;
	BmpInfoHeader *bmp_info_header = handle->bmp_info_header;
  8004fc:	e0bffb17 	ldw	r2,-20(fp)
  800500:	10800117 	ldw	r2,4(r2)
  800504:	e0bff815 	stw	r2,-32(fp)
	colour *pixel_map = handle->pixel_map;
  800508:	e0bffb17 	ldw	r2,-20(fp)
  80050c:	10800217 	ldw	r2,8(r2)
  800510:	e0bff715 	stw	r2,-36(fp)

	for (row = 0; row < bmp_info_header->height; row++)
  800514:	e03ff915 	stw	zero,-28(fp)
  800518:	00006106 	br	8006a0 <draw_bmp+0x1e8>
	{
		for (col = 0; col < bmp_info_header->width; col++)
  80051c:	e03ffa15 	stw	zero,-24(fp)
  800520:	00005806 	br	800684 <draw_bmp+0x1cc>
		{
			int ind = row * bmp_info_header->width + col;
  800524:	e0bff817 	ldw	r2,-32(fp)
  800528:	11000117 	ldw	r4,4(r2)
  80052c:	e17ff917 	ldw	r5,-28(fp)
  800530:	08017b40 	call	8017b4 <__mulsi3>
  800534:	1007883a 	mov	r3,r2
  800538:	e0bffa17 	ldw	r2,-24(fp)
  80053c:	1885883a 	add	r2,r3,r2
  800540:	e0bff615 	stw	r2,-40(fp)

			/* The BMP file format stores the image upside down and backwards--
			 * must correct for that here by drawing from bottom-left to
			 * top-right. */
			int pixel_x = x + col;//(bmp_info_header->width - 1 - col);
  800544:	e0fffc17 	ldw	r3,-16(fp)
  800548:	e0bffa17 	ldw	r2,-24(fp)
  80054c:	1885883a 	add	r2,r3,r2
  800550:	e0bff515 	stw	r2,-44(fp)
			int pixel_y = y + (bmp_info_header->height - 1 - row);
  800554:	e0bff817 	ldw	r2,-32(fp)
  800558:	10c00217 	ldw	r3,8(r2)
  80055c:	e0bff917 	ldw	r2,-28(fp)
  800560:	1887c83a 	sub	r3,r3,r2
  800564:	e0bffd17 	ldw	r2,-12(fp)
  800568:	1885883a 	add	r2,r3,r2
  80056c:	10bfffc4 	addi	r2,r2,-1
  800570:	e0bff415 	stw	r2,-48(fp)

			if (alpha_enable == false || !(pixel_map[ind].r == alpha_col.r &&
  800574:	e0bffe17 	ldw	r2,-8(fp)
  800578:	1005003a 	cmpeq	r2,r2,zero
  80057c:	1000241e 	bne	r2,zero,800610 <draw_bmp+0x158>
  800580:	e0fff617 	ldw	r3,-40(fp)
  800584:	1805883a 	mov	r2,r3
  800588:	1085883a 	add	r2,r2,r2
  80058c:	10c5883a 	add	r2,r2,r3
  800590:	1007883a 	mov	r3,r2
  800594:	e0bff717 	ldw	r2,-36(fp)
  800598:	1885883a 	add	r2,r3,r2
  80059c:	10800003 	ldbu	r2,0(r2)
  8005a0:	e0c00203 	ldbu	r3,8(fp)
  8005a4:	11003fcc 	andi	r4,r2,255
  8005a8:	18803fcc 	andi	r2,r3,255
  8005ac:	2080181e 	bne	r4,r2,800610 <draw_bmp+0x158>
  8005b0:	e0fff617 	ldw	r3,-40(fp)
  8005b4:	1805883a 	mov	r2,r3
  8005b8:	1085883a 	add	r2,r2,r2
  8005bc:	10c5883a 	add	r2,r2,r3
  8005c0:	1007883a 	mov	r3,r2
  8005c4:	e0bff717 	ldw	r2,-36(fp)
  8005c8:	1885883a 	add	r2,r3,r2
  8005cc:	10800043 	ldbu	r2,1(r2)
  8005d0:	e0c00243 	ldbu	r3,9(fp)
  8005d4:	11003fcc 	andi	r4,r2,255
  8005d8:	18803fcc 	andi	r2,r3,255
  8005dc:	20800c1e 	bne	r4,r2,800610 <draw_bmp+0x158>
  8005e0:	e0fff617 	ldw	r3,-40(fp)
  8005e4:	1805883a 	mov	r2,r3
  8005e8:	1085883a 	add	r2,r2,r2
  8005ec:	10c5883a 	add	r2,r2,r3
  8005f0:	1007883a 	mov	r3,r2
  8005f4:	e0bff717 	ldw	r2,-36(fp)
  8005f8:	1885883a 	add	r2,r3,r2
  8005fc:	10800083 	ldbu	r2,2(r2)
  800600:	e0c00283 	ldbu	r3,10(fp)
  800604:	11003fcc 	andi	r4,r2,255
  800608:	18803fcc 	andi	r2,r3,255
  80060c:	20801a26 	beq	r4,r2,800678 <draw_bmp+0x1c0>
					pixel_map[ind].g == alpha_col.g && pixel_map[ind].b == alpha_col.b))
			{
				draw_pixel(pixel_x, pixel_y, pixel_map[ind]);
  800610:	e0fff617 	ldw	r3,-40(fp)
  800614:	1805883a 	mov	r2,r3
  800618:	1085883a 	add	r2,r2,r2
  80061c:	10c5883a 	add	r2,r2,r3
  800620:	1007883a 	mov	r3,r2
  800624:	e0bff717 	ldw	r2,-36(fp)
  800628:	1887883a 	add	r3,r3,r2
  80062c:	19000003 	ldbu	r4,0(r3)
  800630:	18800043 	ldbu	r2,1(r3)
  800634:	1004923a 	slli	r2,r2,8
  800638:	1108b03a 	or	r4,r2,r4
  80063c:	18800083 	ldbu	r2,2(r3)
  800640:	1004943a 	slli	r2,r2,16
  800644:	1106b03a 	or	r3,r2,r4
  800648:	e03fff15 	stw	zero,-4(fp)
  80064c:	00804034 	movhi	r2,256
  800650:	10bfffc4 	addi	r2,r2,-1
  800654:	1886703a 	and	r3,r3,r2
  800658:	e13fff17 	ldw	r4,-4(fp)
  80065c:	20bfc02c 	andhi	r2,r4,65280
  800660:	10c4b03a 	or	r2,r2,r3
  800664:	e0bfff15 	stw	r2,-4(fp)
  800668:	e13ff517 	ldw	r4,-44(fp)
  80066c:	e17ff417 	ldw	r5,-48(fp)
  800670:	e1bfff17 	ldw	r6,-4(fp)
  800674:	08011080 	call	801108 <draw_pixel>
	BmpInfoHeader *bmp_info_header = handle->bmp_info_header;
	colour *pixel_map = handle->pixel_map;

	for (row = 0; row < bmp_info_header->height; row++)
	{
		for (col = 0; col < bmp_info_header->width; col++)
  800678:	e0bffa17 	ldw	r2,-24(fp)
  80067c:	10800044 	addi	r2,r2,1
  800680:	e0bffa15 	stw	r2,-24(fp)
  800684:	e0bff817 	ldw	r2,-32(fp)
  800688:	10c00117 	ldw	r3,4(r2)
  80068c:	e0bffa17 	ldw	r2,-24(fp)
  800690:	10ffa416 	blt	r2,r3,800524 <draw_bmp+0x6c>

	int col, row;
	BmpInfoHeader *bmp_info_header = handle->bmp_info_header;
	colour *pixel_map = handle->pixel_map;

	for (row = 0; row < bmp_info_header->height; row++)
  800694:	e0bff917 	ldw	r2,-28(fp)
  800698:	10800044 	addi	r2,r2,1
  80069c:	e0bff915 	stw	r2,-28(fp)
  8006a0:	e0bff817 	ldw	r2,-32(fp)
  8006a4:	10c00217 	ldw	r3,8(r2)
  8006a8:	e0bff917 	ldw	r2,-28(fp)
  8006ac:	10ff9b16 	blt	r2,r3,80051c <draw_bmp+0x64>
			{
				draw_pixel(pixel_x, pixel_y, pixel_map[ind]);
			}
		}
	}
}
  8006b0:	e037883a 	mov	sp,fp
  8006b4:	dfc00117 	ldw	ra,4(sp)
  8006b8:	df000017 	ldw	fp,0(sp)
  8006bc:	dec00204 	addi	sp,sp,8
  8006c0:	f800283a 	ret

008006c4 <load_bmp>:

short int load_bmp(char *filename, BitmapHandle** bmp_handle)
{
  8006c4:	deffef04 	addi	sp,sp,-68
  8006c8:	dfc01015 	stw	ra,64(sp)
  8006cc:	df000f15 	stw	fp,60(sp)
  8006d0:	df000f04 	addi	fp,sp,60
  8006d4:	e13ffc15 	stw	r4,-16(fp)
  8006d8:	e17ffd15 	stw	r5,-12(fp)
	BitmapHandle* handle = (BitmapHandle *) malloc(sizeof(BitmapHandle));
  8006dc:	01000304 	movi	r4,12
  8006e0:	08018000 	call	801800 <malloc>
  8006e4:	e0bffb15 	stw	r2,-20(fp)
	BmpInfoHeader *bmp_info_header = NULL;
  8006e8:	e03ffa15 	stw	zero,-24(fp)
	BmpFileHeader *bmp_file_header = NULL;
  8006ec:	e03ff915 	stw	zero,-28(fp)
	colour *pixel_map = NULL;
  8006f0:	e03ff815 	stw	zero,-32(fp)
	file_handle file = 	open_file(filename, false);
  8006f4:	e13ffc17 	ldw	r4,-16(fp)
  8006f8:	000b883a 	mov	r5,zero
  8006fc:	08015240 	call	801524 <open_file>
  800700:	e0bff70d 	sth	r2,-36(fp)

	if (file < 0)
  800704:	e0bff70f 	ldh	r2,-36(fp)
  800708:	1004403a 	cmpge	r2,r2,zero
  80070c:	1000031e 	bne	r2,zero,80071c <load_bmp+0x58>
	{
		return file;
  800710:	e0bff70f 	ldh	r2,-36(fp)
  800714:	e0bffe15 	stw	r2,-8(fp)
  800718:	0000a406 	br	8009ac <load_bmp+0x2e8>
	}

	bmp_file_header = fill_bmp_header(file);
  80071c:	e13ff70f 	ldh	r4,-36(fp)
  800720:	0800b640 	call	800b64 <fill_bmp_header>
  800724:	e0bff915 	stw	r2,-28(fp)
	bmp_info_header = fill_info_header(file);
  800728:	e13ff70f 	ldh	r4,-36(fp)
  80072c:	0800bec0 	call	800bec <fill_info_header>
  800730:	e0bffa15 	stw	r2,-24(fp)

	if (bmp_file_header == NULL || bmp_info_header == NULL)
  800734:	e0bff917 	ldw	r2,-28(fp)
  800738:	1005003a 	cmpeq	r2,r2,zero
  80073c:	1000031e 	bne	r2,zero,80074c <load_bmp+0x88>
  800740:	e0bffa17 	ldw	r2,-24(fp)
  800744:	1004c03a 	cmpne	r2,r2,zero
  800748:	1000061e 	bne	r2,zero,800764 <load_bmp+0xa0>
	{
		printf("Error loading bmp headers.\n");
  80074c:	01002074 	movhi	r4,129
  800750:	2110be04 	addi	r4,r4,17144
  800754:	080206c0 	call	80206c <puts>
		return -1;
  800758:	00ffffc4 	movi	r3,-1
  80075c:	e0fffe15 	stw	r3,-8(fp)
  800760:	00009206 	br	8009ac <load_bmp+0x2e8>
	}

	if (!verify_bmp_type(bmp_file_header))
  800764:	e13ff917 	ldw	r4,-28(fp)
  800768:	0800c740 	call	800c74 <verify_bmp_type>
  80076c:	10bfffcc 	andi	r2,r2,65535
  800770:	10a0001c 	xori	r2,r2,32768
  800774:	10a00004 	addi	r2,r2,-32768
  800778:	1004c03a 	cmpne	r2,r2,zero
  80077c:	1000061e 	bne	r2,zero,800798 <load_bmp+0xd4>
	{
		printf("Not a proper 24-bit bitmap.\n");
  800780:	01002074 	movhi	r4,129
  800784:	2110c504 	addi	r4,r4,17172
  800788:	080206c0 	call	80206c <puts>
		return -2;
  80078c:	00bfff84 	movi	r2,-2
  800790:	e0bffe15 	stw	r2,-8(fp)
  800794:	00008506 	br	8009ac <load_bmp+0x2e8>
	}

	dump_header_info(bmp_file_header, bmp_info_header);
  800798:	e13ff917 	ldw	r4,-28(fp)
  80079c:	e17ffa17 	ldw	r5,-24(fp)
  8007a0:	0800a540 	call	800a54 <dump_header_info>

	/* Read pixel data. */
	int bmp_alloc_size = bmp_info_header->width * bmp_info_header->height * 3;
  8007a4:	e0bffa17 	ldw	r2,-24(fp)
  8007a8:	11000117 	ldw	r4,4(r2)
  8007ac:	e0bffa17 	ldw	r2,-24(fp)
  8007b0:	11400217 	ldw	r5,8(r2)
  8007b4:	08017b40 	call	8017b4 <__mulsi3>
  8007b8:	1007883a 	mov	r3,r2
  8007bc:	1805883a 	mov	r2,r3
  8007c0:	1085883a 	add	r2,r2,r2
  8007c4:	10c5883a 	add	r2,r2,r3
  8007c8:	e0bff615 	stw	r2,-40(fp)
	pixel_map = (colour *) malloc(bmp_alloc_size);
  8007cc:	e13ff617 	ldw	r4,-40(fp)
  8007d0:	08018000 	call	801800 <malloc>
  8007d4:	e0bff815 	stw	r2,-32(fp)

	colour *it;
	int i, j;

	/* Take into account padding */
	int byte_width = bmp_info_header->width*3;
  8007d8:	e0bffa17 	ldw	r2,-24(fp)
  8007dc:	10c00117 	ldw	r3,4(r2)
  8007e0:	1805883a 	mov	r2,r3
  8007e4:	1085883a 	add	r2,r2,r2
  8007e8:	10c5883a 	add	r2,r2,r3
  8007ec:	e0bff215 	stw	r2,-56(fp)
	int padding = 0;
  8007f0:	e03ff115 	stw	zero,-60(fp)

	if (byte_width % 4)
  8007f4:	e0bff217 	ldw	r2,-56(fp)
  8007f8:	108000cc 	andi	r2,r2,3
  8007fc:	1005003a 	cmpeq	r2,r2,zero
  800800:	1000171e 	bne	r2,zero,800860 <load_bmp+0x19c>
	{
		/* Image width is not divisible by 4-- there will be padding. */
		byte_width += 4 - (byte_width % 4);
  800804:	e0bff217 	ldw	r2,-56(fp)
  800808:	00e00034 	movhi	r3,32768
  80080c:	18c000c4 	addi	r3,r3,3
  800810:	10c4703a 	and	r2,r2,r3
  800814:	e0bfff15 	stw	r2,-4(fp)
  800818:	e0ffff17 	ldw	r3,-4(fp)
  80081c:	1804403a 	cmpge	r2,r3,zero
  800820:	10000a1e 	bne	r2,zero,80084c <load_bmp+0x188>
  800824:	e0bfff17 	ldw	r2,-4(fp)
  800828:	10bfffc4 	addi	r2,r2,-1
  80082c:	e0bfff15 	stw	r2,-4(fp)
  800830:	00bfff04 	movi	r2,-4
  800834:	e0ffff17 	ldw	r3,-4(fp)
  800838:	1886b03a 	or	r3,r3,r2
  80083c:	e0ffff15 	stw	r3,-4(fp)
  800840:	e0bfff17 	ldw	r2,-4(fp)
  800844:	10800044 	addi	r2,r2,1
  800848:	e0bfff15 	stw	r2,-4(fp)
  80084c:	e0ffff17 	ldw	r3,-4(fp)
  800850:	e0bff217 	ldw	r2,-56(fp)
  800854:	10c5c83a 	sub	r2,r2,r3
  800858:	10800104 	addi	r2,r2,4
  80085c:	e0bff215 	stw	r2,-56(fp)
	}

	padding = byte_width - (bmp_info_header->width*3);
  800860:	e0bffa17 	ldw	r2,-24(fp)
  800864:	10c00117 	ldw	r3,4(r2)
  800868:	1805883a 	mov	r2,r3
  80086c:	1085883a 	add	r2,r2,r2
  800870:	10c7883a 	add	r3,r2,r3
  800874:	e0bff217 	ldw	r2,-56(fp)
  800878:	10c5c83a 	sub	r2,r2,r3
  80087c:	e0bff115 	stw	r2,-60(fp)
	printf("\nPadding: %d\n", padding);
  800880:	01002074 	movhi	r4,129
  800884:	2110cc04 	addi	r4,r4,17200
  800888:	e17ff117 	ldw	r5,-60(fp)
  80088c:	0801f540 	call	801f54 <printf>

	for (it = pixel_map, i = 0;
  800890:	e0bff817 	ldw	r2,-32(fp)
  800894:	e0bff515 	stw	r2,-44(fp)
  800898:	e03ff415 	stw	zero,-48(fp)
			i < bmp_info_header->width*bmp_info_header->height; i++, it++)
  80089c:	00002c06 	br	800950 <load_bmp+0x28c>
	{
		/* Must account for the fact that the display takes 5 bits for r,
		 * 6 bits for g and 5 bits for b.
		 */
		it->b = (read_file(file) >> 3);
  8008a0:	e13ff70f 	ldh	r4,-36(fp)
  8008a4:	08015940 	call	801594 <read_file>
  8008a8:	10803fcc 	andi	r2,r2,255
  8008ac:	1004d0fa 	srli	r2,r2,3
  8008b0:	1007883a 	mov	r3,r2
  8008b4:	e0bff517 	ldw	r2,-44(fp)
  8008b8:	10c00085 	stb	r3,2(r2)
		it->g = (read_file(file) >> 2);
  8008bc:	e13ff70f 	ldh	r4,-36(fp)
  8008c0:	08015940 	call	801594 <read_file>
  8008c4:	10803fcc 	andi	r2,r2,255
  8008c8:	1004d0ba 	srli	r2,r2,2
  8008cc:	1007883a 	mov	r3,r2
  8008d0:	e0bff517 	ldw	r2,-44(fp)
  8008d4:	10c00045 	stb	r3,1(r2)
		it->r = (read_file(file) >> 3);
  8008d8:	e13ff70f 	ldh	r4,-36(fp)
  8008dc:	08015940 	call	801594 <read_file>
  8008e0:	10803fcc 	andi	r2,r2,255
  8008e4:	1004d0fa 	srli	r2,r2,3
  8008e8:	1007883a 	mov	r3,r2
  8008ec:	e0bff517 	ldw	r2,-44(fp)
  8008f0:	10c00005 	stb	r3,0(r2)

		/* Discard padding at the end of the row. */
		if ((i+1) % bmp_info_header->width == 0)
  8008f4:	e0bff417 	ldw	r2,-48(fp)
  8008f8:	11000044 	addi	r4,r2,1
  8008fc:	e0bffa17 	ldw	r2,-24(fp)
  800900:	11400117 	ldw	r5,4(r2)
  800904:	08017440 	call	801744 <__modsi3>
  800908:	1004c03a 	cmpne	r2,r2,zero
  80090c:	10000a1e 	bne	r2,zero,800938 <load_bmp+0x274>
			for (j = 0; j < padding; j++) read_file(file);
  800910:	e03ff315 	stw	zero,-52(fp)
  800914:	00000506 	br	80092c <load_bmp+0x268>
  800918:	e13ff70f 	ldh	r4,-36(fp)
  80091c:	08015940 	call	801594 <read_file>
  800920:	e0bff317 	ldw	r2,-52(fp)
  800924:	10800044 	addi	r2,r2,1
  800928:	e0bff315 	stw	r2,-52(fp)
  80092c:	e0fff317 	ldw	r3,-52(fp)
  800930:	e0bff117 	ldw	r2,-60(fp)
  800934:	18bff816 	blt	r3,r2,800918 <load_bmp+0x254>

	padding = byte_width - (bmp_info_header->width*3);
	printf("\nPadding: %d\n", padding);

	for (it = pixel_map, i = 0;
			i < bmp_info_header->width*bmp_info_header->height; i++, it++)
  800938:	e0bff417 	ldw	r2,-48(fp)
  80093c:	10800044 	addi	r2,r2,1
  800940:	e0bff415 	stw	r2,-48(fp)
  800944:	e0bff517 	ldw	r2,-44(fp)
  800948:	108000c4 	addi	r2,r2,3
  80094c:	e0bff515 	stw	r2,-44(fp)
  800950:	e0bffa17 	ldw	r2,-24(fp)
  800954:	11000117 	ldw	r4,4(r2)
  800958:	e0bffa17 	ldw	r2,-24(fp)
  80095c:	11400217 	ldw	r5,8(r2)
  800960:	08017b40 	call	8017b4 <__mulsi3>
  800964:	1007883a 	mov	r3,r2
  800968:	e0bff417 	ldw	r2,-48(fp)
  80096c:	10ffcc16 	blt	r2,r3,8008a0 <load_bmp+0x1dc>
		/* Discard padding at the end of the row. */
		if ((i+1) % bmp_info_header->width == 0)
			for (j = 0; j < padding; j++) read_file(file);
	}

	alt_up_sd_card_fclose(file);
  800970:	e13ff70f 	ldh	r4,-36(fp)
  800974:	0812ec40 	call	812ec4 <alt_up_sd_card_fclose>

	handle->bmp_file_header = bmp_file_header;
  800978:	e0fffb17 	ldw	r3,-20(fp)
  80097c:	e0bff917 	ldw	r2,-28(fp)
  800980:	18800015 	stw	r2,0(r3)
	handle->bmp_info_header = bmp_info_header;
  800984:	e0fffb17 	ldw	r3,-20(fp)
  800988:	e0bffa17 	ldw	r2,-24(fp)
  80098c:	18800115 	stw	r2,4(r3)
	handle->pixel_map = pixel_map;
  800990:	e0fffb17 	ldw	r3,-20(fp)
  800994:	e0bff817 	ldw	r2,-32(fp)
  800998:	18800215 	stw	r2,8(r3)

	(*bmp_handle) = handle;
  80099c:	e0fffd17 	ldw	r3,-12(fp)
  8009a0:	e0bffb17 	ldw	r2,-20(fp)
  8009a4:	18800015 	stw	r2,0(r3)
	return 0;
  8009a8:	e03ffe15 	stw	zero,-8(fp)
  8009ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8009b0:	e037883a 	mov	sp,fp
  8009b4:	dfc00117 	ldw	ra,4(sp)
  8009b8:	df000017 	ldw	fp,0(sp)
  8009bc:	dec00204 	addi	sp,sp,8
  8009c0:	f800283a 	ret

008009c4 <close_bmp>:

void close_bmp(BitmapHandle* handle)
{
  8009c4:	defffd04 	addi	sp,sp,-12
  8009c8:	dfc00215 	stw	ra,8(sp)
  8009cc:	df000115 	stw	fp,4(sp)
  8009d0:	df000104 	addi	fp,sp,4
  8009d4:	e13fff15 	stw	r4,-4(fp)
	if (handle == NULL) return;
  8009d8:	e0bfff17 	ldw	r2,-4(fp)
  8009dc:	1005003a 	cmpeq	r2,r2,zero
  8009e0:	1000171e 	bne	r2,zero,800a40 <close_bmp+0x7c>
	if (handle->bmp_file_header != NULL) free(handle->bmp_file_header);
  8009e4:	e0bfff17 	ldw	r2,-4(fp)
  8009e8:	10800017 	ldw	r2,0(r2)
  8009ec:	1005003a 	cmpeq	r2,r2,zero
  8009f0:	1000031e 	bne	r2,zero,800a00 <close_bmp+0x3c>
  8009f4:	e0bfff17 	ldw	r2,-4(fp)
  8009f8:	11000017 	ldw	r4,0(r2)
  8009fc:	08017ec0 	call	8017ec <free>
	if (handle->bmp_info_header != NULL) free(handle->bmp_info_header);
  800a00:	e0bfff17 	ldw	r2,-4(fp)
  800a04:	10800117 	ldw	r2,4(r2)
  800a08:	1005003a 	cmpeq	r2,r2,zero
  800a0c:	1000031e 	bne	r2,zero,800a1c <close_bmp+0x58>
  800a10:	e0bfff17 	ldw	r2,-4(fp)
  800a14:	11000117 	ldw	r4,4(r2)
  800a18:	08017ec0 	call	8017ec <free>
	if (handle->pixel_map != NULL) free(handle->pixel_map);
  800a1c:	e0bfff17 	ldw	r2,-4(fp)
  800a20:	10800217 	ldw	r2,8(r2)
  800a24:	1005003a 	cmpeq	r2,r2,zero
  800a28:	1000031e 	bne	r2,zero,800a38 <close_bmp+0x74>
  800a2c:	e0bfff17 	ldw	r2,-4(fp)
  800a30:	11000217 	ldw	r4,8(r2)
  800a34:	08017ec0 	call	8017ec <free>
	free(handle);
  800a38:	e13fff17 	ldw	r4,-4(fp)
  800a3c:	08017ec0 	call	8017ec <free>
}
  800a40:	e037883a 	mov	sp,fp
  800a44:	dfc00117 	ldw	ra,4(sp)
  800a48:	df000017 	ldw	fp,0(sp)
  800a4c:	dec00204 	addi	sp,sp,8
  800a50:	f800283a 	ret

00800a54 <dump_header_info>:

void dump_header_info(BmpFileHeader* bmp_file_header, BmpInfoHeader* bmp_info_header)
{
  800a54:	defffc04 	addi	sp,sp,-16
  800a58:	dfc00315 	stw	ra,12(sp)
  800a5c:	df000215 	stw	fp,8(sp)
  800a60:	df000204 	addi	fp,sp,8
  800a64:	e13ffe15 	stw	r4,-8(fp)
  800a68:	e17fff15 	stw	r5,-4(fp)
	if (bmp_file_header == NULL) return;
  800a6c:	e0bffe17 	ldw	r2,-8(fp)
  800a70:	1005003a 	cmpeq	r2,r2,zero
  800a74:	1000361e 	bne	r2,zero,800b50 <dump_header_info+0xfc>

	printf("File Type: %x\nFile Size: %d\nOffset to image information: %d\n", bmp_file_header->header_field,
  800a78:	e0bffe17 	ldw	r2,-8(fp)
  800a7c:	1080000b 	ldhu	r2,0(r2)
  800a80:	117fffcc 	andi	r5,r2,65535
  800a84:	e0bffe17 	ldw	r2,-8(fp)
  800a88:	10c0008b 	ldhu	r3,2(r2)
  800a8c:	1080010b 	ldhu	r2,4(r2)
  800a90:	1004943a 	slli	r2,r2,16
  800a94:	10c4b03a 	or	r2,r2,r3
  800a98:	100d883a 	mov	r6,r2
  800a9c:	e0bffe17 	ldw	r2,-8(fp)
  800aa0:	10c0028b 	ldhu	r3,10(r2)
  800aa4:	1080030b 	ldhu	r2,12(r2)
  800aa8:	1004943a 	slli	r2,r2,16
  800aac:	10c4b03a 	or	r2,r2,r3
  800ab0:	100f883a 	mov	r7,r2
  800ab4:	01002074 	movhi	r4,129
  800ab8:	2110d004 	addi	r4,r4,17216
  800abc:	0801f540 	call	801f54 <printf>
			bmp_file_header->size, bmp_file_header->offset);

	if(bmp_info_header == NULL) return;
  800ac0:	e0bfff17 	ldw	r2,-4(fp)
  800ac4:	1005003a 	cmpeq	r2,r2,zero
  800ac8:	1000211e 	bne	r2,zero,800b50 <dump_header_info+0xfc>

	printf("Information Header Size: %d\nImage Width: %d\nImage Height: %d\n", bmp_info_header->size,
  800acc:	e0bfff17 	ldw	r2,-4(fp)
  800ad0:	11400017 	ldw	r5,0(r2)
  800ad4:	e0bfff17 	ldw	r2,-4(fp)
  800ad8:	11800117 	ldw	r6,4(r2)
  800adc:	e0bfff17 	ldw	r2,-4(fp)
  800ae0:	11c00217 	ldw	r7,8(r2)
  800ae4:	01002074 	movhi	r4,129
  800ae8:	2110e004 	addi	r4,r4,17280
  800aec:	0801f540 	call	801f54 <printf>
			bmp_info_header->width, bmp_info_header->height);
	printf("Number of Bits Per Pixel: %d\nImage Size: %d\nCompression: %d\n", bmp_info_header->bit_count,
  800af0:	e0bfff17 	ldw	r2,-4(fp)
  800af4:	1080038b 	ldhu	r2,14(r2)
  800af8:	117fffcc 	andi	r5,r2,65535
  800afc:	e0bfff17 	ldw	r2,-4(fp)
  800b00:	11800517 	ldw	r6,20(r2)
  800b04:	e0bfff17 	ldw	r2,-4(fp)
  800b08:	11c00417 	ldw	r7,16(r2)
  800b0c:	01002074 	movhi	r4,129
  800b10:	2110f004 	addi	r4,r4,17344
  800b14:	0801f540 	call	801f54 <printf>
			bmp_info_header->img_size, bmp_info_header->compression);
	printf("Horizontal Resolution: %d\nVertical Resolution: %d\n", bmp_info_header->x_ppm, bmp_info_header->y_ppm);
  800b18:	e0bfff17 	ldw	r2,-4(fp)
  800b1c:	11400617 	ldw	r5,24(r2)
  800b20:	e0bfff17 	ldw	r2,-4(fp)
  800b24:	11800717 	ldw	r6,28(r2)
  800b28:	01002074 	movhi	r4,129
  800b2c:	21110004 	addi	r4,r4,17408
  800b30:	0801f540 	call	801f54 <printf>
	printf("Number of important colours used: %d\nNumber of colours in palette: %d", bmp_info_header->important_colours,
  800b34:	e0bfff17 	ldw	r2,-4(fp)
  800b38:	11400917 	ldw	r5,36(r2)
  800b3c:	e0bfff17 	ldw	r2,-4(fp)
  800b40:	11800817 	ldw	r6,32(r2)
  800b44:	01002074 	movhi	r4,129
  800b48:	21110d04 	addi	r4,r4,17460
  800b4c:	0801f540 	call	801f54 <printf>
			bmp_info_header->colours_used);
}
  800b50:	e037883a 	mov	sp,fp
  800b54:	dfc00117 	ldw	ra,4(sp)
  800b58:	df000017 	ldw	fp,0(sp)
  800b5c:	dec00204 	addi	sp,sp,8
  800b60:	f800283a 	ret

00800b64 <fill_bmp_header>:

static BmpFileHeader* fill_bmp_header(file_handle file)
{
  800b64:	defff904 	addi	sp,sp,-28
  800b68:	dfc00615 	stw	ra,24(sp)
  800b6c:	df000515 	stw	fp,20(sp)
  800b70:	df000504 	addi	fp,sp,20
  800b74:	e13fff0d 	sth	r4,-4(fp)
	byte *byte_list = (byte *) malloc(sizeof(BmpFileHeader));
  800b78:	01000384 	movi	r4,14
  800b7c:	08018000 	call	801800 <malloc>
  800b80:	e0bffe15 	stw	r2,-8(fp)
	byte *it = byte_list;
  800b84:	e0bffe17 	ldw	r2,-8(fp)
  800b88:	e0bffd15 	stw	r2,-12(fp)
	BmpFileHeader* bmp_file_header;
	int i;

	// Fill the header with bytes.
	for (i = 0; i < sizeof(BmpFileHeader); i++)
  800b8c:	e03ffb15 	stw	zero,-20(fp)
  800b90:	00000b06 	br	800bc0 <fill_bmp_header+0x5c>
	{
		*it = read_file(file);
  800b94:	e13fff0f 	ldh	r4,-4(fp)
  800b98:	08015940 	call	801594 <read_file>
  800b9c:	1007883a 	mov	r3,r2
  800ba0:	e0bffd17 	ldw	r2,-12(fp)
  800ba4:	10c00005 	stb	r3,0(r2)
		it++;
  800ba8:	e0bffd17 	ldw	r2,-12(fp)
  800bac:	10800044 	addi	r2,r2,1
  800bb0:	e0bffd15 	stw	r2,-12(fp)
	byte *it = byte_list;
	BmpFileHeader* bmp_file_header;
	int i;

	// Fill the header with bytes.
	for (i = 0; i < sizeof(BmpFileHeader); i++)
  800bb4:	e0bffb17 	ldw	r2,-20(fp)
  800bb8:	10800044 	addi	r2,r2,1
  800bbc:	e0bffb15 	stw	r2,-20(fp)
  800bc0:	e0bffb17 	ldw	r2,-20(fp)
  800bc4:	108003b0 	cmpltui	r2,r2,14
  800bc8:	103ff21e 	bne	r2,zero,800b94 <fill_bmp_header+0x30>
	{
		*it = read_file(file);
		it++;
	}

	bmp_file_header = (BmpFileHeader*) byte_list;
  800bcc:	e0bffe17 	ldw	r2,-8(fp)
  800bd0:	e0bffc15 	stw	r2,-16(fp)
	return bmp_file_header;
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
}
  800bd8:	e037883a 	mov	sp,fp
  800bdc:	dfc00117 	ldw	ra,4(sp)
  800be0:	df000017 	ldw	fp,0(sp)
  800be4:	dec00204 	addi	sp,sp,8
  800be8:	f800283a 	ret

00800bec <fill_info_header>:

static BmpInfoHeader* fill_info_header(file_handle file)
{
  800bec:	defff904 	addi	sp,sp,-28
  800bf0:	dfc00615 	stw	ra,24(sp)
  800bf4:	df000515 	stw	fp,20(sp)
  800bf8:	df000504 	addi	fp,sp,20
  800bfc:	e13fff0d 	sth	r4,-4(fp)
	byte *byte_list = (byte *) malloc(sizeof(BmpInfoHeader));
  800c00:	01000a04 	movi	r4,40
  800c04:	08018000 	call	801800 <malloc>
  800c08:	e0bffe15 	stw	r2,-8(fp)
	byte *it = byte_list;
  800c0c:	e0bffe17 	ldw	r2,-8(fp)
  800c10:	e0bffd15 	stw	r2,-12(fp)
	BmpInfoHeader* bmp_info_header;
	int i;

	// Fill the header with bytes.
	for (i = 0; i < sizeof(BmpInfoHeader); i++)
  800c14:	e03ffb15 	stw	zero,-20(fp)
  800c18:	00000b06 	br	800c48 <fill_info_header+0x5c>
	{
		*it = read_file(file);
  800c1c:	e13fff0f 	ldh	r4,-4(fp)
  800c20:	08015940 	call	801594 <read_file>
  800c24:	1007883a 	mov	r3,r2
  800c28:	e0bffd17 	ldw	r2,-12(fp)
  800c2c:	10c00005 	stb	r3,0(r2)
		it++;
  800c30:	e0bffd17 	ldw	r2,-12(fp)
  800c34:	10800044 	addi	r2,r2,1
  800c38:	e0bffd15 	stw	r2,-12(fp)
	byte *it = byte_list;
	BmpInfoHeader* bmp_info_header;
	int i;

	// Fill the header with bytes.
	for (i = 0; i < sizeof(BmpInfoHeader); i++)
  800c3c:	e0bffb17 	ldw	r2,-20(fp)
  800c40:	10800044 	addi	r2,r2,1
  800c44:	e0bffb15 	stw	r2,-20(fp)
  800c48:	e0bffb17 	ldw	r2,-20(fp)
  800c4c:	10800a30 	cmpltui	r2,r2,40
  800c50:	103ff21e 	bne	r2,zero,800c1c <fill_info_header+0x30>
	{
		*it = read_file(file);
		it++;
	}

	bmp_info_header = (BmpInfoHeader*) byte_list;
  800c54:	e0bffe17 	ldw	r2,-8(fp)
  800c58:	e0bffc15 	stw	r2,-16(fp)
	return bmp_info_header;
  800c5c:	e0bffc17 	ldw	r2,-16(fp)
}
  800c60:	e037883a 	mov	sp,fp
  800c64:	dfc00117 	ldw	ra,4(sp)
  800c68:	df000017 	ldw	fp,0(sp)
  800c6c:	dec00204 	addi	sp,sp,8
  800c70:	f800283a 	ret

00800c74 <verify_bmp_type>:

static short int verify_bmp_type(BmpFileHeader* bmp_file_header)
{
  800c74:	defffc04 	addi	sp,sp,-16
  800c78:	dfc00315 	stw	ra,12(sp)
  800c7c:	df000215 	stw	fp,8(sp)
  800c80:	df000204 	addi	fp,sp,8
  800c84:	e13ffe15 	stw	r4,-8(fp)
	if((bmp_file_header->header_field & 0x00FF) != BITMAP_TYPE_BYTE1 ||
  800c88:	e0bffe17 	ldw	r2,-8(fp)
  800c8c:	1080000b 	ldhu	r2,0(r2)
  800c90:	10bfffcc 	andi	r2,r2,65535
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	10801098 	cmpnei	r2,r2,66
  800c9c:	1000071e 	bne	r2,zero,800cbc <verify_bmp_type+0x48>
  800ca0:	e0bffe17 	ldw	r2,-8(fp)
  800ca4:	1080000b 	ldhu	r2,0(r2)
  800ca8:	10bfffcc 	andi	r2,r2,65535
  800cac:	10bfc00c 	andi	r2,r2,65280
  800cb0:	1005d23a 	srai	r2,r2,8
  800cb4:	10801360 	cmpeqi	r2,r2,77
  800cb8:	10000e1e 	bne	r2,zero,800cf4 <verify_bmp_type+0x80>
		((bmp_file_header->header_field & 0xFF00) >> 8)  != BITMAP_TYPE_BYTE2)
	{
		printf("Wrong file type for bitmap. 1st Byte: %x, 2nd Byte: %x\n",
  800cbc:	e0bffe17 	ldw	r2,-8(fp)
  800cc0:	1080000b 	ldhu	r2,0(r2)
  800cc4:	10bfffcc 	andi	r2,r2,65535
  800cc8:	11403fcc 	andi	r5,r2,255
  800ccc:	e0bffe17 	ldw	r2,-8(fp)
  800cd0:	1080000b 	ldhu	r2,0(r2)
  800cd4:	10bfffcc 	andi	r2,r2,65535
  800cd8:	10bfc00c 	andi	r2,r2,65280
  800cdc:	100dd23a 	srai	r6,r2,8
  800ce0:	01002074 	movhi	r4,129
  800ce4:	21111f04 	addi	r4,r4,17532
  800ce8:	0801f540 	call	801f54 <printf>
				bmp_file_header->header_field & 0x00FF, (bmp_file_header->header_field & 0xFF00) >> 8);
		return 0;
  800cec:	e03fff15 	stw	zero,-4(fp)
  800cf0:	00000206 	br	800cfc <verify_bmp_type+0x88>
	}

	return 1;
  800cf4:	00800044 	movi	r2,1
  800cf8:	e0bfff15 	stw	r2,-4(fp)
  800cfc:	e0bfff17 	ldw	r2,-4(fp)
}
  800d00:	e037883a 	mov	sp,fp
  800d04:	dfc00117 	ldw	ra,4(sp)
  800d08:	df000017 	ldw	fp,0(sp)
  800d0c:	dec00204 	addi	sp,sp,8
  800d10:	f800283a 	ret

00800d14 <init_display>:
static alt_up_pixel_buffer_dma_dev* pixel_buffer = NULL;
static alt_up_char_buffer_dev *char_buffer = NULL;
static unsigned int pixel_buffer_addr1, pixel_buffer_addr2;

void init_display()
{
  800d14:	defffe04 	addi	sp,sp,-8
  800d18:	dfc00115 	stw	ra,4(sp)
  800d1c:	df000015 	stw	fp,0(sp)
  800d20:	d839883a 	mov	fp,sp
	pixel_buffer =
  800d24:	01002074 	movhi	r4,129
  800d28:	21112d04 	addi	r4,r4,17588
  800d2c:	080d6ac0 	call	80d6ac <alt_up_pixel_buffer_dma_open_dev>
  800d30:	d0a71015 	stw	r2,-25536(gp)
			alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");

	char_buffer = alt_up_char_buffer_open_dev("/dev/char_drawer");
  800d34:	01002074 	movhi	r4,129
  800d38:	21113104 	addi	r4,r4,17604
  800d3c:	080d42c0 	call	80d42c <alt_up_char_buffer_open_dev>
  800d40:	d0a71115 	stw	r2,-25532(gp)

	// Initialize the character buffer.
	alt_up_char_buffer_init(char_buffer);
  800d44:	d1271117 	ldw	r4,-25532(gp)
  800d48:	080d3a80 	call	80d3a8 <alt_up_char_buffer_init>

	pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
  800d4c:	00804034 	movhi	r2,256
  800d50:	d0a71215 	stw	r2,-25528(gp)
	pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320 * 240 * 2);
  800d54:	008040b4 	movhi	r2,258
  800d58:	10960004 	addi	r2,r2,22528
  800d5c:	d0a71315 	stw	r2,-25524(gp)

	// Set the background buffer address.
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,
  800d60:	d1271017 	ldw	r4,-25536(gp)
  800d64:	d1671217 	ldw	r5,-25528(gp)
  800d68:	080d8980 	call	80d898 <alt_up_pixel_buffer_dma_change_back_buffer_address>
			pixel_buffer_addr1);

	// Swap background and foreground buffers
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  800d6c:	d1271017 	ldw	r4,-25536(gp)
  800d70:	080d8f00 	call	80d8f0 <alt_up_pixel_buffer_dma_swap_buffers>

	// Wait for the swap to complete
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  800d74:	d1271017 	ldw	r4,-25536(gp)
  800d78:	080d9480 	call	80d948 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  800d7c:	1004c03a 	cmpne	r2,r2,zero
  800d80:	103ffc1e 	bne	r2,zero,800d74 <init_display+0x60>

	// Set the 2nd buffer address
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,
  800d84:	d1271017 	ldw	r4,-25536(gp)
  800d88:	d1671317 	ldw	r5,-25524(gp)
  800d8c:	080d8980 	call	80d898 <alt_up_pixel_buffer_dma_change_back_buffer_address>
			pixel_buffer_addr2);

	// Clear both buffers (this makes all pixels black)
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  800d90:	d1271017 	ldw	r4,-25536(gp)
  800d94:	000b883a 	mov	r5,zero
  800d98:	080d97c0 	call	80d97c <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  800d9c:	d1271017 	ldw	r4,-25536(gp)
  800da0:	01400044 	movi	r5,1
  800da4:	080d97c0 	call	80d97c <alt_up_pixel_buffer_dma_clear_screen>
}
  800da8:	e037883a 	mov	sp,fp
  800dac:	dfc00117 	ldw	ra,4(sp)
  800db0:	df000017 	ldw	fp,0(sp)
  800db4:	dec00204 	addi	sp,sp,8
  800db8:	f800283a 	ret

00800dbc <swap_buffers>:

void swap_buffers()
{
  800dbc:	defffe04 	addi	sp,sp,-8
  800dc0:	dfc00115 	stw	ra,4(sp)
  800dc4:	df000015 	stw	fp,0(sp)
  800dc8:	d839883a 	mov	fp,sp
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  800dcc:	d1271017 	ldw	r4,-25536(gp)
  800dd0:	080d8f00 	call	80d8f0 <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  800dd4:	d1271017 	ldw	r4,-25536(gp)
  800dd8:	080d9480 	call	80d948 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  800ddc:	1004c03a 	cmpne	r2,r2,zero
  800de0:	103ffc1e 	bne	r2,zero,800dd4 <swap_buffers+0x18>
}
  800de4:	e037883a 	mov	sp,fp
  800de8:	dfc00117 	ldw	ra,4(sp)
  800dec:	df000017 	ldw	fp,0(sp)
  800df0:	dec00204 	addi	sp,sp,8
  800df4:	f800283a 	ret

00800df8 <clear_display>:

void clear_display()
{
  800df8:	defffe04 	addi	sp,sp,-8
  800dfc:	dfc00115 	stw	ra,4(sp)
  800e00:	df000015 	stw	fp,0(sp)
  800e04:	d839883a 	mov	fp,sp
	clear_pixel_buffer();
  800e08:	0800e5c0 	call	800e5c <clear_pixel_buffer>
	clear_character_buffer();
  800e0c:	0800e240 	call	800e24 <clear_character_buffer>
}
  800e10:	e037883a 	mov	sp,fp
  800e14:	dfc00117 	ldw	ra,4(sp)
  800e18:	df000017 	ldw	fp,0(sp)
  800e1c:	dec00204 	addi	sp,sp,8
  800e20:	f800283a 	ret

00800e24 <clear_character_buffer>:

void clear_character_buffer()
{
  800e24:	defffe04 	addi	sp,sp,-8
  800e28:	dfc00115 	stw	ra,4(sp)
  800e2c:	df000015 	stw	fp,0(sp)
  800e30:	d839883a 	mov	fp,sp
	if (char_buffer == NULL) return;
  800e34:	d0a71117 	ldw	r2,-25532(gp)
  800e38:	1005003a 	cmpeq	r2,r2,zero
  800e3c:	1000021e 	bne	r2,zero,800e48 <clear_character_buffer+0x24>

	alt_up_char_buffer_clear(char_buffer);
  800e40:	d1271117 	ldw	r4,-25532(gp)
  800e44:	080d6500 	call	80d650 <alt_up_char_buffer_clear>
}
  800e48:	e037883a 	mov	sp,fp
  800e4c:	dfc00117 	ldw	ra,4(sp)
  800e50:	df000017 	ldw	fp,0(sp)
  800e54:	dec00204 	addi	sp,sp,8
  800e58:	f800283a 	ret

00800e5c <clear_pixel_buffer>:

void clear_pixel_buffer()
{
  800e5c:	defffe04 	addi	sp,sp,-8
  800e60:	dfc00115 	stw	ra,4(sp)
  800e64:	df000015 	stw	fp,0(sp)
  800e68:	d839883a 	mov	fp,sp
	if (pixel_buffer == NULL) return;
  800e6c:	d0a71017 	ldw	r2,-25536(gp)
  800e70:	1005003a 	cmpeq	r2,r2,zero
  800e74:	1000091e 	bne	r2,zero,800e9c <clear_pixel_buffer+0x40>

	// Swap background and foreground buffers
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  800e78:	d1271017 	ldw	r4,-25536(gp)
  800e7c:	080d8f00 	call	80d8f0 <alt_up_pixel_buffer_dma_swap_buffers>

	// Wait for the swap to complete
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  800e80:	d1271017 	ldw	r4,-25536(gp)
  800e84:	080d9480 	call	80d948 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  800e88:	1004c03a 	cmpne	r2,r2,zero
  800e8c:	103ffc1e 	bne	r2,zero,800e80 <clear_pixel_buffer+0x24>

	// Clear the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  800e90:	d1271017 	ldw	r4,-25536(gp)
  800e94:	000b883a 	mov	r5,zero
  800e98:	080d97c0 	call	80d97c <alt_up_pixel_buffer_dma_clear_screen>
}
  800e9c:	e037883a 	mov	sp,fp
  800ea0:	dfc00117 	ldw	ra,4(sp)
  800ea4:	df000017 	ldw	fp,0(sp)
  800ea8:	dec00204 	addi	sp,sp,8
  800eac:	f800283a 	ret

00800eb0 <draw_line>:

void draw_line(int x0, int y0, int x1, int y1, colour col, int backbuffer)
{
  800eb0:	defff504 	addi	sp,sp,-44
  800eb4:	dfc00a15 	stw	ra,40(sp)
  800eb8:	df000915 	stw	fp,36(sp)
  800ebc:	df000904 	addi	fp,sp,36
  800ec0:	e13ffb15 	stw	r4,-20(fp)
  800ec4:	e17ffc15 	stw	r5,-16(fp)
  800ec8:	e1bffd15 	stw	r6,-12(fp)
  800ecc:	e1fffe15 	stw	r7,-8(fp)
	if (pixel_buffer == NULL) return;
  800ed0:	d0a71017 	ldw	r2,-25536(gp)
  800ed4:	1005003a 	cmpeq	r2,r2,zero
  800ed8:	10001a1e 	bne	r2,zero,800f44 <draw_line+0x94>
	int intCol = colourToInt(col);
  800edc:	e0c00217 	ldw	r3,8(fp)
  800ee0:	00804034 	movhi	r2,256
  800ee4:	10bfffc4 	addi	r2,r2,-1
  800ee8:	1886703a 	and	r3,r3,r2
  800eec:	e03fff15 	stw	zero,-4(fp)
  800ef0:	00804034 	movhi	r2,256
  800ef4:	10bfffc4 	addi	r2,r2,-1
  800ef8:	1886703a 	and	r3,r3,r2
  800efc:	e13fff17 	ldw	r4,-4(fp)
  800f00:	20bfc02c 	andhi	r2,r4,65280
  800f04:	10c4b03a 	or	r2,r2,r3
  800f08:	e0bfff15 	stw	r2,-4(fp)
  800f0c:	e13fff17 	ldw	r4,-4(fp)
  800f10:	08011940 	call	801194 <colourToInt>
  800f14:	e0bffa15 	stw	r2,-24(fp)
	//printf("%x ", intCol);
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, x0, y0, x1, y1,
  800f18:	d1271017 	ldw	r4,-25536(gp)
  800f1c:	e0bffe17 	ldw	r2,-8(fp)
  800f20:	d8800015 	stw	r2,0(sp)
  800f24:	e0bffa17 	ldw	r2,-24(fp)
  800f28:	d8800115 	stw	r2,4(sp)
  800f2c:	e0800317 	ldw	r2,12(fp)
  800f30:	d8800215 	stw	r2,8(sp)
  800f34:	e17ffb17 	ldw	r5,-20(fp)
  800f38:	e1bffc17 	ldw	r6,-16(fp)
  800f3c:	e1fffd17 	ldw	r7,-12(fp)
  800f40:	080e8b00 	call	80e8b0 <alt_up_pixel_buffer_dma_draw_line>
			intCol, backbuffer);
}
  800f44:	e037883a 	mov	sp,fp
  800f48:	dfc00117 	ldw	ra,4(sp)
  800f4c:	df000017 	ldw	fp,0(sp)
  800f50:	dec00204 	addi	sp,sp,8
  800f54:	f800283a 	ret

00800f58 <draw_box>:

void draw_box(int x0, int y0, int x1, int y1, colour col, int backbuffer)
{
  800f58:	defff504 	addi	sp,sp,-44
  800f5c:	dfc00a15 	stw	ra,40(sp)
  800f60:	df000915 	stw	fp,36(sp)
  800f64:	df000904 	addi	fp,sp,36
  800f68:	e13ffb15 	stw	r4,-20(fp)
  800f6c:	e17ffc15 	stw	r5,-16(fp)
  800f70:	e1bffd15 	stw	r6,-12(fp)
  800f74:	e1fffe15 	stw	r7,-8(fp)
	if (pixel_buffer == NULL) return;
  800f78:	d0a71017 	ldw	r2,-25536(gp)
  800f7c:	1005003a 	cmpeq	r2,r2,zero
  800f80:	10001a1e 	bne	r2,zero,800fec <draw_box+0x94>
	int intCol = colourToInt(col);
  800f84:	e0c00217 	ldw	r3,8(fp)
  800f88:	00804034 	movhi	r2,256
  800f8c:	10bfffc4 	addi	r2,r2,-1
  800f90:	1886703a 	and	r3,r3,r2
  800f94:	e03fff15 	stw	zero,-4(fp)
  800f98:	00804034 	movhi	r2,256
  800f9c:	10bfffc4 	addi	r2,r2,-1
  800fa0:	1886703a 	and	r3,r3,r2
  800fa4:	e13fff17 	ldw	r4,-4(fp)
  800fa8:	20bfc02c 	andhi	r2,r4,65280
  800fac:	10c4b03a 	or	r2,r2,r3
  800fb0:	e0bfff15 	stw	r2,-4(fp)
  800fb4:	e13fff17 	ldw	r4,-4(fp)
  800fb8:	08011940 	call	801194 <colourToInt>
  800fbc:	e0bffa15 	stw	r2,-24(fp)

    alt_up_pixel_buffer_dma_draw_box(pixel_buffer, x0, y0, x1, y1,
  800fc0:	d1271017 	ldw	r4,-25536(gp)
  800fc4:	e0bffe17 	ldw	r2,-8(fp)
  800fc8:	d8800015 	stw	r2,0(sp)
  800fcc:	e0bffa17 	ldw	r2,-24(fp)
  800fd0:	d8800115 	stw	r2,4(sp)
  800fd4:	e0800317 	ldw	r2,12(fp)
  800fd8:	d8800215 	stw	r2,8(sp)
  800fdc:	e17ffb17 	ldw	r5,-20(fp)
  800fe0:	e1bffc17 	ldw	r6,-16(fp)
  800fe4:	e1fffd17 	ldw	r7,-12(fp)
  800fe8:	080dae80 	call	80dae8 <alt_up_pixel_buffer_dma_draw_box>
			intCol, backbuffer);
}
  800fec:	e037883a 	mov	sp,fp
  800ff0:	dfc00117 	ldw	ra,4(sp)
  800ff4:	df000017 	ldw	fp,0(sp)
  800ff8:	dec00204 	addi	sp,sp,8
  800ffc:	f800283a 	ret

00801000 <makeCol>:

colour makeCol(unsigned char r, unsigned char g, unsigned char b)
{
  801000:	defff904 	addi	sp,sp,-28
  801004:	df000615 	stw	fp,24(sp)
  801008:	df000604 	addi	fp,sp,24
  80100c:	e13ffc05 	stb	r4,-16(fp)
  801010:	e17ffd05 	stb	r5,-12(fp)
  801014:	e1bffe05 	stb	r6,-8(fp)
	colour col = {r, g, b};
  801018:	e0bffc03 	ldbu	r2,-16(fp)
  80101c:	e0bffac5 	stb	r2,-21(fp)
  801020:	e0bffd03 	ldbu	r2,-12(fp)
  801024:	e0bffb05 	stb	r2,-20(fp)
  801028:	e0bffe03 	ldbu	r2,-8(fp)
  80102c:	e0bffb45 	stb	r2,-19(fp)
	return col;
  801030:	e0bffac3 	ldbu	r2,-21(fp)
  801034:	e0bffa05 	stb	r2,-24(fp)
  801038:	e0bffb03 	ldbu	r2,-20(fp)
  80103c:	e0bffa45 	stb	r2,-23(fp)
  801040:	e0bffb43 	ldbu	r2,-19(fp)
  801044:	e0bffa85 	stb	r2,-22(fp)
  801048:	e03fff15 	stw	zero,-4(fp)
  80104c:	e0bffa03 	ldbu	r2,-24(fp)
  801050:	10c03fcc 	andi	r3,r2,255
  801054:	00bfc004 	movi	r2,-256
  801058:	e13fff17 	ldw	r4,-4(fp)
  80105c:	2084703a 	and	r2,r4,r2
  801060:	10c4b03a 	or	r2,r2,r3
  801064:	e0bfff15 	stw	r2,-4(fp)
  801068:	e0bffa43 	ldbu	r2,-23(fp)
  80106c:	10803fcc 	andi	r2,r2,255
  801070:	1006923a 	slli	r3,r2,8
  801074:	00bffff4 	movhi	r2,65535
  801078:	10803fc4 	addi	r2,r2,255
  80107c:	e13fff17 	ldw	r4,-4(fp)
  801080:	2084703a 	and	r2,r4,r2
  801084:	10c4b03a 	or	r2,r2,r3
  801088:	e0bfff15 	stw	r2,-4(fp)
  80108c:	e0bffa83 	ldbu	r2,-22(fp)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1006943a 	slli	r3,r2,16
  801098:	00bfc074 	movhi	r2,65281
  80109c:	10bfffc4 	addi	r2,r2,-1
  8010a0:	e13fff17 	ldw	r4,-4(fp)
  8010a4:	2084703a 	and	r2,r4,r2
  8010a8:	10c4b03a 	or	r2,r2,r3
  8010ac:	e0bfff15 	stw	r2,-4(fp)
  8010b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8010b4:	e037883a 	mov	sp,fp
  8010b8:	df000017 	ldw	fp,0(sp)
  8010bc:	dec00104 	addi	sp,sp,4
  8010c0:	f800283a 	ret

008010c4 <draw_string>:

void draw_string(const char *str, unsigned int x, unsigned int y)
{
  8010c4:	defffb04 	addi	sp,sp,-20
  8010c8:	dfc00415 	stw	ra,16(sp)
  8010cc:	df000315 	stw	fp,12(sp)
  8010d0:	df000304 	addi	fp,sp,12
  8010d4:	e13ffd15 	stw	r4,-12(fp)
  8010d8:	e17ffe15 	stw	r5,-8(fp)
  8010dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_char_buffer_string(char_buffer, str, x, y);
  8010e0:	d1271117 	ldw	r4,-25532(gp)
  8010e4:	e17ffd17 	ldw	r5,-12(fp)
  8010e8:	e1bffe17 	ldw	r6,-8(fp)
  8010ec:	e1ffff17 	ldw	r7,-4(fp)
  8010f0:	080d53c0 	call	80d53c <alt_up_char_buffer_string>
}
  8010f4:	e037883a 	mov	sp,fp
  8010f8:	dfc00117 	ldw	ra,4(sp)
  8010fc:	df000017 	ldw	fp,0(sp)
  801100:	dec00204 	addi	sp,sp,8
  801104:	f800283a 	ret

00801108 <draw_pixel>:

void draw_pixel(int x, int y, colour col)
{
  801108:	defff904 	addi	sp,sp,-28
  80110c:	dfc00615 	stw	ra,24(sp)
  801110:	df000515 	stw	fp,20(sp)
  801114:	df000504 	addi	fp,sp,20
  801118:	e13ffc15 	stw	r4,-16(fp)
  80111c:	e17ffd15 	stw	r5,-12(fp)
  801120:	e1bffe15 	stw	r6,-8(fp)
	if (pixel_buffer == NULL) return;
  801124:	d0a71017 	ldw	r2,-25536(gp)
  801128:	1005003a 	cmpeq	r2,r2,zero
  80112c:	1000141e 	bne	r2,zero,801180 <draw_pixel+0x78>

	int intCol = colourToInt(col);
  801130:	e0fffe17 	ldw	r3,-8(fp)
  801134:	00804034 	movhi	r2,256
  801138:	10bfffc4 	addi	r2,r2,-1
  80113c:	1886703a 	and	r3,r3,r2
  801140:	e03fff15 	stw	zero,-4(fp)
  801144:	00804034 	movhi	r2,256
  801148:	10bfffc4 	addi	r2,r2,-1
  80114c:	1886703a 	and	r3,r3,r2
  801150:	e13fff17 	ldw	r4,-4(fp)
  801154:	20bfc02c 	andhi	r2,r4,65280
  801158:	10c4b03a 	or	r2,r2,r3
  80115c:	e0bfff15 	stw	r2,-4(fp)
  801160:	e13fff17 	ldw	r4,-4(fp)
  801164:	08011940 	call	801194 <colourToInt>
  801168:	e0bffb15 	stw	r2,-20(fp)
	alt_up_pixel_buffer_dma_draw(pixel_buffer, intCol, x, y);
  80116c:	d1271017 	ldw	r4,-25536(gp)
  801170:	e17ffb17 	ldw	r5,-20(fp)
  801174:	e1bffc17 	ldw	r6,-16(fp)
  801178:	e1fffd17 	ldw	r7,-12(fp)
  80117c:	080d6ec0 	call	80d6ec <alt_up_pixel_buffer_dma_draw>
}
  801180:	e037883a 	mov	sp,fp
  801184:	dfc00117 	ldw	ra,4(sp)
  801188:	df000017 	ldw	fp,0(sp)
  80118c:	dec00204 	addi	sp,sp,8
  801190:	f800283a 	ret

00801194 <colourToInt>:

int colourToInt(colour col)
{
  801194:	defffa04 	addi	sp,sp,-24
  801198:	df000515 	stw	fp,20(sp)
  80119c:	df000504 	addi	fp,sp,20
  8011a0:	e13fff15 	stw	r4,-4(fp)
	int col_val = 0;
  8011a4:	e03ffe15 	stw	zero,-8(fp)
	int r = (int) col.r;
  8011a8:	e0bfff03 	ldbu	r2,-4(fp)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	e0bffd15 	stw	r2,-12(fp)
	int g = (int) col.g;
  8011b4:	e0bfff43 	ldbu	r2,-3(fp)
  8011b8:	10803fcc 	andi	r2,r2,255
  8011bc:	e0bffc15 	stw	r2,-16(fp)
	int b = (int) col.b;
  8011c0:	e0bfff83 	ldbu	r2,-2(fp)
  8011c4:	10803fcc 	andi	r2,r2,255
  8011c8:	e0bffb15 	stw	r2,-20(fp)

	col_val = (r << 11) | ((g & 0x003F) << 5) | (b & 0x001F);
  8011cc:	e0bffd17 	ldw	r2,-12(fp)
  8011d0:	100692fa 	slli	r3,r2,11
  8011d4:	e0bffc17 	ldw	r2,-16(fp)
  8011d8:	10800fcc 	andi	r2,r2,63
  8011dc:	1004917a 	slli	r2,r2,5
  8011e0:	1886b03a 	or	r3,r3,r2
  8011e4:	e0bffb17 	ldw	r2,-20(fp)
  8011e8:	108007cc 	andi	r2,r2,31
  8011ec:	1884b03a 	or	r2,r3,r2
  8011f0:	e0bffe15 	stw	r2,-8(fp)
	return col_val;
  8011f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8011f8:	e037883a 	mov	sp,fp
  8011fc:	df000017 	ldw	fp,0(sp)
  801200:	dec00104 	addi	sp,sp,4
  801204:	f800283a 	ret

00801208 <intToColour>:

colour intToColour(int col_val)
{
  801208:	defffd04 	addi	sp,sp,-12
  80120c:	df000215 	stw	fp,8(sp)
  801210:	df000204 	addi	fp,sp,8
  801214:	e13fff15 	stw	r4,-4(fp)
	colour col;
	col.r = (col_val & 0xF800) >> 11;
  801218:	e0bfff17 	ldw	r2,-4(fp)
  80121c:	10be000c 	andi	r2,r2,63488
  801220:	1005d2fa 	srai	r2,r2,11
  801224:	e0bffe05 	stb	r2,-8(fp)
	col.g = (col_val & 0x07E0) >> 5;
  801228:	e0bfff17 	ldw	r2,-4(fp)
  80122c:	1081f80c 	andi	r2,r2,2016
  801230:	1005d17a 	srai	r2,r2,5
  801234:	e0bffe45 	stb	r2,-7(fp)
	col.b = (col_val & 0x001F);
  801238:	e0bfff17 	ldw	r2,-4(fp)
  80123c:	108007cc 	andi	r2,r2,31
  801240:	e0bffe85 	stb	r2,-6(fp)
}
  801244:	e037883a 	mov	sp,fp
  801248:	df000017 	ldw	fp,0(sp)
  80124c:	dec00104 	addi	sp,sp,4
  801250:	f800283a 	ret

00801254 <main>:
static alt_u32 ticks_per_sec;
static alt_u32 num_ticks;

static alt_32 update(void *context);

int main(void) {
  801254:	defff604 	addi	sp,sp,-40
  801258:	dfc00915 	stw	ra,36(sp)
  80125c:	df000815 	stw	fp,32(sp)
  801260:	df000804 	addi	fp,sp,32
	init_display();
  801264:	0800d140 	call	800d14 <init_display>
	sdcard_handle *sd_dev = init_sdcard();
  801268:	08014100 	call	801410 <init_sdcard>
  80126c:	e0bffe15 	stw	r2,-8(fp)
	//BitmapHandle* images[NUM_FILES];

	clear_display();
  801270:	0800df80 	call	800df8 <clear_display>

	if (sd_dev == NULL) return 1;
  801274:	e0bffe17 	ldw	r2,-8(fp)
  801278:	1004c03a 	cmpne	r2,r2,zero
  80127c:	1000031e 	bne	r2,zero,80128c <main+0x38>
  801280:	00800044 	movi	r2,1
  801284:	e0bfff15 	stw	r2,-4(fp)
  801288:	00002806 	br	80132c <main+0xd8>

	printf("Card connected.\n");
  80128c:	01002074 	movhi	r4,129
  801290:	21119604 	addi	r4,r4,18008
  801294:	080206c0 	call	80206c <puts>

	int i;
	load_bmp("M1.BMP", &bmp);
  801298:	01002074 	movhi	r4,129
  80129c:	21116804 	addi	r4,r4,17824
  8012a0:	d1671504 	addi	r5,gp,-25516
  8012a4:	08006c40 	call	8006c4 <load_bmp>
	short int ret = loadBackground("BGT.BMP");
  8012a8:	01002074 	movhi	r4,129
  8012ac:	21119a04 	addi	r4,r4,18024
  8012b0:	08001f00 	call	8001f0 <loadBackground>
  8012b4:	e0bffc0d 	sth	r2,-16(fp)

	if (ret < 0) {
  8012b8:	e0bffc0f 	ldh	r2,-16(fp)
  8012bc:	1004403a 	cmpge	r2,r2,zero
  8012c0:	1000041e 	bne	r2,zero,8012d4 <main+0x80>
		printf("Could not load background. Ret: %d\n", ret);
  8012c4:	e17ffc0f 	ldh	r5,-16(fp)
  8012c8:	01002074 	movhi	r4,129
  8012cc:	21119c04 	addi	r4,r4,18032
  8012d0:	0801f540 	call	801f54 <printf>
	}

	int count = 0;
  8012d4:	e03ffb15 	stw	zero,-20(fp)
	int x = 0;
  8012d8:	e03ffa15 	stw	zero,-24(fp)
	int y = 72;
  8012dc:	00801204 	movi	r2,72
  8012e0:	e0bff915 	stw	r2,-28(fp)

	// Draw the background to both buffers.
	drawBackground();
  8012e4:	080037c0 	call	80037c <drawBackground>
	swap_buffers();
  8012e8:	0800dbc0 	call	800dbc <swap_buffers>
	drawBackground();
  8012ec:	080037c0 	call	80037c <drawBackground>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8012f0:	008020b4 	movhi	r2,130
  8012f4:	10a0d004 	addi	r2,r2,-31936
  8012f8:	10800017 	ldw	r2,0(r2)

	ticks_per_sec = alt_ticks_per_second();
  8012fc:	d0a71615 	stw	r2,-25512(gp)
	num_ticks = ticks_per_sec/60;
  801300:	d1271617 	ldw	r4,-25512(gp)
  801304:	01400f04 	movi	r5,60
  801308:	08017a40 	call	8017a4 <__udivsi3>
  80130c:	d0a71715 	stw	r2,-25508(gp)

	alt_alarm *update_alarm;
	alt_alarm_start(update_alarm, num_ticks, update, NULL);
  801310:	d1671717 	ldw	r5,-25508(gp)
  801314:	01802034 	movhi	r6,128
  801318:	3184d104 	addi	r6,r6,4932
  80131c:	e13ff817 	ldw	r4,-32(fp)
  801320:	000f883a 	mov	r7,zero
  801324:	080b0fc0 	call	80b0fc <alt_alarm_start>

	while (true) {
		// Check events here.
	}
  801328:	003fff06 	br	801328 <main+0xd4>
			count = (count > 100000) ? 0 : count + 1;
		}
	}*/

	return 0;
}
  80132c:	e0bfff17 	ldw	r2,-4(fp)
  801330:	e037883a 	mov	sp,fp
  801334:	dfc00117 	ldw	ra,4(sp)
  801338:	df000017 	ldw	fp,0(sp)
  80133c:	dec00204 	addi	sp,sp,8
  801340:	f800283a 	ret

00801344 <update>:

static alt_32 update(void *context)
{
  801344:	defff904 	addi	sp,sp,-28
  801348:	dfc00615 	stw	ra,24(sp)
  80134c:	df000515 	stw	fp,20(sp)
  801350:	df000504 	addi	fp,sp,20
  801354:	e13fff15 	stw	r4,-4(fp)
	static int x = 0;
	int y = 72;
  801358:	00801204 	movi	r2,72
  80135c:	e0bffd15 	stw	r2,-12(fp)
	colour col = { 0x1F, 0x00, 0x1F };
  801360:	008007c4 	movi	r2,31
  801364:	e0bffe05 	stb	r2,-8(fp)
  801368:	e03ffe45 	stb	zero,-7(fp)
  80136c:	008007c4 	movi	r2,31
  801370:	e0bffe85 	stb	r2,-6(fp)

	printf("In update.\n");
  801374:	01002074 	movhi	r4,129
  801378:	2111a504 	addi	r4,r4,18068
  80137c:	080206c0 	call	80206c <puts>
	if (x > 320)
  801380:	d0a71417 	ldw	r2,-25520(gp)
  801384:	10805050 	cmplti	r2,r2,321
  801388:	1000021e 	bne	r2,zero,801394 <update+0x50>
	{
		x = 0;
  80138c:	d0271415 	stw	zero,-25520(gp)
  801390:	00000a06 	br	8013bc <update+0x78>
	}
	else
	{
		drawBackgroundSection(x-1, y, x, y + bmp->bmp_info_header->height);
  801394:	d0a71417 	ldw	r2,-25520(gp)
  801398:	113fffc4 	addi	r4,r2,-1
  80139c:	d1a71417 	ldw	r6,-25520(gp)
  8013a0:	d0a71517 	ldw	r2,-25516(gp)
  8013a4:	10800117 	ldw	r2,4(r2)
  8013a8:	10c00217 	ldw	r3,8(r2)
  8013ac:	e0bffd17 	ldw	r2,-12(fp)
  8013b0:	188f883a 	add	r7,r3,r2
  8013b4:	e17ffd17 	ldw	r5,-12(fp)
  8013b8:	08003b40 	call	8003b4 <drawBackgroundSection>
	}

	draw_bmp(bmp, x, y, true, col);
  8013bc:	d1271517 	ldw	r4,-25516(gp)
  8013c0:	d1671417 	ldw	r5,-25520(gp)
  8013c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8013c8:	d880000d 	sth	r2,0(sp)
  8013cc:	e0bffe83 	ldbu	r2,-6(fp)
  8013d0:	d8800085 	stb	r2,2(sp)
  8013d4:	e1bffd17 	ldw	r6,-12(fp)
  8013d8:	01c00044 	movi	r7,1
  8013dc:	08004b80 	call	8004b8 <draw_bmp>

	swap_buffers();
  8013e0:	0800dbc0 	call	800dbc <swap_buffers>

	alt_alarm *update_alarm;
	alt_alarm_start(update_alarm, num_ticks, update, NULL);
  8013e4:	d1671717 	ldw	r5,-25508(gp)
  8013e8:	01802034 	movhi	r6,128
  8013ec:	3184d104 	addi	r6,r6,4932
  8013f0:	e13ffc17 	ldw	r4,-16(fp)
  8013f4:	000f883a 	mov	r7,zero
  8013f8:	080b0fc0 	call	80b0fc <alt_alarm_start>
}
  8013fc:	e037883a 	mov	sp,fp
  801400:	dfc00117 	ldw	ra,4(sp)
  801404:	df000017 	ldw	fp,0(sp)
  801408:	dec00204 	addi	sp,sp,8
  80140c:	f800283a 	ret

00801410 <init_sdcard>:
static short int sdcard_connected;

short int checkConnectedAndFat();

sdcard_handle* init_sdcard()
{
  801410:	defffc04 	addi	sp,sp,-16
  801414:	dfc00315 	stw	ra,12(sp)
  801418:	df000215 	stw	fp,8(sp)
  80141c:	df000204 	addi	fp,sp,8
	sdcard_handle *device_reference = NULL;
  801420:	e03ffe15 	stw	zero,-8(fp)
	device_reference = alt_up_sd_card_open_dev(SDCARD_INTERFACE_NAME);
  801424:	01002074 	movhi	r4,129
  801428:	2111a804 	addi	r4,r4,18080
  80142c:	08119bc0 	call	8119bc <alt_up_sd_card_open_dev>
  801430:	e0bffe15 	stw	r2,-8(fp)

	if (!(sdcard_connected = card_connected()))
  801434:	08014bc0 	call	8014bc <card_connected>
  801438:	d0a7188d 	sth	r2,-25502(gp)
  80143c:	d0a7188b 	ldhu	r2,-25502(gp)
  801440:	10bfffcc 	andi	r2,r2,65535
  801444:	10a0001c 	xori	r2,r2,32768
  801448:	10a00004 	addi	r2,r2,-32768
  80144c:	1004c03a 	cmpne	r2,r2,zero
  801450:	1000051e 	bne	r2,zero,801468 <init_sdcard+0x58>
	{
		printf("Error: sd card not connected.\n");
  801454:	01002074 	movhi	r4,129
  801458:	2111ae04 	addi	r4,r4,18104
  80145c:	080206c0 	call	80206c <puts>
		return NULL;
  801460:	e03fff15 	stw	zero,-4(fp)
  801464:	00000f06 	br	8014a4 <init_sdcard+0x94>
	}

	if (!(FAT16 = is_FAT16()))
  801468:	08014f00 	call	8014f0 <is_FAT16>
  80146c:	d0a7180d 	sth	r2,-25504(gp)
  801470:	d0a7180b 	ldhu	r2,-25504(gp)
  801474:	10bfffcc 	andi	r2,r2,65535
  801478:	10a0001c 	xori	r2,r2,32768
  80147c:	10a00004 	addi	r2,r2,-32768
  801480:	1004c03a 	cmpne	r2,r2,zero
  801484:	1000051e 	bne	r2,zero,80149c <init_sdcard+0x8c>
	{
		printf("Error: Unknown file system.\n");
  801488:	01002074 	movhi	r4,129
  80148c:	2111b604 	addi	r4,r4,18136
  801490:	080206c0 	call	80206c <puts>
		return NULL;
  801494:	e03fff15 	stw	zero,-4(fp)
  801498:	00000206 	br	8014a4 <init_sdcard+0x94>
	}

	return device_reference;
  80149c:	e0bffe17 	ldw	r2,-8(fp)
  8014a0:	e0bfff15 	stw	r2,-4(fp)
  8014a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8014a8:	e037883a 	mov	sp,fp
  8014ac:	dfc00117 	ldw	ra,4(sp)
  8014b0:	df000017 	ldw	fp,0(sp)
  8014b4:	dec00204 	addi	sp,sp,8
  8014b8:	f800283a 	ret

008014bc <card_connected>:

short int card_connected()
{
  8014bc:	defffe04 	addi	sp,sp,-8
  8014c0:	dfc00115 	stw	ra,4(sp)
  8014c4:	df000015 	stw	fp,0(sp)
  8014c8:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
  8014cc:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  8014d0:	10bfffcc 	andi	r2,r2,65535
  8014d4:	10a0001c 	xori	r2,r2,32768
  8014d8:	10a00004 	addi	r2,r2,-32768
}
  8014dc:	e037883a 	mov	sp,fp
  8014e0:	dfc00117 	ldw	ra,4(sp)
  8014e4:	df000017 	ldw	fp,0(sp)
  8014e8:	dec00204 	addi	sp,sp,8
  8014ec:	f800283a 	ret

008014f0 <is_FAT16>:

short int is_FAT16()
{
  8014f0:	defffe04 	addi	sp,sp,-8
  8014f4:	dfc00115 	stw	ra,4(sp)
  8014f8:	df000015 	stw	fp,0(sp)
  8014fc:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
  801500:	0811b480 	call	811b48 <alt_up_sd_card_is_FAT16>
  801504:	10bfffcc 	andi	r2,r2,65535
  801508:	10a0001c 	xori	r2,r2,32768
  80150c:	10a00004 	addi	r2,r2,-32768
}
  801510:	e037883a 	mov	sp,fp
  801514:	dfc00117 	ldw	ra,4(sp)
  801518:	df000017 	ldw	fp,0(sp)
  80151c:	dec00204 	addi	sp,sp,8
  801520:	f800283a 	ret

00801524 <open_file>:

file_handle open_file(char *filename, bool create)
{
  801524:	defffb04 	addi	sp,sp,-20
  801528:	dfc00415 	stw	ra,16(sp)
  80152c:	df000315 	stw	fp,12(sp)
  801530:	df000304 	addi	fp,sp,12
  801534:	e13ffd15 	stw	r4,-12(fp)
  801538:	e17ffe15 	stw	r5,-8(fp)
	if (!checkConnectedAndFat()) return -2;
  80153c:	08015f40 	call	8015f4 <checkConnectedAndFat>
  801540:	10bfffcc 	andi	r2,r2,65535
  801544:	10a0001c 	xori	r2,r2,32768
  801548:	10a00004 	addi	r2,r2,-32768
  80154c:	1004c03a 	cmpne	r2,r2,zero
  801550:	1000031e 	bne	r2,zero,801560 <open_file+0x3c>
  801554:	00bfff84 	movi	r2,-2
  801558:	e0bfff15 	stw	r2,-4(fp)
  80155c:	00000706 	br	80157c <open_file+0x58>

	return alt_up_sd_card_fopen(filename, create);
  801560:	e13ffd17 	ldw	r4,-12(fp)
  801564:	e17ffe17 	ldw	r5,-8(fp)
  801568:	08120400 	call	812040 <alt_up_sd_card_fopen>
  80156c:	10bfffcc 	andi	r2,r2,65535
  801570:	10a0001c 	xori	r2,r2,32768
  801574:	10a00004 	addi	r2,r2,-32768
  801578:	e0bfff15 	stw	r2,-4(fp)
  80157c:	e0bfff17 	ldw	r2,-4(fp)
}
  801580:	e037883a 	mov	sp,fp
  801584:	dfc00117 	ldw	ra,4(sp)
  801588:	df000017 	ldw	fp,0(sp)
  80158c:	dec00204 	addi	sp,sp,8
  801590:	f800283a 	ret

00801594 <read_file>:

byte read_file(file_handle file)
{
  801594:	defffc04 	addi	sp,sp,-16
  801598:	dfc00315 	stw	ra,12(sp)
  80159c:	df000215 	stw	fp,8(sp)
  8015a0:	df000204 	addi	fp,sp,8
  8015a4:	e13ffe0d 	sth	r4,-8(fp)
	if (!checkConnectedAndFat()) return -2;
  8015a8:	08015f40 	call	8015f4 <checkConnectedAndFat>
  8015ac:	10bfffcc 	andi	r2,r2,65535
  8015b0:	10a0001c 	xori	r2,r2,32768
  8015b4:	10a00004 	addi	r2,r2,-32768
  8015b8:	1004c03a 	cmpne	r2,r2,zero
  8015bc:	1000031e 	bne	r2,zero,8015cc <read_file+0x38>
  8015c0:	00803f84 	movi	r2,254
  8015c4:	e0bfff15 	stw	r2,-4(fp)
  8015c8:	00000406 	br	8015dc <read_file+0x48>

	return alt_up_sd_card_read(file);
  8015cc:	e13ffe0f 	ldh	r4,-8(fp)
  8015d0:	08125040 	call	812504 <alt_up_sd_card_read>
  8015d4:	10803fcc 	andi	r2,r2,255
  8015d8:	e0bfff15 	stw	r2,-4(fp)
  8015dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8015e0:	e037883a 	mov	sp,fp
  8015e4:	dfc00117 	ldw	ra,4(sp)
  8015e8:	df000017 	ldw	fp,0(sp)
  8015ec:	dec00204 	addi	sp,sp,8
  8015f0:	f800283a 	ret

008015f4 <checkConnectedAndFat>:

short int checkConnectedAndFat()
{
  8015f4:	defffd04 	addi	sp,sp,-12
  8015f8:	dfc00215 	stw	ra,8(sp)
  8015fc:	df000115 	stw	fp,4(sp)
  801600:	df000104 	addi	fp,sp,4
	if (!sdcard_connected || !FAT16)
  801604:	d0a7188b 	ldhu	r2,-25502(gp)
  801608:	10bfffcc 	andi	r2,r2,65535
  80160c:	10a0001c 	xori	r2,r2,32768
  801610:	10a00004 	addi	r2,r2,-32768
  801614:	1005003a 	cmpeq	r2,r2,zero
  801618:	1000061e 	bne	r2,zero,801634 <checkConnectedAndFat+0x40>
  80161c:	d0a7180b 	ldhu	r2,-25504(gp)
  801620:	10bfffcc 	andi	r2,r2,65535
  801624:	10a0001c 	xori	r2,r2,32768
  801628:	10a00004 	addi	r2,r2,-32768
  80162c:	1004c03a 	cmpne	r2,r2,zero
  801630:	1000051e 	bne	r2,zero,801648 <checkConnectedAndFat+0x54>
	{
		printf("Error: Cannot open file: SD Card not connected properly.\n");
  801634:	01002074 	movhi	r4,129
  801638:	2111bd04 	addi	r4,r4,18164
  80163c:	080206c0 	call	80206c <puts>
		return 0;
  801640:	e03fff15 	stw	zero,-4(fp)
  801644:	00000206 	br	801650 <checkConnectedAndFat+0x5c>
	}
	else
	{
		return 1;
  801648:	00800044 	movi	r2,1
  80164c:	e0bfff15 	stw	r2,-4(fp)
  801650:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  801654:	e037883a 	mov	sp,fp
  801658:	dfc00117 	ldw	ra,4(sp)
  80165c:	df000017 	ldw	fp,0(sp)
  801660:	dec00204 	addi	sp,sp,8
  801664:	f800283a 	ret

00801668 <udivmodsi4>:
  801668:	29001b2e 	bgeu	r5,r4,8016d8 <udivmodsi4+0x70>
  80166c:	28001a16 	blt	r5,zero,8016d8 <udivmodsi4+0x70>
  801670:	00800044 	movi	r2,1
  801674:	0007883a 	mov	r3,zero
  801678:	01c007c4 	movi	r7,31
  80167c:	00000306 	br	80168c <udivmodsi4+0x24>
  801680:	19c01326 	beq	r3,r7,8016d0 <udivmodsi4+0x68>
  801684:	18c00044 	addi	r3,r3,1
  801688:	28000416 	blt	r5,zero,80169c <udivmodsi4+0x34>
  80168c:	294b883a 	add	r5,r5,r5
  801690:	1085883a 	add	r2,r2,r2
  801694:	293ffa36 	bltu	r5,r4,801680 <udivmodsi4+0x18>
  801698:	10000d26 	beq	r2,zero,8016d0 <udivmodsi4+0x68>
  80169c:	0007883a 	mov	r3,zero
  8016a0:	21400236 	bltu	r4,r5,8016ac <udivmodsi4+0x44>
  8016a4:	2149c83a 	sub	r4,r4,r5
  8016a8:	1886b03a 	or	r3,r3,r2
  8016ac:	1004d07a 	srli	r2,r2,1
  8016b0:	280ad07a 	srli	r5,r5,1
  8016b4:	103ffa1e 	bne	r2,zero,8016a0 <udivmodsi4+0x38>
  8016b8:	30000226 	beq	r6,zero,8016c4 <udivmodsi4+0x5c>
  8016bc:	2005883a 	mov	r2,r4
  8016c0:	f800283a 	ret
  8016c4:	1809883a 	mov	r4,r3
  8016c8:	2005883a 	mov	r2,r4
  8016cc:	f800283a 	ret
  8016d0:	0007883a 	mov	r3,zero
  8016d4:	003ff806 	br	8016b8 <udivmodsi4+0x50>
  8016d8:	00800044 	movi	r2,1
  8016dc:	0007883a 	mov	r3,zero
  8016e0:	003fef06 	br	8016a0 <udivmodsi4+0x38>

008016e4 <__divsi3>:
  8016e4:	defffe04 	addi	sp,sp,-8
  8016e8:	dc000015 	stw	r16,0(sp)
  8016ec:	dfc00115 	stw	ra,4(sp)
  8016f0:	0021883a 	mov	r16,zero
  8016f4:	20000c16 	blt	r4,zero,801728 <__divsi3+0x44>
  8016f8:	000d883a 	mov	r6,zero
  8016fc:	28000e16 	blt	r5,zero,801738 <__divsi3+0x54>
  801700:	08016680 	call	801668 <udivmodsi4>
  801704:	1007883a 	mov	r3,r2
  801708:	8005003a 	cmpeq	r2,r16,zero
  80170c:	1000011e 	bne	r2,zero,801714 <__divsi3+0x30>
  801710:	00c7c83a 	sub	r3,zero,r3
  801714:	1805883a 	mov	r2,r3
  801718:	dfc00117 	ldw	ra,4(sp)
  80171c:	dc000017 	ldw	r16,0(sp)
  801720:	dec00204 	addi	sp,sp,8
  801724:	f800283a 	ret
  801728:	0109c83a 	sub	r4,zero,r4
  80172c:	04000044 	movi	r16,1
  801730:	000d883a 	mov	r6,zero
  801734:	283ff20e 	bge	r5,zero,801700 <__divsi3+0x1c>
  801738:	014bc83a 	sub	r5,zero,r5
  80173c:	8021003a 	cmpeq	r16,r16,zero
  801740:	003fef06 	br	801700 <__divsi3+0x1c>

00801744 <__modsi3>:
  801744:	deffff04 	addi	sp,sp,-4
  801748:	dfc00015 	stw	ra,0(sp)
  80174c:	01800044 	movi	r6,1
  801750:	2807883a 	mov	r3,r5
  801754:	20000416 	blt	r4,zero,801768 <__modsi3+0x24>
  801758:	28000c16 	blt	r5,zero,80178c <__modsi3+0x48>
  80175c:	dfc00017 	ldw	ra,0(sp)
  801760:	dec00104 	addi	sp,sp,4
  801764:	08016681 	jmpi	801668 <udivmodsi4>
  801768:	0109c83a 	sub	r4,zero,r4
  80176c:	28000b16 	blt	r5,zero,80179c <__modsi3+0x58>
  801770:	180b883a 	mov	r5,r3
  801774:	01800044 	movi	r6,1
  801778:	08016680 	call	801668 <udivmodsi4>
  80177c:	0085c83a 	sub	r2,zero,r2
  801780:	dfc00017 	ldw	ra,0(sp)
  801784:	dec00104 	addi	sp,sp,4
  801788:	f800283a 	ret
  80178c:	014bc83a 	sub	r5,zero,r5
  801790:	dfc00017 	ldw	ra,0(sp)
  801794:	dec00104 	addi	sp,sp,4
  801798:	08016681 	jmpi	801668 <udivmodsi4>
  80179c:	0147c83a 	sub	r3,zero,r5
  8017a0:	003ff306 	br	801770 <__modsi3+0x2c>

008017a4 <__udivsi3>:
  8017a4:	000d883a 	mov	r6,zero
  8017a8:	08016681 	jmpi	801668 <udivmodsi4>

008017ac <__umodsi3>:
  8017ac:	01800044 	movi	r6,1
  8017b0:	08016681 	jmpi	801668 <udivmodsi4>

008017b4 <__mulsi3>:
  8017b4:	20000a26 	beq	r4,zero,8017e0 <__mulsi3+0x2c>
  8017b8:	0007883a 	mov	r3,zero
  8017bc:	2080004c 	andi	r2,r4,1
  8017c0:	1005003a 	cmpeq	r2,r2,zero
  8017c4:	2008d07a 	srli	r4,r4,1
  8017c8:	1000011e 	bne	r2,zero,8017d0 <__mulsi3+0x1c>
  8017cc:	1947883a 	add	r3,r3,r5
  8017d0:	294b883a 	add	r5,r5,r5
  8017d4:	203ff91e 	bne	r4,zero,8017bc <__mulsi3+0x8>
  8017d8:	1805883a 	mov	r2,r3
  8017dc:	f800283a 	ret
  8017e0:	0007883a 	mov	r3,zero
  8017e4:	1805883a 	mov	r2,r3
  8017e8:	f800283a 	ret

008017ec <free>:
  8017ec:	00802074 	movhi	r2,129
  8017f0:	1099af04 	addi	r2,r2,26300
  8017f4:	200b883a 	mov	r5,r4
  8017f8:	11000017 	ldw	r4,0(r2)
  8017fc:	08060281 	jmpi	806028 <_free_r>

00801800 <malloc>:
  801800:	00802074 	movhi	r2,129
  801804:	1099af04 	addi	r2,r2,26300
  801808:	200b883a 	mov	r5,r4
  80180c:	11000017 	ldw	r4,0(r2)
  801810:	08018141 	jmpi	801814 <_malloc_r>

00801814 <_malloc_r>:
  801814:	defff604 	addi	sp,sp,-40
  801818:	28c002c4 	addi	r3,r5,11
  80181c:	00800584 	movi	r2,22
  801820:	dc800215 	stw	r18,8(sp)
  801824:	dfc00915 	stw	ra,36(sp)
  801828:	df000815 	stw	fp,32(sp)
  80182c:	ddc00715 	stw	r23,28(sp)
  801830:	dd800615 	stw	r22,24(sp)
  801834:	dd400515 	stw	r21,20(sp)
  801838:	dd000415 	stw	r20,16(sp)
  80183c:	dcc00315 	stw	r19,12(sp)
  801840:	dc400115 	stw	r17,4(sp)
  801844:	dc000015 	stw	r16,0(sp)
  801848:	2025883a 	mov	r18,r4
  80184c:	10c01236 	bltu	r2,r3,801898 <_malloc_r+0x84>
  801850:	04400404 	movi	r17,16
  801854:	8940142e 	bgeu	r17,r5,8018a8 <_malloc_r+0x94>
  801858:	00800304 	movi	r2,12
  80185c:	0007883a 	mov	r3,zero
  801860:	90800015 	stw	r2,0(r18)
  801864:	1805883a 	mov	r2,r3
  801868:	dfc00917 	ldw	ra,36(sp)
  80186c:	df000817 	ldw	fp,32(sp)
  801870:	ddc00717 	ldw	r23,28(sp)
  801874:	dd800617 	ldw	r22,24(sp)
  801878:	dd400517 	ldw	r21,20(sp)
  80187c:	dd000417 	ldw	r20,16(sp)
  801880:	dcc00317 	ldw	r19,12(sp)
  801884:	dc800217 	ldw	r18,8(sp)
  801888:	dc400117 	ldw	r17,4(sp)
  80188c:	dc000017 	ldw	r16,0(sp)
  801890:	dec00a04 	addi	sp,sp,40
  801894:	f800283a 	ret
  801898:	00bffe04 	movi	r2,-8
  80189c:	18a2703a 	and	r17,r3,r2
  8018a0:	883fed16 	blt	r17,zero,801858 <_malloc_r+0x44>
  8018a4:	897fec36 	bltu	r17,r5,801858 <_malloc_r+0x44>
  8018a8:	9009883a 	mov	r4,r18
  8018ac:	080b8e40 	call	80b8e4 <__malloc_lock>
  8018b0:	00807dc4 	movi	r2,503
  8018b4:	14402b2e 	bgeu	r2,r17,801964 <_malloc_r+0x150>
  8018b8:	8806d27a 	srli	r3,r17,9
  8018bc:	18003f1e 	bne	r3,zero,8019bc <_malloc_r+0x1a8>
  8018c0:	880cd0fa 	srli	r6,r17,3
  8018c4:	300490fa 	slli	r2,r6,3
  8018c8:	02c02074 	movhi	r11,129
  8018cc:	5ad2e904 	addi	r11,r11,19364
  8018d0:	12cb883a 	add	r5,r2,r11
  8018d4:	2c000317 	ldw	r16,12(r5)
  8018d8:	580f883a 	mov	r7,r11
  8018dc:	2c00041e 	bne	r5,r16,8018f0 <_malloc_r+0xdc>
  8018e0:	00000a06 	br	80190c <_malloc_r+0xf8>
  8018e4:	1800860e 	bge	r3,zero,801b00 <_malloc_r+0x2ec>
  8018e8:	84000317 	ldw	r16,12(r16)
  8018ec:	2c000726 	beq	r5,r16,80190c <_malloc_r+0xf8>
  8018f0:	80800117 	ldw	r2,4(r16)
  8018f4:	00ffff04 	movi	r3,-4
  8018f8:	10c8703a 	and	r4,r2,r3
  8018fc:	2447c83a 	sub	r3,r4,r17
  801900:	008003c4 	movi	r2,15
  801904:	10fff70e 	bge	r2,r3,8018e4 <_malloc_r+0xd0>
  801908:	31bfffc4 	addi	r6,r6,-1
  80190c:	32400044 	addi	r9,r6,1
  801910:	02802074 	movhi	r10,129
  801914:	5292eb04 	addi	r10,r10,19372
  801918:	54000217 	ldw	r16,8(r10)
  80191c:	8280a026 	beq	r16,r10,801ba0 <_malloc_r+0x38c>
  801920:	80800117 	ldw	r2,4(r16)
  801924:	00ffff04 	movi	r3,-4
  801928:	10ca703a 	and	r5,r2,r3
  80192c:	2c4dc83a 	sub	r6,r5,r17
  801930:	008003c4 	movi	r2,15
  801934:	11808316 	blt	r2,r6,801b44 <_malloc_r+0x330>
  801938:	52800315 	stw	r10,12(r10)
  80193c:	52800215 	stw	r10,8(r10)
  801940:	30002916 	blt	r6,zero,8019e8 <_malloc_r+0x1d4>
  801944:	8147883a 	add	r3,r16,r5
  801948:	18800117 	ldw	r2,4(r3)
  80194c:	9009883a 	mov	r4,r18
  801950:	10800054 	ori	r2,r2,1
  801954:	18800115 	stw	r2,4(r3)
  801958:	080b9040 	call	80b904 <__malloc_unlock>
  80195c:	80c00204 	addi	r3,r16,8
  801960:	003fc006 	br	801864 <_malloc_r+0x50>
  801964:	02c02074 	movhi	r11,129
  801968:	5ad2e904 	addi	r11,r11,19364
  80196c:	8ac5883a 	add	r2,r17,r11
  801970:	14000317 	ldw	r16,12(r2)
  801974:	580f883a 	mov	r7,r11
  801978:	8806d0fa 	srli	r3,r17,3
  80197c:	14006c26 	beq	r2,r16,801b30 <_malloc_r+0x31c>
  801980:	80c00117 	ldw	r3,4(r16)
  801984:	00bfff04 	movi	r2,-4
  801988:	81800317 	ldw	r6,12(r16)
  80198c:	1886703a 	and	r3,r3,r2
  801990:	80c7883a 	add	r3,r16,r3
  801994:	18800117 	ldw	r2,4(r3)
  801998:	81400217 	ldw	r5,8(r16)
  80199c:	9009883a 	mov	r4,r18
  8019a0:	10800054 	ori	r2,r2,1
  8019a4:	18800115 	stw	r2,4(r3)
  8019a8:	31400215 	stw	r5,8(r6)
  8019ac:	29800315 	stw	r6,12(r5)
  8019b0:	080b9040 	call	80b904 <__malloc_unlock>
  8019b4:	80c00204 	addi	r3,r16,8
  8019b8:	003faa06 	br	801864 <_malloc_r+0x50>
  8019bc:	00800104 	movi	r2,4
  8019c0:	10c0052e 	bgeu	r2,r3,8019d8 <_malloc_r+0x1c4>
  8019c4:	00800504 	movi	r2,20
  8019c8:	10c07836 	bltu	r2,r3,801bac <_malloc_r+0x398>
  8019cc:	198016c4 	addi	r6,r3,91
  8019d0:	300490fa 	slli	r2,r6,3
  8019d4:	003fbc06 	br	8018c8 <_malloc_r+0xb4>
  8019d8:	8804d1ba 	srli	r2,r17,6
  8019dc:	11800e04 	addi	r6,r2,56
  8019e0:	300490fa 	slli	r2,r6,3
  8019e4:	003fb806 	br	8018c8 <_malloc_r+0xb4>
  8019e8:	00807fc4 	movi	r2,511
  8019ec:	1140bb36 	bltu	r2,r5,801cdc <_malloc_r+0x4c8>
  8019f0:	2806d0fa 	srli	r3,r5,3
  8019f4:	573ffe04 	addi	fp,r10,-8
  8019f8:	00800044 	movi	r2,1
  8019fc:	180890fa 	slli	r4,r3,3
  801a00:	1807d0ba 	srai	r3,r3,2
  801a04:	e1c00117 	ldw	r7,4(fp)
  801a08:	5909883a 	add	r4,r11,r4
  801a0c:	21400217 	ldw	r5,8(r4)
  801a10:	10c4983a 	sll	r2,r2,r3
  801a14:	81000315 	stw	r4,12(r16)
  801a18:	81400215 	stw	r5,8(r16)
  801a1c:	388eb03a 	or	r7,r7,r2
  801a20:	2c000315 	stw	r16,12(r5)
  801a24:	24000215 	stw	r16,8(r4)
  801a28:	e1c00115 	stw	r7,4(fp)
  801a2c:	4807883a 	mov	r3,r9
  801a30:	4800cd16 	blt	r9,zero,801d68 <_malloc_r+0x554>
  801a34:	1807d0ba 	srai	r3,r3,2
  801a38:	00800044 	movi	r2,1
  801a3c:	10c8983a 	sll	r4,r2,r3
  801a40:	39004436 	bltu	r7,r4,801b54 <_malloc_r+0x340>
  801a44:	21c4703a 	and	r2,r4,r7
  801a48:	10000a1e 	bne	r2,zero,801a74 <_malloc_r+0x260>
  801a4c:	2109883a 	add	r4,r4,r4
  801a50:	00bfff04 	movi	r2,-4
  801a54:	4884703a 	and	r2,r9,r2
  801a58:	3906703a 	and	r3,r7,r4
  801a5c:	12400104 	addi	r9,r2,4
  801a60:	1800041e 	bne	r3,zero,801a74 <_malloc_r+0x260>
  801a64:	2109883a 	add	r4,r4,r4
  801a68:	3904703a 	and	r2,r7,r4
  801a6c:	4a400104 	addi	r9,r9,4
  801a70:	103ffc26 	beq	r2,zero,801a64 <_malloc_r+0x250>
  801a74:	480490fa 	slli	r2,r9,3
  801a78:	4819883a 	mov	r12,r9
  801a7c:	023fff04 	movi	r8,-4
  801a80:	589b883a 	add	r13,r11,r2
  801a84:	6807883a 	mov	r3,r13
  801a88:	014003c4 	movi	r5,15
  801a8c:	1c000317 	ldw	r16,12(r3)
  801a90:	1c00041e 	bne	r3,r16,801aa4 <_malloc_r+0x290>
  801a94:	0000a706 	br	801d34 <_malloc_r+0x520>
  801a98:	3000ab0e 	bge	r6,zero,801d48 <_malloc_r+0x534>
  801a9c:	84000317 	ldw	r16,12(r16)
  801aa0:	1c00a426 	beq	r3,r16,801d34 <_malloc_r+0x520>
  801aa4:	80800117 	ldw	r2,4(r16)
  801aa8:	1204703a 	and	r2,r2,r8
  801aac:	144dc83a 	sub	r6,r2,r17
  801ab0:	29bff90e 	bge	r5,r6,801a98 <_malloc_r+0x284>
  801ab4:	81000317 	ldw	r4,12(r16)
  801ab8:	80c00217 	ldw	r3,8(r16)
  801abc:	89400054 	ori	r5,r17,1
  801ac0:	8445883a 	add	r2,r16,r17
  801ac4:	20c00215 	stw	r3,8(r4)
  801ac8:	19000315 	stw	r4,12(r3)
  801acc:	81400115 	stw	r5,4(r16)
  801ad0:	1187883a 	add	r3,r2,r6
  801ad4:	31000054 	ori	r4,r6,1
  801ad8:	50800315 	stw	r2,12(r10)
  801adc:	50800215 	stw	r2,8(r10)
  801ae0:	19800015 	stw	r6,0(r3)
  801ae4:	11000115 	stw	r4,4(r2)
  801ae8:	12800215 	stw	r10,8(r2)
  801aec:	12800315 	stw	r10,12(r2)
  801af0:	9009883a 	mov	r4,r18
  801af4:	080b9040 	call	80b904 <__malloc_unlock>
  801af8:	80c00204 	addi	r3,r16,8
  801afc:	003f5906 	br	801864 <_malloc_r+0x50>
  801b00:	8109883a 	add	r4,r16,r4
  801b04:	20800117 	ldw	r2,4(r4)
  801b08:	80c00217 	ldw	r3,8(r16)
  801b0c:	81400317 	ldw	r5,12(r16)
  801b10:	10800054 	ori	r2,r2,1
  801b14:	20800115 	stw	r2,4(r4)
  801b18:	28c00215 	stw	r3,8(r5)
  801b1c:	19400315 	stw	r5,12(r3)
  801b20:	9009883a 	mov	r4,r18
  801b24:	080b9040 	call	80b904 <__malloc_unlock>
  801b28:	80c00204 	addi	r3,r16,8
  801b2c:	003f4d06 	br	801864 <_malloc_r+0x50>
  801b30:	80800204 	addi	r2,r16,8
  801b34:	14000317 	ldw	r16,12(r2)
  801b38:	143f911e 	bne	r2,r16,801980 <_malloc_r+0x16c>
  801b3c:	1a400084 	addi	r9,r3,2
  801b40:	003f7306 	br	801910 <_malloc_r+0xfc>
  801b44:	88c00054 	ori	r3,r17,1
  801b48:	8445883a 	add	r2,r16,r17
  801b4c:	80c00115 	stw	r3,4(r16)
  801b50:	003fdf06 	br	801ad0 <_malloc_r+0x2bc>
  801b54:	e4000217 	ldw	r16,8(fp)
  801b58:	00bfff04 	movi	r2,-4
  801b5c:	80c00117 	ldw	r3,4(r16)
  801b60:	802d883a 	mov	r22,r16
  801b64:	18aa703a 	and	r21,r3,r2
  801b68:	ac401636 	bltu	r21,r17,801bc4 <_malloc_r+0x3b0>
  801b6c:	ac49c83a 	sub	r4,r21,r17
  801b70:	008003c4 	movi	r2,15
  801b74:	1100130e 	bge	r2,r4,801bc4 <_malloc_r+0x3b0>
  801b78:	88800054 	ori	r2,r17,1
  801b7c:	8447883a 	add	r3,r16,r17
  801b80:	80800115 	stw	r2,4(r16)
  801b84:	20800054 	ori	r2,r4,1
  801b88:	18800115 	stw	r2,4(r3)
  801b8c:	e0c00215 	stw	r3,8(fp)
  801b90:	9009883a 	mov	r4,r18
  801b94:	080b9040 	call	80b904 <__malloc_unlock>
  801b98:	80c00204 	addi	r3,r16,8
  801b9c:	003f3106 	br	801864 <_malloc_r+0x50>
  801ba0:	39c00117 	ldw	r7,4(r7)
  801ba4:	573ffe04 	addi	fp,r10,-8
  801ba8:	003fa006 	br	801a2c <_malloc_r+0x218>
  801bac:	00801504 	movi	r2,84
  801bb0:	10c06736 	bltu	r2,r3,801d50 <_malloc_r+0x53c>
  801bb4:	8804d33a 	srli	r2,r17,12
  801bb8:	11801b84 	addi	r6,r2,110
  801bbc:	300490fa 	slli	r2,r6,3
  801bc0:	003f4106 	br	8018c8 <_malloc_r+0xb4>
  801bc4:	d0a71917 	ldw	r2,-25500(gp)
  801bc8:	d0e00117 	ldw	r3,-32764(gp)
  801bcc:	053fffc4 	movi	r20,-1
  801bd0:	10800404 	addi	r2,r2,16
  801bd4:	88a7883a 	add	r19,r17,r2
  801bd8:	1d000326 	beq	r3,r20,801be8 <_malloc_r+0x3d4>
  801bdc:	98c3ffc4 	addi	r3,r19,4095
  801be0:	00bc0004 	movi	r2,-4096
  801be4:	18a6703a 	and	r19,r3,r2
  801be8:	9009883a 	mov	r4,r18
  801bec:	980b883a 	mov	r5,r19
  801bf0:	08020800 	call	802080 <_sbrk_r>
  801bf4:	1009883a 	mov	r4,r2
  801bf8:	15000426 	beq	r2,r20,801c0c <_malloc_r+0x3f8>
  801bfc:	854b883a 	add	r5,r16,r21
  801c00:	1029883a 	mov	r20,r2
  801c04:	11405a2e 	bgeu	r2,r5,801d70 <_malloc_r+0x55c>
  801c08:	87000c26 	beq	r16,fp,801c3c <_malloc_r+0x428>
  801c0c:	e4000217 	ldw	r16,8(fp)
  801c10:	80c00117 	ldw	r3,4(r16)
  801c14:	00bfff04 	movi	r2,-4
  801c18:	1884703a 	and	r2,r3,r2
  801c1c:	14400336 	bltu	r2,r17,801c2c <_malloc_r+0x418>
  801c20:	1449c83a 	sub	r4,r2,r17
  801c24:	008003c4 	movi	r2,15
  801c28:	113fd316 	blt	r2,r4,801b78 <_malloc_r+0x364>
  801c2c:	9009883a 	mov	r4,r18
  801c30:	080b9040 	call	80b904 <__malloc_unlock>
  801c34:	0007883a 	mov	r3,zero
  801c38:	003f0a06 	br	801864 <_malloc_r+0x50>
  801c3c:	05c02174 	movhi	r23,133
  801c40:	bdc1e204 	addi	r23,r23,1928
  801c44:	b8800017 	ldw	r2,0(r23)
  801c48:	988d883a 	add	r6,r19,r2
  801c4c:	b9800015 	stw	r6,0(r23)
  801c50:	d0e00117 	ldw	r3,-32764(gp)
  801c54:	00bfffc4 	movi	r2,-1
  801c58:	18808e26 	beq	r3,r2,801e94 <_malloc_r+0x680>
  801c5c:	2145c83a 	sub	r2,r4,r5
  801c60:	3085883a 	add	r2,r6,r2
  801c64:	b8800015 	stw	r2,0(r23)
  801c68:	20c001cc 	andi	r3,r4,7
  801c6c:	18005f1e 	bne	r3,zero,801dec <_malloc_r+0x5d8>
  801c70:	000b883a 	mov	r5,zero
  801c74:	a4c5883a 	add	r2,r20,r19
  801c78:	1083ffcc 	andi	r2,r2,4095
  801c7c:	00c40004 	movi	r3,4096
  801c80:	1887c83a 	sub	r3,r3,r2
  801c84:	28e7883a 	add	r19,r5,r3
  801c88:	9009883a 	mov	r4,r18
  801c8c:	980b883a 	mov	r5,r19
  801c90:	08020800 	call	802080 <_sbrk_r>
  801c94:	1007883a 	mov	r3,r2
  801c98:	00bfffc4 	movi	r2,-1
  801c9c:	18807a26 	beq	r3,r2,801e88 <_malloc_r+0x674>
  801ca0:	1d05c83a 	sub	r2,r3,r20
  801ca4:	9885883a 	add	r2,r19,r2
  801ca8:	10c00054 	ori	r3,r2,1
  801cac:	b8800017 	ldw	r2,0(r23)
  801cb0:	a021883a 	mov	r16,r20
  801cb4:	a0c00115 	stw	r3,4(r20)
  801cb8:	9885883a 	add	r2,r19,r2
  801cbc:	b8800015 	stw	r2,0(r23)
  801cc0:	e5000215 	stw	r20,8(fp)
  801cc4:	b7003626 	beq	r22,fp,801da0 <_malloc_r+0x58c>
  801cc8:	018003c4 	movi	r6,15
  801ccc:	35404b36 	bltu	r6,r21,801dfc <_malloc_r+0x5e8>
  801cd0:	00800044 	movi	r2,1
  801cd4:	a0800115 	stw	r2,4(r20)
  801cd8:	003fcd06 	br	801c10 <_malloc_r+0x3fc>
  801cdc:	2808d27a 	srli	r4,r5,9
  801ce0:	2000371e 	bne	r4,zero,801dc0 <_malloc_r+0x5ac>
  801ce4:	2808d0fa 	srli	r4,r5,3
  801ce8:	200690fa 	slli	r3,r4,3
  801cec:	1ad1883a 	add	r8,r3,r11
  801cf0:	41800217 	ldw	r6,8(r8)
  801cf4:	41805b26 	beq	r8,r6,801e64 <_malloc_r+0x650>
  801cf8:	30800117 	ldw	r2,4(r6)
  801cfc:	00ffff04 	movi	r3,-4
  801d00:	10c4703a 	and	r2,r2,r3
  801d04:	2880022e 	bgeu	r5,r2,801d10 <_malloc_r+0x4fc>
  801d08:	31800217 	ldw	r6,8(r6)
  801d0c:	41bffa1e 	bne	r8,r6,801cf8 <_malloc_r+0x4e4>
  801d10:	32000317 	ldw	r8,12(r6)
  801d14:	39c00117 	ldw	r7,4(r7)
  801d18:	82000315 	stw	r8,12(r16)
  801d1c:	81800215 	stw	r6,8(r16)
  801d20:	07002074 	movhi	fp,129
  801d24:	e712e904 	addi	fp,fp,19364
  801d28:	34000315 	stw	r16,12(r6)
  801d2c:	44000215 	stw	r16,8(r8)
  801d30:	003f3e06 	br	801a2c <_malloc_r+0x218>
  801d34:	63000044 	addi	r12,r12,1
  801d38:	608000cc 	andi	r2,r12,3
  801d3c:	10005d26 	beq	r2,zero,801eb4 <_malloc_r+0x6a0>
  801d40:	18c00204 	addi	r3,r3,8
  801d44:	003f5106 	br	801a8c <_malloc_r+0x278>
  801d48:	8089883a 	add	r4,r16,r2
  801d4c:	003f6d06 	br	801b04 <_malloc_r+0x2f0>
  801d50:	00805504 	movi	r2,340
  801d54:	10c02036 	bltu	r2,r3,801dd8 <_malloc_r+0x5c4>
  801d58:	8804d3fa 	srli	r2,r17,15
  801d5c:	11801dc4 	addi	r6,r2,119
  801d60:	300490fa 	slli	r2,r6,3
  801d64:	003ed806 	br	8018c8 <_malloc_r+0xb4>
  801d68:	48c000c4 	addi	r3,r9,3
  801d6c:	003f3106 	br	801a34 <_malloc_r+0x220>
  801d70:	05c02174 	movhi	r23,133
  801d74:	bdc1e204 	addi	r23,r23,1928
  801d78:	b8800017 	ldw	r2,0(r23)
  801d7c:	988d883a 	add	r6,r19,r2
  801d80:	b9800015 	stw	r6,0(r23)
  801d84:	293fb21e 	bne	r5,r4,801c50 <_malloc_r+0x43c>
  801d88:	2083ffcc 	andi	r2,r4,4095
  801d8c:	103fb01e 	bne	r2,zero,801c50 <_malloc_r+0x43c>
  801d90:	e4000217 	ldw	r16,8(fp)
  801d94:	9d45883a 	add	r2,r19,r21
  801d98:	10800054 	ori	r2,r2,1
  801d9c:	80800115 	stw	r2,4(r16)
  801da0:	b8c00017 	ldw	r3,0(r23)
  801da4:	d0a71a17 	ldw	r2,-25496(gp)
  801da8:	10c0012e 	bgeu	r2,r3,801db0 <_malloc_r+0x59c>
  801dac:	d0e71a15 	stw	r3,-25496(gp)
  801db0:	d0a71b17 	ldw	r2,-25492(gp)
  801db4:	10ff962e 	bgeu	r2,r3,801c10 <_malloc_r+0x3fc>
  801db8:	d0e71b15 	stw	r3,-25492(gp)
  801dbc:	003f9406 	br	801c10 <_malloc_r+0x3fc>
  801dc0:	00800104 	movi	r2,4
  801dc4:	11001e36 	bltu	r2,r4,801e40 <_malloc_r+0x62c>
  801dc8:	2804d1ba 	srli	r2,r5,6
  801dcc:	11000e04 	addi	r4,r2,56
  801dd0:	200690fa 	slli	r3,r4,3
  801dd4:	003fc506 	br	801cec <_malloc_r+0x4d8>
  801dd8:	00815504 	movi	r2,1364
  801ddc:	10c01d2e 	bgeu	r2,r3,801e54 <_malloc_r+0x640>
  801de0:	01801f84 	movi	r6,126
  801de4:	0080fc04 	movi	r2,1008
  801de8:	003eb706 	br	8018c8 <_malloc_r+0xb4>
  801dec:	00800204 	movi	r2,8
  801df0:	10cbc83a 	sub	r5,r2,r3
  801df4:	2169883a 	add	r20,r4,r5
  801df8:	003f9e06 	br	801c74 <_malloc_r+0x460>
  801dfc:	00bffe04 	movi	r2,-8
  801e00:	a93ffd04 	addi	r4,r21,-12
  801e04:	2088703a 	and	r4,r4,r2
  801e08:	b10b883a 	add	r5,r22,r4
  801e0c:	00c00144 	movi	r3,5
  801e10:	28c00215 	stw	r3,8(r5)
  801e14:	28c00115 	stw	r3,4(r5)
  801e18:	b0800117 	ldw	r2,4(r22)
  801e1c:	1080004c 	andi	r2,r2,1
  801e20:	2084b03a 	or	r2,r4,r2
  801e24:	b0800115 	stw	r2,4(r22)
  801e28:	313fdd2e 	bgeu	r6,r4,801da0 <_malloc_r+0x58c>
  801e2c:	b1400204 	addi	r5,r22,8
  801e30:	9009883a 	mov	r4,r18
  801e34:	08060280 	call	806028 <_free_r>
  801e38:	e4000217 	ldw	r16,8(fp)
  801e3c:	003fd806 	br	801da0 <_malloc_r+0x58c>
  801e40:	00800504 	movi	r2,20
  801e44:	11001536 	bltu	r2,r4,801e9c <_malloc_r+0x688>
  801e48:	210016c4 	addi	r4,r4,91
  801e4c:	200690fa 	slli	r3,r4,3
  801e50:	003fa606 	br	801cec <_malloc_r+0x4d8>
  801e54:	8804d4ba 	srli	r2,r17,18
  801e58:	11801f04 	addi	r6,r2,124
  801e5c:	300490fa 	slli	r2,r6,3
  801e60:	003e9906 	br	8018c8 <_malloc_r+0xb4>
  801e64:	2009d0ba 	srai	r4,r4,2
  801e68:	01402074 	movhi	r5,129
  801e6c:	2952e904 	addi	r5,r5,19364
  801e70:	00c00044 	movi	r3,1
  801e74:	28800117 	ldw	r2,4(r5)
  801e78:	1906983a 	sll	r3,r3,r4
  801e7c:	10c4b03a 	or	r2,r2,r3
  801e80:	28800115 	stw	r2,4(r5)
  801e84:	003fa306 	br	801d14 <_malloc_r+0x500>
  801e88:	0027883a 	mov	r19,zero
  801e8c:	00c00044 	movi	r3,1
  801e90:	003f8606 	br	801cac <_malloc_r+0x498>
  801e94:	d1200115 	stw	r4,-32764(gp)
  801e98:	003f7306 	br	801c68 <_malloc_r+0x454>
  801e9c:	00801504 	movi	r2,84
  801ea0:	11001936 	bltu	r2,r4,801f08 <_malloc_r+0x6f4>
  801ea4:	2804d33a 	srli	r2,r5,12
  801ea8:	11001b84 	addi	r4,r2,110
  801eac:	200690fa 	slli	r3,r4,3
  801eb0:	003f8e06 	br	801cec <_malloc_r+0x4d8>
  801eb4:	480b883a 	mov	r5,r9
  801eb8:	6807883a 	mov	r3,r13
  801ebc:	288000cc 	andi	r2,r5,3
  801ec0:	18fffe04 	addi	r3,r3,-8
  801ec4:	297fffc4 	addi	r5,r5,-1
  801ec8:	10001526 	beq	r2,zero,801f20 <_malloc_r+0x70c>
  801ecc:	18800217 	ldw	r2,8(r3)
  801ed0:	10fffa26 	beq	r2,r3,801ebc <_malloc_r+0x6a8>
  801ed4:	2109883a 	add	r4,r4,r4
  801ed8:	393f1e36 	bltu	r7,r4,801b54 <_malloc_r+0x340>
  801edc:	203f1d26 	beq	r4,zero,801b54 <_malloc_r+0x340>
  801ee0:	21c4703a 	and	r2,r4,r7
  801ee4:	10000226 	beq	r2,zero,801ef0 <_malloc_r+0x6dc>
  801ee8:	6013883a 	mov	r9,r12
  801eec:	003ee106 	br	801a74 <_malloc_r+0x260>
  801ef0:	2109883a 	add	r4,r4,r4
  801ef4:	3904703a 	and	r2,r7,r4
  801ef8:	63000104 	addi	r12,r12,4
  801efc:	103ffc26 	beq	r2,zero,801ef0 <_malloc_r+0x6dc>
  801f00:	6013883a 	mov	r9,r12
  801f04:	003edb06 	br	801a74 <_malloc_r+0x260>
  801f08:	00805504 	movi	r2,340
  801f0c:	11000836 	bltu	r2,r4,801f30 <_malloc_r+0x71c>
  801f10:	2804d3fa 	srli	r2,r5,15
  801f14:	11001dc4 	addi	r4,r2,119
  801f18:	200690fa 	slli	r3,r4,3
  801f1c:	003f7306 	br	801cec <_malloc_r+0x4d8>
  801f20:	0104303a 	nor	r2,zero,r4
  801f24:	388e703a 	and	r7,r7,r2
  801f28:	e1c00115 	stw	r7,4(fp)
  801f2c:	003fe906 	br	801ed4 <_malloc_r+0x6c0>
  801f30:	00815504 	movi	r2,1364
  801f34:	1100032e 	bgeu	r2,r4,801f44 <_malloc_r+0x730>
  801f38:	01001f84 	movi	r4,126
  801f3c:	00c0fc04 	movi	r3,1008
  801f40:	003f6a06 	br	801cec <_malloc_r+0x4d8>
  801f44:	2804d4ba 	srli	r2,r5,18
  801f48:	11001f04 	addi	r4,r2,124
  801f4c:	200690fa 	slli	r3,r4,3
  801f50:	003f6606 	br	801cec <_malloc_r+0x4d8>

00801f54 <printf>:
  801f54:	defffb04 	addi	sp,sp,-20
  801f58:	dfc00115 	stw	ra,4(sp)
  801f5c:	d9400215 	stw	r5,8(sp)
  801f60:	d9800315 	stw	r6,12(sp)
  801f64:	d9c00415 	stw	r7,16(sp)
  801f68:	00802074 	movhi	r2,129
  801f6c:	1099af04 	addi	r2,r2,26300
  801f70:	10c00017 	ldw	r3,0(r2)
  801f74:	200b883a 	mov	r5,r4
  801f78:	d8800204 	addi	r2,sp,8
  801f7c:	19000217 	ldw	r4,8(r3)
  801f80:	100d883a 	mov	r6,r2
  801f84:	d8800015 	stw	r2,0(sp)
  801f88:	08040800 	call	804080 <__vfprintf_internal>
  801f8c:	dfc00117 	ldw	ra,4(sp)
  801f90:	dec00504 	addi	sp,sp,20
  801f94:	f800283a 	ret

00801f98 <_printf_r>:
  801f98:	defffc04 	addi	sp,sp,-16
  801f9c:	dfc00115 	stw	ra,4(sp)
  801fa0:	d9800215 	stw	r6,8(sp)
  801fa4:	d9c00315 	stw	r7,12(sp)
  801fa8:	280d883a 	mov	r6,r5
  801fac:	21400217 	ldw	r5,8(r4)
  801fb0:	d8c00204 	addi	r3,sp,8
  801fb4:	180f883a 	mov	r7,r3
  801fb8:	d8c00015 	stw	r3,0(sp)
  801fbc:	08021bc0 	call	8021bc <___vfprintf_internal_r>
  801fc0:	dfc00117 	ldw	ra,4(sp)
  801fc4:	dec00404 	addi	sp,sp,16
  801fc8:	f800283a 	ret

00801fcc <_puts_r>:
  801fcc:	defff604 	addi	sp,sp,-40
  801fd0:	dc400715 	stw	r17,28(sp)
  801fd4:	2023883a 	mov	r17,r4
  801fd8:	2809883a 	mov	r4,r5
  801fdc:	dfc00915 	stw	ra,36(sp)
  801fe0:	dcc00815 	stw	r19,32(sp)
  801fe4:	2827883a 	mov	r19,r5
  801fe8:	08020f00 	call	8020f0 <strlen>
  801fec:	89400217 	ldw	r5,8(r17)
  801ff0:	00c02074 	movhi	r3,129
  801ff4:	18d1cc04 	addi	r3,r3,18224
  801ff8:	01c00044 	movi	r7,1
  801ffc:	12000044 	addi	r8,r2,1
  802000:	d8c00515 	stw	r3,20(sp)
  802004:	d9c00615 	stw	r7,24(sp)
  802008:	d8c00304 	addi	r3,sp,12
  80200c:	01c00084 	movi	r7,2
  802010:	8809883a 	mov	r4,r17
  802014:	d80d883a 	mov	r6,sp
  802018:	d8c00015 	stw	r3,0(sp)
  80201c:	dcc00315 	stw	r19,12(sp)
  802020:	da000215 	stw	r8,8(sp)
  802024:	d9c00115 	stw	r7,4(sp)
  802028:	d8800415 	stw	r2,16(sp)
  80202c:	080633c0 	call	80633c <__sfvwrite_r>
  802030:	00ffffc4 	movi	r3,-1
  802034:	10000626 	beq	r2,zero,802050 <_puts_r+0x84>
  802038:	1805883a 	mov	r2,r3
  80203c:	dfc00917 	ldw	ra,36(sp)
  802040:	dcc00817 	ldw	r19,32(sp)
  802044:	dc400717 	ldw	r17,28(sp)
  802048:	dec00a04 	addi	sp,sp,40
  80204c:	f800283a 	ret
  802050:	00c00284 	movi	r3,10
  802054:	1805883a 	mov	r2,r3
  802058:	dfc00917 	ldw	ra,36(sp)
  80205c:	dcc00817 	ldw	r19,32(sp)
  802060:	dc400717 	ldw	r17,28(sp)
  802064:	dec00a04 	addi	sp,sp,40
  802068:	f800283a 	ret

0080206c <puts>:
  80206c:	00802074 	movhi	r2,129
  802070:	1099af04 	addi	r2,r2,26300
  802074:	200b883a 	mov	r5,r4
  802078:	11000017 	ldw	r4,0(r2)
  80207c:	0801fcc1 	jmpi	801fcc <_puts_r>

00802080 <_sbrk_r>:
  802080:	defffd04 	addi	sp,sp,-12
  802084:	dc000015 	stw	r16,0(sp)
  802088:	040020b4 	movhi	r16,130
  80208c:	8420c904 	addi	r16,r16,-31964
  802090:	dc400115 	stw	r17,4(sp)
  802094:	80000015 	stw	zero,0(r16)
  802098:	2023883a 	mov	r17,r4
  80209c:	2809883a 	mov	r4,r5
  8020a0:	dfc00215 	stw	ra,8(sp)
  8020a4:	080bb200 	call	80bb20 <sbrk>
  8020a8:	1007883a 	mov	r3,r2
  8020ac:	00bfffc4 	movi	r2,-1
  8020b0:	18800626 	beq	r3,r2,8020cc <_sbrk_r+0x4c>
  8020b4:	1805883a 	mov	r2,r3
  8020b8:	dfc00217 	ldw	ra,8(sp)
  8020bc:	dc400117 	ldw	r17,4(sp)
  8020c0:	dc000017 	ldw	r16,0(sp)
  8020c4:	dec00304 	addi	sp,sp,12
  8020c8:	f800283a 	ret
  8020cc:	80800017 	ldw	r2,0(r16)
  8020d0:	103ff826 	beq	r2,zero,8020b4 <_sbrk_r+0x34>
  8020d4:	88800015 	stw	r2,0(r17)
  8020d8:	1805883a 	mov	r2,r3
  8020dc:	dfc00217 	ldw	ra,8(sp)
  8020e0:	dc400117 	ldw	r17,4(sp)
  8020e4:	dc000017 	ldw	r16,0(sp)
  8020e8:	dec00304 	addi	sp,sp,12
  8020ec:	f800283a 	ret

008020f0 <strlen>:
  8020f0:	208000cc 	andi	r2,r4,3
  8020f4:	2011883a 	mov	r8,r4
  8020f8:	1000161e 	bne	r2,zero,802154 <strlen+0x64>
  8020fc:	20c00017 	ldw	r3,0(r4)
  802100:	017fbff4 	movhi	r5,65279
  802104:	297fbfc4 	addi	r5,r5,-257
  802108:	01e02074 	movhi	r7,32897
  80210c:	39e02004 	addi	r7,r7,-32640
  802110:	1945883a 	add	r2,r3,r5
  802114:	11c4703a 	and	r2,r2,r7
  802118:	00c6303a 	nor	r3,zero,r3
  80211c:	1886703a 	and	r3,r3,r2
  802120:	18000c1e 	bne	r3,zero,802154 <strlen+0x64>
  802124:	280d883a 	mov	r6,r5
  802128:	380b883a 	mov	r5,r7
  80212c:	21000104 	addi	r4,r4,4
  802130:	20800017 	ldw	r2,0(r4)
  802134:	1187883a 	add	r3,r2,r6
  802138:	1946703a 	and	r3,r3,r5
  80213c:	0084303a 	nor	r2,zero,r2
  802140:	10c4703a 	and	r2,r2,r3
  802144:	103ff926 	beq	r2,zero,80212c <strlen+0x3c>
  802148:	20800007 	ldb	r2,0(r4)
  80214c:	10000326 	beq	r2,zero,80215c <strlen+0x6c>
  802150:	21000044 	addi	r4,r4,1
  802154:	20800007 	ldb	r2,0(r4)
  802158:	103ffd1e 	bne	r2,zero,802150 <strlen+0x60>
  80215c:	2205c83a 	sub	r2,r4,r8
  802160:	f800283a 	ret

00802164 <__sprint_r>:
  802164:	30800217 	ldw	r2,8(r6)
  802168:	defffe04 	addi	sp,sp,-8
  80216c:	dc000015 	stw	r16,0(sp)
  802170:	dfc00115 	stw	ra,4(sp)
  802174:	3021883a 	mov	r16,r6
  802178:	0007883a 	mov	r3,zero
  80217c:	1000061e 	bne	r2,zero,802198 <__sprint_r+0x34>
  802180:	1805883a 	mov	r2,r3
  802184:	30000115 	stw	zero,4(r6)
  802188:	dfc00117 	ldw	ra,4(sp)
  80218c:	dc000017 	ldw	r16,0(sp)
  802190:	dec00204 	addi	sp,sp,8
  802194:	f800283a 	ret
  802198:	080633c0 	call	80633c <__sfvwrite_r>
  80219c:	1007883a 	mov	r3,r2
  8021a0:	1805883a 	mov	r2,r3
  8021a4:	80000115 	stw	zero,4(r16)
  8021a8:	80000215 	stw	zero,8(r16)
  8021ac:	dfc00117 	ldw	ra,4(sp)
  8021b0:	dc000017 	ldw	r16,0(sp)
  8021b4:	dec00204 	addi	sp,sp,8
  8021b8:	f800283a 	ret

008021bc <___vfprintf_internal_r>:
  8021bc:	defea404 	addi	sp,sp,-1392
  8021c0:	dd815815 	stw	r22,1376(sp)
  8021c4:	dc015215 	stw	r16,1352(sp)
  8021c8:	d9c15115 	stw	r7,1348(sp)
  8021cc:	dfc15b15 	stw	ra,1388(sp)
  8021d0:	df015a15 	stw	fp,1384(sp)
  8021d4:	ddc15915 	stw	r23,1380(sp)
  8021d8:	dd415715 	stw	r21,1372(sp)
  8021dc:	dd015615 	stw	r20,1368(sp)
  8021e0:	dcc15515 	stw	r19,1364(sp)
  8021e4:	dc815415 	stw	r18,1360(sp)
  8021e8:	dc415315 	stw	r17,1356(sp)
  8021ec:	282d883a 	mov	r22,r5
  8021f0:	3021883a 	mov	r16,r6
  8021f4:	d9014f15 	stw	r4,1340(sp)
  8021f8:	08069600 	call	806960 <_localeconv_r>
  8021fc:	10800017 	ldw	r2,0(r2)
  802200:	d9c15117 	ldw	r7,1348(sp)
  802204:	d8814915 	stw	r2,1316(sp)
  802208:	d8814f17 	ldw	r2,1340(sp)
  80220c:	10000226 	beq	r2,zero,802218 <___vfprintf_internal_r+0x5c>
  802210:	10800e17 	ldw	r2,56(r2)
  802214:	10020d26 	beq	r2,zero,802a4c <___vfprintf_internal_r+0x890>
  802218:	b080030b 	ldhu	r2,12(r22)
  80221c:	1080020c 	andi	r2,r2,8
  802220:	10020e26 	beq	r2,zero,802a5c <___vfprintf_internal_r+0x8a0>
  802224:	b0800417 	ldw	r2,16(r22)
  802228:	10020c26 	beq	r2,zero,802a5c <___vfprintf_internal_r+0x8a0>
  80222c:	b200030b 	ldhu	r8,12(r22)
  802230:	00800284 	movi	r2,10
  802234:	40c0068c 	andi	r3,r8,26
  802238:	18802f1e 	bne	r3,r2,8022f8 <___vfprintf_internal_r+0x13c>
  80223c:	b080038f 	ldh	r2,14(r22)
  802240:	10002d16 	blt	r2,zero,8022f8 <___vfprintf_internal_r+0x13c>
  802244:	b240038b 	ldhu	r9,14(r22)
  802248:	b2800717 	ldw	r10,28(r22)
  80224c:	b2c00917 	ldw	r11,36(r22)
  802250:	d9014f17 	ldw	r4,1340(sp)
  802254:	dc402904 	addi	r17,sp,164
  802258:	d8804004 	addi	r2,sp,256
  80225c:	00c10004 	movi	r3,1024
  802260:	423fff4c 	andi	r8,r8,65533
  802264:	800d883a 	mov	r6,r16
  802268:	880b883a 	mov	r5,r17
  80226c:	da002c0d 	sth	r8,176(sp)
  802270:	da402c8d 	sth	r9,178(sp)
  802274:	da803015 	stw	r10,192(sp)
  802278:	dac03215 	stw	r11,200(sp)
  80227c:	d8802d15 	stw	r2,180(sp)
  802280:	d8c02e15 	stw	r3,184(sp)
  802284:	d8802915 	stw	r2,164(sp)
  802288:	d8c02b15 	stw	r3,172(sp)
  80228c:	d8002f15 	stw	zero,188(sp)
  802290:	08021bc0 	call	8021bc <___vfprintf_internal_r>
  802294:	d8814b15 	stw	r2,1324(sp)
  802298:	10000416 	blt	r2,zero,8022ac <___vfprintf_internal_r+0xf0>
  80229c:	d9014f17 	ldw	r4,1340(sp)
  8022a0:	880b883a 	mov	r5,r17
  8022a4:	08059d80 	call	8059d8 <_fflush_r>
  8022a8:	1002321e 	bne	r2,zero,802b74 <___vfprintf_internal_r+0x9b8>
  8022ac:	d8802c0b 	ldhu	r2,176(sp)
  8022b0:	1080100c 	andi	r2,r2,64
  8022b4:	10000326 	beq	r2,zero,8022c4 <___vfprintf_internal_r+0x108>
  8022b8:	b080030b 	ldhu	r2,12(r22)
  8022bc:	10801014 	ori	r2,r2,64
  8022c0:	b080030d 	sth	r2,12(r22)
  8022c4:	d8814b17 	ldw	r2,1324(sp)
  8022c8:	dfc15b17 	ldw	ra,1388(sp)
  8022cc:	df015a17 	ldw	fp,1384(sp)
  8022d0:	ddc15917 	ldw	r23,1380(sp)
  8022d4:	dd815817 	ldw	r22,1376(sp)
  8022d8:	dd415717 	ldw	r21,1372(sp)
  8022dc:	dd015617 	ldw	r20,1368(sp)
  8022e0:	dcc15517 	ldw	r19,1364(sp)
  8022e4:	dc815417 	ldw	r18,1360(sp)
  8022e8:	dc415317 	ldw	r17,1356(sp)
  8022ec:	dc015217 	ldw	r16,1352(sp)
  8022f0:	dec15c04 	addi	sp,sp,1392
  8022f4:	f800283a 	ret
  8022f8:	0005883a 	mov	r2,zero
  8022fc:	0007883a 	mov	r3,zero
  802300:	dd401904 	addi	r21,sp,100
  802304:	d8814215 	stw	r2,1288(sp)
  802308:	802f883a 	mov	r23,r16
  80230c:	d8c14315 	stw	r3,1292(sp)
  802310:	d8014b15 	stw	zero,1324(sp)
  802314:	d8014815 	stw	zero,1312(sp)
  802318:	d8014415 	stw	zero,1296(sp)
  80231c:	d8014715 	stw	zero,1308(sp)
  802320:	dd400c15 	stw	r21,48(sp)
  802324:	d8000e15 	stw	zero,56(sp)
  802328:	d8000d15 	stw	zero,52(sp)
  80232c:	b8800007 	ldb	r2,0(r23)
  802330:	10001926 	beq	r2,zero,802398 <___vfprintf_internal_r+0x1dc>
  802334:	00c00944 	movi	r3,37
  802338:	10c01726 	beq	r2,r3,802398 <___vfprintf_internal_r+0x1dc>
  80233c:	b821883a 	mov	r16,r23
  802340:	00000106 	br	802348 <___vfprintf_internal_r+0x18c>
  802344:	10c00326 	beq	r2,r3,802354 <___vfprintf_internal_r+0x198>
  802348:	84000044 	addi	r16,r16,1
  80234c:	80800007 	ldb	r2,0(r16)
  802350:	103ffc1e 	bne	r2,zero,802344 <___vfprintf_internal_r+0x188>
  802354:	85e7c83a 	sub	r19,r16,r23
  802358:	98000e26 	beq	r19,zero,802394 <___vfprintf_internal_r+0x1d8>
  80235c:	dc800e17 	ldw	r18,56(sp)
  802360:	dc400d17 	ldw	r17,52(sp)
  802364:	008001c4 	movi	r2,7
  802368:	94e5883a 	add	r18,r18,r19
  80236c:	8c400044 	addi	r17,r17,1
  802370:	adc00015 	stw	r23,0(r21)
  802374:	dc800e15 	stw	r18,56(sp)
  802378:	acc00115 	stw	r19,4(r21)
  80237c:	dc400d15 	stw	r17,52(sp)
  802380:	14428b16 	blt	r2,r17,802db0 <___vfprintf_internal_r+0xbf4>
  802384:	ad400204 	addi	r21,r21,8
  802388:	d9014b17 	ldw	r4,1324(sp)
  80238c:	24c9883a 	add	r4,r4,r19
  802390:	d9014b15 	stw	r4,1324(sp)
  802394:	802f883a 	mov	r23,r16
  802398:	b8800007 	ldb	r2,0(r23)
  80239c:	10013c26 	beq	r2,zero,802890 <___vfprintf_internal_r+0x6d4>
  8023a0:	bdc00044 	addi	r23,r23,1
  8023a4:	d8000405 	stb	zero,16(sp)
  8023a8:	b8c00007 	ldb	r3,0(r23)
  8023ac:	04ffffc4 	movi	r19,-1
  8023b0:	d8014c15 	stw	zero,1328(sp)
  8023b4:	d8014a15 	stw	zero,1320(sp)
  8023b8:	d8c14d15 	stw	r3,1332(sp)
  8023bc:	bdc00044 	addi	r23,r23,1
  8023c0:	d9414d17 	ldw	r5,1332(sp)
  8023c4:	00801604 	movi	r2,88
  8023c8:	28fff804 	addi	r3,r5,-32
  8023cc:	10c06036 	bltu	r2,r3,802550 <___vfprintf_internal_r+0x394>
  8023d0:	18c5883a 	add	r2,r3,r3
  8023d4:	1085883a 	add	r2,r2,r2
  8023d8:	00c02034 	movhi	r3,128
  8023dc:	18c8fb04 	addi	r3,r3,9196
  8023e0:	10c5883a 	add	r2,r2,r3
  8023e4:	11000017 	ldw	r4,0(r2)
  8023e8:	2000683a 	jmp	r4
  8023ec:	00803360 	cmpeqi	r2,zero,205
  8023f0:	00802550 	cmplti	r2,zero,149
  8023f4:	00802550 	cmplti	r2,zero,149
  8023f8:	0080334c 	andi	r2,zero,205
  8023fc:	00802550 	cmplti	r2,zero,149
  802400:	00802550 	cmplti	r2,zero,149
  802404:	00802550 	cmplti	r2,zero,149
  802408:	00802550 	cmplti	r2,zero,149
  80240c:	00802550 	cmplti	r2,zero,149
  802410:	00802550 	cmplti	r2,zero,149
  802414:	0080312c 	andhi	r2,zero,196
  802418:	0080333c 	xorhi	r2,zero,204
  80241c:	00802550 	cmplti	r2,zero,149
  802420:	00803144 	movi	r2,197
  802424:	008033e4 	muli	r2,zero,207
  802428:	00802550 	cmplti	r2,zero,149
  80242c:	008033d0 	cmplti	r2,zero,207
  802430:	0080338c 	andi	r2,zero,206
  802434:	0080338c 	andi	r2,zero,206
  802438:	0080338c 	andi	r2,zero,206
  80243c:	0080338c 	andi	r2,zero,206
  802440:	0080338c 	andi	r2,zero,206
  802444:	0080338c 	andi	r2,zero,206
  802448:	0080338c 	andi	r2,zero,206
  80244c:	0080338c 	andi	r2,zero,206
  802450:	0080338c 	andi	r2,zero,206
  802454:	00802550 	cmplti	r2,zero,149
  802458:	00802550 	cmplti	r2,zero,149
  80245c:	00802550 	cmplti	r2,zero,149
  802460:	00802550 	cmplti	r2,zero,149
  802464:	00802550 	cmplti	r2,zero,149
  802468:	00802550 	cmplti	r2,zero,149
  80246c:	00802550 	cmplti	r2,zero,149
  802470:	00802550 	cmplti	r2,zero,149
  802474:	00802550 	cmplti	r2,zero,149
  802478:	00802550 	cmplti	r2,zero,149
  80247c:	00802ba8 	cmpgeui	r2,zero,174
  802480:	00803214 	movui	r2,200
  802484:	00802550 	cmplti	r2,zero,149
  802488:	00803214 	movui	r2,200
  80248c:	00802550 	cmplti	r2,zero,149
  802490:	00802550 	cmplti	r2,zero,149
  802494:	00802550 	cmplti	r2,zero,149
  802498:	00802550 	cmplti	r2,zero,149
  80249c:	00803378 	rdprs	r2,zero,205
  8024a0:	00802550 	cmplti	r2,zero,149
  8024a4:	00802550 	cmplti	r2,zero,149
  8024a8:	00802c5c 	xori	r2,zero,177
  8024ac:	00802550 	cmplti	r2,zero,149
  8024b0:	00802550 	cmplti	r2,zero,149
  8024b4:	00802550 	cmplti	r2,zero,149
  8024b8:	00802550 	cmplti	r2,zero,149
  8024bc:	00802550 	cmplti	r2,zero,149
  8024c0:	00802ca8 	cmpgeui	r2,zero,178
  8024c4:	00802550 	cmplti	r2,zero,149
  8024c8:	00802550 	cmplti	r2,zero,149
  8024cc:	008032c8 	cmpgei	r2,zero,203
  8024d0:	00802550 	cmplti	r2,zero,149
  8024d4:	00802550 	cmplti	r2,zero,149
  8024d8:	00802550 	cmplti	r2,zero,149
  8024dc:	00802550 	cmplti	r2,zero,149
  8024e0:	00802550 	cmplti	r2,zero,149
  8024e4:	00802550 	cmplti	r2,zero,149
  8024e8:	00802550 	cmplti	r2,zero,149
  8024ec:	00802550 	cmplti	r2,zero,149
  8024f0:	00802550 	cmplti	r2,zero,149
  8024f4:	00802550 	cmplti	r2,zero,149
  8024f8:	0080329c 	xori	r2,zero,202
  8024fc:	00802bb4 	movhi	r2,174
  802500:	00803214 	movui	r2,200
  802504:	00803214 	movui	r2,200
  802508:	00803214 	movui	r2,200
  80250c:	00803200 	call	80320 <__alt_mem_sdram-0x77fce0>
  802510:	00802bb4 	movhi	r2,174
  802514:	00802550 	cmplti	r2,zero,149
  802518:	00802550 	cmplti	r2,zero,149
  80251c:	00803188 	cmpgei	r2,zero,198
  802520:	00802550 	cmplti	r2,zero,149
  802524:	00803158 	cmpnei	r2,zero,197
  802528:	00802c68 	cmpgeui	r2,zero,177
  80252c:	008031b8 	rdprs	r2,zero,198
  802530:	008031a4 	muli	r2,zero,198
  802534:	00802550 	cmplti	r2,zero,149
  802538:	0080344c 	andi	r2,zero,209
  80253c:	00802550 	cmplti	r2,zero,149
  802540:	00802cb4 	movhi	r2,178
  802544:	00802550 	cmplti	r2,zero,149
  802548:	00802550 	cmplti	r2,zero,149
  80254c:	0080332c 	andhi	r2,zero,204
  802550:	d9014d17 	ldw	r4,1332(sp)
  802554:	2000ce26 	beq	r4,zero,802890 <___vfprintf_internal_r+0x6d4>
  802558:	01400044 	movi	r5,1
  80255c:	d9800f04 	addi	r6,sp,60
  802560:	d9c14015 	stw	r7,1280(sp)
  802564:	d9414515 	stw	r5,1300(sp)
  802568:	d9814115 	stw	r6,1284(sp)
  80256c:	280f883a 	mov	r7,r5
  802570:	d9000f05 	stb	r4,60(sp)
  802574:	d8000405 	stb	zero,16(sp)
  802578:	d8014615 	stw	zero,1304(sp)
  80257c:	d8c14c17 	ldw	r3,1328(sp)
  802580:	1880008c 	andi	r2,r3,2
  802584:	1005003a 	cmpeq	r2,r2,zero
  802588:	d8815015 	stw	r2,1344(sp)
  80258c:	1000031e 	bne	r2,zero,80259c <___vfprintf_internal_r+0x3e0>
  802590:	d9014517 	ldw	r4,1300(sp)
  802594:	21000084 	addi	r4,r4,2
  802598:	d9014515 	stw	r4,1300(sp)
  80259c:	d9414c17 	ldw	r5,1328(sp)
  8025a0:	2940210c 	andi	r5,r5,132
  8025a4:	d9414e15 	stw	r5,1336(sp)
  8025a8:	28002d1e 	bne	r5,zero,802660 <___vfprintf_internal_r+0x4a4>
  8025ac:	d9814a17 	ldw	r6,1320(sp)
  8025b0:	d8814517 	ldw	r2,1300(sp)
  8025b4:	30a1c83a 	sub	r16,r6,r2
  8025b8:	0400290e 	bge	zero,r16,802660 <___vfprintf_internal_r+0x4a4>
  8025bc:	00800404 	movi	r2,16
  8025c0:	14045e0e 	bge	r2,r16,80373c <___vfprintf_internal_r+0x1580>
  8025c4:	dc800e17 	ldw	r18,56(sp)
  8025c8:	dc400d17 	ldw	r17,52(sp)
  8025cc:	1027883a 	mov	r19,r2
  8025d0:	07002074 	movhi	fp,129
  8025d4:	e711e884 	addi	fp,fp,18338
  8025d8:	050001c4 	movi	r20,7
  8025dc:	00000306 	br	8025ec <___vfprintf_internal_r+0x430>
  8025e0:	843ffc04 	addi	r16,r16,-16
  8025e4:	ad400204 	addi	r21,r21,8
  8025e8:	9c00130e 	bge	r19,r16,802638 <___vfprintf_internal_r+0x47c>
  8025ec:	94800404 	addi	r18,r18,16
  8025f0:	8c400044 	addi	r17,r17,1
  8025f4:	af000015 	stw	fp,0(r21)
  8025f8:	acc00115 	stw	r19,4(r21)
  8025fc:	dc800e15 	stw	r18,56(sp)
  802600:	dc400d15 	stw	r17,52(sp)
  802604:	a47ff60e 	bge	r20,r17,8025e0 <___vfprintf_internal_r+0x424>
  802608:	d9014f17 	ldw	r4,1340(sp)
  80260c:	b00b883a 	mov	r5,r22
  802610:	d9800c04 	addi	r6,sp,48
  802614:	d9c15115 	stw	r7,1348(sp)
  802618:	08021640 	call	802164 <__sprint_r>
  80261c:	d9c15117 	ldw	r7,1348(sp)
  802620:	10009e1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802624:	843ffc04 	addi	r16,r16,-16
  802628:	dc800e17 	ldw	r18,56(sp)
  80262c:	dc400d17 	ldw	r17,52(sp)
  802630:	dd401904 	addi	r21,sp,100
  802634:	9c3fed16 	blt	r19,r16,8025ec <___vfprintf_internal_r+0x430>
  802638:	9425883a 	add	r18,r18,r16
  80263c:	8c400044 	addi	r17,r17,1
  802640:	008001c4 	movi	r2,7
  802644:	af000015 	stw	fp,0(r21)
  802648:	ac000115 	stw	r16,4(r21)
  80264c:	dc800e15 	stw	r18,56(sp)
  802650:	dc400d15 	stw	r17,52(sp)
  802654:	1441f516 	blt	r2,r17,802e2c <___vfprintf_internal_r+0xc70>
  802658:	ad400204 	addi	r21,r21,8
  80265c:	00000206 	br	802668 <___vfprintf_internal_r+0x4ac>
  802660:	dc800e17 	ldw	r18,56(sp)
  802664:	dc400d17 	ldw	r17,52(sp)
  802668:	d8800407 	ldb	r2,16(sp)
  80266c:	10000b26 	beq	r2,zero,80269c <___vfprintf_internal_r+0x4e0>
  802670:	00800044 	movi	r2,1
  802674:	94800044 	addi	r18,r18,1
  802678:	8c400044 	addi	r17,r17,1
  80267c:	a8800115 	stw	r2,4(r21)
  802680:	d8c00404 	addi	r3,sp,16
  802684:	008001c4 	movi	r2,7
  802688:	a8c00015 	stw	r3,0(r21)
  80268c:	dc800e15 	stw	r18,56(sp)
  802690:	dc400d15 	stw	r17,52(sp)
  802694:	1441da16 	blt	r2,r17,802e00 <___vfprintf_internal_r+0xc44>
  802698:	ad400204 	addi	r21,r21,8
  80269c:	d9015017 	ldw	r4,1344(sp)
  8026a0:	20000b1e 	bne	r4,zero,8026d0 <___vfprintf_internal_r+0x514>
  8026a4:	d8800444 	addi	r2,sp,17
  8026a8:	94800084 	addi	r18,r18,2
  8026ac:	8c400044 	addi	r17,r17,1
  8026b0:	a8800015 	stw	r2,0(r21)
  8026b4:	00c00084 	movi	r3,2
  8026b8:	008001c4 	movi	r2,7
  8026bc:	a8c00115 	stw	r3,4(r21)
  8026c0:	dc800e15 	stw	r18,56(sp)
  8026c4:	dc400d15 	stw	r17,52(sp)
  8026c8:	1441c216 	blt	r2,r17,802dd4 <___vfprintf_internal_r+0xc18>
  8026cc:	ad400204 	addi	r21,r21,8
  8026d0:	d9414e17 	ldw	r5,1336(sp)
  8026d4:	00802004 	movi	r2,128
  8026d8:	2880b126 	beq	r5,r2,8029a0 <___vfprintf_internal_r+0x7e4>
  8026dc:	d8c14617 	ldw	r3,1304(sp)
  8026e0:	19e1c83a 	sub	r16,r3,r7
  8026e4:	0400260e 	bge	zero,r16,802780 <___vfprintf_internal_r+0x5c4>
  8026e8:	00800404 	movi	r2,16
  8026ec:	1403cf0e 	bge	r2,r16,80362c <___vfprintf_internal_r+0x1470>
  8026f0:	1027883a 	mov	r19,r2
  8026f4:	07002074 	movhi	fp,129
  8026f8:	e711e484 	addi	fp,fp,18322
  8026fc:	050001c4 	movi	r20,7
  802700:	00000306 	br	802710 <___vfprintf_internal_r+0x554>
  802704:	843ffc04 	addi	r16,r16,-16
  802708:	ad400204 	addi	r21,r21,8
  80270c:	9c00130e 	bge	r19,r16,80275c <___vfprintf_internal_r+0x5a0>
  802710:	94800404 	addi	r18,r18,16
  802714:	8c400044 	addi	r17,r17,1
  802718:	af000015 	stw	fp,0(r21)
  80271c:	acc00115 	stw	r19,4(r21)
  802720:	dc800e15 	stw	r18,56(sp)
  802724:	dc400d15 	stw	r17,52(sp)
  802728:	a47ff60e 	bge	r20,r17,802704 <___vfprintf_internal_r+0x548>
  80272c:	d9014f17 	ldw	r4,1340(sp)
  802730:	b00b883a 	mov	r5,r22
  802734:	d9800c04 	addi	r6,sp,48
  802738:	d9c15115 	stw	r7,1348(sp)
  80273c:	08021640 	call	802164 <__sprint_r>
  802740:	d9c15117 	ldw	r7,1348(sp)
  802744:	1000551e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802748:	843ffc04 	addi	r16,r16,-16
  80274c:	dc800e17 	ldw	r18,56(sp)
  802750:	dc400d17 	ldw	r17,52(sp)
  802754:	dd401904 	addi	r21,sp,100
  802758:	9c3fed16 	blt	r19,r16,802710 <___vfprintf_internal_r+0x554>
  80275c:	9425883a 	add	r18,r18,r16
  802760:	8c400044 	addi	r17,r17,1
  802764:	008001c4 	movi	r2,7
  802768:	af000015 	stw	fp,0(r21)
  80276c:	ac000115 	stw	r16,4(r21)
  802770:	dc800e15 	stw	r18,56(sp)
  802774:	dc400d15 	stw	r17,52(sp)
  802778:	14418216 	blt	r2,r17,802d84 <___vfprintf_internal_r+0xbc8>
  80277c:	ad400204 	addi	r21,r21,8
  802780:	d9014c17 	ldw	r4,1328(sp)
  802784:	2080400c 	andi	r2,r4,256
  802788:	10004a1e 	bne	r2,zero,8028b4 <___vfprintf_internal_r+0x6f8>
  80278c:	d9414117 	ldw	r5,1284(sp)
  802790:	91e5883a 	add	r18,r18,r7
  802794:	8c400044 	addi	r17,r17,1
  802798:	008001c4 	movi	r2,7
  80279c:	a9400015 	stw	r5,0(r21)
  8027a0:	a9c00115 	stw	r7,4(r21)
  8027a4:	dc800e15 	stw	r18,56(sp)
  8027a8:	dc400d15 	stw	r17,52(sp)
  8027ac:	14416716 	blt	r2,r17,802d4c <___vfprintf_internal_r+0xb90>
  8027b0:	a8c00204 	addi	r3,r21,8
  8027b4:	d9814c17 	ldw	r6,1328(sp)
  8027b8:	3080010c 	andi	r2,r6,4
  8027bc:	10002826 	beq	r2,zero,802860 <___vfprintf_internal_r+0x6a4>
  8027c0:	d8814a17 	ldw	r2,1320(sp)
  8027c4:	d9014517 	ldw	r4,1300(sp)
  8027c8:	1121c83a 	sub	r16,r2,r4
  8027cc:	0400240e 	bge	zero,r16,802860 <___vfprintf_internal_r+0x6a4>
  8027d0:	00800404 	movi	r2,16
  8027d4:	1404550e 	bge	r2,r16,80392c <___vfprintf_internal_r+0x1770>
  8027d8:	dc400d17 	ldw	r17,52(sp)
  8027dc:	1027883a 	mov	r19,r2
  8027e0:	07002074 	movhi	fp,129
  8027e4:	e711e884 	addi	fp,fp,18338
  8027e8:	050001c4 	movi	r20,7
  8027ec:	00000306 	br	8027fc <___vfprintf_internal_r+0x640>
  8027f0:	843ffc04 	addi	r16,r16,-16
  8027f4:	18c00204 	addi	r3,r3,8
  8027f8:	9c00110e 	bge	r19,r16,802840 <___vfprintf_internal_r+0x684>
  8027fc:	94800404 	addi	r18,r18,16
  802800:	8c400044 	addi	r17,r17,1
  802804:	1f000015 	stw	fp,0(r3)
  802808:	1cc00115 	stw	r19,4(r3)
  80280c:	dc800e15 	stw	r18,56(sp)
  802810:	dc400d15 	stw	r17,52(sp)
  802814:	a47ff60e 	bge	r20,r17,8027f0 <___vfprintf_internal_r+0x634>
  802818:	d9014f17 	ldw	r4,1340(sp)
  80281c:	b00b883a 	mov	r5,r22
  802820:	d9800c04 	addi	r6,sp,48
  802824:	08021640 	call	802164 <__sprint_r>
  802828:	10001c1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  80282c:	843ffc04 	addi	r16,r16,-16
  802830:	dc800e17 	ldw	r18,56(sp)
  802834:	dc400d17 	ldw	r17,52(sp)
  802838:	d8c01904 	addi	r3,sp,100
  80283c:	9c3fef16 	blt	r19,r16,8027fc <___vfprintf_internal_r+0x640>
  802840:	9425883a 	add	r18,r18,r16
  802844:	8c400044 	addi	r17,r17,1
  802848:	008001c4 	movi	r2,7
  80284c:	1f000015 	stw	fp,0(r3)
  802850:	1c000115 	stw	r16,4(r3)
  802854:	dc800e15 	stw	r18,56(sp)
  802858:	dc400d15 	stw	r17,52(sp)
  80285c:	1440cb16 	blt	r2,r17,802b8c <___vfprintf_internal_r+0x9d0>
  802860:	d8814a17 	ldw	r2,1320(sp)
  802864:	d9414517 	ldw	r5,1300(sp)
  802868:	1140010e 	bge	r2,r5,802870 <___vfprintf_internal_r+0x6b4>
  80286c:	2805883a 	mov	r2,r5
  802870:	d9814b17 	ldw	r6,1324(sp)
  802874:	308d883a 	add	r6,r6,r2
  802878:	d9814b15 	stw	r6,1324(sp)
  80287c:	90013b1e 	bne	r18,zero,802d6c <___vfprintf_internal_r+0xbb0>
  802880:	d9c14017 	ldw	r7,1280(sp)
  802884:	dd401904 	addi	r21,sp,100
  802888:	d8000d15 	stw	zero,52(sp)
  80288c:	003ea706 	br	80232c <___vfprintf_internal_r+0x170>
  802890:	d8800e17 	ldw	r2,56(sp)
  802894:	1005451e 	bne	r2,zero,803dac <___vfprintf_internal_r+0x1bf0>
  802898:	d8000d15 	stw	zero,52(sp)
  80289c:	b080030b 	ldhu	r2,12(r22)
  8028a0:	1080100c 	andi	r2,r2,64
  8028a4:	103e8726 	beq	r2,zero,8022c4 <___vfprintf_internal_r+0x108>
  8028a8:	00bfffc4 	movi	r2,-1
  8028ac:	d8814b15 	stw	r2,1324(sp)
  8028b0:	003e8406 	br	8022c4 <___vfprintf_internal_r+0x108>
  8028b4:	d9814d17 	ldw	r6,1332(sp)
  8028b8:	00801944 	movi	r2,101
  8028bc:	11806e16 	blt	r2,r6,802a78 <___vfprintf_internal_r+0x8bc>
  8028c0:	d9414717 	ldw	r5,1308(sp)
  8028c4:	00c00044 	movi	r3,1
  8028c8:	1943490e 	bge	r3,r5,8035f0 <___vfprintf_internal_r+0x1434>
  8028cc:	d8814117 	ldw	r2,1284(sp)
  8028d0:	94800044 	addi	r18,r18,1
  8028d4:	8c400044 	addi	r17,r17,1
  8028d8:	a8800015 	stw	r2,0(r21)
  8028dc:	008001c4 	movi	r2,7
  8028e0:	a8c00115 	stw	r3,4(r21)
  8028e4:	dc800e15 	stw	r18,56(sp)
  8028e8:	dc400d15 	stw	r17,52(sp)
  8028ec:	1441ca16 	blt	r2,r17,803018 <___vfprintf_internal_r+0xe5c>
  8028f0:	a8c00204 	addi	r3,r21,8
  8028f4:	d9014917 	ldw	r4,1316(sp)
  8028f8:	00800044 	movi	r2,1
  8028fc:	94800044 	addi	r18,r18,1
  802900:	8c400044 	addi	r17,r17,1
  802904:	18800115 	stw	r2,4(r3)
  802908:	008001c4 	movi	r2,7
  80290c:	19000015 	stw	r4,0(r3)
  802910:	dc800e15 	stw	r18,56(sp)
  802914:	dc400d15 	stw	r17,52(sp)
  802918:	1441b616 	blt	r2,r17,802ff4 <___vfprintf_internal_r+0xe38>
  80291c:	1cc00204 	addi	r19,r3,8
  802920:	d9014217 	ldw	r4,1288(sp)
  802924:	d9414317 	ldw	r5,1292(sp)
  802928:	000d883a 	mov	r6,zero
  80292c:	000f883a 	mov	r7,zero
  802930:	080a4c00 	call	80a4c0 <__nedf2>
  802934:	10017426 	beq	r2,zero,802f08 <___vfprintf_internal_r+0xd4c>
  802938:	d9414717 	ldw	r5,1308(sp)
  80293c:	d9814117 	ldw	r6,1284(sp)
  802940:	8c400044 	addi	r17,r17,1
  802944:	2c85883a 	add	r2,r5,r18
  802948:	14bfffc4 	addi	r18,r2,-1
  80294c:	28bfffc4 	addi	r2,r5,-1
  802950:	30c00044 	addi	r3,r6,1
  802954:	98800115 	stw	r2,4(r19)
  802958:	008001c4 	movi	r2,7
  80295c:	98c00015 	stw	r3,0(r19)
  802960:	dc800e15 	stw	r18,56(sp)
  802964:	dc400d15 	stw	r17,52(sp)
  802968:	14418e16 	blt	r2,r17,802fa4 <___vfprintf_internal_r+0xde8>
  80296c:	9cc00204 	addi	r19,r19,8
  802970:	d9414817 	ldw	r5,1312(sp)
  802974:	d8800804 	addi	r2,sp,32
  802978:	8c400044 	addi	r17,r17,1
  80297c:	9165883a 	add	r18,r18,r5
  802980:	98800015 	stw	r2,0(r19)
  802984:	008001c4 	movi	r2,7
  802988:	99400115 	stw	r5,4(r19)
  80298c:	dc800e15 	stw	r18,56(sp)
  802990:	dc400d15 	stw	r17,52(sp)
  802994:	1440ed16 	blt	r2,r17,802d4c <___vfprintf_internal_r+0xb90>
  802998:	98c00204 	addi	r3,r19,8
  80299c:	003f8506 	br	8027b4 <___vfprintf_internal_r+0x5f8>
  8029a0:	d9814a17 	ldw	r6,1320(sp)
  8029a4:	d8814517 	ldw	r2,1300(sp)
  8029a8:	30a1c83a 	sub	r16,r6,r2
  8029ac:	043f4b0e 	bge	zero,r16,8026dc <___vfprintf_internal_r+0x520>
  8029b0:	00800404 	movi	r2,16
  8029b4:	14043a0e 	bge	r2,r16,803aa0 <___vfprintf_internal_r+0x18e4>
  8029b8:	1027883a 	mov	r19,r2
  8029bc:	07002074 	movhi	fp,129
  8029c0:	e711e484 	addi	fp,fp,18322
  8029c4:	050001c4 	movi	r20,7
  8029c8:	00000306 	br	8029d8 <___vfprintf_internal_r+0x81c>
  8029cc:	843ffc04 	addi	r16,r16,-16
  8029d0:	ad400204 	addi	r21,r21,8
  8029d4:	9c00130e 	bge	r19,r16,802a24 <___vfprintf_internal_r+0x868>
  8029d8:	94800404 	addi	r18,r18,16
  8029dc:	8c400044 	addi	r17,r17,1
  8029e0:	af000015 	stw	fp,0(r21)
  8029e4:	acc00115 	stw	r19,4(r21)
  8029e8:	dc800e15 	stw	r18,56(sp)
  8029ec:	dc400d15 	stw	r17,52(sp)
  8029f0:	a47ff60e 	bge	r20,r17,8029cc <___vfprintf_internal_r+0x810>
  8029f4:	d9014f17 	ldw	r4,1340(sp)
  8029f8:	b00b883a 	mov	r5,r22
  8029fc:	d9800c04 	addi	r6,sp,48
  802a00:	d9c15115 	stw	r7,1348(sp)
  802a04:	08021640 	call	802164 <__sprint_r>
  802a08:	d9c15117 	ldw	r7,1348(sp)
  802a0c:	103fa31e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802a10:	843ffc04 	addi	r16,r16,-16
  802a14:	dc800e17 	ldw	r18,56(sp)
  802a18:	dc400d17 	ldw	r17,52(sp)
  802a1c:	dd401904 	addi	r21,sp,100
  802a20:	9c3fed16 	blt	r19,r16,8029d8 <___vfprintf_internal_r+0x81c>
  802a24:	9425883a 	add	r18,r18,r16
  802a28:	8c400044 	addi	r17,r17,1
  802a2c:	008001c4 	movi	r2,7
  802a30:	af000015 	stw	fp,0(r21)
  802a34:	ac000115 	stw	r16,4(r21)
  802a38:	dc800e15 	stw	r18,56(sp)
  802a3c:	dc400d15 	stw	r17,52(sp)
  802a40:	14416116 	blt	r2,r17,802fc8 <___vfprintf_internal_r+0xe0c>
  802a44:	ad400204 	addi	r21,r21,8
  802a48:	003f2406 	br	8026dc <___vfprintf_internal_r+0x520>
  802a4c:	d9014f17 	ldw	r4,1340(sp)
  802a50:	0805c700 	call	805c70 <__sinit>
  802a54:	d9c15117 	ldw	r7,1348(sp)
  802a58:	003def06 	br	802218 <___vfprintf_internal_r+0x5c>
  802a5c:	d9014f17 	ldw	r4,1340(sp)
  802a60:	b00b883a 	mov	r5,r22
  802a64:	d9c15115 	stw	r7,1348(sp)
  802a68:	08040a40 	call	8040a4 <__swsetup_r>
  802a6c:	d9c15117 	ldw	r7,1348(sp)
  802a70:	103dee26 	beq	r2,zero,80222c <___vfprintf_internal_r+0x70>
  802a74:	003f8c06 	br	8028a8 <___vfprintf_internal_r+0x6ec>
  802a78:	d9014217 	ldw	r4,1288(sp)
  802a7c:	d9414317 	ldw	r5,1292(sp)
  802a80:	000d883a 	mov	r6,zero
  802a84:	000f883a 	mov	r7,zero
  802a88:	080a4380 	call	80a438 <__eqdf2>
  802a8c:	1000f21e 	bne	r2,zero,802e58 <___vfprintf_internal_r+0xc9c>
  802a90:	00802074 	movhi	r2,129
  802a94:	1091e404 	addi	r2,r2,18320
  802a98:	94800044 	addi	r18,r18,1
  802a9c:	8c400044 	addi	r17,r17,1
  802aa0:	a8800015 	stw	r2,0(r21)
  802aa4:	00c00044 	movi	r3,1
  802aa8:	008001c4 	movi	r2,7
  802aac:	a8c00115 	stw	r3,4(r21)
  802ab0:	dc800e15 	stw	r18,56(sp)
  802ab4:	dc400d15 	stw	r17,52(sp)
  802ab8:	14430016 	blt	r2,r17,8036bc <___vfprintf_internal_r+0x1500>
  802abc:	a8c00204 	addi	r3,r21,8
  802ac0:	d8800517 	ldw	r2,20(sp)
  802ac4:	d9014717 	ldw	r4,1308(sp)
  802ac8:	11015c0e 	bge	r2,r4,80303c <___vfprintf_internal_r+0xe80>
  802acc:	dc400d17 	ldw	r17,52(sp)
  802ad0:	d9814917 	ldw	r6,1316(sp)
  802ad4:	00800044 	movi	r2,1
  802ad8:	94800044 	addi	r18,r18,1
  802adc:	8c400044 	addi	r17,r17,1
  802ae0:	18800115 	stw	r2,4(r3)
  802ae4:	008001c4 	movi	r2,7
  802ae8:	19800015 	stw	r6,0(r3)
  802aec:	dc800e15 	stw	r18,56(sp)
  802af0:	dc400d15 	stw	r17,52(sp)
  802af4:	14431616 	blt	r2,r17,803750 <___vfprintf_internal_r+0x1594>
  802af8:	18c00204 	addi	r3,r3,8
  802afc:	d8814717 	ldw	r2,1308(sp)
  802b00:	143fffc4 	addi	r16,r2,-1
  802b04:	043f2b0e 	bge	zero,r16,8027b4 <___vfprintf_internal_r+0x5f8>
  802b08:	00800404 	movi	r2,16
  802b0c:	1402a80e 	bge	r2,r16,8035b0 <___vfprintf_internal_r+0x13f4>
  802b10:	dc400d17 	ldw	r17,52(sp)
  802b14:	1027883a 	mov	r19,r2
  802b18:	07002074 	movhi	fp,129
  802b1c:	e711e484 	addi	fp,fp,18322
  802b20:	050001c4 	movi	r20,7
  802b24:	00000306 	br	802b34 <___vfprintf_internal_r+0x978>
  802b28:	18c00204 	addi	r3,r3,8
  802b2c:	843ffc04 	addi	r16,r16,-16
  802b30:	9c02a20e 	bge	r19,r16,8035bc <___vfprintf_internal_r+0x1400>
  802b34:	94800404 	addi	r18,r18,16
  802b38:	8c400044 	addi	r17,r17,1
  802b3c:	1f000015 	stw	fp,0(r3)
  802b40:	1cc00115 	stw	r19,4(r3)
  802b44:	dc800e15 	stw	r18,56(sp)
  802b48:	dc400d15 	stw	r17,52(sp)
  802b4c:	a47ff60e 	bge	r20,r17,802b28 <___vfprintf_internal_r+0x96c>
  802b50:	d9014f17 	ldw	r4,1340(sp)
  802b54:	b00b883a 	mov	r5,r22
  802b58:	d9800c04 	addi	r6,sp,48
  802b5c:	08021640 	call	802164 <__sprint_r>
  802b60:	103f4e1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802b64:	dc800e17 	ldw	r18,56(sp)
  802b68:	dc400d17 	ldw	r17,52(sp)
  802b6c:	d8c01904 	addi	r3,sp,100
  802b70:	003fee06 	br	802b2c <___vfprintf_internal_r+0x970>
  802b74:	d8802c0b 	ldhu	r2,176(sp)
  802b78:	00ffffc4 	movi	r3,-1
  802b7c:	d8c14b15 	stw	r3,1324(sp)
  802b80:	1080100c 	andi	r2,r2,64
  802b84:	103dcc1e 	bne	r2,zero,8022b8 <___vfprintf_internal_r+0xfc>
  802b88:	003dce06 	br	8022c4 <___vfprintf_internal_r+0x108>
  802b8c:	d9014f17 	ldw	r4,1340(sp)
  802b90:	b00b883a 	mov	r5,r22
  802b94:	d9800c04 	addi	r6,sp,48
  802b98:	08021640 	call	802164 <__sprint_r>
  802b9c:	103f3f1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802ba0:	dc800e17 	ldw	r18,56(sp)
  802ba4:	003f2e06 	br	802860 <___vfprintf_internal_r+0x6a4>
  802ba8:	d9414c17 	ldw	r5,1328(sp)
  802bac:	29400414 	ori	r5,r5,16
  802bb0:	d9414c15 	stw	r5,1328(sp)
  802bb4:	d9814c17 	ldw	r6,1328(sp)
  802bb8:	3080080c 	andi	r2,r6,32
  802bbc:	10014f1e 	bne	r2,zero,8030fc <___vfprintf_internal_r+0xf40>
  802bc0:	d8c14c17 	ldw	r3,1328(sp)
  802bc4:	1880040c 	andi	r2,r3,16
  802bc8:	1002f01e 	bne	r2,zero,80378c <___vfprintf_internal_r+0x15d0>
  802bcc:	d9014c17 	ldw	r4,1328(sp)
  802bd0:	2080100c 	andi	r2,r4,64
  802bd4:	1002ed26 	beq	r2,zero,80378c <___vfprintf_internal_r+0x15d0>
  802bd8:	3880000f 	ldh	r2,0(r7)
  802bdc:	39c00104 	addi	r7,r7,4
  802be0:	d9c14015 	stw	r7,1280(sp)
  802be4:	1023d7fa 	srai	r17,r2,31
  802be8:	1021883a 	mov	r16,r2
  802bec:	88037816 	blt	r17,zero,8039d0 <___vfprintf_internal_r+0x1814>
  802bf0:	01000044 	movi	r4,1
  802bf4:	98000416 	blt	r19,zero,802c08 <___vfprintf_internal_r+0xa4c>
  802bf8:	d8c14c17 	ldw	r3,1328(sp)
  802bfc:	00bfdfc4 	movi	r2,-129
  802c00:	1886703a 	and	r3,r3,r2
  802c04:	d8c14c15 	stw	r3,1328(sp)
  802c08:	8444b03a 	or	r2,r16,r17
  802c0c:	10022c1e 	bne	r2,zero,8034c0 <___vfprintf_internal_r+0x1304>
  802c10:	98022b1e 	bne	r19,zero,8034c0 <___vfprintf_internal_r+0x1304>
  802c14:	20803fcc 	andi	r2,r4,255
  802c18:	1002a126 	beq	r2,zero,8036a0 <___vfprintf_internal_r+0x14e4>
  802c1c:	d8c01904 	addi	r3,sp,100
  802c20:	dd000f04 	addi	r20,sp,60
  802c24:	d8c14115 	stw	r3,1284(sp)
  802c28:	d8c14117 	ldw	r3,1284(sp)
  802c2c:	dcc14515 	stw	r19,1300(sp)
  802c30:	a0c5c83a 	sub	r2,r20,r3
  802c34:	11c00a04 	addi	r7,r2,40
  802c38:	99c0010e 	bge	r19,r7,802c40 <___vfprintf_internal_r+0xa84>
  802c3c:	d9c14515 	stw	r7,1300(sp)
  802c40:	dcc14615 	stw	r19,1304(sp)
  802c44:	d8800407 	ldb	r2,16(sp)
  802c48:	103e4c26 	beq	r2,zero,80257c <___vfprintf_internal_r+0x3c0>
  802c4c:	d8814517 	ldw	r2,1300(sp)
  802c50:	10800044 	addi	r2,r2,1
  802c54:	d8814515 	stw	r2,1300(sp)
  802c58:	003e4806 	br	80257c <___vfprintf_internal_r+0x3c0>
  802c5c:	d9814c17 	ldw	r6,1328(sp)
  802c60:	31800414 	ori	r6,r6,16
  802c64:	d9814c15 	stw	r6,1328(sp)
  802c68:	d8c14c17 	ldw	r3,1328(sp)
  802c6c:	1880080c 	andi	r2,r3,32
  802c70:	1001271e 	bne	r2,zero,803110 <___vfprintf_internal_r+0xf54>
  802c74:	d9414c17 	ldw	r5,1328(sp)
  802c78:	2880040c 	andi	r2,r5,16
  802c7c:	1002bc1e 	bne	r2,zero,803770 <___vfprintf_internal_r+0x15b4>
  802c80:	d9814c17 	ldw	r6,1328(sp)
  802c84:	3080100c 	andi	r2,r6,64
  802c88:	1002b926 	beq	r2,zero,803770 <___vfprintf_internal_r+0x15b4>
  802c8c:	3c00000b 	ldhu	r16,0(r7)
  802c90:	0009883a 	mov	r4,zero
  802c94:	39c00104 	addi	r7,r7,4
  802c98:	0023883a 	mov	r17,zero
  802c9c:	d9c14015 	stw	r7,1280(sp)
  802ca0:	d8000405 	stb	zero,16(sp)
  802ca4:	003fd306 	br	802bf4 <___vfprintf_internal_r+0xa38>
  802ca8:	d9014c17 	ldw	r4,1328(sp)
  802cac:	21000414 	ori	r4,r4,16
  802cb0:	d9014c15 	stw	r4,1328(sp)
  802cb4:	d9414c17 	ldw	r5,1328(sp)
  802cb8:	2880080c 	andi	r2,r5,32
  802cbc:	1001081e 	bne	r2,zero,8030e0 <___vfprintf_internal_r+0xf24>
  802cc0:	d8c14c17 	ldw	r3,1328(sp)
  802cc4:	1880040c 	andi	r2,r3,16
  802cc8:	1002b61e 	bne	r2,zero,8037a4 <___vfprintf_internal_r+0x15e8>
  802ccc:	d9014c17 	ldw	r4,1328(sp)
  802cd0:	2080100c 	andi	r2,r4,64
  802cd4:	1002b326 	beq	r2,zero,8037a4 <___vfprintf_internal_r+0x15e8>
  802cd8:	3c00000b 	ldhu	r16,0(r7)
  802cdc:	01000044 	movi	r4,1
  802ce0:	39c00104 	addi	r7,r7,4
  802ce4:	0023883a 	mov	r17,zero
  802ce8:	d9c14015 	stw	r7,1280(sp)
  802cec:	d8000405 	stb	zero,16(sp)
  802cf0:	003fc006 	br	802bf4 <___vfprintf_internal_r+0xa38>
  802cf4:	d9014f17 	ldw	r4,1340(sp)
  802cf8:	b00b883a 	mov	r5,r22
  802cfc:	d9800c04 	addi	r6,sp,48
  802d00:	08021640 	call	802164 <__sprint_r>
  802d04:	103ee51e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802d08:	dc800e17 	ldw	r18,56(sp)
  802d0c:	d8c01904 	addi	r3,sp,100
  802d10:	d9814c17 	ldw	r6,1328(sp)
  802d14:	3080004c 	andi	r2,r6,1
  802d18:	1005003a 	cmpeq	r2,r2,zero
  802d1c:	103ea51e 	bne	r2,zero,8027b4 <___vfprintf_internal_r+0x5f8>
  802d20:	00800044 	movi	r2,1
  802d24:	dc400d17 	ldw	r17,52(sp)
  802d28:	18800115 	stw	r2,4(r3)
  802d2c:	d8814917 	ldw	r2,1316(sp)
  802d30:	94800044 	addi	r18,r18,1
  802d34:	8c400044 	addi	r17,r17,1
  802d38:	18800015 	stw	r2,0(r3)
  802d3c:	008001c4 	movi	r2,7
  802d40:	dc800e15 	stw	r18,56(sp)
  802d44:	dc400d15 	stw	r17,52(sp)
  802d48:	1442240e 	bge	r2,r17,8035dc <___vfprintf_internal_r+0x1420>
  802d4c:	d9014f17 	ldw	r4,1340(sp)
  802d50:	b00b883a 	mov	r5,r22
  802d54:	d9800c04 	addi	r6,sp,48
  802d58:	08021640 	call	802164 <__sprint_r>
  802d5c:	103ecf1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802d60:	dc800e17 	ldw	r18,56(sp)
  802d64:	d8c01904 	addi	r3,sp,100
  802d68:	003e9206 	br	8027b4 <___vfprintf_internal_r+0x5f8>
  802d6c:	d9014f17 	ldw	r4,1340(sp)
  802d70:	b00b883a 	mov	r5,r22
  802d74:	d9800c04 	addi	r6,sp,48
  802d78:	08021640 	call	802164 <__sprint_r>
  802d7c:	103ec026 	beq	r2,zero,802880 <___vfprintf_internal_r+0x6c4>
  802d80:	003ec606 	br	80289c <___vfprintf_internal_r+0x6e0>
  802d84:	d9014f17 	ldw	r4,1340(sp)
  802d88:	b00b883a 	mov	r5,r22
  802d8c:	d9800c04 	addi	r6,sp,48
  802d90:	d9c15115 	stw	r7,1348(sp)
  802d94:	08021640 	call	802164 <__sprint_r>
  802d98:	d9c15117 	ldw	r7,1348(sp)
  802d9c:	103ebf1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802da0:	dc800e17 	ldw	r18,56(sp)
  802da4:	dc400d17 	ldw	r17,52(sp)
  802da8:	dd401904 	addi	r21,sp,100
  802dac:	003e7406 	br	802780 <___vfprintf_internal_r+0x5c4>
  802db0:	d9014f17 	ldw	r4,1340(sp)
  802db4:	b00b883a 	mov	r5,r22
  802db8:	d9800c04 	addi	r6,sp,48
  802dbc:	d9c15115 	stw	r7,1348(sp)
  802dc0:	08021640 	call	802164 <__sprint_r>
  802dc4:	d9c15117 	ldw	r7,1348(sp)
  802dc8:	103eb41e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802dcc:	dd401904 	addi	r21,sp,100
  802dd0:	003d6d06 	br	802388 <___vfprintf_internal_r+0x1cc>
  802dd4:	d9014f17 	ldw	r4,1340(sp)
  802dd8:	b00b883a 	mov	r5,r22
  802ddc:	d9800c04 	addi	r6,sp,48
  802de0:	d9c15115 	stw	r7,1348(sp)
  802de4:	08021640 	call	802164 <__sprint_r>
  802de8:	d9c15117 	ldw	r7,1348(sp)
  802dec:	103eab1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802df0:	dc800e17 	ldw	r18,56(sp)
  802df4:	dc400d17 	ldw	r17,52(sp)
  802df8:	dd401904 	addi	r21,sp,100
  802dfc:	003e3406 	br	8026d0 <___vfprintf_internal_r+0x514>
  802e00:	d9014f17 	ldw	r4,1340(sp)
  802e04:	b00b883a 	mov	r5,r22
  802e08:	d9800c04 	addi	r6,sp,48
  802e0c:	d9c15115 	stw	r7,1348(sp)
  802e10:	08021640 	call	802164 <__sprint_r>
  802e14:	d9c15117 	ldw	r7,1348(sp)
  802e18:	103ea01e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802e1c:	dc800e17 	ldw	r18,56(sp)
  802e20:	dc400d17 	ldw	r17,52(sp)
  802e24:	dd401904 	addi	r21,sp,100
  802e28:	003e1c06 	br	80269c <___vfprintf_internal_r+0x4e0>
  802e2c:	d9014f17 	ldw	r4,1340(sp)
  802e30:	b00b883a 	mov	r5,r22
  802e34:	d9800c04 	addi	r6,sp,48
  802e38:	d9c15115 	stw	r7,1348(sp)
  802e3c:	08021640 	call	802164 <__sprint_r>
  802e40:	d9c15117 	ldw	r7,1348(sp)
  802e44:	103e951e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802e48:	dc800e17 	ldw	r18,56(sp)
  802e4c:	dc400d17 	ldw	r17,52(sp)
  802e50:	dd401904 	addi	r21,sp,100
  802e54:	003e0406 	br	802668 <___vfprintf_internal_r+0x4ac>
  802e58:	d9000517 	ldw	r4,20(sp)
  802e5c:	0102580e 	bge	zero,r4,8037c0 <___vfprintf_internal_r+0x1604>
  802e60:	d9814717 	ldw	r6,1308(sp)
  802e64:	21807a16 	blt	r4,r6,803050 <___vfprintf_internal_r+0xe94>
  802e68:	d8814117 	ldw	r2,1284(sp)
  802e6c:	91a5883a 	add	r18,r18,r6
  802e70:	8c400044 	addi	r17,r17,1
  802e74:	a8800015 	stw	r2,0(r21)
  802e78:	008001c4 	movi	r2,7
  802e7c:	a9800115 	stw	r6,4(r21)
  802e80:	dc800e15 	stw	r18,56(sp)
  802e84:	dc400d15 	stw	r17,52(sp)
  802e88:	1442fc16 	blt	r2,r17,803a7c <___vfprintf_internal_r+0x18c0>
  802e8c:	a8c00204 	addi	r3,r21,8
  802e90:	d9414717 	ldw	r5,1308(sp)
  802e94:	2161c83a 	sub	r16,r4,r5
  802e98:	043f9d0e 	bge	zero,r16,802d10 <___vfprintf_internal_r+0xb54>
  802e9c:	00800404 	movi	r2,16
  802ea0:	1402190e 	bge	r2,r16,803708 <___vfprintf_internal_r+0x154c>
  802ea4:	dc400d17 	ldw	r17,52(sp)
  802ea8:	1027883a 	mov	r19,r2
  802eac:	07002074 	movhi	fp,129
  802eb0:	e711e484 	addi	fp,fp,18322
  802eb4:	050001c4 	movi	r20,7
  802eb8:	00000306 	br	802ec8 <___vfprintf_internal_r+0xd0c>
  802ebc:	18c00204 	addi	r3,r3,8
  802ec0:	843ffc04 	addi	r16,r16,-16
  802ec4:	9c02130e 	bge	r19,r16,803714 <___vfprintf_internal_r+0x1558>
  802ec8:	94800404 	addi	r18,r18,16
  802ecc:	8c400044 	addi	r17,r17,1
  802ed0:	1f000015 	stw	fp,0(r3)
  802ed4:	1cc00115 	stw	r19,4(r3)
  802ed8:	dc800e15 	stw	r18,56(sp)
  802edc:	dc400d15 	stw	r17,52(sp)
  802ee0:	a47ff60e 	bge	r20,r17,802ebc <___vfprintf_internal_r+0xd00>
  802ee4:	d9014f17 	ldw	r4,1340(sp)
  802ee8:	b00b883a 	mov	r5,r22
  802eec:	d9800c04 	addi	r6,sp,48
  802ef0:	08021640 	call	802164 <__sprint_r>
  802ef4:	103e691e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802ef8:	dc800e17 	ldw	r18,56(sp)
  802efc:	dc400d17 	ldw	r17,52(sp)
  802f00:	d8c01904 	addi	r3,sp,100
  802f04:	003fee06 	br	802ec0 <___vfprintf_internal_r+0xd04>
  802f08:	d8814717 	ldw	r2,1308(sp)
  802f0c:	143fffc4 	addi	r16,r2,-1
  802f10:	043e970e 	bge	zero,r16,802970 <___vfprintf_internal_r+0x7b4>
  802f14:	00800404 	movi	r2,16
  802f18:	1400180e 	bge	r2,r16,802f7c <___vfprintf_internal_r+0xdc0>
  802f1c:	1029883a 	mov	r20,r2
  802f20:	07002074 	movhi	fp,129
  802f24:	e711e484 	addi	fp,fp,18322
  802f28:	054001c4 	movi	r21,7
  802f2c:	00000306 	br	802f3c <___vfprintf_internal_r+0xd80>
  802f30:	9cc00204 	addi	r19,r19,8
  802f34:	843ffc04 	addi	r16,r16,-16
  802f38:	a400120e 	bge	r20,r16,802f84 <___vfprintf_internal_r+0xdc8>
  802f3c:	94800404 	addi	r18,r18,16
  802f40:	8c400044 	addi	r17,r17,1
  802f44:	9f000015 	stw	fp,0(r19)
  802f48:	9d000115 	stw	r20,4(r19)
  802f4c:	dc800e15 	stw	r18,56(sp)
  802f50:	dc400d15 	stw	r17,52(sp)
  802f54:	ac7ff60e 	bge	r21,r17,802f30 <___vfprintf_internal_r+0xd74>
  802f58:	d9014f17 	ldw	r4,1340(sp)
  802f5c:	b00b883a 	mov	r5,r22
  802f60:	d9800c04 	addi	r6,sp,48
  802f64:	08021640 	call	802164 <__sprint_r>
  802f68:	103e4c1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802f6c:	dc800e17 	ldw	r18,56(sp)
  802f70:	dc400d17 	ldw	r17,52(sp)
  802f74:	dcc01904 	addi	r19,sp,100
  802f78:	003fee06 	br	802f34 <___vfprintf_internal_r+0xd78>
  802f7c:	07002074 	movhi	fp,129
  802f80:	e711e484 	addi	fp,fp,18322
  802f84:	9425883a 	add	r18,r18,r16
  802f88:	8c400044 	addi	r17,r17,1
  802f8c:	008001c4 	movi	r2,7
  802f90:	9f000015 	stw	fp,0(r19)
  802f94:	9c000115 	stw	r16,4(r19)
  802f98:	dc800e15 	stw	r18,56(sp)
  802f9c:	dc400d15 	stw	r17,52(sp)
  802fa0:	147e720e 	bge	r2,r17,80296c <___vfprintf_internal_r+0x7b0>
  802fa4:	d9014f17 	ldw	r4,1340(sp)
  802fa8:	b00b883a 	mov	r5,r22
  802fac:	d9800c04 	addi	r6,sp,48
  802fb0:	08021640 	call	802164 <__sprint_r>
  802fb4:	103e391e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802fb8:	dc800e17 	ldw	r18,56(sp)
  802fbc:	dc400d17 	ldw	r17,52(sp)
  802fc0:	dcc01904 	addi	r19,sp,100
  802fc4:	003e6a06 	br	802970 <___vfprintf_internal_r+0x7b4>
  802fc8:	d9014f17 	ldw	r4,1340(sp)
  802fcc:	b00b883a 	mov	r5,r22
  802fd0:	d9800c04 	addi	r6,sp,48
  802fd4:	d9c15115 	stw	r7,1348(sp)
  802fd8:	08021640 	call	802164 <__sprint_r>
  802fdc:	d9c15117 	ldw	r7,1348(sp)
  802fe0:	103e2e1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  802fe4:	dc800e17 	ldw	r18,56(sp)
  802fe8:	dc400d17 	ldw	r17,52(sp)
  802fec:	dd401904 	addi	r21,sp,100
  802ff0:	003dba06 	br	8026dc <___vfprintf_internal_r+0x520>
  802ff4:	d9014f17 	ldw	r4,1340(sp)
  802ff8:	b00b883a 	mov	r5,r22
  802ffc:	d9800c04 	addi	r6,sp,48
  803000:	08021640 	call	802164 <__sprint_r>
  803004:	103e251e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803008:	dc800e17 	ldw	r18,56(sp)
  80300c:	dc400d17 	ldw	r17,52(sp)
  803010:	dcc01904 	addi	r19,sp,100
  803014:	003e4206 	br	802920 <___vfprintf_internal_r+0x764>
  803018:	d9014f17 	ldw	r4,1340(sp)
  80301c:	b00b883a 	mov	r5,r22
  803020:	d9800c04 	addi	r6,sp,48
  803024:	08021640 	call	802164 <__sprint_r>
  803028:	103e1c1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  80302c:	dc800e17 	ldw	r18,56(sp)
  803030:	dc400d17 	ldw	r17,52(sp)
  803034:	d8c01904 	addi	r3,sp,100
  803038:	003e2e06 	br	8028f4 <___vfprintf_internal_r+0x738>
  80303c:	d9414c17 	ldw	r5,1328(sp)
  803040:	2880004c 	andi	r2,r5,1
  803044:	1005003a 	cmpeq	r2,r2,zero
  803048:	103dda1e 	bne	r2,zero,8027b4 <___vfprintf_internal_r+0x5f8>
  80304c:	003e9f06 	br	802acc <___vfprintf_internal_r+0x910>
  803050:	d8c14117 	ldw	r3,1284(sp)
  803054:	9125883a 	add	r18,r18,r4
  803058:	8c400044 	addi	r17,r17,1
  80305c:	008001c4 	movi	r2,7
  803060:	a8c00015 	stw	r3,0(r21)
  803064:	a9000115 	stw	r4,4(r21)
  803068:	dc800e15 	stw	r18,56(sp)
  80306c:	dc400d15 	stw	r17,52(sp)
  803070:	14426c16 	blt	r2,r17,803a24 <___vfprintf_internal_r+0x1868>
  803074:	a8c00204 	addi	r3,r21,8
  803078:	d9414917 	ldw	r5,1316(sp)
  80307c:	00800044 	movi	r2,1
  803080:	94800044 	addi	r18,r18,1
  803084:	8c400044 	addi	r17,r17,1
  803088:	18800115 	stw	r2,4(r3)
  80308c:	008001c4 	movi	r2,7
  803090:	19400015 	stw	r5,0(r3)
  803094:	dc800e15 	stw	r18,56(sp)
  803098:	dc400d15 	stw	r17,52(sp)
  80309c:	2021883a 	mov	r16,r4
  8030a0:	14425616 	blt	r2,r17,8039fc <___vfprintf_internal_r+0x1840>
  8030a4:	19400204 	addi	r5,r3,8
  8030a8:	d9814717 	ldw	r6,1308(sp)
  8030ac:	8c400044 	addi	r17,r17,1
  8030b0:	dc400d15 	stw	r17,52(sp)
  8030b4:	3107c83a 	sub	r3,r6,r4
  8030b8:	d9014117 	ldw	r4,1284(sp)
  8030bc:	90e5883a 	add	r18,r18,r3
  8030c0:	28c00115 	stw	r3,4(r5)
  8030c4:	8105883a 	add	r2,r16,r4
  8030c8:	28800015 	stw	r2,0(r5)
  8030cc:	008001c4 	movi	r2,7
  8030d0:	dc800e15 	stw	r18,56(sp)
  8030d4:	147f1d16 	blt	r2,r17,802d4c <___vfprintf_internal_r+0xb90>
  8030d8:	28c00204 	addi	r3,r5,8
  8030dc:	003db506 	br	8027b4 <___vfprintf_internal_r+0x5f8>
  8030e0:	3c000017 	ldw	r16,0(r7)
  8030e4:	3c400117 	ldw	r17,4(r7)
  8030e8:	39800204 	addi	r6,r7,8
  8030ec:	01000044 	movi	r4,1
  8030f0:	d9814015 	stw	r6,1280(sp)
  8030f4:	d8000405 	stb	zero,16(sp)
  8030f8:	003ebe06 	br	802bf4 <___vfprintf_internal_r+0xa38>
  8030fc:	3c000017 	ldw	r16,0(r7)
  803100:	3c400117 	ldw	r17,4(r7)
  803104:	38800204 	addi	r2,r7,8
  803108:	d8814015 	stw	r2,1280(sp)
  80310c:	003eb706 	br	802bec <___vfprintf_internal_r+0xa30>
  803110:	3c000017 	ldw	r16,0(r7)
  803114:	3c400117 	ldw	r17,4(r7)
  803118:	39000204 	addi	r4,r7,8
  80311c:	d9014015 	stw	r4,1280(sp)
  803120:	0009883a 	mov	r4,zero
  803124:	d8000405 	stb	zero,16(sp)
  803128:	003eb206 	br	802bf4 <___vfprintf_internal_r+0xa38>
  80312c:	38c00017 	ldw	r3,0(r7)
  803130:	39c00104 	addi	r7,r7,4
  803134:	d8c14a15 	stw	r3,1320(sp)
  803138:	1800d70e 	bge	r3,zero,803498 <___vfprintf_internal_r+0x12dc>
  80313c:	00c7c83a 	sub	r3,zero,r3
  803140:	d8c14a15 	stw	r3,1320(sp)
  803144:	d9014c17 	ldw	r4,1328(sp)
  803148:	b8c00007 	ldb	r3,0(r23)
  80314c:	21000114 	ori	r4,r4,4
  803150:	d9014c15 	stw	r4,1328(sp)
  803154:	003c9806 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  803158:	d9814c17 	ldw	r6,1328(sp)
  80315c:	3080080c 	andi	r2,r6,32
  803160:	1001f626 	beq	r2,zero,80393c <___vfprintf_internal_r+0x1780>
  803164:	d9014b17 	ldw	r4,1324(sp)
  803168:	38800017 	ldw	r2,0(r7)
  80316c:	39c00104 	addi	r7,r7,4
  803170:	d9c14015 	stw	r7,1280(sp)
  803174:	2007d7fa 	srai	r3,r4,31
  803178:	d9c14017 	ldw	r7,1280(sp)
  80317c:	11000015 	stw	r4,0(r2)
  803180:	10c00115 	stw	r3,4(r2)
  803184:	003c6906 	br	80232c <___vfprintf_internal_r+0x170>
  803188:	b8c00007 	ldb	r3,0(r23)
  80318c:	00801b04 	movi	r2,108
  803190:	18825526 	beq	r3,r2,803ae8 <___vfprintf_internal_r+0x192c>
  803194:	d9414c17 	ldw	r5,1328(sp)
  803198:	29400414 	ori	r5,r5,16
  80319c:	d9414c15 	stw	r5,1328(sp)
  8031a0:	003c8506 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  8031a4:	d9814c17 	ldw	r6,1328(sp)
  8031a8:	b8c00007 	ldb	r3,0(r23)
  8031ac:	31800814 	ori	r6,r6,32
  8031b0:	d9814c15 	stw	r6,1328(sp)
  8031b4:	003c8006 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  8031b8:	d8814c17 	ldw	r2,1328(sp)
  8031bc:	3c000017 	ldw	r16,0(r7)
  8031c0:	00c01e04 	movi	r3,120
  8031c4:	10800094 	ori	r2,r2,2
  8031c8:	d8814c15 	stw	r2,1328(sp)
  8031cc:	39c00104 	addi	r7,r7,4
  8031d0:	01402074 	movhi	r5,129
  8031d4:	2951cd04 	addi	r5,r5,18228
  8031d8:	00800c04 	movi	r2,48
  8031dc:	0023883a 	mov	r17,zero
  8031e0:	01000084 	movi	r4,2
  8031e4:	d9c14015 	stw	r7,1280(sp)
  8031e8:	d8c14d15 	stw	r3,1332(sp)
  8031ec:	d9414415 	stw	r5,1296(sp)
  8031f0:	d8800445 	stb	r2,17(sp)
  8031f4:	d8c00485 	stb	r3,18(sp)
  8031f8:	d8000405 	stb	zero,16(sp)
  8031fc:	003e7d06 	br	802bf4 <___vfprintf_internal_r+0xa38>
  803200:	d8814c17 	ldw	r2,1328(sp)
  803204:	b8c00007 	ldb	r3,0(r23)
  803208:	10801014 	ori	r2,r2,64
  80320c:	d8814c15 	stw	r2,1328(sp)
  803210:	003c6906 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  803214:	d9414c17 	ldw	r5,1328(sp)
  803218:	2880020c 	andi	r2,r5,8
  80321c:	1001e526 	beq	r2,zero,8039b4 <___vfprintf_internal_r+0x17f8>
  803220:	39800017 	ldw	r6,0(r7)
  803224:	38800204 	addi	r2,r7,8
  803228:	d8814015 	stw	r2,1280(sp)
  80322c:	d9814215 	stw	r6,1288(sp)
  803230:	39c00117 	ldw	r7,4(r7)
  803234:	d9c14315 	stw	r7,1292(sp)
  803238:	d9014217 	ldw	r4,1288(sp)
  80323c:	d9414317 	ldw	r5,1292(sp)
  803240:	080852c0 	call	80852c <__isinfd>
  803244:	10021d26 	beq	r2,zero,803abc <___vfprintf_internal_r+0x1900>
  803248:	d9014217 	ldw	r4,1288(sp)
  80324c:	d9414317 	ldw	r5,1292(sp)
  803250:	000d883a 	mov	r6,zero
  803254:	000f883a 	mov	r7,zero
  803258:	080a6580 	call	80a658 <__ltdf2>
  80325c:	1002d016 	blt	r2,zero,803da0 <___vfprintf_internal_r+0x1be4>
  803260:	d9414d17 	ldw	r5,1332(sp)
  803264:	008011c4 	movi	r2,71
  803268:	11421016 	blt	r2,r5,803aac <___vfprintf_internal_r+0x18f0>
  80326c:	01802074 	movhi	r6,129
  803270:	3191d204 	addi	r6,r6,18248
  803274:	d9814115 	stw	r6,1284(sp)
  803278:	d9014c17 	ldw	r4,1328(sp)
  80327c:	00c000c4 	movi	r3,3
  803280:	00bfdfc4 	movi	r2,-129
  803284:	2088703a 	and	r4,r4,r2
  803288:	180f883a 	mov	r7,r3
  80328c:	d8c14515 	stw	r3,1300(sp)
  803290:	d9014c15 	stw	r4,1328(sp)
  803294:	d8014615 	stw	zero,1304(sp)
  803298:	003e6a06 	br	802c44 <___vfprintf_internal_r+0xa88>
  80329c:	38800017 	ldw	r2,0(r7)
  8032a0:	00c00044 	movi	r3,1
  8032a4:	39c00104 	addi	r7,r7,4
  8032a8:	d9c14015 	stw	r7,1280(sp)
  8032ac:	d9000f04 	addi	r4,sp,60
  8032b0:	180f883a 	mov	r7,r3
  8032b4:	d8c14515 	stw	r3,1300(sp)
  8032b8:	d9014115 	stw	r4,1284(sp)
  8032bc:	d8800f05 	stb	r2,60(sp)
  8032c0:	d8000405 	stb	zero,16(sp)
  8032c4:	003cac06 	br	802578 <___vfprintf_internal_r+0x3bc>
  8032c8:	01402074 	movhi	r5,129
  8032cc:	2951d804 	addi	r5,r5,18272
  8032d0:	d9414415 	stw	r5,1296(sp)
  8032d4:	d9814c17 	ldw	r6,1328(sp)
  8032d8:	3080080c 	andi	r2,r6,32
  8032dc:	1000ff26 	beq	r2,zero,8036dc <___vfprintf_internal_r+0x1520>
  8032e0:	3c000017 	ldw	r16,0(r7)
  8032e4:	3c400117 	ldw	r17,4(r7)
  8032e8:	38800204 	addi	r2,r7,8
  8032ec:	d8814015 	stw	r2,1280(sp)
  8032f0:	d9414c17 	ldw	r5,1328(sp)
  8032f4:	2880004c 	andi	r2,r5,1
  8032f8:	1005003a 	cmpeq	r2,r2,zero
  8032fc:	1000b91e 	bne	r2,zero,8035e4 <___vfprintf_internal_r+0x1428>
  803300:	8444b03a 	or	r2,r16,r17
  803304:	1000b726 	beq	r2,zero,8035e4 <___vfprintf_internal_r+0x1428>
  803308:	d9814d17 	ldw	r6,1332(sp)
  80330c:	29400094 	ori	r5,r5,2
  803310:	00800c04 	movi	r2,48
  803314:	01000084 	movi	r4,2
  803318:	d9414c15 	stw	r5,1328(sp)
  80331c:	d8800445 	stb	r2,17(sp)
  803320:	d9800485 	stb	r6,18(sp)
  803324:	d8000405 	stb	zero,16(sp)
  803328:	003e3206 	br	802bf4 <___vfprintf_internal_r+0xa38>
  80332c:	01802074 	movhi	r6,129
  803330:	3191cd04 	addi	r6,r6,18228
  803334:	d9814415 	stw	r6,1296(sp)
  803338:	003fe606 	br	8032d4 <___vfprintf_internal_r+0x1118>
  80333c:	00800ac4 	movi	r2,43
  803340:	d8800405 	stb	r2,16(sp)
  803344:	b8c00007 	ldb	r3,0(r23)
  803348:	003c1b06 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  80334c:	d8814c17 	ldw	r2,1328(sp)
  803350:	b8c00007 	ldb	r3,0(r23)
  803354:	10800054 	ori	r2,r2,1
  803358:	d8814c15 	stw	r2,1328(sp)
  80335c:	003c1606 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  803360:	d8800407 	ldb	r2,16(sp)
  803364:	10004c1e 	bne	r2,zero,803498 <___vfprintf_internal_r+0x12dc>
  803368:	00800804 	movi	r2,32
  80336c:	d8800405 	stb	r2,16(sp)
  803370:	b8c00007 	ldb	r3,0(r23)
  803374:	003c1006 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  803378:	d9814c17 	ldw	r6,1328(sp)
  80337c:	b8c00007 	ldb	r3,0(r23)
  803380:	31800214 	ori	r6,r6,8
  803384:	d9814c15 	stw	r6,1328(sp)
  803388:	003c0b06 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  80338c:	0009883a 	mov	r4,zero
  803390:	04000244 	movi	r16,9
  803394:	01400284 	movi	r5,10
  803398:	d9c15115 	stw	r7,1348(sp)
  80339c:	08017b40 	call	8017b4 <__mulsi3>
  8033a0:	b9000007 	ldb	r4,0(r23)
  8033a4:	d8c14d17 	ldw	r3,1332(sp)
  8033a8:	bdc00044 	addi	r23,r23,1
  8033ac:	d9014d15 	stw	r4,1332(sp)
  8033b0:	d9414d17 	ldw	r5,1332(sp)
  8033b4:	1885883a 	add	r2,r3,r2
  8033b8:	113ff404 	addi	r4,r2,-48
  8033bc:	28bff404 	addi	r2,r5,-48
  8033c0:	d9c15117 	ldw	r7,1348(sp)
  8033c4:	80bff32e 	bgeu	r16,r2,803394 <___vfprintf_internal_r+0x11d8>
  8033c8:	d9014a15 	stw	r4,1320(sp)
  8033cc:	003bfc06 	br	8023c0 <___vfprintf_internal_r+0x204>
  8033d0:	d8814c17 	ldw	r2,1328(sp)
  8033d4:	b8c00007 	ldb	r3,0(r23)
  8033d8:	10802014 	ori	r2,r2,128
  8033dc:	d8814c15 	stw	r2,1328(sp)
  8033e0:	003bf506 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  8033e4:	b8c00007 	ldb	r3,0(r23)
  8033e8:	00800a84 	movi	r2,42
  8033ec:	bdc00044 	addi	r23,r23,1
  8033f0:	18831826 	beq	r3,r2,804054 <___vfprintf_internal_r+0x1e98>
  8033f4:	d8c14d15 	stw	r3,1332(sp)
  8033f8:	18bff404 	addi	r2,r3,-48
  8033fc:	00c00244 	movi	r3,9
  803400:	18827b36 	bltu	r3,r2,803df0 <___vfprintf_internal_r+0x1c34>
  803404:	1821883a 	mov	r16,r3
  803408:	0009883a 	mov	r4,zero
  80340c:	01400284 	movi	r5,10
  803410:	d9c15115 	stw	r7,1348(sp)
  803414:	08017b40 	call	8017b4 <__mulsi3>
  803418:	d9414d17 	ldw	r5,1332(sp)
  80341c:	b9800007 	ldb	r6,0(r23)
  803420:	d9c15117 	ldw	r7,1348(sp)
  803424:	1145883a 	add	r2,r2,r5
  803428:	113ff404 	addi	r4,r2,-48
  80342c:	30bff404 	addi	r2,r6,-48
  803430:	d9814d15 	stw	r6,1332(sp)
  803434:	bdc00044 	addi	r23,r23,1
  803438:	80bff42e 	bgeu	r16,r2,80340c <___vfprintf_internal_r+0x1250>
  80343c:	2027883a 	mov	r19,r4
  803440:	203bdf0e 	bge	r4,zero,8023c0 <___vfprintf_internal_r+0x204>
  803444:	04ffffc4 	movi	r19,-1
  803448:	003bdd06 	br	8023c0 <___vfprintf_internal_r+0x204>
  80344c:	d8000405 	stb	zero,16(sp)
  803450:	39800017 	ldw	r6,0(r7)
  803454:	39c00104 	addi	r7,r7,4
  803458:	d9c14015 	stw	r7,1280(sp)
  80345c:	d9814115 	stw	r6,1284(sp)
  803460:	3001c926 	beq	r6,zero,803b88 <___vfprintf_internal_r+0x19cc>
  803464:	98000e16 	blt	r19,zero,8034a0 <___vfprintf_internal_r+0x12e4>
  803468:	d9014117 	ldw	r4,1284(sp)
  80346c:	000b883a 	mov	r5,zero
  803470:	980d883a 	mov	r6,r19
  803474:	0806bb00 	call	806bb0 <memchr>
  803478:	10025926 	beq	r2,zero,803de0 <___vfprintf_internal_r+0x1c24>
  80347c:	d8c14117 	ldw	r3,1284(sp)
  803480:	10cfc83a 	sub	r7,r2,r3
  803484:	99c19e16 	blt	r19,r7,803b00 <___vfprintf_internal_r+0x1944>
  803488:	d9c14515 	stw	r7,1300(sp)
  80348c:	38000916 	blt	r7,zero,8034b4 <___vfprintf_internal_r+0x12f8>
  803490:	d8014615 	stw	zero,1304(sp)
  803494:	003deb06 	br	802c44 <___vfprintf_internal_r+0xa88>
  803498:	b8c00007 	ldb	r3,0(r23)
  80349c:	003bc606 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  8034a0:	d9014117 	ldw	r4,1284(sp)
  8034a4:	08020f00 	call	8020f0 <strlen>
  8034a8:	d8814515 	stw	r2,1300(sp)
  8034ac:	100f883a 	mov	r7,r2
  8034b0:	103ff70e 	bge	r2,zero,803490 <___vfprintf_internal_r+0x12d4>
  8034b4:	d8014515 	stw	zero,1300(sp)
  8034b8:	d8014615 	stw	zero,1304(sp)
  8034bc:	003de106 	br	802c44 <___vfprintf_internal_r+0xa88>
  8034c0:	20c03fcc 	andi	r3,r4,255
  8034c4:	00800044 	movi	r2,1
  8034c8:	18802d26 	beq	r3,r2,803580 <___vfprintf_internal_r+0x13c4>
  8034cc:	18800e36 	bltu	r3,r2,803508 <___vfprintf_internal_r+0x134c>
  8034d0:	00800084 	movi	r2,2
  8034d4:	1880fa26 	beq	r3,r2,8038c0 <___vfprintf_internal_r+0x1704>
  8034d8:	01002074 	movhi	r4,129
  8034dc:	2111dd04 	addi	r4,r4,18292
  8034e0:	08020f00 	call	8020f0 <strlen>
  8034e4:	100f883a 	mov	r7,r2
  8034e8:	dcc14515 	stw	r19,1300(sp)
  8034ec:	9880010e 	bge	r19,r2,8034f4 <___vfprintf_internal_r+0x1338>
  8034f0:	d8814515 	stw	r2,1300(sp)
  8034f4:	00802074 	movhi	r2,129
  8034f8:	1091dd04 	addi	r2,r2,18292
  8034fc:	dcc14615 	stw	r19,1304(sp)
  803500:	d8814115 	stw	r2,1284(sp)
  803504:	003dcf06 	br	802c44 <___vfprintf_internal_r+0xa88>
  803508:	d9401904 	addi	r5,sp,100
  80350c:	dd000f04 	addi	r20,sp,60
  803510:	d9414115 	stw	r5,1284(sp)
  803514:	880a977a 	slli	r5,r17,29
  803518:	d9814117 	ldw	r6,1284(sp)
  80351c:	8004d0fa 	srli	r2,r16,3
  803520:	8806d0fa 	srli	r3,r17,3
  803524:	810001cc 	andi	r4,r16,7
  803528:	2884b03a 	or	r2,r5,r2
  80352c:	31bfffc4 	addi	r6,r6,-1
  803530:	21000c04 	addi	r4,r4,48
  803534:	d9814115 	stw	r6,1284(sp)
  803538:	10cab03a 	or	r5,r2,r3
  80353c:	31000005 	stb	r4,0(r6)
  803540:	1021883a 	mov	r16,r2
  803544:	1823883a 	mov	r17,r3
  803548:	283ff21e 	bne	r5,zero,803514 <___vfprintf_internal_r+0x1358>
  80354c:	d8c14c17 	ldw	r3,1328(sp)
  803550:	1880004c 	andi	r2,r3,1
  803554:	1005003a 	cmpeq	r2,r2,zero
  803558:	103db31e 	bne	r2,zero,802c28 <___vfprintf_internal_r+0xa6c>
  80355c:	20803fcc 	andi	r2,r4,255
  803560:	1080201c 	xori	r2,r2,128
  803564:	10bfe004 	addi	r2,r2,-128
  803568:	00c00c04 	movi	r3,48
  80356c:	10fdae26 	beq	r2,r3,802c28 <___vfprintf_internal_r+0xa6c>
  803570:	31bfffc4 	addi	r6,r6,-1
  803574:	d9814115 	stw	r6,1284(sp)
  803578:	30c00005 	stb	r3,0(r6)
  80357c:	003daa06 	br	802c28 <___vfprintf_internal_r+0xa6c>
  803580:	88800068 	cmpgeui	r2,r17,1
  803584:	10002c1e 	bne	r2,zero,803638 <___vfprintf_internal_r+0x147c>
  803588:	8800021e 	bne	r17,zero,803594 <___vfprintf_internal_r+0x13d8>
  80358c:	00800244 	movi	r2,9
  803590:	14002936 	bltu	r2,r16,803638 <___vfprintf_internal_r+0x147c>
  803594:	d90018c4 	addi	r4,sp,99
  803598:	dd000f04 	addi	r20,sp,60
  80359c:	d9014115 	stw	r4,1284(sp)
  8035a0:	d9014117 	ldw	r4,1284(sp)
  8035a4:	80800c04 	addi	r2,r16,48
  8035a8:	20800005 	stb	r2,0(r4)
  8035ac:	003d9e06 	br	802c28 <___vfprintf_internal_r+0xa6c>
  8035b0:	dc400d17 	ldw	r17,52(sp)
  8035b4:	07002074 	movhi	fp,129
  8035b8:	e711e484 	addi	fp,fp,18322
  8035bc:	9425883a 	add	r18,r18,r16
  8035c0:	8c400044 	addi	r17,r17,1
  8035c4:	008001c4 	movi	r2,7
  8035c8:	1f000015 	stw	fp,0(r3)
  8035cc:	1c000115 	stw	r16,4(r3)
  8035d0:	dc800e15 	stw	r18,56(sp)
  8035d4:	dc400d15 	stw	r17,52(sp)
  8035d8:	147ddc16 	blt	r2,r17,802d4c <___vfprintf_internal_r+0xb90>
  8035dc:	18c00204 	addi	r3,r3,8
  8035e0:	003c7406 	br	8027b4 <___vfprintf_internal_r+0x5f8>
  8035e4:	01000084 	movi	r4,2
  8035e8:	d8000405 	stb	zero,16(sp)
  8035ec:	003d8106 	br	802bf4 <___vfprintf_internal_r+0xa38>
  8035f0:	d9814c17 	ldw	r6,1328(sp)
  8035f4:	30c4703a 	and	r2,r6,r3
  8035f8:	1005003a 	cmpeq	r2,r2,zero
  8035fc:	103cb326 	beq	r2,zero,8028cc <___vfprintf_internal_r+0x710>
  803600:	d9014117 	ldw	r4,1284(sp)
  803604:	94800044 	addi	r18,r18,1
  803608:	8c400044 	addi	r17,r17,1
  80360c:	008001c4 	movi	r2,7
  803610:	a9000015 	stw	r4,0(r21)
  803614:	a8c00115 	stw	r3,4(r21)
  803618:	dc800e15 	stw	r18,56(sp)
  80361c:	dc400d15 	stw	r17,52(sp)
  803620:	147e6016 	blt	r2,r17,802fa4 <___vfprintf_internal_r+0xde8>
  803624:	acc00204 	addi	r19,r21,8
  803628:	003cd106 	br	802970 <___vfprintf_internal_r+0x7b4>
  80362c:	07002074 	movhi	fp,129
  803630:	e711e484 	addi	fp,fp,18322
  803634:	003c4906 	br	80275c <___vfprintf_internal_r+0x5a0>
  803638:	dd000f04 	addi	r20,sp,60
  80363c:	dc801904 	addi	r18,sp,100
  803640:	8009883a 	mov	r4,r16
  803644:	880b883a 	mov	r5,r17
  803648:	01800284 	movi	r6,10
  80364c:	000f883a 	mov	r7,zero
  803650:	08092b80 	call	8092b8 <__umoddi3>
  803654:	12000c04 	addi	r8,r2,48
  803658:	94bfffc4 	addi	r18,r18,-1
  80365c:	8009883a 	mov	r4,r16
  803660:	880b883a 	mov	r5,r17
  803664:	01800284 	movi	r6,10
  803668:	000f883a 	mov	r7,zero
  80366c:	92000005 	stb	r8,0(r18)
  803670:	0808c4c0 	call	808c4c <__udivdi3>
  803674:	1009883a 	mov	r4,r2
  803678:	1021883a 	mov	r16,r2
  80367c:	18800068 	cmpgeui	r2,r3,1
  803680:	1823883a 	mov	r17,r3
  803684:	103fee1e 	bne	r2,zero,803640 <___vfprintf_internal_r+0x1484>
  803688:	1800021e 	bne	r3,zero,803694 <___vfprintf_internal_r+0x14d8>
  80368c:	00800244 	movi	r2,9
  803690:	113feb36 	bltu	r2,r4,803640 <___vfprintf_internal_r+0x1484>
  803694:	94bfffc4 	addi	r18,r18,-1
  803698:	dc814115 	stw	r18,1284(sp)
  80369c:	003fc006 	br	8035a0 <___vfprintf_internal_r+0x13e4>
  8036a0:	d9014c17 	ldw	r4,1328(sp)
  8036a4:	2080004c 	andi	r2,r4,1
  8036a8:	10009a1e 	bne	r2,zero,803914 <___vfprintf_internal_r+0x1758>
  8036ac:	d9401904 	addi	r5,sp,100
  8036b0:	dd000f04 	addi	r20,sp,60
  8036b4:	d9414115 	stw	r5,1284(sp)
  8036b8:	003d5b06 	br	802c28 <___vfprintf_internal_r+0xa6c>
  8036bc:	d9014f17 	ldw	r4,1340(sp)
  8036c0:	b00b883a 	mov	r5,r22
  8036c4:	d9800c04 	addi	r6,sp,48
  8036c8:	08021640 	call	802164 <__sprint_r>
  8036cc:	103c731e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  8036d0:	dc800e17 	ldw	r18,56(sp)
  8036d4:	d8c01904 	addi	r3,sp,100
  8036d8:	003cf906 	br	802ac0 <___vfprintf_internal_r+0x904>
  8036dc:	d8c14c17 	ldw	r3,1328(sp)
  8036e0:	1880040c 	andi	r2,r3,16
  8036e4:	1000711e 	bne	r2,zero,8038ac <___vfprintf_internal_r+0x16f0>
  8036e8:	d9014c17 	ldw	r4,1328(sp)
  8036ec:	2080100c 	andi	r2,r4,64
  8036f0:	10006e26 	beq	r2,zero,8038ac <___vfprintf_internal_r+0x16f0>
  8036f4:	3c00000b 	ldhu	r16,0(r7)
  8036f8:	0023883a 	mov	r17,zero
  8036fc:	39c00104 	addi	r7,r7,4
  803700:	d9c14015 	stw	r7,1280(sp)
  803704:	003efa06 	br	8032f0 <___vfprintf_internal_r+0x1134>
  803708:	dc400d17 	ldw	r17,52(sp)
  80370c:	07002074 	movhi	fp,129
  803710:	e711e484 	addi	fp,fp,18322
  803714:	9425883a 	add	r18,r18,r16
  803718:	8c400044 	addi	r17,r17,1
  80371c:	008001c4 	movi	r2,7
  803720:	1f000015 	stw	fp,0(r3)
  803724:	1c000115 	stw	r16,4(r3)
  803728:	dc800e15 	stw	r18,56(sp)
  80372c:	dc400d15 	stw	r17,52(sp)
  803730:	147d7016 	blt	r2,r17,802cf4 <___vfprintf_internal_r+0xb38>
  803734:	18c00204 	addi	r3,r3,8
  803738:	003d7506 	br	802d10 <___vfprintf_internal_r+0xb54>
  80373c:	dc800e17 	ldw	r18,56(sp)
  803740:	dc400d17 	ldw	r17,52(sp)
  803744:	07002074 	movhi	fp,129
  803748:	e711e884 	addi	fp,fp,18338
  80374c:	003bba06 	br	802638 <___vfprintf_internal_r+0x47c>
  803750:	d9014f17 	ldw	r4,1340(sp)
  803754:	b00b883a 	mov	r5,r22
  803758:	d9800c04 	addi	r6,sp,48
  80375c:	08021640 	call	802164 <__sprint_r>
  803760:	103c4e1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803764:	dc800e17 	ldw	r18,56(sp)
  803768:	d8c01904 	addi	r3,sp,100
  80376c:	003ce306 	br	802afc <___vfprintf_internal_r+0x940>
  803770:	3c000017 	ldw	r16,0(r7)
  803774:	0009883a 	mov	r4,zero
  803778:	39c00104 	addi	r7,r7,4
  80377c:	0023883a 	mov	r17,zero
  803780:	d9c14015 	stw	r7,1280(sp)
  803784:	d8000405 	stb	zero,16(sp)
  803788:	003d1a06 	br	802bf4 <___vfprintf_internal_r+0xa38>
  80378c:	38800017 	ldw	r2,0(r7)
  803790:	39c00104 	addi	r7,r7,4
  803794:	d9c14015 	stw	r7,1280(sp)
  803798:	1023d7fa 	srai	r17,r2,31
  80379c:	1021883a 	mov	r16,r2
  8037a0:	003d1206 	br	802bec <___vfprintf_internal_r+0xa30>
  8037a4:	3c000017 	ldw	r16,0(r7)
  8037a8:	01000044 	movi	r4,1
  8037ac:	39c00104 	addi	r7,r7,4
  8037b0:	0023883a 	mov	r17,zero
  8037b4:	d9c14015 	stw	r7,1280(sp)
  8037b8:	d8000405 	stb	zero,16(sp)
  8037bc:	003d0d06 	br	802bf4 <___vfprintf_internal_r+0xa38>
  8037c0:	00802074 	movhi	r2,129
  8037c4:	1091e404 	addi	r2,r2,18320
  8037c8:	94800044 	addi	r18,r18,1
  8037cc:	8c400044 	addi	r17,r17,1
  8037d0:	a8800015 	stw	r2,0(r21)
  8037d4:	00c00044 	movi	r3,1
  8037d8:	008001c4 	movi	r2,7
  8037dc:	a8c00115 	stw	r3,4(r21)
  8037e0:	dc800e15 	stw	r18,56(sp)
  8037e4:	dc400d15 	stw	r17,52(sp)
  8037e8:	1440ca16 	blt	r2,r17,803b14 <___vfprintf_internal_r+0x1958>
  8037ec:	a8c00204 	addi	r3,r21,8
  8037f0:	2000061e 	bne	r4,zero,80380c <___vfprintf_internal_r+0x1650>
  8037f4:	d9414717 	ldw	r5,1308(sp)
  8037f8:	2800041e 	bne	r5,zero,80380c <___vfprintf_internal_r+0x1650>
  8037fc:	d9814c17 	ldw	r6,1328(sp)
  803800:	3080004c 	andi	r2,r6,1
  803804:	1005003a 	cmpeq	r2,r2,zero
  803808:	103bea1e 	bne	r2,zero,8027b4 <___vfprintf_internal_r+0x5f8>
  80380c:	00800044 	movi	r2,1
  803810:	dc400d17 	ldw	r17,52(sp)
  803814:	18800115 	stw	r2,4(r3)
  803818:	d8814917 	ldw	r2,1316(sp)
  80381c:	94800044 	addi	r18,r18,1
  803820:	8c400044 	addi	r17,r17,1
  803824:	18800015 	stw	r2,0(r3)
  803828:	008001c4 	movi	r2,7
  80382c:	dc800e15 	stw	r18,56(sp)
  803830:	dc400d15 	stw	r17,52(sp)
  803834:	1440ca16 	blt	r2,r17,803b60 <___vfprintf_internal_r+0x19a4>
  803838:	18c00204 	addi	r3,r3,8
  80383c:	0121c83a 	sub	r16,zero,r4
  803840:	0400500e 	bge	zero,r16,803984 <___vfprintf_internal_r+0x17c8>
  803844:	00800404 	movi	r2,16
  803848:	1400800e 	bge	r2,r16,803a4c <___vfprintf_internal_r+0x1890>
  80384c:	1027883a 	mov	r19,r2
  803850:	07002074 	movhi	fp,129
  803854:	e711e484 	addi	fp,fp,18322
  803858:	050001c4 	movi	r20,7
  80385c:	00000306 	br	80386c <___vfprintf_internal_r+0x16b0>
  803860:	18c00204 	addi	r3,r3,8
  803864:	843ffc04 	addi	r16,r16,-16
  803868:	9c007a0e 	bge	r19,r16,803a54 <___vfprintf_internal_r+0x1898>
  80386c:	94800404 	addi	r18,r18,16
  803870:	8c400044 	addi	r17,r17,1
  803874:	1f000015 	stw	fp,0(r3)
  803878:	1cc00115 	stw	r19,4(r3)
  80387c:	dc800e15 	stw	r18,56(sp)
  803880:	dc400d15 	stw	r17,52(sp)
  803884:	a47ff60e 	bge	r20,r17,803860 <___vfprintf_internal_r+0x16a4>
  803888:	d9014f17 	ldw	r4,1340(sp)
  80388c:	b00b883a 	mov	r5,r22
  803890:	d9800c04 	addi	r6,sp,48
  803894:	08021640 	call	802164 <__sprint_r>
  803898:	103c001e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  80389c:	dc800e17 	ldw	r18,56(sp)
  8038a0:	dc400d17 	ldw	r17,52(sp)
  8038a4:	d8c01904 	addi	r3,sp,100
  8038a8:	003fee06 	br	803864 <___vfprintf_internal_r+0x16a8>
  8038ac:	3c000017 	ldw	r16,0(r7)
  8038b0:	0023883a 	mov	r17,zero
  8038b4:	39c00104 	addi	r7,r7,4
  8038b8:	d9c14015 	stw	r7,1280(sp)
  8038bc:	003e8c06 	br	8032f0 <___vfprintf_internal_r+0x1134>
  8038c0:	d9401904 	addi	r5,sp,100
  8038c4:	dd000f04 	addi	r20,sp,60
  8038c8:	d9414115 	stw	r5,1284(sp)
  8038cc:	d9814417 	ldw	r6,1296(sp)
  8038d0:	880a973a 	slli	r5,r17,28
  8038d4:	8004d13a 	srli	r2,r16,4
  8038d8:	810003cc 	andi	r4,r16,15
  8038dc:	3109883a 	add	r4,r6,r4
  8038e0:	2884b03a 	or	r2,r5,r2
  8038e4:	21400003 	ldbu	r5,0(r4)
  8038e8:	d9014117 	ldw	r4,1284(sp)
  8038ec:	8806d13a 	srli	r3,r17,4
  8038f0:	1021883a 	mov	r16,r2
  8038f4:	213fffc4 	addi	r4,r4,-1
  8038f8:	d9014115 	stw	r4,1284(sp)
  8038fc:	d9814117 	ldw	r6,1284(sp)
  803900:	10c8b03a 	or	r4,r2,r3
  803904:	1823883a 	mov	r17,r3
  803908:	31400005 	stb	r5,0(r6)
  80390c:	203fef1e 	bne	r4,zero,8038cc <___vfprintf_internal_r+0x1710>
  803910:	003cc506 	br	802c28 <___vfprintf_internal_r+0xa6c>
  803914:	00800c04 	movi	r2,48
  803918:	d98018c4 	addi	r6,sp,99
  80391c:	dd000f04 	addi	r20,sp,60
  803920:	d88018c5 	stb	r2,99(sp)
  803924:	d9814115 	stw	r6,1284(sp)
  803928:	003cbf06 	br	802c28 <___vfprintf_internal_r+0xa6c>
  80392c:	dc400d17 	ldw	r17,52(sp)
  803930:	07002074 	movhi	fp,129
  803934:	e711e884 	addi	fp,fp,18338
  803938:	003bc106 	br	802840 <___vfprintf_internal_r+0x684>
  80393c:	d9414c17 	ldw	r5,1328(sp)
  803940:	2880040c 	andi	r2,r5,16
  803944:	10007c26 	beq	r2,zero,803b38 <___vfprintf_internal_r+0x197c>
  803948:	38800017 	ldw	r2,0(r7)
  80394c:	39c00104 	addi	r7,r7,4
  803950:	d9c14015 	stw	r7,1280(sp)
  803954:	d9814b17 	ldw	r6,1324(sp)
  803958:	d9c14017 	ldw	r7,1280(sp)
  80395c:	11800015 	stw	r6,0(r2)
  803960:	003a7206 	br	80232c <___vfprintf_internal_r+0x170>
  803964:	d9014f17 	ldw	r4,1340(sp)
  803968:	b00b883a 	mov	r5,r22
  80396c:	d9800c04 	addi	r6,sp,48
  803970:	08021640 	call	802164 <__sprint_r>
  803974:	103bc91e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803978:	dc800e17 	ldw	r18,56(sp)
  80397c:	dc400d17 	ldw	r17,52(sp)
  803980:	d8c01904 	addi	r3,sp,100
  803984:	d9014717 	ldw	r4,1308(sp)
  803988:	d9414117 	ldw	r5,1284(sp)
  80398c:	8c400044 	addi	r17,r17,1
  803990:	9125883a 	add	r18,r18,r4
  803994:	008001c4 	movi	r2,7
  803998:	19400015 	stw	r5,0(r3)
  80399c:	19000115 	stw	r4,4(r3)
  8039a0:	dc800e15 	stw	r18,56(sp)
  8039a4:	dc400d15 	stw	r17,52(sp)
  8039a8:	147ce816 	blt	r2,r17,802d4c <___vfprintf_internal_r+0xb90>
  8039ac:	18c00204 	addi	r3,r3,8
  8039b0:	003b8006 	br	8027b4 <___vfprintf_internal_r+0x5f8>
  8039b4:	38c00017 	ldw	r3,0(r7)
  8039b8:	39000204 	addi	r4,r7,8
  8039bc:	d9014015 	stw	r4,1280(sp)
  8039c0:	d8c14215 	stw	r3,1288(sp)
  8039c4:	39c00117 	ldw	r7,4(r7)
  8039c8:	d9c14315 	stw	r7,1292(sp)
  8039cc:	003e1a06 	br	803238 <___vfprintf_internal_r+0x107c>
  8039d0:	0005883a 	mov	r2,zero
  8039d4:	1409c83a 	sub	r4,r2,r16
  8039d8:	1105803a 	cmpltu	r2,r2,r4
  8039dc:	044bc83a 	sub	r5,zero,r17
  8039e0:	2885c83a 	sub	r2,r5,r2
  8039e4:	2021883a 	mov	r16,r4
  8039e8:	1023883a 	mov	r17,r2
  8039ec:	01000044 	movi	r4,1
  8039f0:	00800b44 	movi	r2,45
  8039f4:	d8800405 	stb	r2,16(sp)
  8039f8:	003c7e06 	br	802bf4 <___vfprintf_internal_r+0xa38>
  8039fc:	d9014f17 	ldw	r4,1340(sp)
  803a00:	b00b883a 	mov	r5,r22
  803a04:	d9800c04 	addi	r6,sp,48
  803a08:	08021640 	call	802164 <__sprint_r>
  803a0c:	103ba31e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803a10:	dc800e17 	ldw	r18,56(sp)
  803a14:	dc400d17 	ldw	r17,52(sp)
  803a18:	d9000517 	ldw	r4,20(sp)
  803a1c:	d9401904 	addi	r5,sp,100
  803a20:	003da106 	br	8030a8 <___vfprintf_internal_r+0xeec>
  803a24:	d9014f17 	ldw	r4,1340(sp)
  803a28:	b00b883a 	mov	r5,r22
  803a2c:	d9800c04 	addi	r6,sp,48
  803a30:	08021640 	call	802164 <__sprint_r>
  803a34:	103b991e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803a38:	dc800e17 	ldw	r18,56(sp)
  803a3c:	dc400d17 	ldw	r17,52(sp)
  803a40:	d9000517 	ldw	r4,20(sp)
  803a44:	d8c01904 	addi	r3,sp,100
  803a48:	003d8b06 	br	803078 <___vfprintf_internal_r+0xebc>
  803a4c:	07002074 	movhi	fp,129
  803a50:	e711e484 	addi	fp,fp,18322
  803a54:	9425883a 	add	r18,r18,r16
  803a58:	8c400044 	addi	r17,r17,1
  803a5c:	008001c4 	movi	r2,7
  803a60:	1f000015 	stw	fp,0(r3)
  803a64:	1c000115 	stw	r16,4(r3)
  803a68:	dc800e15 	stw	r18,56(sp)
  803a6c:	dc400d15 	stw	r17,52(sp)
  803a70:	147fbc16 	blt	r2,r17,803964 <___vfprintf_internal_r+0x17a8>
  803a74:	18c00204 	addi	r3,r3,8
  803a78:	003fc206 	br	803984 <___vfprintf_internal_r+0x17c8>
  803a7c:	d9014f17 	ldw	r4,1340(sp)
  803a80:	b00b883a 	mov	r5,r22
  803a84:	d9800c04 	addi	r6,sp,48
  803a88:	08021640 	call	802164 <__sprint_r>
  803a8c:	103b831e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803a90:	dc800e17 	ldw	r18,56(sp)
  803a94:	d9000517 	ldw	r4,20(sp)
  803a98:	d8c01904 	addi	r3,sp,100
  803a9c:	003cfc06 	br	802e90 <___vfprintf_internal_r+0xcd4>
  803aa0:	07002074 	movhi	fp,129
  803aa4:	e711e484 	addi	fp,fp,18322
  803aa8:	003bde06 	br	802a24 <___vfprintf_internal_r+0x868>
  803aac:	00802074 	movhi	r2,129
  803ab0:	1091d304 	addi	r2,r2,18252
  803ab4:	d8814115 	stw	r2,1284(sp)
  803ab8:	003def06 	br	803278 <___vfprintf_internal_r+0x10bc>
  803abc:	d9014217 	ldw	r4,1288(sp)
  803ac0:	d9414317 	ldw	r5,1292(sp)
  803ac4:	080856c0 	call	80856c <__isnand>
  803ac8:	10003926 	beq	r2,zero,803bb0 <___vfprintf_internal_r+0x19f4>
  803acc:	d9414d17 	ldw	r5,1332(sp)
  803ad0:	008011c4 	movi	r2,71
  803ad4:	1140ce16 	blt	r2,r5,803e10 <___vfprintf_internal_r+0x1c54>
  803ad8:	01802074 	movhi	r6,129
  803adc:	3191d404 	addi	r6,r6,18256
  803ae0:	d9814115 	stw	r6,1284(sp)
  803ae4:	003de406 	br	803278 <___vfprintf_internal_r+0x10bc>
  803ae8:	d9014c17 	ldw	r4,1328(sp)
  803aec:	bdc00044 	addi	r23,r23,1
  803af0:	b8c00007 	ldb	r3,0(r23)
  803af4:	21000814 	ori	r4,r4,32
  803af8:	d9014c15 	stw	r4,1328(sp)
  803afc:	003a2e06 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  803b00:	dcc14515 	stw	r19,1300(sp)
  803b04:	98011016 	blt	r19,zero,803f48 <___vfprintf_internal_r+0x1d8c>
  803b08:	980f883a 	mov	r7,r19
  803b0c:	d8014615 	stw	zero,1304(sp)
  803b10:	003c4c06 	br	802c44 <___vfprintf_internal_r+0xa88>
  803b14:	d9014f17 	ldw	r4,1340(sp)
  803b18:	b00b883a 	mov	r5,r22
  803b1c:	d9800c04 	addi	r6,sp,48
  803b20:	08021640 	call	802164 <__sprint_r>
  803b24:	103b5d1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803b28:	dc800e17 	ldw	r18,56(sp)
  803b2c:	d9000517 	ldw	r4,20(sp)
  803b30:	d8c01904 	addi	r3,sp,100
  803b34:	003f2e06 	br	8037f0 <___vfprintf_internal_r+0x1634>
  803b38:	d8c14c17 	ldw	r3,1328(sp)
  803b3c:	1880100c 	andi	r2,r3,64
  803b40:	1000a026 	beq	r2,zero,803dc4 <___vfprintf_internal_r+0x1c08>
  803b44:	38800017 	ldw	r2,0(r7)
  803b48:	39c00104 	addi	r7,r7,4
  803b4c:	d9c14015 	stw	r7,1280(sp)
  803b50:	d9014b17 	ldw	r4,1324(sp)
  803b54:	d9c14017 	ldw	r7,1280(sp)
  803b58:	1100000d 	sth	r4,0(r2)
  803b5c:	0039f306 	br	80232c <___vfprintf_internal_r+0x170>
  803b60:	d9014f17 	ldw	r4,1340(sp)
  803b64:	b00b883a 	mov	r5,r22
  803b68:	d9800c04 	addi	r6,sp,48
  803b6c:	08021640 	call	802164 <__sprint_r>
  803b70:	103b4a1e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803b74:	dc800e17 	ldw	r18,56(sp)
  803b78:	dc400d17 	ldw	r17,52(sp)
  803b7c:	d9000517 	ldw	r4,20(sp)
  803b80:	d8c01904 	addi	r3,sp,100
  803b84:	003f2d06 	br	80383c <___vfprintf_internal_r+0x1680>
  803b88:	00800184 	movi	r2,6
  803b8c:	14c09a36 	bltu	r2,r19,803df8 <___vfprintf_internal_r+0x1c3c>
  803b90:	dcc14515 	stw	r19,1300(sp)
  803b94:	9800010e 	bge	r19,zero,803b9c <___vfprintf_internal_r+0x19e0>
  803b98:	d8014515 	stw	zero,1300(sp)
  803b9c:	00802074 	movhi	r2,129
  803ba0:	1091d604 	addi	r2,r2,18264
  803ba4:	980f883a 	mov	r7,r19
  803ba8:	d8814115 	stw	r2,1284(sp)
  803bac:	003a7206 	br	802578 <___vfprintf_internal_r+0x3bc>
  803bb0:	00bfffc4 	movi	r2,-1
  803bb4:	9880e226 	beq	r19,r2,803f40 <___vfprintf_internal_r+0x1d84>
  803bb8:	d9414d17 	ldw	r5,1332(sp)
  803bbc:	008019c4 	movi	r2,103
  803bc0:	2880dc26 	beq	r5,r2,803f34 <___vfprintf_internal_r+0x1d78>
  803bc4:	008011c4 	movi	r2,71
  803bc8:	2880da26 	beq	r5,r2,803f34 <___vfprintf_internal_r+0x1d78>
  803bcc:	d9414c17 	ldw	r5,1328(sp)
  803bd0:	d9014317 	ldw	r4,1292(sp)
  803bd4:	d9814217 	ldw	r6,1288(sp)
  803bd8:	29404014 	ori	r5,r5,256
  803bdc:	d9414c15 	stw	r5,1328(sp)
  803be0:	2000cc16 	blt	r4,zero,803f14 <___vfprintf_internal_r+0x1d58>
  803be4:	3021883a 	mov	r16,r6
  803be8:	2023883a 	mov	r17,r4
  803bec:	0039883a 	mov	fp,zero
  803bf0:	d9414d17 	ldw	r5,1332(sp)
  803bf4:	00801984 	movi	r2,102
  803bf8:	2880b726 	beq	r5,r2,803ed8 <___vfprintf_internal_r+0x1d1c>
  803bfc:	00801184 	movi	r2,70
  803c00:	2880b526 	beq	r5,r2,803ed8 <___vfprintf_internal_r+0x1d1c>
  803c04:	00801944 	movi	r2,101
  803c08:	2880c826 	beq	r5,r2,803f2c <___vfprintf_internal_r+0x1d70>
  803c0c:	00801144 	movi	r2,69
  803c10:	2880c626 	beq	r5,r2,803f2c <___vfprintf_internal_r+0x1d70>
  803c14:	9829883a 	mov	r20,r19
  803c18:	d9014f17 	ldw	r4,1340(sp)
  803c1c:	d8800504 	addi	r2,sp,20
  803c20:	880d883a 	mov	r6,r17
  803c24:	d8800115 	stw	r2,4(sp)
  803c28:	d8c00604 	addi	r3,sp,24
  803c2c:	d8800704 	addi	r2,sp,28
  803c30:	800b883a 	mov	r5,r16
  803c34:	01c00084 	movi	r7,2
  803c38:	d8c00215 	stw	r3,8(sp)
  803c3c:	d8800315 	stw	r2,12(sp)
  803c40:	dd000015 	stw	r20,0(sp)
  803c44:	08044240 	call	804424 <_dtoa_r>
  803c48:	d9814d17 	ldw	r6,1332(sp)
  803c4c:	d8814115 	stw	r2,1284(sp)
  803c50:	008019c4 	movi	r2,103
  803c54:	30809526 	beq	r6,r2,803eac <___vfprintf_internal_r+0x1cf0>
  803c58:	d8c14d17 	ldw	r3,1332(sp)
  803c5c:	008011c4 	movi	r2,71
  803c60:	18809226 	beq	r3,r2,803eac <___vfprintf_internal_r+0x1cf0>
  803c64:	d9414117 	ldw	r5,1284(sp)
  803c68:	d9814d17 	ldw	r6,1332(sp)
  803c6c:	00801984 	movi	r2,102
  803c70:	2d25883a 	add	r18,r5,r20
  803c74:	30808626 	beq	r6,r2,803e90 <___vfprintf_internal_r+0x1cd4>
  803c78:	00801184 	movi	r2,70
  803c7c:	30808426 	beq	r6,r2,803e90 <___vfprintf_internal_r+0x1cd4>
  803c80:	000d883a 	mov	r6,zero
  803c84:	000f883a 	mov	r7,zero
  803c88:	880b883a 	mov	r5,r17
  803c8c:	8009883a 	mov	r4,r16
  803c90:	080a4380 	call	80a438 <__eqdf2>
  803c94:	1000751e 	bne	r2,zero,803e6c <___vfprintf_internal_r+0x1cb0>
  803c98:	9005883a 	mov	r2,r18
  803c9c:	dc800715 	stw	r18,28(sp)
  803ca0:	d9014117 	ldw	r4,1284(sp)
  803ca4:	d9414d17 	ldw	r5,1332(sp)
  803ca8:	00c019c4 	movi	r3,103
  803cac:	1125c83a 	sub	r18,r2,r4
  803cb0:	28c06826 	beq	r5,r3,803e54 <___vfprintf_internal_r+0x1c98>
  803cb4:	008011c4 	movi	r2,71
  803cb8:	28806626 	beq	r5,r2,803e54 <___vfprintf_internal_r+0x1c98>
  803cbc:	d9000517 	ldw	r4,20(sp)
  803cc0:	d8c14d17 	ldw	r3,1332(sp)
  803cc4:	00801944 	movi	r2,101
  803cc8:	10c05516 	blt	r2,r3,803e20 <___vfprintf_internal_r+0x1c64>
  803ccc:	213fffc4 	addi	r4,r4,-1
  803cd0:	d9000515 	stw	r4,20(sp)
  803cd4:	d8c00805 	stb	r3,32(sp)
  803cd8:	2021883a 	mov	r16,r4
  803cdc:	2000c116 	blt	r4,zero,803fe4 <___vfprintf_internal_r+0x1e28>
  803ce0:	00800ac4 	movi	r2,43
  803ce4:	d8800845 	stb	r2,33(sp)
  803ce8:	00800244 	movi	r2,9
  803cec:	1400af0e 	bge	r2,r16,803fac <___vfprintf_internal_r+0x1df0>
  803cf0:	1027883a 	mov	r19,r2
  803cf4:	dc400b84 	addi	r17,sp,46
  803cf8:	8009883a 	mov	r4,r16
  803cfc:	01400284 	movi	r5,10
  803d00:	08017440 	call	801744 <__modsi3>
  803d04:	10800c04 	addi	r2,r2,48
  803d08:	8c7fffc4 	addi	r17,r17,-1
  803d0c:	8009883a 	mov	r4,r16
  803d10:	01400284 	movi	r5,10
  803d14:	88800005 	stb	r2,0(r17)
  803d18:	08016e40 	call	8016e4 <__divsi3>
  803d1c:	1021883a 	mov	r16,r2
  803d20:	98bff516 	blt	r19,r2,803cf8 <___vfprintf_internal_r+0x1b3c>
  803d24:	10c00c04 	addi	r3,r2,48
  803d28:	d88009c4 	addi	r2,sp,39
  803d2c:	108001c4 	addi	r2,r2,7
  803d30:	897fffc4 	addi	r5,r17,-1
  803d34:	88ffffc5 	stb	r3,-1(r17)
  803d38:	2880a72e 	bgeu	r5,r2,803fd8 <___vfprintf_internal_r+0x1e1c>
  803d3c:	1009883a 	mov	r4,r2
  803d40:	d9800804 	addi	r6,sp,32
  803d44:	d8c00884 	addi	r3,sp,34
  803d48:	28800003 	ldbu	r2,0(r5)
  803d4c:	29400044 	addi	r5,r5,1
  803d50:	18800005 	stb	r2,0(r3)
  803d54:	18c00044 	addi	r3,r3,1
  803d58:	293ffb36 	bltu	r5,r4,803d48 <___vfprintf_internal_r+0x1b8c>
  803d5c:	1987c83a 	sub	r3,r3,r6
  803d60:	00800044 	movi	r2,1
  803d64:	d8c14815 	stw	r3,1312(sp)
  803d68:	90cf883a 	add	r7,r18,r3
  803d6c:	1480960e 	bge	r2,r18,803fc8 <___vfprintf_internal_r+0x1e0c>
  803d70:	39c00044 	addi	r7,r7,1
  803d74:	d9c14515 	stw	r7,1300(sp)
  803d78:	38003416 	blt	r7,zero,803e4c <___vfprintf_internal_r+0x1c90>
  803d7c:	e0803fcc 	andi	r2,fp,255
  803d80:	1080201c 	xori	r2,r2,128
  803d84:	10bfe004 	addi	r2,r2,-128
  803d88:	10004e26 	beq	r2,zero,803ec4 <___vfprintf_internal_r+0x1d08>
  803d8c:	00800b44 	movi	r2,45
  803d90:	dc814715 	stw	r18,1308(sp)
  803d94:	d8014615 	stw	zero,1304(sp)
  803d98:	d8800405 	stb	r2,16(sp)
  803d9c:	003bab06 	br	802c4c <___vfprintf_internal_r+0xa90>
  803da0:	00800b44 	movi	r2,45
  803da4:	d8800405 	stb	r2,16(sp)
  803da8:	003d2d06 	br	803260 <___vfprintf_internal_r+0x10a4>
  803dac:	d9014f17 	ldw	r4,1340(sp)
  803db0:	b00b883a 	mov	r5,r22
  803db4:	d9800c04 	addi	r6,sp,48
  803db8:	08021640 	call	802164 <__sprint_r>
  803dbc:	103ab71e 	bne	r2,zero,80289c <___vfprintf_internal_r+0x6e0>
  803dc0:	003ab506 	br	802898 <___vfprintf_internal_r+0x6dc>
  803dc4:	38800017 	ldw	r2,0(r7)
  803dc8:	39c00104 	addi	r7,r7,4
  803dcc:	d9c14015 	stw	r7,1280(sp)
  803dd0:	d9414b17 	ldw	r5,1324(sp)
  803dd4:	d9c14017 	ldw	r7,1280(sp)
  803dd8:	11400015 	stw	r5,0(r2)
  803ddc:	00395306 	br	80232c <___vfprintf_internal_r+0x170>
  803de0:	980f883a 	mov	r7,r19
  803de4:	dcc14515 	stw	r19,1300(sp)
  803de8:	d8014615 	stw	zero,1304(sp)
  803dec:	003b9506 	br	802c44 <___vfprintf_internal_r+0xa88>
  803df0:	0027883a 	mov	r19,zero
  803df4:	00397206 	br	8023c0 <___vfprintf_internal_r+0x204>
  803df8:	00c02074 	movhi	r3,129
  803dfc:	18d1d604 	addi	r3,r3,18264
  803e00:	100f883a 	mov	r7,r2
  803e04:	d8814515 	stw	r2,1300(sp)
  803e08:	d8c14115 	stw	r3,1284(sp)
  803e0c:	0039da06 	br	802578 <___vfprintf_internal_r+0x3bc>
  803e10:	00802074 	movhi	r2,129
  803e14:	1091d504 	addi	r2,r2,18260
  803e18:	d8814115 	stw	r2,1284(sp)
  803e1c:	003d1606 	br	803278 <___vfprintf_internal_r+0x10bc>
  803e20:	d9414d17 	ldw	r5,1332(sp)
  803e24:	00801984 	movi	r2,102
  803e28:	28804926 	beq	r5,r2,803f50 <___vfprintf_internal_r+0x1d94>
  803e2c:	200f883a 	mov	r7,r4
  803e30:	24805716 	blt	r4,r18,803f90 <___vfprintf_internal_r+0x1dd4>
  803e34:	d9414c17 	ldw	r5,1328(sp)
  803e38:	2880004c 	andi	r2,r5,1
  803e3c:	10000126 	beq	r2,zero,803e44 <___vfprintf_internal_r+0x1c88>
  803e40:	21c00044 	addi	r7,r4,1
  803e44:	d9c14515 	stw	r7,1300(sp)
  803e48:	383fcc0e 	bge	r7,zero,803d7c <___vfprintf_internal_r+0x1bc0>
  803e4c:	d8014515 	stw	zero,1300(sp)
  803e50:	003fca06 	br	803d7c <___vfprintf_internal_r+0x1bc0>
  803e54:	d9000517 	ldw	r4,20(sp)
  803e58:	00bfff04 	movi	r2,-4
  803e5c:	1100480e 	bge	r2,r4,803f80 <___vfprintf_internal_r+0x1dc4>
  803e60:	99004716 	blt	r19,r4,803f80 <___vfprintf_internal_r+0x1dc4>
  803e64:	d8c14d15 	stw	r3,1332(sp)
  803e68:	003ff006 	br	803e2c <___vfprintf_internal_r+0x1c70>
  803e6c:	d8800717 	ldw	r2,28(sp)
  803e70:	14bf8b2e 	bgeu	r2,r18,803ca0 <___vfprintf_internal_r+0x1ae4>
  803e74:	9007883a 	mov	r3,r18
  803e78:	01000c04 	movi	r4,48
  803e7c:	11000005 	stb	r4,0(r2)
  803e80:	10800044 	addi	r2,r2,1
  803e84:	d8800715 	stw	r2,28(sp)
  803e88:	18bffc1e 	bne	r3,r2,803e7c <___vfprintf_internal_r+0x1cc0>
  803e8c:	003f8406 	br	803ca0 <___vfprintf_internal_r+0x1ae4>
  803e90:	d8814117 	ldw	r2,1284(sp)
  803e94:	10c00007 	ldb	r3,0(r2)
  803e98:	00800c04 	movi	r2,48
  803e9c:	18805b26 	beq	r3,r2,80400c <___vfprintf_internal_r+0x1e50>
  803ea0:	d9000517 	ldw	r4,20(sp)
  803ea4:	9125883a 	add	r18,r18,r4
  803ea8:	003f7506 	br	803c80 <___vfprintf_internal_r+0x1ac4>
  803eac:	d9014c17 	ldw	r4,1328(sp)
  803eb0:	2080004c 	andi	r2,r4,1
  803eb4:	1005003a 	cmpeq	r2,r2,zero
  803eb8:	103f6a26 	beq	r2,zero,803c64 <___vfprintf_internal_r+0x1aa8>
  803ebc:	d8800717 	ldw	r2,28(sp)
  803ec0:	003f7706 	br	803ca0 <___vfprintf_internal_r+0x1ae4>
  803ec4:	d9c14515 	stw	r7,1300(sp)
  803ec8:	38004d16 	blt	r7,zero,804000 <___vfprintf_internal_r+0x1e44>
  803ecc:	dc814715 	stw	r18,1308(sp)
  803ed0:	d8014615 	stw	zero,1304(sp)
  803ed4:	003b5b06 	br	802c44 <___vfprintf_internal_r+0xa88>
  803ed8:	d9014f17 	ldw	r4,1340(sp)
  803edc:	d8800504 	addi	r2,sp,20
  803ee0:	d8800115 	stw	r2,4(sp)
  803ee4:	d8c00604 	addi	r3,sp,24
  803ee8:	d8800704 	addi	r2,sp,28
  803eec:	800b883a 	mov	r5,r16
  803ef0:	880d883a 	mov	r6,r17
  803ef4:	01c000c4 	movi	r7,3
  803ef8:	d8c00215 	stw	r3,8(sp)
  803efc:	d8800315 	stw	r2,12(sp)
  803f00:	dcc00015 	stw	r19,0(sp)
  803f04:	9829883a 	mov	r20,r19
  803f08:	08044240 	call	804424 <_dtoa_r>
  803f0c:	d8814115 	stw	r2,1284(sp)
  803f10:	003f5106 	br	803c58 <___vfprintf_internal_r+0x1a9c>
  803f14:	d8c14217 	ldw	r3,1288(sp)
  803f18:	d9014317 	ldw	r4,1292(sp)
  803f1c:	07000b44 	movi	fp,45
  803f20:	1821883a 	mov	r16,r3
  803f24:	2460003c 	xorhi	r17,r4,32768
  803f28:	003f3106 	br	803bf0 <___vfprintf_internal_r+0x1a34>
  803f2c:	9d000044 	addi	r20,r19,1
  803f30:	003f3906 	br	803c18 <___vfprintf_internal_r+0x1a5c>
  803f34:	983f251e 	bne	r19,zero,803bcc <___vfprintf_internal_r+0x1a10>
  803f38:	04c00044 	movi	r19,1
  803f3c:	003f2306 	br	803bcc <___vfprintf_internal_r+0x1a10>
  803f40:	04c00184 	movi	r19,6
  803f44:	003f2106 	br	803bcc <___vfprintf_internal_r+0x1a10>
  803f48:	d8014515 	stw	zero,1300(sp)
  803f4c:	003eee06 	br	803b08 <___vfprintf_internal_r+0x194c>
  803f50:	200f883a 	mov	r7,r4
  803f54:	0100370e 	bge	zero,r4,804034 <___vfprintf_internal_r+0x1e78>
  803f58:	9800031e 	bne	r19,zero,803f68 <___vfprintf_internal_r+0x1dac>
  803f5c:	d9814c17 	ldw	r6,1328(sp)
  803f60:	3080004c 	andi	r2,r6,1
  803f64:	103fb726 	beq	r2,zero,803e44 <___vfprintf_internal_r+0x1c88>
  803f68:	20800044 	addi	r2,r4,1
  803f6c:	98a7883a 	add	r19,r19,r2
  803f70:	dcc14515 	stw	r19,1300(sp)
  803f74:	980f883a 	mov	r7,r19
  803f78:	983f800e 	bge	r19,zero,803d7c <___vfprintf_internal_r+0x1bc0>
  803f7c:	003fb306 	br	803e4c <___vfprintf_internal_r+0x1c90>
  803f80:	d9814d17 	ldw	r6,1332(sp)
  803f84:	31bfff84 	addi	r6,r6,-2
  803f88:	d9814d15 	stw	r6,1332(sp)
  803f8c:	003f4c06 	br	803cc0 <___vfprintf_internal_r+0x1b04>
  803f90:	0100180e 	bge	zero,r4,803ff4 <___vfprintf_internal_r+0x1e38>
  803f94:	00800044 	movi	r2,1
  803f98:	1485883a 	add	r2,r2,r18
  803f9c:	d8814515 	stw	r2,1300(sp)
  803fa0:	100f883a 	mov	r7,r2
  803fa4:	103f750e 	bge	r2,zero,803d7c <___vfprintf_internal_r+0x1bc0>
  803fa8:	003fa806 	br	803e4c <___vfprintf_internal_r+0x1c90>
  803fac:	80c00c04 	addi	r3,r16,48
  803fb0:	00800c04 	movi	r2,48
  803fb4:	d8c008c5 	stb	r3,35(sp)
  803fb8:	d9800804 	addi	r6,sp,32
  803fbc:	d8c00904 	addi	r3,sp,36
  803fc0:	d8800885 	stb	r2,34(sp)
  803fc4:	003f6506 	br	803d5c <___vfprintf_internal_r+0x1ba0>
  803fc8:	d9014c17 	ldw	r4,1328(sp)
  803fcc:	2084703a 	and	r2,r4,r2
  803fd0:	103f9c26 	beq	r2,zero,803e44 <___vfprintf_internal_r+0x1c88>
  803fd4:	003f6606 	br	803d70 <___vfprintf_internal_r+0x1bb4>
  803fd8:	d9800804 	addi	r6,sp,32
  803fdc:	d8c00884 	addi	r3,sp,34
  803fe0:	003f5e06 	br	803d5c <___vfprintf_internal_r+0x1ba0>
  803fe4:	00800b44 	movi	r2,45
  803fe8:	0121c83a 	sub	r16,zero,r4
  803fec:	d8800845 	stb	r2,33(sp)
  803ff0:	003f3d06 	br	803ce8 <___vfprintf_internal_r+0x1b2c>
  803ff4:	00800084 	movi	r2,2
  803ff8:	1105c83a 	sub	r2,r2,r4
  803ffc:	003fe606 	br	803f98 <___vfprintf_internal_r+0x1ddc>
  804000:	d8014515 	stw	zero,1300(sp)
  804004:	dc814715 	stw	r18,1308(sp)
  804008:	003fb106 	br	803ed0 <___vfprintf_internal_r+0x1d14>
  80400c:	000d883a 	mov	r6,zero
  804010:	000f883a 	mov	r7,zero
  804014:	8009883a 	mov	r4,r16
  804018:	880b883a 	mov	r5,r17
  80401c:	080a4c00 	call	80a4c0 <__nedf2>
  804020:	103f9f26 	beq	r2,zero,803ea0 <___vfprintf_internal_r+0x1ce4>
  804024:	00800044 	movi	r2,1
  804028:	1509c83a 	sub	r4,r2,r20
  80402c:	d9000515 	stw	r4,20(sp)
  804030:	003f9b06 	br	803ea0 <___vfprintf_internal_r+0x1ce4>
  804034:	98000d1e 	bne	r19,zero,80406c <___vfprintf_internal_r+0x1eb0>
  804038:	d8c14c17 	ldw	r3,1328(sp)
  80403c:	1880004c 	andi	r2,r3,1
  804040:	10000a1e 	bne	r2,zero,80406c <___vfprintf_internal_r+0x1eb0>
  804044:	01000044 	movi	r4,1
  804048:	200f883a 	mov	r7,r4
  80404c:	d9014515 	stw	r4,1300(sp)
  804050:	003f4a06 	br	803d7c <___vfprintf_internal_r+0x1bc0>
  804054:	3cc00017 	ldw	r19,0(r7)
  804058:	39c00104 	addi	r7,r7,4
  80405c:	983d0e0e 	bge	r19,zero,803498 <___vfprintf_internal_r+0x12dc>
  804060:	b8c00007 	ldb	r3,0(r23)
  804064:	04ffffc4 	movi	r19,-1
  804068:	0038d306 	br	8023b8 <___vfprintf_internal_r+0x1fc>
  80406c:	9cc00084 	addi	r19,r19,2
  804070:	dcc14515 	stw	r19,1300(sp)
  804074:	980f883a 	mov	r7,r19
  804078:	983f400e 	bge	r19,zero,803d7c <___vfprintf_internal_r+0x1bc0>
  80407c:	003f7306 	br	803e4c <___vfprintf_internal_r+0x1c90>

00804080 <__vfprintf_internal>:
  804080:	00802074 	movhi	r2,129
  804084:	1099af04 	addi	r2,r2,26300
  804088:	2013883a 	mov	r9,r4
  80408c:	11000017 	ldw	r4,0(r2)
  804090:	2805883a 	mov	r2,r5
  804094:	300f883a 	mov	r7,r6
  804098:	480b883a 	mov	r5,r9
  80409c:	100d883a 	mov	r6,r2
  8040a0:	08021bc1 	jmpi	8021bc <___vfprintf_internal_r>

008040a4 <__swsetup_r>:
  8040a4:	00802074 	movhi	r2,129
  8040a8:	1099af04 	addi	r2,r2,26300
  8040ac:	10c00017 	ldw	r3,0(r2)
  8040b0:	defffd04 	addi	sp,sp,-12
  8040b4:	dc400115 	stw	r17,4(sp)
  8040b8:	dc000015 	stw	r16,0(sp)
  8040bc:	dfc00215 	stw	ra,8(sp)
  8040c0:	2023883a 	mov	r17,r4
  8040c4:	2821883a 	mov	r16,r5
  8040c8:	18000226 	beq	r3,zero,8040d4 <__swsetup_r+0x30>
  8040cc:	18800e17 	ldw	r2,56(r3)
  8040d0:	10001f26 	beq	r2,zero,804150 <__swsetup_r+0xac>
  8040d4:	8100030b 	ldhu	r4,12(r16)
  8040d8:	2080020c 	andi	r2,r4,8
  8040dc:	10002826 	beq	r2,zero,804180 <__swsetup_r+0xdc>
  8040e0:	81400417 	ldw	r5,16(r16)
  8040e4:	28001d26 	beq	r5,zero,80415c <__swsetup_r+0xb8>
  8040e8:	2080004c 	andi	r2,r4,1
  8040ec:	1005003a 	cmpeq	r2,r2,zero
  8040f0:	10000b26 	beq	r2,zero,804120 <__swsetup_r+0x7c>
  8040f4:	2080008c 	andi	r2,r4,2
  8040f8:	10001226 	beq	r2,zero,804144 <__swsetup_r+0xa0>
  8040fc:	0005883a 	mov	r2,zero
  804100:	80800215 	stw	r2,8(r16)
  804104:	28000b26 	beq	r5,zero,804134 <__swsetup_r+0x90>
  804108:	0005883a 	mov	r2,zero
  80410c:	dfc00217 	ldw	ra,8(sp)
  804110:	dc400117 	ldw	r17,4(sp)
  804114:	dc000017 	ldw	r16,0(sp)
  804118:	dec00304 	addi	sp,sp,12
  80411c:	f800283a 	ret
  804120:	80800517 	ldw	r2,20(r16)
  804124:	80000215 	stw	zero,8(r16)
  804128:	0085c83a 	sub	r2,zero,r2
  80412c:	80800615 	stw	r2,24(r16)
  804130:	283ff51e 	bne	r5,zero,804108 <__swsetup_r+0x64>
  804134:	2080200c 	andi	r2,r4,128
  804138:	103ff326 	beq	r2,zero,804108 <__swsetup_r+0x64>
  80413c:	00bfffc4 	movi	r2,-1
  804140:	003ff206 	br	80410c <__swsetup_r+0x68>
  804144:	80800517 	ldw	r2,20(r16)
  804148:	80800215 	stw	r2,8(r16)
  80414c:	003fed06 	br	804104 <__swsetup_r+0x60>
  804150:	1809883a 	mov	r4,r3
  804154:	0805c700 	call	805c70 <__sinit>
  804158:	003fde06 	br	8040d4 <__swsetup_r+0x30>
  80415c:	20c0a00c 	andi	r3,r4,640
  804160:	00808004 	movi	r2,512
  804164:	18bfe026 	beq	r3,r2,8040e8 <__swsetup_r+0x44>
  804168:	8809883a 	mov	r4,r17
  80416c:	800b883a 	mov	r5,r16
  804170:	0806a1c0 	call	806a1c <__smakebuf_r>
  804174:	8100030b 	ldhu	r4,12(r16)
  804178:	81400417 	ldw	r5,16(r16)
  80417c:	003fda06 	br	8040e8 <__swsetup_r+0x44>
  804180:	2080040c 	andi	r2,r4,16
  804184:	103fed26 	beq	r2,zero,80413c <__swsetup_r+0x98>
  804188:	2080010c 	andi	r2,r4,4
  80418c:	10001226 	beq	r2,zero,8041d8 <__swsetup_r+0x134>
  804190:	81400c17 	ldw	r5,48(r16)
  804194:	28000526 	beq	r5,zero,8041ac <__swsetup_r+0x108>
  804198:	80801004 	addi	r2,r16,64
  80419c:	28800226 	beq	r5,r2,8041a8 <__swsetup_r+0x104>
  8041a0:	8809883a 	mov	r4,r17
  8041a4:	08060280 	call	806028 <_free_r>
  8041a8:	80000c15 	stw	zero,48(r16)
  8041ac:	8080030b 	ldhu	r2,12(r16)
  8041b0:	81400417 	ldw	r5,16(r16)
  8041b4:	80000115 	stw	zero,4(r16)
  8041b8:	10bff6cc 	andi	r2,r2,65499
  8041bc:	8080030d 	sth	r2,12(r16)
  8041c0:	81400015 	stw	r5,0(r16)
  8041c4:	8080030b 	ldhu	r2,12(r16)
  8041c8:	10800214 	ori	r2,r2,8
  8041cc:	113fffcc 	andi	r4,r2,65535
  8041d0:	8080030d 	sth	r2,12(r16)
  8041d4:	003fc306 	br	8040e4 <__swsetup_r+0x40>
  8041d8:	81400417 	ldw	r5,16(r16)
  8041dc:	003ff906 	br	8041c4 <__swsetup_r+0x120>

008041e0 <quorem>:
  8041e0:	28c00417 	ldw	r3,16(r5)
  8041e4:	20800417 	ldw	r2,16(r4)
  8041e8:	defff104 	addi	sp,sp,-60
  8041ec:	dfc00e15 	stw	ra,56(sp)
  8041f0:	df000d15 	stw	fp,52(sp)
  8041f4:	ddc00c15 	stw	r23,48(sp)
  8041f8:	dd800b15 	stw	r22,44(sp)
  8041fc:	dd400a15 	stw	r21,40(sp)
  804200:	dd000915 	stw	r20,36(sp)
  804204:	dcc00815 	stw	r19,32(sp)
  804208:	dc800715 	stw	r18,28(sp)
  80420c:	dc400615 	stw	r17,24(sp)
  804210:	dc000515 	stw	r16,20(sp)
  804214:	d9000315 	stw	r4,12(sp)
  804218:	d9400415 	stw	r5,16(sp)
  80421c:	10c07f16 	blt	r2,r3,80441c <quorem+0x23c>
  804220:	1d3fffc4 	addi	r20,r3,-1
  804224:	d8c00417 	ldw	r3,16(sp)
  804228:	d9000317 	ldw	r4,12(sp)
  80422c:	a505883a 	add	r2,r20,r20
  804230:	1085883a 	add	r2,r2,r2
  804234:	1cc00504 	addi	r19,r3,20
  804238:	25c00504 	addi	r23,r4,20
  80423c:	98ad883a 	add	r22,r19,r2
  804240:	15c7883a 	add	r3,r2,r23
  804244:	b1400017 	ldw	r5,0(r22)
  804248:	19000017 	ldw	r4,0(r3)
  80424c:	d8c00015 	stw	r3,0(sp)
  804250:	29400044 	addi	r5,r5,1
  804254:	d9000215 	stw	r4,8(sp)
  804258:	08017a40 	call	8017a4 <__udivsi3>
  80425c:	1039883a 	mov	fp,r2
  804260:	10003d1e 	bne	r2,zero,804358 <quorem+0x178>
  804264:	d9400417 	ldw	r5,16(sp)
  804268:	d9000317 	ldw	r4,12(sp)
  80426c:	08070080 	call	807008 <__mcmp>
  804270:	10002c16 	blt	r2,zero,804324 <quorem+0x144>
  804274:	e7000044 	addi	fp,fp,1
  804278:	b80f883a 	mov	r7,r23
  80427c:	0011883a 	mov	r8,zero
  804280:	0009883a 	mov	r4,zero
  804284:	99400017 	ldw	r5,0(r19)
  804288:	38c00017 	ldw	r3,0(r7)
  80428c:	9cc00104 	addi	r19,r19,4
  804290:	28bfffcc 	andi	r2,r5,65535
  804294:	2085883a 	add	r2,r4,r2
  804298:	11bfffcc 	andi	r6,r2,65535
  80429c:	193fffcc 	andi	r4,r3,65535
  8042a0:	1004d43a 	srli	r2,r2,16
  8042a4:	280ad43a 	srli	r5,r5,16
  8042a8:	2189c83a 	sub	r4,r4,r6
  8042ac:	2209883a 	add	r4,r4,r8
  8042b0:	1806d43a 	srli	r3,r3,16
  8042b4:	288b883a 	add	r5,r5,r2
  8042b8:	200dd43a 	srai	r6,r4,16
  8042bc:	28bfffcc 	andi	r2,r5,65535
  8042c0:	1887c83a 	sub	r3,r3,r2
  8042c4:	1987883a 	add	r3,r3,r6
  8042c8:	3900000d 	sth	r4,0(r7)
  8042cc:	38c0008d 	sth	r3,2(r7)
  8042d0:	2808d43a 	srli	r4,r5,16
  8042d4:	39c00104 	addi	r7,r7,4
  8042d8:	1811d43a 	srai	r8,r3,16
  8042dc:	b4ffe92e 	bgeu	r22,r19,804284 <quorem+0xa4>
  8042e0:	a505883a 	add	r2,r20,r20
  8042e4:	1085883a 	add	r2,r2,r2
  8042e8:	b885883a 	add	r2,r23,r2
  8042ec:	10c00017 	ldw	r3,0(r2)
  8042f0:	18000c1e 	bne	r3,zero,804324 <quorem+0x144>
  8042f4:	113fff04 	addi	r4,r2,-4
  8042f8:	b900082e 	bgeu	r23,r4,80431c <quorem+0x13c>
  8042fc:	10bfff17 	ldw	r2,-4(r2)
  804300:	10000326 	beq	r2,zero,804310 <quorem+0x130>
  804304:	00000506 	br	80431c <quorem+0x13c>
  804308:	20800017 	ldw	r2,0(r4)
  80430c:	1000031e 	bne	r2,zero,80431c <quorem+0x13c>
  804310:	213fff04 	addi	r4,r4,-4
  804314:	a53fffc4 	addi	r20,r20,-1
  804318:	b93ffb36 	bltu	r23,r4,804308 <quorem+0x128>
  80431c:	d9000317 	ldw	r4,12(sp)
  804320:	25000415 	stw	r20,16(r4)
  804324:	e005883a 	mov	r2,fp
  804328:	dfc00e17 	ldw	ra,56(sp)
  80432c:	df000d17 	ldw	fp,52(sp)
  804330:	ddc00c17 	ldw	r23,48(sp)
  804334:	dd800b17 	ldw	r22,44(sp)
  804338:	dd400a17 	ldw	r21,40(sp)
  80433c:	dd000917 	ldw	r20,36(sp)
  804340:	dcc00817 	ldw	r19,32(sp)
  804344:	dc800717 	ldw	r18,28(sp)
  804348:	dc400617 	ldw	r17,24(sp)
  80434c:	dc000517 	ldw	r16,20(sp)
  804350:	dec00f04 	addi	sp,sp,60
  804354:	f800283a 	ret
  804358:	b823883a 	mov	r17,r23
  80435c:	9825883a 	mov	r18,r19
  804360:	d8000115 	stw	zero,4(sp)
  804364:	002b883a 	mov	r21,zero
  804368:	94000017 	ldw	r16,0(r18)
  80436c:	e009883a 	mov	r4,fp
  804370:	94800104 	addi	r18,r18,4
  804374:	817fffcc 	andi	r5,r16,65535
  804378:	08017b40 	call	8017b4 <__mulsi3>
  80437c:	800ad43a 	srli	r5,r16,16
  804380:	e009883a 	mov	r4,fp
  804384:	a8a1883a 	add	r16,r21,r2
  804388:	08017b40 	call	8017b4 <__mulsi3>
  80438c:	89000017 	ldw	r4,0(r17)
  804390:	80ffffcc 	andi	r3,r16,65535
  804394:	8020d43a 	srli	r16,r16,16
  804398:	217fffcc 	andi	r5,r4,65535
  80439c:	28cbc83a 	sub	r5,r5,r3
  8043a0:	d8c00117 	ldw	r3,4(sp)
  8043a4:	2008d43a 	srli	r4,r4,16
  8043a8:	1405883a 	add	r2,r2,r16
  8043ac:	28cb883a 	add	r5,r5,r3
  8043b0:	280dd43a 	srai	r6,r5,16
  8043b4:	10ffffcc 	andi	r3,r2,65535
  8043b8:	20c9c83a 	sub	r4,r4,r3
  8043bc:	2189883a 	add	r4,r4,r6
  8043c0:	8900008d 	sth	r4,2(r17)
  8043c4:	2009d43a 	srai	r4,r4,16
  8043c8:	8940000d 	sth	r5,0(r17)
  8043cc:	102ad43a 	srli	r21,r2,16
  8043d0:	8c400104 	addi	r17,r17,4
  8043d4:	d9000115 	stw	r4,4(sp)
  8043d8:	b4bfe32e 	bgeu	r22,r18,804368 <quorem+0x188>
  8043dc:	d9000217 	ldw	r4,8(sp)
  8043e0:	203fa01e 	bne	r4,zero,804264 <quorem+0x84>
  8043e4:	d8800017 	ldw	r2,0(sp)
  8043e8:	10ffff04 	addi	r3,r2,-4
  8043ec:	b8c0082e 	bgeu	r23,r3,804410 <quorem+0x230>
  8043f0:	10bfff17 	ldw	r2,-4(r2)
  8043f4:	10000326 	beq	r2,zero,804404 <quorem+0x224>
  8043f8:	00000506 	br	804410 <quorem+0x230>
  8043fc:	18800017 	ldw	r2,0(r3)
  804400:	1000031e 	bne	r2,zero,804410 <quorem+0x230>
  804404:	18ffff04 	addi	r3,r3,-4
  804408:	a53fffc4 	addi	r20,r20,-1
  80440c:	b8fffb36 	bltu	r23,r3,8043fc <quorem+0x21c>
  804410:	d8c00317 	ldw	r3,12(sp)
  804414:	1d000415 	stw	r20,16(r3)
  804418:	003f9206 	br	804264 <quorem+0x84>
  80441c:	0005883a 	mov	r2,zero
  804420:	003fc106 	br	804328 <quorem+0x148>

00804424 <_dtoa_r>:
  804424:	22001017 	ldw	r8,64(r4)
  804428:	deffda04 	addi	sp,sp,-152
  80442c:	dd402115 	stw	r21,132(sp)
  804430:	dd002015 	stw	r20,128(sp)
  804434:	dc801e15 	stw	r18,120(sp)
  804438:	dc401d15 	stw	r17,116(sp)
  80443c:	dfc02515 	stw	ra,148(sp)
  804440:	df002415 	stw	fp,144(sp)
  804444:	ddc02315 	stw	r23,140(sp)
  804448:	dd802215 	stw	r22,136(sp)
  80444c:	dcc01f15 	stw	r19,124(sp)
  804450:	dc001c15 	stw	r16,112(sp)
  804454:	d9001615 	stw	r4,88(sp)
  804458:	3023883a 	mov	r17,r6
  80445c:	2829883a 	mov	r20,r5
  804460:	d9c01715 	stw	r7,92(sp)
  804464:	dc802817 	ldw	r18,160(sp)
  804468:	302b883a 	mov	r21,r6
  80446c:	40000a26 	beq	r8,zero,804498 <_dtoa_r+0x74>
  804470:	20801117 	ldw	r2,68(r4)
  804474:	400b883a 	mov	r5,r8
  804478:	40800115 	stw	r2,4(r8)
  80447c:	20c01117 	ldw	r3,68(r4)
  804480:	00800044 	movi	r2,1
  804484:	10c4983a 	sll	r2,r2,r3
  804488:	40800215 	stw	r2,8(r8)
  80448c:	0806eac0 	call	806eac <_Bfree>
  804490:	d8c01617 	ldw	r3,88(sp)
  804494:	18001015 	stw	zero,64(r3)
  804498:	8800a316 	blt	r17,zero,804728 <_dtoa_r+0x304>
  80449c:	90000015 	stw	zero,0(r18)
  8044a0:	a8dffc2c 	andhi	r3,r21,32752
  8044a4:	009ffc34 	movhi	r2,32752
  8044a8:	18809126 	beq	r3,r2,8046f0 <_dtoa_r+0x2cc>
  8044ac:	000d883a 	mov	r6,zero
  8044b0:	000f883a 	mov	r7,zero
  8044b4:	a009883a 	mov	r4,r20
  8044b8:	a80b883a 	mov	r5,r21
  8044bc:	dd001215 	stw	r20,72(sp)
  8044c0:	dd401315 	stw	r21,76(sp)
  8044c4:	080a4c00 	call	80a4c0 <__nedf2>
  8044c8:	1000171e 	bne	r2,zero,804528 <_dtoa_r+0x104>
  8044cc:	d9802717 	ldw	r6,156(sp)
  8044d0:	00800044 	movi	r2,1
  8044d4:	30800015 	stw	r2,0(r6)
  8044d8:	d8802917 	ldw	r2,164(sp)
  8044dc:	10029b26 	beq	r2,zero,804f4c <_dtoa_r+0xb28>
  8044e0:	d9002917 	ldw	r4,164(sp)
  8044e4:	00802074 	movhi	r2,129
  8044e8:	1091e444 	addi	r2,r2,18321
  8044ec:	10ffffc4 	addi	r3,r2,-1
  8044f0:	20800015 	stw	r2,0(r4)
  8044f4:	1805883a 	mov	r2,r3
  8044f8:	dfc02517 	ldw	ra,148(sp)
  8044fc:	df002417 	ldw	fp,144(sp)
  804500:	ddc02317 	ldw	r23,140(sp)
  804504:	dd802217 	ldw	r22,136(sp)
  804508:	dd402117 	ldw	r21,132(sp)
  80450c:	dd002017 	ldw	r20,128(sp)
  804510:	dcc01f17 	ldw	r19,124(sp)
  804514:	dc801e17 	ldw	r18,120(sp)
  804518:	dc401d17 	ldw	r17,116(sp)
  80451c:	dc001c17 	ldw	r16,112(sp)
  804520:	dec02604 	addi	sp,sp,152
  804524:	f800283a 	ret
  804528:	d9001617 	ldw	r4,88(sp)
  80452c:	d9401217 	ldw	r5,72(sp)
  804530:	d8800104 	addi	r2,sp,4
  804534:	a80d883a 	mov	r6,r21
  804538:	d9c00204 	addi	r7,sp,8
  80453c:	d8800015 	stw	r2,0(sp)
  804540:	08074e80 	call	8074e8 <__d2b>
  804544:	d8800715 	stw	r2,28(sp)
  804548:	a804d53a 	srli	r2,r21,20
  80454c:	1101ffcc 	andi	r4,r2,2047
  804550:	20008626 	beq	r4,zero,80476c <_dtoa_r+0x348>
  804554:	d8c01217 	ldw	r3,72(sp)
  804558:	00800434 	movhi	r2,16
  80455c:	10bfffc4 	addi	r2,r2,-1
  804560:	ddc00117 	ldw	r23,4(sp)
  804564:	a884703a 	and	r2,r21,r2
  804568:	1811883a 	mov	r8,r3
  80456c:	124ffc34 	orhi	r9,r2,16368
  804570:	25bf0044 	addi	r22,r4,-1023
  804574:	d8000815 	stw	zero,32(sp)
  804578:	0005883a 	mov	r2,zero
  80457c:	00cffe34 	movhi	r3,16376
  804580:	480b883a 	mov	r5,r9
  804584:	4009883a 	mov	r4,r8
  804588:	180f883a 	mov	r7,r3
  80458c:	100d883a 	mov	r6,r2
  804590:	0809d280 	call	809d28 <__subdf3>
  804594:	0218dbf4 	movhi	r8,25455
  804598:	4210d844 	addi	r8,r8,17249
  80459c:	024ff4f4 	movhi	r9,16339
  8045a0:	4a61e9c4 	addi	r9,r9,-30809
  8045a4:	480f883a 	mov	r7,r9
  8045a8:	400d883a 	mov	r6,r8
  8045ac:	180b883a 	mov	r5,r3
  8045b0:	1009883a 	mov	r4,r2
  8045b4:	0809e1c0 	call	809e1c <__muldf3>
  8045b8:	0222d874 	movhi	r8,35681
  8045bc:	42322cc4 	addi	r8,r8,-14157
  8045c0:	024ff1f4 	movhi	r9,16327
  8045c4:	4a628a04 	addi	r9,r9,-30168
  8045c8:	480f883a 	mov	r7,r9
  8045cc:	400d883a 	mov	r6,r8
  8045d0:	180b883a 	mov	r5,r3
  8045d4:	1009883a 	mov	r4,r2
  8045d8:	0809da80 	call	809da8 <__adddf3>
  8045dc:	b009883a 	mov	r4,r22
  8045e0:	1021883a 	mov	r16,r2
  8045e4:	1823883a 	mov	r17,r3
  8045e8:	080a6e00 	call	80a6e0 <__floatsidf>
  8045ec:	021427f4 	movhi	r8,20639
  8045f0:	421e7ec4 	addi	r8,r8,31227
  8045f4:	024ff4f4 	movhi	r9,16339
  8045f8:	4a5104c4 	addi	r9,r9,17427
  8045fc:	480f883a 	mov	r7,r9
  804600:	400d883a 	mov	r6,r8
  804604:	180b883a 	mov	r5,r3
  804608:	1009883a 	mov	r4,r2
  80460c:	0809e1c0 	call	809e1c <__muldf3>
  804610:	180f883a 	mov	r7,r3
  804614:	880b883a 	mov	r5,r17
  804618:	100d883a 	mov	r6,r2
  80461c:	8009883a 	mov	r4,r16
  804620:	0809da80 	call	809da8 <__adddf3>
  804624:	1009883a 	mov	r4,r2
  804628:	180b883a 	mov	r5,r3
  80462c:	1021883a 	mov	r16,r2
  804630:	1823883a 	mov	r17,r3
  804634:	080a7d80 	call	80a7d8 <__fixdfsi>
  804638:	000d883a 	mov	r6,zero
  80463c:	000f883a 	mov	r7,zero
  804640:	8009883a 	mov	r4,r16
  804644:	880b883a 	mov	r5,r17
  804648:	d8800d15 	stw	r2,52(sp)
  80464c:	080a6580 	call	80a658 <__ltdf2>
  804650:	10031716 	blt	r2,zero,8052b0 <_dtoa_r+0xe8c>
  804654:	d8c00d17 	ldw	r3,52(sp)
  804658:	00800584 	movi	r2,22
  80465c:	10c1482e 	bgeu	r2,r3,804b80 <_dtoa_r+0x75c>
  804660:	01000044 	movi	r4,1
  804664:	d9000c15 	stw	r4,48(sp)
  804668:	bd85c83a 	sub	r2,r23,r22
  80466c:	11bfffc4 	addi	r6,r2,-1
  804670:	30030b16 	blt	r6,zero,8052a0 <_dtoa_r+0xe7c>
  804674:	d9800a15 	stw	r6,40(sp)
  804678:	d8001115 	stw	zero,68(sp)
  80467c:	d8c00d17 	ldw	r3,52(sp)
  804680:	1802ff16 	blt	r3,zero,805280 <_dtoa_r+0xe5c>
  804684:	d9000a17 	ldw	r4,40(sp)
  804688:	d8c00915 	stw	r3,36(sp)
  80468c:	d8001015 	stw	zero,64(sp)
  804690:	20c9883a 	add	r4,r4,r3
  804694:	d9000a15 	stw	r4,40(sp)
  804698:	d9001717 	ldw	r4,92(sp)
  80469c:	00800244 	movi	r2,9
  8046a0:	11004636 	bltu	r2,r4,8047bc <_dtoa_r+0x398>
  8046a4:	00800144 	movi	r2,5
  8046a8:	11020416 	blt	r2,r4,804ebc <_dtoa_r+0xa98>
  8046ac:	04400044 	movi	r17,1
  8046b0:	d8c01717 	ldw	r3,92(sp)
  8046b4:	00800144 	movi	r2,5
  8046b8:	10c1ed36 	bltu	r2,r3,804e70 <_dtoa_r+0xa4c>
  8046bc:	18c5883a 	add	r2,r3,r3
  8046c0:	1085883a 	add	r2,r2,r2
  8046c4:	00c02034 	movhi	r3,128
  8046c8:	18d1b604 	addi	r3,r3,18136
  8046cc:	10c5883a 	add	r2,r2,r3
  8046d0:	11000017 	ldw	r4,0(r2)
  8046d4:	2000683a 	jmp	r4
  8046d8:	008047c4 	movi	r2,287
  8046dc:	008047c4 	movi	r2,287
  8046e0:	008051c4 	movi	r2,327
  8046e4:	0080519c 	xori	r2,zero,326
  8046e8:	008051e0 	cmpeqi	r2,zero,327
  8046ec:	008051ec 	andhi	r2,zero,327
  8046f0:	d9002717 	ldw	r4,156(sp)
  8046f4:	0089c3c4 	movi	r2,9999
  8046f8:	20800015 	stw	r2,0(r4)
  8046fc:	a0001026 	beq	r20,zero,804740 <_dtoa_r+0x31c>
  804700:	00c02074 	movhi	r3,129
  804704:	18d1f004 	addi	r3,r3,18368
  804708:	d9802917 	ldw	r6,164(sp)
  80470c:	303f7926 	beq	r6,zero,8044f4 <_dtoa_r+0xd0>
  804710:	188000c7 	ldb	r2,3(r3)
  804714:	190000c4 	addi	r4,r3,3
  804718:	1000101e 	bne	r2,zero,80475c <_dtoa_r+0x338>
  80471c:	d8802917 	ldw	r2,164(sp)
  804720:	11000015 	stw	r4,0(r2)
  804724:	003f7306 	br	8044f4 <_dtoa_r+0xd0>
  804728:	00a00034 	movhi	r2,32768
  80472c:	10bfffc4 	addi	r2,r2,-1
  804730:	00c00044 	movi	r3,1
  804734:	88aa703a 	and	r21,r17,r2
  804738:	90c00015 	stw	r3,0(r18)
  80473c:	003f5806 	br	8044a0 <_dtoa_r+0x7c>
  804740:	00800434 	movhi	r2,16
  804744:	10bfffc4 	addi	r2,r2,-1
  804748:	a884703a 	and	r2,r21,r2
  80474c:	103fec1e 	bne	r2,zero,804700 <_dtoa_r+0x2dc>
  804750:	00c02074 	movhi	r3,129
  804754:	18d1ed04 	addi	r3,r3,18356
  804758:	003feb06 	br	804708 <_dtoa_r+0x2e4>
  80475c:	d8802917 	ldw	r2,164(sp)
  804760:	19000204 	addi	r4,r3,8
  804764:	11000015 	stw	r4,0(r2)
  804768:	003f6206 	br	8044f4 <_dtoa_r+0xd0>
  80476c:	ddc00117 	ldw	r23,4(sp)
  804770:	d8800217 	ldw	r2,8(sp)
  804774:	01000804 	movi	r4,32
  804778:	b8c10c84 	addi	r3,r23,1074
  80477c:	18a3883a 	add	r17,r3,r2
  804780:	2441b80e 	bge	r4,r17,804e64 <_dtoa_r+0xa40>
  804784:	00c01004 	movi	r3,64
  804788:	1c47c83a 	sub	r3,r3,r17
  80478c:	88bff804 	addi	r2,r17,-32
  804790:	a8c6983a 	sll	r3,r21,r3
  804794:	a084d83a 	srl	r2,r20,r2
  804798:	1888b03a 	or	r4,r3,r2
  80479c:	080a8b00 	call	80a8b0 <__floatunsidf>
  8047a0:	1011883a 	mov	r8,r2
  8047a4:	00bf8434 	movhi	r2,65040
  8047a8:	01000044 	movi	r4,1
  8047ac:	10d3883a 	add	r9,r2,r3
  8047b0:	8dbef344 	addi	r22,r17,-1075
  8047b4:	d9000815 	stw	r4,32(sp)
  8047b8:	003f6f06 	br	804578 <_dtoa_r+0x154>
  8047bc:	d8001715 	stw	zero,92(sp)
  8047c0:	04400044 	movi	r17,1
  8047c4:	00bfffc4 	movi	r2,-1
  8047c8:	00c00044 	movi	r3,1
  8047cc:	d8800e15 	stw	r2,56(sp)
  8047d0:	d8002615 	stw	zero,152(sp)
  8047d4:	d8800f15 	stw	r2,60(sp)
  8047d8:	d8c00b15 	stw	r3,44(sp)
  8047dc:	1021883a 	mov	r16,r2
  8047e0:	d8801617 	ldw	r2,88(sp)
  8047e4:	10001115 	stw	zero,68(r2)
  8047e8:	d8801617 	ldw	r2,88(sp)
  8047ec:	11401117 	ldw	r5,68(r2)
  8047f0:	1009883a 	mov	r4,r2
  8047f4:	080742c0 	call	80742c <_Balloc>
  8047f8:	d8c01617 	ldw	r3,88(sp)
  8047fc:	d8800515 	stw	r2,20(sp)
  804800:	18801015 	stw	r2,64(r3)
  804804:	00800384 	movi	r2,14
  804808:	14006836 	bltu	r2,r16,8049ac <_dtoa_r+0x588>
  80480c:	8805003a 	cmpeq	r2,r17,zero
  804810:	1000661e 	bne	r2,zero,8049ac <_dtoa_r+0x588>
  804814:	d9000d17 	ldw	r4,52(sp)
  804818:	0102300e 	bge	zero,r4,8050dc <_dtoa_r+0xcb8>
  80481c:	208003cc 	andi	r2,r4,15
  804820:	100490fa 	slli	r2,r2,3
  804824:	2025d13a 	srai	r18,r4,4
  804828:	00c02074 	movhi	r3,129
  80482c:	18d20204 	addi	r3,r3,18440
  804830:	10c5883a 	add	r2,r2,r3
  804834:	90c0040c 	andi	r3,r18,16
  804838:	14000017 	ldw	r16,0(r2)
  80483c:	14400117 	ldw	r17,4(r2)
  804840:	18036a1e 	bne	r3,zero,8055ec <_dtoa_r+0x11c8>
  804844:	05800084 	movi	r22,2
  804848:	90001026 	beq	r18,zero,80488c <_dtoa_r+0x468>
  80484c:	04c02074 	movhi	r19,129
  804850:	9cd23404 	addi	r19,r19,18640
  804854:	9080004c 	andi	r2,r18,1
  804858:	1005003a 	cmpeq	r2,r2,zero
  80485c:	1000081e 	bne	r2,zero,804880 <_dtoa_r+0x45c>
  804860:	99800017 	ldw	r6,0(r19)
  804864:	99c00117 	ldw	r7,4(r19)
  804868:	880b883a 	mov	r5,r17
  80486c:	8009883a 	mov	r4,r16
  804870:	0809e1c0 	call	809e1c <__muldf3>
  804874:	1021883a 	mov	r16,r2
  804878:	b5800044 	addi	r22,r22,1
  80487c:	1823883a 	mov	r17,r3
  804880:	9025d07a 	srai	r18,r18,1
  804884:	9cc00204 	addi	r19,r19,8
  804888:	903ff21e 	bne	r18,zero,804854 <_dtoa_r+0x430>
  80488c:	a80b883a 	mov	r5,r21
  804890:	a009883a 	mov	r4,r20
  804894:	880f883a 	mov	r7,r17
  804898:	800d883a 	mov	r6,r16
  80489c:	080a1e00 	call	80a1e0 <__divdf3>
  8048a0:	1029883a 	mov	r20,r2
  8048a4:	182b883a 	mov	r21,r3
  8048a8:	d8c00c17 	ldw	r3,48(sp)
  8048ac:	1805003a 	cmpeq	r2,r3,zero
  8048b0:	1000081e 	bne	r2,zero,8048d4 <_dtoa_r+0x4b0>
  8048b4:	0005883a 	mov	r2,zero
  8048b8:	00cffc34 	movhi	r3,16368
  8048bc:	180f883a 	mov	r7,r3
  8048c0:	a009883a 	mov	r4,r20
  8048c4:	a80b883a 	mov	r5,r21
  8048c8:	100d883a 	mov	r6,r2
  8048cc:	080a6580 	call	80a658 <__ltdf2>
  8048d0:	1003fe16 	blt	r2,zero,8058cc <_dtoa_r+0x14a8>
  8048d4:	b009883a 	mov	r4,r22
  8048d8:	080a6e00 	call	80a6e0 <__floatsidf>
  8048dc:	180b883a 	mov	r5,r3
  8048e0:	1009883a 	mov	r4,r2
  8048e4:	a00d883a 	mov	r6,r20
  8048e8:	a80f883a 	mov	r7,r21
  8048ec:	0809e1c0 	call	809e1c <__muldf3>
  8048f0:	0011883a 	mov	r8,zero
  8048f4:	02500734 	movhi	r9,16412
  8048f8:	1009883a 	mov	r4,r2
  8048fc:	180b883a 	mov	r5,r3
  804900:	480f883a 	mov	r7,r9
  804904:	400d883a 	mov	r6,r8
  804908:	0809da80 	call	809da8 <__adddf3>
  80490c:	d9000f17 	ldw	r4,60(sp)
  804910:	102d883a 	mov	r22,r2
  804914:	00bf3034 	movhi	r2,64704
  804918:	18b9883a 	add	fp,r3,r2
  80491c:	e02f883a 	mov	r23,fp
  804920:	20028f1e 	bne	r4,zero,805360 <_dtoa_r+0xf3c>
  804924:	0005883a 	mov	r2,zero
  804928:	00d00534 	movhi	r3,16404
  80492c:	a009883a 	mov	r4,r20
  804930:	a80b883a 	mov	r5,r21
  804934:	180f883a 	mov	r7,r3
  804938:	100d883a 	mov	r6,r2
  80493c:	0809d280 	call	809d28 <__subdf3>
  804940:	1009883a 	mov	r4,r2
  804944:	e00f883a 	mov	r7,fp
  804948:	180b883a 	mov	r5,r3
  80494c:	b00d883a 	mov	r6,r22
  804950:	1025883a 	mov	r18,r2
  804954:	1827883a 	mov	r19,r3
  804958:	080a5480 	call	80a548 <__gtdf2>
  80495c:	00834f16 	blt	zero,r2,80569c <_dtoa_r+0x1278>
  804960:	e0e0003c 	xorhi	r3,fp,32768
  804964:	9009883a 	mov	r4,r18
  804968:	980b883a 	mov	r5,r19
  80496c:	180f883a 	mov	r7,r3
  804970:	b00d883a 	mov	r6,r22
  804974:	080a6580 	call	80a658 <__ltdf2>
  804978:	1000080e 	bge	r2,zero,80499c <_dtoa_r+0x578>
  80497c:	0027883a 	mov	r19,zero
  804980:	0025883a 	mov	r18,zero
  804984:	d8802617 	ldw	r2,152(sp)
  804988:	df000517 	ldw	fp,20(sp)
  80498c:	d8000615 	stw	zero,24(sp)
  804990:	0084303a 	nor	r2,zero,r2
  804994:	d8800d15 	stw	r2,52(sp)
  804998:	00019b06 	br	805008 <_dtoa_r+0xbe4>
  80499c:	d9801217 	ldw	r6,72(sp)
  8049a0:	d8801317 	ldw	r2,76(sp)
  8049a4:	3029883a 	mov	r20,r6
  8049a8:	102b883a 	mov	r21,r2
  8049ac:	d8c00217 	ldw	r3,8(sp)
  8049b0:	18008516 	blt	r3,zero,804bc8 <_dtoa_r+0x7a4>
  8049b4:	d9000d17 	ldw	r4,52(sp)
  8049b8:	00800384 	movi	r2,14
  8049bc:	11008216 	blt	r2,r4,804bc8 <_dtoa_r+0x7a4>
  8049c0:	200490fa 	slli	r2,r4,3
  8049c4:	d9802617 	ldw	r6,152(sp)
  8049c8:	00c02074 	movhi	r3,129
  8049cc:	18d20204 	addi	r3,r3,18440
  8049d0:	10c5883a 	add	r2,r2,r3
  8049d4:	14800017 	ldw	r18,0(r2)
  8049d8:	14c00117 	ldw	r19,4(r2)
  8049dc:	30031e16 	blt	r6,zero,805658 <_dtoa_r+0x1234>
  8049e0:	d9000517 	ldw	r4,20(sp)
  8049e4:	d8c00f17 	ldw	r3,60(sp)
  8049e8:	a823883a 	mov	r17,r21
  8049ec:	a021883a 	mov	r16,r20
  8049f0:	192b883a 	add	r21,r3,r4
  8049f4:	2039883a 	mov	fp,r4
  8049f8:	00000f06 	br	804a38 <_dtoa_r+0x614>
  8049fc:	0005883a 	mov	r2,zero
  804a00:	00d00934 	movhi	r3,16420
  804a04:	5009883a 	mov	r4,r10
  804a08:	580b883a 	mov	r5,r11
  804a0c:	180f883a 	mov	r7,r3
  804a10:	100d883a 	mov	r6,r2
  804a14:	0809e1c0 	call	809e1c <__muldf3>
  804a18:	180b883a 	mov	r5,r3
  804a1c:	000d883a 	mov	r6,zero
  804a20:	000f883a 	mov	r7,zero
  804a24:	1009883a 	mov	r4,r2
  804a28:	1021883a 	mov	r16,r2
  804a2c:	1823883a 	mov	r17,r3
  804a30:	080a4c00 	call	80a4c0 <__nedf2>
  804a34:	10004526 	beq	r2,zero,804b4c <_dtoa_r+0x728>
  804a38:	900d883a 	mov	r6,r18
  804a3c:	980f883a 	mov	r7,r19
  804a40:	8009883a 	mov	r4,r16
  804a44:	880b883a 	mov	r5,r17
  804a48:	080a1e00 	call	80a1e0 <__divdf3>
  804a4c:	180b883a 	mov	r5,r3
  804a50:	1009883a 	mov	r4,r2
  804a54:	080a7d80 	call	80a7d8 <__fixdfsi>
  804a58:	1009883a 	mov	r4,r2
  804a5c:	1029883a 	mov	r20,r2
  804a60:	080a6e00 	call	80a6e0 <__floatsidf>
  804a64:	180f883a 	mov	r7,r3
  804a68:	9009883a 	mov	r4,r18
  804a6c:	980b883a 	mov	r5,r19
  804a70:	100d883a 	mov	r6,r2
  804a74:	0809e1c0 	call	809e1c <__muldf3>
  804a78:	180f883a 	mov	r7,r3
  804a7c:	880b883a 	mov	r5,r17
  804a80:	8009883a 	mov	r4,r16
  804a84:	100d883a 	mov	r6,r2
  804a88:	0809d280 	call	809d28 <__subdf3>
  804a8c:	1015883a 	mov	r10,r2
  804a90:	a0800c04 	addi	r2,r20,48
  804a94:	e0800005 	stb	r2,0(fp)
  804a98:	e7000044 	addi	fp,fp,1
  804a9c:	1817883a 	mov	r11,r3
  804aa0:	e57fd61e 	bne	fp,r21,8049fc <_dtoa_r+0x5d8>
  804aa4:	500d883a 	mov	r6,r10
  804aa8:	180f883a 	mov	r7,r3
  804aac:	5009883a 	mov	r4,r10
  804ab0:	180b883a 	mov	r5,r3
  804ab4:	0809da80 	call	809da8 <__adddf3>
  804ab8:	100d883a 	mov	r6,r2
  804abc:	9009883a 	mov	r4,r18
  804ac0:	980b883a 	mov	r5,r19
  804ac4:	180f883a 	mov	r7,r3
  804ac8:	1021883a 	mov	r16,r2
  804acc:	1823883a 	mov	r17,r3
  804ad0:	080a6580 	call	80a658 <__ltdf2>
  804ad4:	10000816 	blt	r2,zero,804af8 <_dtoa_r+0x6d4>
  804ad8:	980b883a 	mov	r5,r19
  804adc:	800d883a 	mov	r6,r16
  804ae0:	880f883a 	mov	r7,r17
  804ae4:	9009883a 	mov	r4,r18
  804ae8:	080a4380 	call	80a438 <__eqdf2>
  804aec:	1000171e 	bne	r2,zero,804b4c <_dtoa_r+0x728>
  804af0:	a080004c 	andi	r2,r20,1
  804af4:	10001526 	beq	r2,zero,804b4c <_dtoa_r+0x728>
  804af8:	d8800d17 	ldw	r2,52(sp)
  804afc:	d8800415 	stw	r2,16(sp)
  804b00:	e009883a 	mov	r4,fp
  804b04:	213fffc4 	addi	r4,r4,-1
  804b08:	20c00007 	ldb	r3,0(r4)
  804b0c:	00800e44 	movi	r2,57
  804b10:	1880081e 	bne	r3,r2,804b34 <_dtoa_r+0x710>
  804b14:	d8800517 	ldw	r2,20(sp)
  804b18:	113ffa1e 	bne	r2,r4,804b04 <_dtoa_r+0x6e0>
  804b1c:	d8c00417 	ldw	r3,16(sp)
  804b20:	d9800517 	ldw	r6,20(sp)
  804b24:	00800c04 	movi	r2,48
  804b28:	18c00044 	addi	r3,r3,1
  804b2c:	d8c00415 	stw	r3,16(sp)
  804b30:	30800005 	stb	r2,0(r6)
  804b34:	20800003 	ldbu	r2,0(r4)
  804b38:	d8c00417 	ldw	r3,16(sp)
  804b3c:	27000044 	addi	fp,r4,1
  804b40:	10800044 	addi	r2,r2,1
  804b44:	d8c00d15 	stw	r3,52(sp)
  804b48:	20800005 	stb	r2,0(r4)
  804b4c:	d9001617 	ldw	r4,88(sp)
  804b50:	d9400717 	ldw	r5,28(sp)
  804b54:	0806eac0 	call	806eac <_Bfree>
  804b58:	e0000005 	stb	zero,0(fp)
  804b5c:	d9800d17 	ldw	r6,52(sp)
  804b60:	d8c02717 	ldw	r3,156(sp)
  804b64:	d9002917 	ldw	r4,164(sp)
  804b68:	30800044 	addi	r2,r6,1
  804b6c:	18800015 	stw	r2,0(r3)
  804b70:	20029c26 	beq	r4,zero,8055e4 <_dtoa_r+0x11c0>
  804b74:	d8c00517 	ldw	r3,20(sp)
  804b78:	27000015 	stw	fp,0(r4)
  804b7c:	003e5d06 	br	8044f4 <_dtoa_r+0xd0>
  804b80:	d9800d17 	ldw	r6,52(sp)
  804b84:	00c02074 	movhi	r3,129
  804b88:	18d20204 	addi	r3,r3,18440
  804b8c:	d9001217 	ldw	r4,72(sp)
  804b90:	300490fa 	slli	r2,r6,3
  804b94:	d9401317 	ldw	r5,76(sp)
  804b98:	10c5883a 	add	r2,r2,r3
  804b9c:	12000017 	ldw	r8,0(r2)
  804ba0:	12400117 	ldw	r9,4(r2)
  804ba4:	400d883a 	mov	r6,r8
  804ba8:	480f883a 	mov	r7,r9
  804bac:	080a6580 	call	80a658 <__ltdf2>
  804bb0:	1000030e 	bge	r2,zero,804bc0 <_dtoa_r+0x79c>
  804bb4:	d8800d17 	ldw	r2,52(sp)
  804bb8:	10bfffc4 	addi	r2,r2,-1
  804bbc:	d8800d15 	stw	r2,52(sp)
  804bc0:	d8000c15 	stw	zero,48(sp)
  804bc4:	003ea806 	br	804668 <_dtoa_r+0x244>
  804bc8:	d9000b17 	ldw	r4,44(sp)
  804bcc:	202cc03a 	cmpne	r22,r4,zero
  804bd0:	b000c71e 	bne	r22,zero,804ef0 <_dtoa_r+0xacc>
  804bd4:	dc001117 	ldw	r16,68(sp)
  804bd8:	dc801017 	ldw	r18,64(sp)
  804bdc:	0027883a 	mov	r19,zero
  804be0:	04000b0e 	bge	zero,r16,804c10 <_dtoa_r+0x7ec>
  804be4:	d8c00a17 	ldw	r3,40(sp)
  804be8:	00c0090e 	bge	zero,r3,804c10 <_dtoa_r+0x7ec>
  804bec:	8005883a 	mov	r2,r16
  804bf0:	1c011316 	blt	r3,r16,805040 <_dtoa_r+0xc1c>
  804bf4:	d9000a17 	ldw	r4,40(sp)
  804bf8:	d9801117 	ldw	r6,68(sp)
  804bfc:	80a1c83a 	sub	r16,r16,r2
  804c00:	2089c83a 	sub	r4,r4,r2
  804c04:	308dc83a 	sub	r6,r6,r2
  804c08:	d9000a15 	stw	r4,40(sp)
  804c0c:	d9801115 	stw	r6,68(sp)
  804c10:	d8801017 	ldw	r2,64(sp)
  804c14:	0080150e 	bge	zero,r2,804c6c <_dtoa_r+0x848>
  804c18:	d8c00b17 	ldw	r3,44(sp)
  804c1c:	1805003a 	cmpeq	r2,r3,zero
  804c20:	1001c91e 	bne	r2,zero,805348 <_dtoa_r+0xf24>
  804c24:	04800e0e 	bge	zero,r18,804c60 <_dtoa_r+0x83c>
  804c28:	d9001617 	ldw	r4,88(sp)
  804c2c:	980b883a 	mov	r5,r19
  804c30:	900d883a 	mov	r6,r18
  804c34:	0807cf80 	call	807cf8 <__pow5mult>
  804c38:	d9001617 	ldw	r4,88(sp)
  804c3c:	d9800717 	ldw	r6,28(sp)
  804c40:	100b883a 	mov	r5,r2
  804c44:	1027883a 	mov	r19,r2
  804c48:	080793c0 	call	80793c <__multiply>
  804c4c:	d9001617 	ldw	r4,88(sp)
  804c50:	d9400717 	ldw	r5,28(sp)
  804c54:	1023883a 	mov	r17,r2
  804c58:	0806eac0 	call	806eac <_Bfree>
  804c5c:	dc400715 	stw	r17,28(sp)
  804c60:	d9001017 	ldw	r4,64(sp)
  804c64:	248dc83a 	sub	r6,r4,r18
  804c68:	30010e1e 	bne	r6,zero,8050a4 <_dtoa_r+0xc80>
  804c6c:	d9001617 	ldw	r4,88(sp)
  804c70:	04400044 	movi	r17,1
  804c74:	880b883a 	mov	r5,r17
  804c78:	0807b900 	call	807b90 <__i2b>
  804c7c:	d9800917 	ldw	r6,36(sp)
  804c80:	1025883a 	mov	r18,r2
  804c84:	0180040e 	bge	zero,r6,804c98 <_dtoa_r+0x874>
  804c88:	d9001617 	ldw	r4,88(sp)
  804c8c:	100b883a 	mov	r5,r2
  804c90:	0807cf80 	call	807cf8 <__pow5mult>
  804c94:	1025883a 	mov	r18,r2
  804c98:	d8801717 	ldw	r2,92(sp)
  804c9c:	8880f30e 	bge	r17,r2,80506c <_dtoa_r+0xc48>
  804ca0:	0023883a 	mov	r17,zero
  804ca4:	d9800917 	ldw	r6,36(sp)
  804ca8:	30019e1e 	bne	r6,zero,805324 <_dtoa_r+0xf00>
  804cac:	00c00044 	movi	r3,1
  804cb0:	d9000a17 	ldw	r4,40(sp)
  804cb4:	20c5883a 	add	r2,r4,r3
  804cb8:	10c007cc 	andi	r3,r2,31
  804cbc:	1800841e 	bne	r3,zero,804ed0 <_dtoa_r+0xaac>
  804cc0:	00800704 	movi	r2,28
  804cc4:	d9000a17 	ldw	r4,40(sp)
  804cc8:	d9801117 	ldw	r6,68(sp)
  804ccc:	80a1883a 	add	r16,r16,r2
  804cd0:	2089883a 	add	r4,r4,r2
  804cd4:	308d883a 	add	r6,r6,r2
  804cd8:	d9000a15 	stw	r4,40(sp)
  804cdc:	d9801115 	stw	r6,68(sp)
  804ce0:	d8801117 	ldw	r2,68(sp)
  804ce4:	0080050e 	bge	zero,r2,804cfc <_dtoa_r+0x8d8>
  804ce8:	d9400717 	ldw	r5,28(sp)
  804cec:	d9001617 	ldw	r4,88(sp)
  804cf0:	100d883a 	mov	r6,r2
  804cf4:	08077f00 	call	8077f0 <__lshift>
  804cf8:	d8800715 	stw	r2,28(sp)
  804cfc:	d8c00a17 	ldw	r3,40(sp)
  804d00:	00c0050e 	bge	zero,r3,804d18 <_dtoa_r+0x8f4>
  804d04:	d9001617 	ldw	r4,88(sp)
  804d08:	900b883a 	mov	r5,r18
  804d0c:	180d883a 	mov	r6,r3
  804d10:	08077f00 	call	8077f0 <__lshift>
  804d14:	1025883a 	mov	r18,r2
  804d18:	d9000c17 	ldw	r4,48(sp)
  804d1c:	2005003a 	cmpeq	r2,r4,zero
  804d20:	10016f26 	beq	r2,zero,8052e0 <_dtoa_r+0xebc>
  804d24:	d9000f17 	ldw	r4,60(sp)
  804d28:	0102170e 	bge	zero,r4,805588 <_dtoa_r+0x1164>
  804d2c:	d9800b17 	ldw	r6,44(sp)
  804d30:	3005003a 	cmpeq	r2,r6,zero
  804d34:	1000881e 	bne	r2,zero,804f58 <_dtoa_r+0xb34>
  804d38:	0400050e 	bge	zero,r16,804d50 <_dtoa_r+0x92c>
  804d3c:	d9001617 	ldw	r4,88(sp)
  804d40:	980b883a 	mov	r5,r19
  804d44:	800d883a 	mov	r6,r16
  804d48:	08077f00 	call	8077f0 <__lshift>
  804d4c:	1027883a 	mov	r19,r2
  804d50:	8804c03a 	cmpne	r2,r17,zero
  804d54:	1002541e 	bne	r2,zero,8056a8 <_dtoa_r+0x1284>
  804d58:	980b883a 	mov	r5,r19
  804d5c:	dd800517 	ldw	r22,20(sp)
  804d60:	dcc00615 	stw	r19,24(sp)
  804d64:	a700004c 	andi	fp,r20,1
  804d68:	2827883a 	mov	r19,r5
  804d6c:	d9000717 	ldw	r4,28(sp)
  804d70:	900b883a 	mov	r5,r18
  804d74:	08041e00 	call	8041e0 <quorem>
  804d78:	d9000717 	ldw	r4,28(sp)
  804d7c:	d9400617 	ldw	r5,24(sp)
  804d80:	1023883a 	mov	r17,r2
  804d84:	8dc00c04 	addi	r23,r17,48
  804d88:	08070080 	call	807008 <__mcmp>
  804d8c:	d9001617 	ldw	r4,88(sp)
  804d90:	900b883a 	mov	r5,r18
  804d94:	980d883a 	mov	r6,r19
  804d98:	1029883a 	mov	r20,r2
  804d9c:	08076640 	call	807664 <__mdiff>
  804da0:	102b883a 	mov	r21,r2
  804da4:	10800317 	ldw	r2,12(r2)
  804da8:	1001281e 	bne	r2,zero,80524c <_dtoa_r+0xe28>
  804dac:	d9000717 	ldw	r4,28(sp)
  804db0:	a80b883a 	mov	r5,r21
  804db4:	08070080 	call	807008 <__mcmp>
  804db8:	d9001617 	ldw	r4,88(sp)
  804dbc:	1021883a 	mov	r16,r2
  804dc0:	a80b883a 	mov	r5,r21
  804dc4:	0806eac0 	call	806eac <_Bfree>
  804dc8:	8000041e 	bne	r16,zero,804ddc <_dtoa_r+0x9b8>
  804dcc:	d8801717 	ldw	r2,92(sp)
  804dd0:	1000021e 	bne	r2,zero,804ddc <_dtoa_r+0x9b8>
  804dd4:	e004c03a 	cmpne	r2,fp,zero
  804dd8:	10011726 	beq	r2,zero,805238 <_dtoa_r+0xe14>
  804ddc:	a0010616 	blt	r20,zero,8051f8 <_dtoa_r+0xdd4>
  804de0:	a000041e 	bne	r20,zero,804df4 <_dtoa_r+0x9d0>
  804de4:	d8c01717 	ldw	r3,92(sp)
  804de8:	1800021e 	bne	r3,zero,804df4 <_dtoa_r+0x9d0>
  804dec:	e004c03a 	cmpne	r2,fp,zero
  804df0:	10010126 	beq	r2,zero,8051f8 <_dtoa_r+0xdd4>
  804df4:	04023d16 	blt	zero,r16,8056ec <_dtoa_r+0x12c8>
  804df8:	b5c00005 	stb	r23,0(r22)
  804dfc:	d9800517 	ldw	r6,20(sp)
  804e00:	d9000f17 	ldw	r4,60(sp)
  804e04:	b5800044 	addi	r22,r22,1
  804e08:	3105883a 	add	r2,r6,r4
  804e0c:	b0806526 	beq	r22,r2,804fa4 <_dtoa_r+0xb80>
  804e10:	d9400717 	ldw	r5,28(sp)
  804e14:	d9001617 	ldw	r4,88(sp)
  804e18:	01800284 	movi	r6,10
  804e1c:	000f883a 	mov	r7,zero
  804e20:	0807bcc0 	call	807bcc <__multadd>
  804e24:	d8800715 	stw	r2,28(sp)
  804e28:	d8800617 	ldw	r2,24(sp)
  804e2c:	14c10c26 	beq	r2,r19,805260 <_dtoa_r+0xe3c>
  804e30:	d9400617 	ldw	r5,24(sp)
  804e34:	d9001617 	ldw	r4,88(sp)
  804e38:	01800284 	movi	r6,10
  804e3c:	000f883a 	mov	r7,zero
  804e40:	0807bcc0 	call	807bcc <__multadd>
  804e44:	d9001617 	ldw	r4,88(sp)
  804e48:	980b883a 	mov	r5,r19
  804e4c:	01800284 	movi	r6,10
  804e50:	000f883a 	mov	r7,zero
  804e54:	d8800615 	stw	r2,24(sp)
  804e58:	0807bcc0 	call	807bcc <__multadd>
  804e5c:	1027883a 	mov	r19,r2
  804e60:	003fc206 	br	804d6c <_dtoa_r+0x948>
  804e64:	2445c83a 	sub	r2,r4,r17
  804e68:	a088983a 	sll	r4,r20,r2
  804e6c:	003e4b06 	br	80479c <_dtoa_r+0x378>
  804e70:	01bfffc4 	movi	r6,-1
  804e74:	00800044 	movi	r2,1
  804e78:	d9800e15 	stw	r6,56(sp)
  804e7c:	d9800f15 	stw	r6,60(sp)
  804e80:	d8800b15 	stw	r2,44(sp)
  804e84:	d8c01617 	ldw	r3,88(sp)
  804e88:	008005c4 	movi	r2,23
  804e8c:	18001115 	stw	zero,68(r3)
  804e90:	1580082e 	bgeu	r2,r22,804eb4 <_dtoa_r+0xa90>
  804e94:	00c00104 	movi	r3,4
  804e98:	0009883a 	mov	r4,zero
  804e9c:	18c7883a 	add	r3,r3,r3
  804ea0:	18800504 	addi	r2,r3,20
  804ea4:	21000044 	addi	r4,r4,1
  804ea8:	b0bffc2e 	bgeu	r22,r2,804e9c <_dtoa_r+0xa78>
  804eac:	d9801617 	ldw	r6,88(sp)
  804eb0:	31001115 	stw	r4,68(r6)
  804eb4:	dc000f17 	ldw	r16,60(sp)
  804eb8:	003e4b06 	br	8047e8 <_dtoa_r+0x3c4>
  804ebc:	d9801717 	ldw	r6,92(sp)
  804ec0:	0023883a 	mov	r17,zero
  804ec4:	31bfff04 	addi	r6,r6,-4
  804ec8:	d9801715 	stw	r6,92(sp)
  804ecc:	003df806 	br	8046b0 <_dtoa_r+0x28c>
  804ed0:	00800804 	movi	r2,32
  804ed4:	10c9c83a 	sub	r4,r2,r3
  804ed8:	00c00104 	movi	r3,4
  804edc:	19005a16 	blt	r3,r4,805048 <_dtoa_r+0xc24>
  804ee0:	008000c4 	movi	r2,3
  804ee4:	113f7e16 	blt	r2,r4,804ce0 <_dtoa_r+0x8bc>
  804ee8:	20800704 	addi	r2,r4,28
  804eec:	003f7506 	br	804cc4 <_dtoa_r+0x8a0>
  804ef0:	d9801717 	ldw	r6,92(sp)
  804ef4:	00800044 	movi	r2,1
  804ef8:	1180a10e 	bge	r2,r6,805180 <_dtoa_r+0xd5c>
  804efc:	d9800f17 	ldw	r6,60(sp)
  804f00:	d8c01017 	ldw	r3,64(sp)
  804f04:	30bfffc4 	addi	r2,r6,-1
  804f08:	1881c616 	blt	r3,r2,805624 <_dtoa_r+0x1200>
  804f0c:	18a5c83a 	sub	r18,r3,r2
  804f10:	d8800f17 	ldw	r2,60(sp)
  804f14:	10026216 	blt	r2,zero,8058a0 <_dtoa_r+0x147c>
  804f18:	dc001117 	ldw	r16,68(sp)
  804f1c:	1007883a 	mov	r3,r2
  804f20:	d9800a17 	ldw	r6,40(sp)
  804f24:	d8801117 	ldw	r2,68(sp)
  804f28:	d9001617 	ldw	r4,88(sp)
  804f2c:	30cd883a 	add	r6,r6,r3
  804f30:	10c5883a 	add	r2,r2,r3
  804f34:	01400044 	movi	r5,1
  804f38:	d9800a15 	stw	r6,40(sp)
  804f3c:	d8801115 	stw	r2,68(sp)
  804f40:	0807b900 	call	807b90 <__i2b>
  804f44:	1027883a 	mov	r19,r2
  804f48:	003f2506 	br	804be0 <_dtoa_r+0x7bc>
  804f4c:	00c02074 	movhi	r3,129
  804f50:	18d1e404 	addi	r3,r3,18320
  804f54:	003d6706 	br	8044f4 <_dtoa_r+0xd0>
  804f58:	dd800517 	ldw	r22,20(sp)
  804f5c:	04000044 	movi	r16,1
  804f60:	00000706 	br	804f80 <_dtoa_r+0xb5c>
  804f64:	d9400717 	ldw	r5,28(sp)
  804f68:	d9001617 	ldw	r4,88(sp)
  804f6c:	01800284 	movi	r6,10
  804f70:	000f883a 	mov	r7,zero
  804f74:	0807bcc0 	call	807bcc <__multadd>
  804f78:	d8800715 	stw	r2,28(sp)
  804f7c:	84000044 	addi	r16,r16,1
  804f80:	d9000717 	ldw	r4,28(sp)
  804f84:	900b883a 	mov	r5,r18
  804f88:	08041e00 	call	8041e0 <quorem>
  804f8c:	15c00c04 	addi	r23,r2,48
  804f90:	b5c00005 	stb	r23,0(r22)
  804f94:	d8c00f17 	ldw	r3,60(sp)
  804f98:	b5800044 	addi	r22,r22,1
  804f9c:	80fff116 	blt	r16,r3,804f64 <_dtoa_r+0xb40>
  804fa0:	d8000615 	stw	zero,24(sp)
  804fa4:	d9400717 	ldw	r5,28(sp)
  804fa8:	d9001617 	ldw	r4,88(sp)
  804fac:	01800044 	movi	r6,1
  804fb0:	08077f00 	call	8077f0 <__lshift>
  804fb4:	1009883a 	mov	r4,r2
  804fb8:	900b883a 	mov	r5,r18
  804fbc:	d8800715 	stw	r2,28(sp)
  804fc0:	08070080 	call	807008 <__mcmp>
  804fc4:	00803c0e 	bge	zero,r2,8050b8 <_dtoa_r+0xc94>
  804fc8:	b009883a 	mov	r4,r22
  804fcc:	213fffc4 	addi	r4,r4,-1
  804fd0:	21400003 	ldbu	r5,0(r4)
  804fd4:	00800e44 	movi	r2,57
  804fd8:	28c03fcc 	andi	r3,r5,255
  804fdc:	18c0201c 	xori	r3,r3,128
  804fe0:	18ffe004 	addi	r3,r3,-128
  804fe4:	1881981e 	bne	r3,r2,805648 <_dtoa_r+0x1224>
  804fe8:	d9800517 	ldw	r6,20(sp)
  804fec:	21bff71e 	bne	r4,r6,804fcc <_dtoa_r+0xba8>
  804ff0:	d8800d17 	ldw	r2,52(sp)
  804ff4:	37000044 	addi	fp,r6,1
  804ff8:	10800044 	addi	r2,r2,1
  804ffc:	d8800d15 	stw	r2,52(sp)
  805000:	00800c44 	movi	r2,49
  805004:	30800005 	stb	r2,0(r6)
  805008:	d9001617 	ldw	r4,88(sp)
  80500c:	900b883a 	mov	r5,r18
  805010:	0806eac0 	call	806eac <_Bfree>
  805014:	983ecd26 	beq	r19,zero,804b4c <_dtoa_r+0x728>
  805018:	d8c00617 	ldw	r3,24(sp)
  80501c:	18000426 	beq	r3,zero,805030 <_dtoa_r+0xc0c>
  805020:	1cc00326 	beq	r3,r19,805030 <_dtoa_r+0xc0c>
  805024:	d9001617 	ldw	r4,88(sp)
  805028:	180b883a 	mov	r5,r3
  80502c:	0806eac0 	call	806eac <_Bfree>
  805030:	d9001617 	ldw	r4,88(sp)
  805034:	980b883a 	mov	r5,r19
  805038:	0806eac0 	call	806eac <_Bfree>
  80503c:	003ec306 	br	804b4c <_dtoa_r+0x728>
  805040:	1805883a 	mov	r2,r3
  805044:	003eeb06 	br	804bf4 <_dtoa_r+0x7d0>
  805048:	d9800a17 	ldw	r6,40(sp)
  80504c:	d8c01117 	ldw	r3,68(sp)
  805050:	20bfff04 	addi	r2,r4,-4
  805054:	308d883a 	add	r6,r6,r2
  805058:	1887883a 	add	r3,r3,r2
  80505c:	80a1883a 	add	r16,r16,r2
  805060:	d9800a15 	stw	r6,40(sp)
  805064:	d8c01115 	stw	r3,68(sp)
  805068:	003f1d06 	br	804ce0 <_dtoa_r+0x8bc>
  80506c:	a03f0c1e 	bne	r20,zero,804ca0 <_dtoa_r+0x87c>
  805070:	00800434 	movhi	r2,16
  805074:	10bfffc4 	addi	r2,r2,-1
  805078:	a884703a 	and	r2,r21,r2
  80507c:	103f081e 	bne	r2,zero,804ca0 <_dtoa_r+0x87c>
  805080:	a89ffc2c 	andhi	r2,r21,32752
  805084:	103f0626 	beq	r2,zero,804ca0 <_dtoa_r+0x87c>
  805088:	d8c01117 	ldw	r3,68(sp)
  80508c:	d9000a17 	ldw	r4,40(sp)
  805090:	18c00044 	addi	r3,r3,1
  805094:	21000044 	addi	r4,r4,1
  805098:	d8c01115 	stw	r3,68(sp)
  80509c:	d9000a15 	stw	r4,40(sp)
  8050a0:	003f0006 	br	804ca4 <_dtoa_r+0x880>
  8050a4:	d9400717 	ldw	r5,28(sp)
  8050a8:	d9001617 	ldw	r4,88(sp)
  8050ac:	0807cf80 	call	807cf8 <__pow5mult>
  8050b0:	d8800715 	stw	r2,28(sp)
  8050b4:	003eed06 	br	804c6c <_dtoa_r+0x848>
  8050b8:	1000021e 	bne	r2,zero,8050c4 <_dtoa_r+0xca0>
  8050bc:	b880004c 	andi	r2,r23,1
  8050c0:	103fc11e 	bne	r2,zero,804fc8 <_dtoa_r+0xba4>
  8050c4:	b5bfffc4 	addi	r22,r22,-1
  8050c8:	b0c00007 	ldb	r3,0(r22)
  8050cc:	00800c04 	movi	r2,48
  8050d0:	18bffc26 	beq	r3,r2,8050c4 <_dtoa_r+0xca0>
  8050d4:	b7000044 	addi	fp,r22,1
  8050d8:	003fcb06 	br	805008 <_dtoa_r+0xbe4>
  8050dc:	d9800d17 	ldw	r6,52(sp)
  8050e0:	018fc83a 	sub	r7,zero,r6
  8050e4:	3801f726 	beq	r7,zero,8058c4 <_dtoa_r+0x14a0>
  8050e8:	398003cc 	andi	r6,r7,15
  8050ec:	300c90fa 	slli	r6,r6,3
  8050f0:	01402074 	movhi	r5,129
  8050f4:	29520204 	addi	r5,r5,18440
  8050f8:	d9001217 	ldw	r4,72(sp)
  8050fc:	314d883a 	add	r6,r6,r5
  805100:	30c00117 	ldw	r3,4(r6)
  805104:	30800017 	ldw	r2,0(r6)
  805108:	d9401317 	ldw	r5,76(sp)
  80510c:	3821d13a 	srai	r16,r7,4
  805110:	100d883a 	mov	r6,r2
  805114:	180f883a 	mov	r7,r3
  805118:	0809e1c0 	call	809e1c <__muldf3>
  80511c:	1011883a 	mov	r8,r2
  805120:	1813883a 	mov	r9,r3
  805124:	1029883a 	mov	r20,r2
  805128:	182b883a 	mov	r21,r3
  80512c:	8001e526 	beq	r16,zero,8058c4 <_dtoa_r+0x14a0>
  805130:	05800084 	movi	r22,2
  805134:	04402074 	movhi	r17,129
  805138:	8c523404 	addi	r17,r17,18640
  80513c:	8080004c 	andi	r2,r16,1
  805140:	1005003a 	cmpeq	r2,r2,zero
  805144:	1000081e 	bne	r2,zero,805168 <_dtoa_r+0xd44>
  805148:	89800017 	ldw	r6,0(r17)
  80514c:	89c00117 	ldw	r7,4(r17)
  805150:	480b883a 	mov	r5,r9
  805154:	4009883a 	mov	r4,r8
  805158:	0809e1c0 	call	809e1c <__muldf3>
  80515c:	1011883a 	mov	r8,r2
  805160:	b5800044 	addi	r22,r22,1
  805164:	1813883a 	mov	r9,r3
  805168:	8021d07a 	srai	r16,r16,1
  80516c:	8c400204 	addi	r17,r17,8
  805170:	803ff21e 	bne	r16,zero,80513c <_dtoa_r+0xd18>
  805174:	4029883a 	mov	r20,r8
  805178:	482b883a 	mov	r21,r9
  80517c:	003dca06 	br	8048a8 <_dtoa_r+0x484>
  805180:	d9000817 	ldw	r4,32(sp)
  805184:	2005003a 	cmpeq	r2,r4,zero
  805188:	1001f61e 	bne	r2,zero,805964 <_dtoa_r+0x1540>
  80518c:	dc001117 	ldw	r16,68(sp)
  805190:	dc801017 	ldw	r18,64(sp)
  805194:	18c10cc4 	addi	r3,r3,1075
  805198:	003f6106 	br	804f20 <_dtoa_r+0xafc>
  80519c:	d8000b15 	stw	zero,44(sp)
  8051a0:	d9802617 	ldw	r6,152(sp)
  8051a4:	d8c00d17 	ldw	r3,52(sp)
  8051a8:	30800044 	addi	r2,r6,1
  8051ac:	18ad883a 	add	r22,r3,r2
  8051b0:	b13fffc4 	addi	r4,r22,-1
  8051b4:	d9000e15 	stw	r4,56(sp)
  8051b8:	0581f60e 	bge	zero,r22,805994 <_dtoa_r+0x1570>
  8051bc:	dd800f15 	stw	r22,60(sp)
  8051c0:	003f3006 	br	804e84 <_dtoa_r+0xa60>
  8051c4:	d8000b15 	stw	zero,44(sp)
  8051c8:	d9002617 	ldw	r4,152(sp)
  8051cc:	0101eb0e 	bge	zero,r4,80597c <_dtoa_r+0x1558>
  8051d0:	202d883a 	mov	r22,r4
  8051d4:	d9000e15 	stw	r4,56(sp)
  8051d8:	d9000f15 	stw	r4,60(sp)
  8051dc:	003f2906 	br	804e84 <_dtoa_r+0xa60>
  8051e0:	01800044 	movi	r6,1
  8051e4:	d9800b15 	stw	r6,44(sp)
  8051e8:	003ff706 	br	8051c8 <_dtoa_r+0xda4>
  8051ec:	01000044 	movi	r4,1
  8051f0:	d9000b15 	stw	r4,44(sp)
  8051f4:	003fea06 	br	8051a0 <_dtoa_r+0xd7c>
  8051f8:	04000c0e 	bge	zero,r16,80522c <_dtoa_r+0xe08>
  8051fc:	d9400717 	ldw	r5,28(sp)
  805200:	d9001617 	ldw	r4,88(sp)
  805204:	01800044 	movi	r6,1
  805208:	08077f00 	call	8077f0 <__lshift>
  80520c:	1009883a 	mov	r4,r2
  805210:	900b883a 	mov	r5,r18
  805214:	d8800715 	stw	r2,28(sp)
  805218:	08070080 	call	807008 <__mcmp>
  80521c:	0081e00e 	bge	zero,r2,8059a0 <_dtoa_r+0x157c>
  805220:	bdc00044 	addi	r23,r23,1
  805224:	00800e84 	movi	r2,58
  805228:	b881a226 	beq	r23,r2,8058b4 <_dtoa_r+0x1490>
  80522c:	b7000044 	addi	fp,r22,1
  805230:	b5c00005 	stb	r23,0(r22)
  805234:	003f7406 	br	805008 <_dtoa_r+0xbe4>
  805238:	00800e44 	movi	r2,57
  80523c:	b8819d26 	beq	r23,r2,8058b4 <_dtoa_r+0x1490>
  805240:	053ffa0e 	bge	zero,r20,80522c <_dtoa_r+0xe08>
  805244:	8dc00c44 	addi	r23,r17,49
  805248:	003ff806 	br	80522c <_dtoa_r+0xe08>
  80524c:	d9001617 	ldw	r4,88(sp)
  805250:	a80b883a 	mov	r5,r21
  805254:	04000044 	movi	r16,1
  805258:	0806eac0 	call	806eac <_Bfree>
  80525c:	003edf06 	br	804ddc <_dtoa_r+0x9b8>
  805260:	d9001617 	ldw	r4,88(sp)
  805264:	980b883a 	mov	r5,r19
  805268:	01800284 	movi	r6,10
  80526c:	000f883a 	mov	r7,zero
  805270:	0807bcc0 	call	807bcc <__multadd>
  805274:	1027883a 	mov	r19,r2
  805278:	d8800615 	stw	r2,24(sp)
  80527c:	003ebb06 	br	804d6c <_dtoa_r+0x948>
  805280:	d9801117 	ldw	r6,68(sp)
  805284:	d8800d17 	ldw	r2,52(sp)
  805288:	d8000915 	stw	zero,36(sp)
  80528c:	308dc83a 	sub	r6,r6,r2
  805290:	0087c83a 	sub	r3,zero,r2
  805294:	d9801115 	stw	r6,68(sp)
  805298:	d8c01015 	stw	r3,64(sp)
  80529c:	003cfe06 	br	804698 <_dtoa_r+0x274>
  8052a0:	018dc83a 	sub	r6,zero,r6
  8052a4:	d9801115 	stw	r6,68(sp)
  8052a8:	d8000a15 	stw	zero,40(sp)
  8052ac:	003cf306 	br	80467c <_dtoa_r+0x258>
  8052b0:	d9000d17 	ldw	r4,52(sp)
  8052b4:	080a6e00 	call	80a6e0 <__floatsidf>
  8052b8:	880b883a 	mov	r5,r17
  8052bc:	8009883a 	mov	r4,r16
  8052c0:	180f883a 	mov	r7,r3
  8052c4:	100d883a 	mov	r6,r2
  8052c8:	080a4c00 	call	80a4c0 <__nedf2>
  8052cc:	103ce126 	beq	r2,zero,804654 <_dtoa_r+0x230>
  8052d0:	d9800d17 	ldw	r6,52(sp)
  8052d4:	31bfffc4 	addi	r6,r6,-1
  8052d8:	d9800d15 	stw	r6,52(sp)
  8052dc:	003cdd06 	br	804654 <_dtoa_r+0x230>
  8052e0:	d9000717 	ldw	r4,28(sp)
  8052e4:	900b883a 	mov	r5,r18
  8052e8:	08070080 	call	807008 <__mcmp>
  8052ec:	103e8d0e 	bge	r2,zero,804d24 <_dtoa_r+0x900>
  8052f0:	d9400717 	ldw	r5,28(sp)
  8052f4:	d9001617 	ldw	r4,88(sp)
  8052f8:	01800284 	movi	r6,10
  8052fc:	000f883a 	mov	r7,zero
  805300:	0807bcc0 	call	807bcc <__multadd>
  805304:	d9800d17 	ldw	r6,52(sp)
  805308:	d8800715 	stw	r2,28(sp)
  80530c:	31bfffc4 	addi	r6,r6,-1
  805310:	d9800d15 	stw	r6,52(sp)
  805314:	b001a71e 	bne	r22,zero,8059b4 <_dtoa_r+0x1590>
  805318:	d8800e17 	ldw	r2,56(sp)
  80531c:	d8800f15 	stw	r2,60(sp)
  805320:	003e8006 	br	804d24 <_dtoa_r+0x900>
  805324:	90800417 	ldw	r2,16(r18)
  805328:	1085883a 	add	r2,r2,r2
  80532c:	1085883a 	add	r2,r2,r2
  805330:	1485883a 	add	r2,r2,r18
  805334:	11000417 	ldw	r4,16(r2)
  805338:	0806ed40 	call	806ed4 <__hi0bits>
  80533c:	00c00804 	movi	r3,32
  805340:	1887c83a 	sub	r3,r3,r2
  805344:	003e5a06 	br	804cb0 <_dtoa_r+0x88c>
  805348:	d9400717 	ldw	r5,28(sp)
  80534c:	d9801017 	ldw	r6,64(sp)
  805350:	d9001617 	ldw	r4,88(sp)
  805354:	0807cf80 	call	807cf8 <__pow5mult>
  805358:	d8800715 	stw	r2,28(sp)
  80535c:	003e4306 	br	804c6c <_dtoa_r+0x848>
  805360:	d9800f17 	ldw	r6,60(sp)
  805364:	d8800d17 	ldw	r2,52(sp)
  805368:	d9800315 	stw	r6,12(sp)
  80536c:	d8800415 	stw	r2,16(sp)
  805370:	d8c00b17 	ldw	r3,44(sp)
  805374:	1805003a 	cmpeq	r2,r3,zero
  805378:	1000e21e 	bne	r2,zero,805704 <_dtoa_r+0x12e0>
  80537c:	d9000317 	ldw	r4,12(sp)
  805380:	0005883a 	mov	r2,zero
  805384:	00cff834 	movhi	r3,16352
  805388:	200c90fa 	slli	r6,r4,3
  80538c:	01002074 	movhi	r4,129
  805390:	21120204 	addi	r4,r4,18440
  805394:	180b883a 	mov	r5,r3
  805398:	310d883a 	add	r6,r6,r4
  80539c:	327fff17 	ldw	r9,-4(r6)
  8053a0:	323ffe17 	ldw	r8,-8(r6)
  8053a4:	1009883a 	mov	r4,r2
  8053a8:	480f883a 	mov	r7,r9
  8053ac:	400d883a 	mov	r6,r8
  8053b0:	080a1e00 	call	80a1e0 <__divdf3>
  8053b4:	180b883a 	mov	r5,r3
  8053b8:	b00d883a 	mov	r6,r22
  8053bc:	b80f883a 	mov	r7,r23
  8053c0:	1009883a 	mov	r4,r2
  8053c4:	0809d280 	call	809d28 <__subdf3>
  8053c8:	a80b883a 	mov	r5,r21
  8053cc:	a009883a 	mov	r4,r20
  8053d0:	d8c01915 	stw	r3,100(sp)
  8053d4:	d8801815 	stw	r2,96(sp)
  8053d8:	080a7d80 	call	80a7d8 <__fixdfsi>
  8053dc:	1009883a 	mov	r4,r2
  8053e0:	1027883a 	mov	r19,r2
  8053e4:	080a6e00 	call	80a6e0 <__floatsidf>
  8053e8:	a80b883a 	mov	r5,r21
  8053ec:	a009883a 	mov	r4,r20
  8053f0:	180f883a 	mov	r7,r3
  8053f4:	100d883a 	mov	r6,r2
  8053f8:	0809d280 	call	809d28 <__subdf3>
  8053fc:	d9801817 	ldw	r6,96(sp)
  805400:	1823883a 	mov	r17,r3
  805404:	d8801415 	stw	r2,80(sp)
  805408:	302d883a 	mov	r22,r6
  80540c:	d9800517 	ldw	r6,20(sp)
  805410:	9cc00c04 	addi	r19,r19,48
  805414:	dc401515 	stw	r17,84(sp)
  805418:	d8c01917 	ldw	r3,100(sp)
  80541c:	34c00005 	stb	r19,0(r6)
  805420:	d8800517 	ldw	r2,20(sp)
  805424:	d9401917 	ldw	r5,100(sp)
  805428:	d9801417 	ldw	r6,80(sp)
  80542c:	b009883a 	mov	r4,r22
  805430:	880f883a 	mov	r7,r17
  805434:	182f883a 	mov	r23,r3
  805438:	17000044 	addi	fp,r2,1
  80543c:	080a5480 	call	80a548 <__gtdf2>
  805440:	00804e16 	blt	zero,r2,80557c <_dtoa_r+0x1158>
  805444:	d9801417 	ldw	r6,80(sp)
  805448:	0005883a 	mov	r2,zero
  80544c:	00cffc34 	movhi	r3,16368
  805450:	180b883a 	mov	r5,r3
  805454:	880f883a 	mov	r7,r17
  805458:	1009883a 	mov	r4,r2
  80545c:	0809d280 	call	809d28 <__subdf3>
  805460:	d9401917 	ldw	r5,100(sp)
  805464:	180f883a 	mov	r7,r3
  805468:	b009883a 	mov	r4,r22
  80546c:	100d883a 	mov	r6,r2
  805470:	080a5480 	call	80a548 <__gtdf2>
  805474:	00bda216 	blt	zero,r2,804b00 <_dtoa_r+0x6dc>
  805478:	d8c00317 	ldw	r3,12(sp)
  80547c:	00800044 	movi	r2,1
  805480:	10c01216 	blt	r2,r3,8054cc <_dtoa_r+0x10a8>
  805484:	003d4506 	br	80499c <_dtoa_r+0x578>
  805488:	d9801417 	ldw	r6,80(sp)
  80548c:	0005883a 	mov	r2,zero
  805490:	00cffc34 	movhi	r3,16368
  805494:	180b883a 	mov	r5,r3
  805498:	880f883a 	mov	r7,r17
  80549c:	1009883a 	mov	r4,r2
  8054a0:	0809d280 	call	809d28 <__subdf3>
  8054a4:	d9c01b17 	ldw	r7,108(sp)
  8054a8:	180b883a 	mov	r5,r3
  8054ac:	1009883a 	mov	r4,r2
  8054b0:	b00d883a 	mov	r6,r22
  8054b4:	080a6580 	call	80a658 <__ltdf2>
  8054b8:	103d9116 	blt	r2,zero,804b00 <_dtoa_r+0x6dc>
  8054bc:	d9800517 	ldw	r6,20(sp)
  8054c0:	d9000317 	ldw	r4,12(sp)
  8054c4:	3105883a 	add	r2,r6,r4
  8054c8:	e0bd3426 	beq	fp,r2,80499c <_dtoa_r+0x578>
  8054cc:	04500934 	movhi	r17,16420
  8054d0:	0021883a 	mov	r16,zero
  8054d4:	b80b883a 	mov	r5,r23
  8054d8:	b009883a 	mov	r4,r22
  8054dc:	800d883a 	mov	r6,r16
  8054e0:	880f883a 	mov	r7,r17
  8054e4:	0809e1c0 	call	809e1c <__muldf3>
  8054e8:	d9401517 	ldw	r5,84(sp)
  8054ec:	d9001417 	ldw	r4,80(sp)
  8054f0:	880f883a 	mov	r7,r17
  8054f4:	000d883a 	mov	r6,zero
  8054f8:	d8801a15 	stw	r2,104(sp)
  8054fc:	d8c01b15 	stw	r3,108(sp)
  805500:	0809e1c0 	call	809e1c <__muldf3>
  805504:	180b883a 	mov	r5,r3
  805508:	1009883a 	mov	r4,r2
  80550c:	1823883a 	mov	r17,r3
  805510:	1021883a 	mov	r16,r2
  805514:	080a7d80 	call	80a7d8 <__fixdfsi>
  805518:	1009883a 	mov	r4,r2
  80551c:	102b883a 	mov	r21,r2
  805520:	080a6e00 	call	80a6e0 <__floatsidf>
  805524:	880b883a 	mov	r5,r17
  805528:	8009883a 	mov	r4,r16
  80552c:	180f883a 	mov	r7,r3
  805530:	100d883a 	mov	r6,r2
  805534:	0809d280 	call	809d28 <__subdf3>
  805538:	1021883a 	mov	r16,r2
  80553c:	d9001b17 	ldw	r4,108(sp)
  805540:	1823883a 	mov	r17,r3
  805544:	dc001415 	stw	r16,80(sp)
  805548:	ad400c04 	addi	r21,r21,48
  80554c:	dc401515 	stw	r17,84(sp)
  805550:	d8801a17 	ldw	r2,104(sp)
  805554:	e5400005 	stb	r21,0(fp)
  805558:	202f883a 	mov	r23,r4
  80555c:	d9c01b17 	ldw	r7,108(sp)
  805560:	d9001417 	ldw	r4,80(sp)
  805564:	880b883a 	mov	r5,r17
  805568:	100d883a 	mov	r6,r2
  80556c:	102d883a 	mov	r22,r2
  805570:	e7000044 	addi	fp,fp,1
  805574:	080a6580 	call	80a658 <__ltdf2>
  805578:	103fc30e 	bge	r2,zero,805488 <_dtoa_r+0x1064>
  80557c:	d9000417 	ldw	r4,16(sp)
  805580:	d9000d15 	stw	r4,52(sp)
  805584:	003d7106 	br	804b4c <_dtoa_r+0x728>
  805588:	d9801717 	ldw	r6,92(sp)
  80558c:	00800084 	movi	r2,2
  805590:	11bde60e 	bge	r2,r6,804d2c <_dtoa_r+0x908>
  805594:	203cfb1e 	bne	r4,zero,804984 <_dtoa_r+0x560>
  805598:	d9001617 	ldw	r4,88(sp)
  80559c:	900b883a 	mov	r5,r18
  8055a0:	01800144 	movi	r6,5
  8055a4:	000f883a 	mov	r7,zero
  8055a8:	0807bcc0 	call	807bcc <__multadd>
  8055ac:	d9000717 	ldw	r4,28(sp)
  8055b0:	100b883a 	mov	r5,r2
  8055b4:	1025883a 	mov	r18,r2
  8055b8:	08070080 	call	807008 <__mcmp>
  8055bc:	00bcf10e 	bge	zero,r2,804984 <_dtoa_r+0x560>
  8055c0:	d8c00d17 	ldw	r3,52(sp)
  8055c4:	d9000517 	ldw	r4,20(sp)
  8055c8:	d8000615 	stw	zero,24(sp)
  8055cc:	18c00044 	addi	r3,r3,1
  8055d0:	d8c00d15 	stw	r3,52(sp)
  8055d4:	00800c44 	movi	r2,49
  8055d8:	27000044 	addi	fp,r4,1
  8055dc:	20800005 	stb	r2,0(r4)
  8055e0:	003e8906 	br	805008 <_dtoa_r+0xbe4>
  8055e4:	d8c00517 	ldw	r3,20(sp)
  8055e8:	003bc206 	br	8044f4 <_dtoa_r+0xd0>
  8055ec:	01802074 	movhi	r6,129
  8055f0:	31923404 	addi	r6,r6,18640
  8055f4:	30c00917 	ldw	r3,36(r6)
  8055f8:	30800817 	ldw	r2,32(r6)
  8055fc:	d9001217 	ldw	r4,72(sp)
  805600:	d9401317 	ldw	r5,76(sp)
  805604:	180f883a 	mov	r7,r3
  805608:	100d883a 	mov	r6,r2
  80560c:	080a1e00 	call	80a1e0 <__divdf3>
  805610:	948003cc 	andi	r18,r18,15
  805614:	058000c4 	movi	r22,3
  805618:	1029883a 	mov	r20,r2
  80561c:	182b883a 	mov	r21,r3
  805620:	003c8906 	br	804848 <_dtoa_r+0x424>
  805624:	d9001017 	ldw	r4,64(sp)
  805628:	d9800917 	ldw	r6,36(sp)
  80562c:	0025883a 	mov	r18,zero
  805630:	1105c83a 	sub	r2,r2,r4
  805634:	2089883a 	add	r4,r4,r2
  805638:	308d883a 	add	r6,r6,r2
  80563c:	d9001015 	stw	r4,64(sp)
  805640:	d9800915 	stw	r6,36(sp)
  805644:	003e3206 	br	804f10 <_dtoa_r+0xaec>
  805648:	28800044 	addi	r2,r5,1
  80564c:	27000044 	addi	fp,r4,1
  805650:	20800005 	stb	r2,0(r4)
  805654:	003e6c06 	br	805008 <_dtoa_r+0xbe4>
  805658:	d8800f17 	ldw	r2,60(sp)
  80565c:	00bce016 	blt	zero,r2,8049e0 <_dtoa_r+0x5bc>
  805660:	d9800f17 	ldw	r6,60(sp)
  805664:	303cc51e 	bne	r6,zero,80497c <_dtoa_r+0x558>
  805668:	0005883a 	mov	r2,zero
  80566c:	00d00534 	movhi	r3,16404
  805670:	980b883a 	mov	r5,r19
  805674:	180f883a 	mov	r7,r3
  805678:	9009883a 	mov	r4,r18
  80567c:	100d883a 	mov	r6,r2
  805680:	0809e1c0 	call	809e1c <__muldf3>
  805684:	180b883a 	mov	r5,r3
  805688:	a80f883a 	mov	r7,r21
  80568c:	1009883a 	mov	r4,r2
  805690:	a00d883a 	mov	r6,r20
  805694:	080a5d00 	call	80a5d0 <__gedf2>
  805698:	103cb80e 	bge	r2,zero,80497c <_dtoa_r+0x558>
  80569c:	0027883a 	mov	r19,zero
  8056a0:	0025883a 	mov	r18,zero
  8056a4:	003fc606 	br	8055c0 <_dtoa_r+0x119c>
  8056a8:	99400117 	ldw	r5,4(r19)
  8056ac:	d9001617 	ldw	r4,88(sp)
  8056b0:	080742c0 	call	80742c <_Balloc>
  8056b4:	99800417 	ldw	r6,16(r19)
  8056b8:	11000304 	addi	r4,r2,12
  8056bc:	99400304 	addi	r5,r19,12
  8056c0:	318d883a 	add	r6,r6,r6
  8056c4:	318d883a 	add	r6,r6,r6
  8056c8:	31800204 	addi	r6,r6,8
  8056cc:	1023883a 	mov	r17,r2
  8056d0:	0806c940 	call	806c94 <memcpy>
  8056d4:	d9001617 	ldw	r4,88(sp)
  8056d8:	880b883a 	mov	r5,r17
  8056dc:	01800044 	movi	r6,1
  8056e0:	08077f00 	call	8077f0 <__lshift>
  8056e4:	100b883a 	mov	r5,r2
  8056e8:	003d9c06 	br	804d5c <_dtoa_r+0x938>
  8056ec:	00800e44 	movi	r2,57
  8056f0:	b8807026 	beq	r23,r2,8058b4 <_dtoa_r+0x1490>
  8056f4:	b8800044 	addi	r2,r23,1
  8056f8:	b7000044 	addi	fp,r22,1
  8056fc:	b0800005 	stb	r2,0(r22)
  805700:	003e4106 	br	805008 <_dtoa_r+0xbe4>
  805704:	d8800317 	ldw	r2,12(sp)
  805708:	01802074 	movhi	r6,129
  80570c:	31920204 	addi	r6,r6,18440
  805710:	b009883a 	mov	r4,r22
  805714:	100e90fa 	slli	r7,r2,3
  805718:	b80b883a 	mov	r5,r23
  80571c:	398f883a 	add	r7,r7,r6
  805720:	38bffe17 	ldw	r2,-8(r7)
  805724:	d9800517 	ldw	r6,20(sp)
  805728:	38ffff17 	ldw	r3,-4(r7)
  80572c:	37000044 	addi	fp,r6,1
  805730:	180f883a 	mov	r7,r3
  805734:	100d883a 	mov	r6,r2
  805738:	0809e1c0 	call	809e1c <__muldf3>
  80573c:	a80b883a 	mov	r5,r21
  805740:	a009883a 	mov	r4,r20
  805744:	182f883a 	mov	r23,r3
  805748:	102d883a 	mov	r22,r2
  80574c:	080a7d80 	call	80a7d8 <__fixdfsi>
  805750:	1009883a 	mov	r4,r2
  805754:	1027883a 	mov	r19,r2
  805758:	080a6e00 	call	80a6e0 <__floatsidf>
  80575c:	a80b883a 	mov	r5,r21
  805760:	a009883a 	mov	r4,r20
  805764:	180f883a 	mov	r7,r3
  805768:	100d883a 	mov	r6,r2
  80576c:	0809d280 	call	809d28 <__subdf3>
  805770:	180b883a 	mov	r5,r3
  805774:	d8c00517 	ldw	r3,20(sp)
  805778:	9cc00c04 	addi	r19,r19,48
  80577c:	1009883a 	mov	r4,r2
  805780:	1cc00005 	stb	r19,0(r3)
  805784:	2021883a 	mov	r16,r4
  805788:	d9000317 	ldw	r4,12(sp)
  80578c:	00800044 	movi	r2,1
  805790:	2823883a 	mov	r17,r5
  805794:	20802226 	beq	r4,r2,805820 <_dtoa_r+0x13fc>
  805798:	1029883a 	mov	r20,r2
  80579c:	0005883a 	mov	r2,zero
  8057a0:	00d00934 	movhi	r3,16420
  8057a4:	180f883a 	mov	r7,r3
  8057a8:	100d883a 	mov	r6,r2
  8057ac:	880b883a 	mov	r5,r17
  8057b0:	8009883a 	mov	r4,r16
  8057b4:	0809e1c0 	call	809e1c <__muldf3>
  8057b8:	180b883a 	mov	r5,r3
  8057bc:	1009883a 	mov	r4,r2
  8057c0:	1823883a 	mov	r17,r3
  8057c4:	1021883a 	mov	r16,r2
  8057c8:	080a7d80 	call	80a7d8 <__fixdfsi>
  8057cc:	1009883a 	mov	r4,r2
  8057d0:	102b883a 	mov	r21,r2
  8057d4:	080a6e00 	call	80a6e0 <__floatsidf>
  8057d8:	880b883a 	mov	r5,r17
  8057dc:	8009883a 	mov	r4,r16
  8057e0:	180f883a 	mov	r7,r3
  8057e4:	100d883a 	mov	r6,r2
  8057e8:	0809d280 	call	809d28 <__subdf3>
  8057ec:	180b883a 	mov	r5,r3
  8057f0:	d8c00517 	ldw	r3,20(sp)
  8057f4:	1009883a 	mov	r4,r2
  8057f8:	ad400c04 	addi	r21,r21,48
  8057fc:	1d05883a 	add	r2,r3,r20
  805800:	15400005 	stb	r21,0(r2)
  805804:	2021883a 	mov	r16,r4
  805808:	d9000317 	ldw	r4,12(sp)
  80580c:	a5000044 	addi	r20,r20,1
  805810:	2823883a 	mov	r17,r5
  805814:	a13fe11e 	bne	r20,r4,80579c <_dtoa_r+0x1378>
  805818:	e505883a 	add	r2,fp,r20
  80581c:	173fffc4 	addi	fp,r2,-1
  805820:	0025883a 	mov	r18,zero
  805824:	04cff834 	movhi	r19,16352
  805828:	b009883a 	mov	r4,r22
  80582c:	b80b883a 	mov	r5,r23
  805830:	900d883a 	mov	r6,r18
  805834:	980f883a 	mov	r7,r19
  805838:	0809da80 	call	809da8 <__adddf3>
  80583c:	180b883a 	mov	r5,r3
  805840:	1009883a 	mov	r4,r2
  805844:	800d883a 	mov	r6,r16
  805848:	880f883a 	mov	r7,r17
  80584c:	080a6580 	call	80a658 <__ltdf2>
  805850:	103cab16 	blt	r2,zero,804b00 <_dtoa_r+0x6dc>
  805854:	0009883a 	mov	r4,zero
  805858:	980b883a 	mov	r5,r19
  80585c:	b80f883a 	mov	r7,r23
  805860:	b00d883a 	mov	r6,r22
  805864:	0809d280 	call	809d28 <__subdf3>
  805868:	180b883a 	mov	r5,r3
  80586c:	880f883a 	mov	r7,r17
  805870:	1009883a 	mov	r4,r2
  805874:	800d883a 	mov	r6,r16
  805878:	080a5480 	call	80a548 <__gtdf2>
  80587c:	00bc470e 	bge	zero,r2,80499c <_dtoa_r+0x578>
  805880:	00c00c04 	movi	r3,48
  805884:	e73fffc4 	addi	fp,fp,-1
  805888:	e0800007 	ldb	r2,0(fp)
  80588c:	10fffd26 	beq	r2,r3,805884 <_dtoa_r+0x1460>
  805890:	d9800417 	ldw	r6,16(sp)
  805894:	e7000044 	addi	fp,fp,1
  805898:	d9800d15 	stw	r6,52(sp)
  80589c:	003cab06 	br	804b4c <_dtoa_r+0x728>
  8058a0:	d8c00f17 	ldw	r3,60(sp)
  8058a4:	d9001117 	ldw	r4,68(sp)
  8058a8:	20e1c83a 	sub	r16,r4,r3
  8058ac:	0007883a 	mov	r3,zero
  8058b0:	003d9b06 	br	804f20 <_dtoa_r+0xafc>
  8058b4:	00800e44 	movi	r2,57
  8058b8:	b0800005 	stb	r2,0(r22)
  8058bc:	b5800044 	addi	r22,r22,1
  8058c0:	003dc106 	br	804fc8 <_dtoa_r+0xba4>
  8058c4:	05800084 	movi	r22,2
  8058c8:	003bf706 	br	8048a8 <_dtoa_r+0x484>
  8058cc:	d9000f17 	ldw	r4,60(sp)
  8058d0:	013c000e 	bge	zero,r4,8048d4 <_dtoa_r+0x4b0>
  8058d4:	d9800e17 	ldw	r6,56(sp)
  8058d8:	01bc300e 	bge	zero,r6,80499c <_dtoa_r+0x578>
  8058dc:	0005883a 	mov	r2,zero
  8058e0:	00d00934 	movhi	r3,16420
  8058e4:	a80b883a 	mov	r5,r21
  8058e8:	180f883a 	mov	r7,r3
  8058ec:	a009883a 	mov	r4,r20
  8058f0:	100d883a 	mov	r6,r2
  8058f4:	0809e1c0 	call	809e1c <__muldf3>
  8058f8:	b1000044 	addi	r4,r22,1
  8058fc:	1021883a 	mov	r16,r2
  805900:	1823883a 	mov	r17,r3
  805904:	080a6e00 	call	80a6e0 <__floatsidf>
  805908:	880b883a 	mov	r5,r17
  80590c:	8009883a 	mov	r4,r16
  805910:	180f883a 	mov	r7,r3
  805914:	100d883a 	mov	r6,r2
  805918:	0809e1c0 	call	809e1c <__muldf3>
  80591c:	0011883a 	mov	r8,zero
  805920:	02500734 	movhi	r9,16412
  805924:	180b883a 	mov	r5,r3
  805928:	480f883a 	mov	r7,r9
  80592c:	1009883a 	mov	r4,r2
  805930:	400d883a 	mov	r6,r8
  805934:	0809da80 	call	809da8 <__adddf3>
  805938:	102d883a 	mov	r22,r2
  80593c:	00bf3034 	movhi	r2,64704
  805940:	10ef883a 	add	r23,r2,r3
  805944:	d8800d17 	ldw	r2,52(sp)
  805948:	d8c00e17 	ldw	r3,56(sp)
  80594c:	8029883a 	mov	r20,r16
  805950:	10bfffc4 	addi	r2,r2,-1
  805954:	882b883a 	mov	r21,r17
  805958:	d8800415 	stw	r2,16(sp)
  80595c:	d8c00315 	stw	r3,12(sp)
  805960:	003e8306 	br	805370 <_dtoa_r+0xf4c>
  805964:	d8800117 	ldw	r2,4(sp)
  805968:	dc001117 	ldw	r16,68(sp)
  80596c:	dc801017 	ldw	r18,64(sp)
  805970:	00c00d84 	movi	r3,54
  805974:	1887c83a 	sub	r3,r3,r2
  805978:	003d6906 	br	804f20 <_dtoa_r+0xafc>
  80597c:	01800044 	movi	r6,1
  805980:	3021883a 	mov	r16,r6
  805984:	d9800f15 	stw	r6,60(sp)
  805988:	d9802615 	stw	r6,152(sp)
  80598c:	d9800e15 	stw	r6,56(sp)
  805990:	003b9306 	br	8047e0 <_dtoa_r+0x3bc>
  805994:	b021883a 	mov	r16,r22
  805998:	dd800f15 	stw	r22,60(sp)
  80599c:	003b9006 	br	8047e0 <_dtoa_r+0x3bc>
  8059a0:	103e221e 	bne	r2,zero,80522c <_dtoa_r+0xe08>
  8059a4:	b880004c 	andi	r2,r23,1
  8059a8:	1005003a 	cmpeq	r2,r2,zero
  8059ac:	103e1f1e 	bne	r2,zero,80522c <_dtoa_r+0xe08>
  8059b0:	003e1b06 	br	805220 <_dtoa_r+0xdfc>
  8059b4:	d9001617 	ldw	r4,88(sp)
  8059b8:	980b883a 	mov	r5,r19
  8059bc:	01800284 	movi	r6,10
  8059c0:	000f883a 	mov	r7,zero
  8059c4:	0807bcc0 	call	807bcc <__multadd>
  8059c8:	d8c00e17 	ldw	r3,56(sp)
  8059cc:	1027883a 	mov	r19,r2
  8059d0:	d8c00f15 	stw	r3,60(sp)
  8059d4:	003cd306 	br	804d24 <_dtoa_r+0x900>

008059d8 <_fflush_r>:
  8059d8:	defffb04 	addi	sp,sp,-20
  8059dc:	dcc00315 	stw	r19,12(sp)
  8059e0:	dc800215 	stw	r18,8(sp)
  8059e4:	dfc00415 	stw	ra,16(sp)
  8059e8:	dc400115 	stw	r17,4(sp)
  8059ec:	dc000015 	stw	r16,0(sp)
  8059f0:	2027883a 	mov	r19,r4
  8059f4:	2825883a 	mov	r18,r5
  8059f8:	20000226 	beq	r4,zero,805a04 <_fflush_r+0x2c>
  8059fc:	20800e17 	ldw	r2,56(r4)
  805a00:	10005626 	beq	r2,zero,805b5c <_fflush_r+0x184>
  805a04:	9100030b 	ldhu	r4,12(r18)
  805a08:	20ffffcc 	andi	r3,r4,65535
  805a0c:	18e0001c 	xori	r3,r3,32768
  805a10:	18e00004 	addi	r3,r3,-32768
  805a14:	1880020c 	andi	r2,r3,8
  805a18:	1000261e 	bne	r2,zero,805ab4 <_fflush_r+0xdc>
  805a1c:	90c00117 	ldw	r3,4(r18)
  805a20:	20820014 	ori	r2,r4,2048
  805a24:	9080030d 	sth	r2,12(r18)
  805a28:	1009883a 	mov	r4,r2
  805a2c:	00c0400e 	bge	zero,r3,805b30 <_fflush_r+0x158>
  805a30:	92000a17 	ldw	r8,40(r18)
  805a34:	40004026 	beq	r8,zero,805b38 <_fflush_r+0x160>
  805a38:	2084000c 	andi	r2,r4,4096
  805a3c:	10005326 	beq	r2,zero,805b8c <_fflush_r+0x1b4>
  805a40:	94001417 	ldw	r16,80(r18)
  805a44:	9080030b 	ldhu	r2,12(r18)
  805a48:	1080010c 	andi	r2,r2,4
  805a4c:	1000481e 	bne	r2,zero,805b70 <_fflush_r+0x198>
  805a50:	91400717 	ldw	r5,28(r18)
  805a54:	9809883a 	mov	r4,r19
  805a58:	800d883a 	mov	r6,r16
  805a5c:	000f883a 	mov	r7,zero
  805a60:	403ee83a 	callr	r8
  805a64:	8080261e 	bne	r16,r2,805b00 <_fflush_r+0x128>
  805a68:	9080030b 	ldhu	r2,12(r18)
  805a6c:	91000417 	ldw	r4,16(r18)
  805a70:	90000115 	stw	zero,4(r18)
  805a74:	10bdffcc 	andi	r2,r2,63487
  805a78:	10ffffcc 	andi	r3,r2,65535
  805a7c:	18c4000c 	andi	r3,r3,4096
  805a80:	9080030d 	sth	r2,12(r18)
  805a84:	91000015 	stw	r4,0(r18)
  805a88:	18002b26 	beq	r3,zero,805b38 <_fflush_r+0x160>
  805a8c:	0007883a 	mov	r3,zero
  805a90:	1805883a 	mov	r2,r3
  805a94:	94001415 	stw	r16,80(r18)
  805a98:	dfc00417 	ldw	ra,16(sp)
  805a9c:	dcc00317 	ldw	r19,12(sp)
  805aa0:	dc800217 	ldw	r18,8(sp)
  805aa4:	dc400117 	ldw	r17,4(sp)
  805aa8:	dc000017 	ldw	r16,0(sp)
  805aac:	dec00504 	addi	sp,sp,20
  805ab0:	f800283a 	ret
  805ab4:	94400417 	ldw	r17,16(r18)
  805ab8:	88001f26 	beq	r17,zero,805b38 <_fflush_r+0x160>
  805abc:	90800017 	ldw	r2,0(r18)
  805ac0:	18c000cc 	andi	r3,r3,3
  805ac4:	94400015 	stw	r17,0(r18)
  805ac8:	1461c83a 	sub	r16,r2,r17
  805acc:	18002526 	beq	r3,zero,805b64 <_fflush_r+0x18c>
  805ad0:	0005883a 	mov	r2,zero
  805ad4:	90800215 	stw	r2,8(r18)
  805ad8:	0400170e 	bge	zero,r16,805b38 <_fflush_r+0x160>
  805adc:	90c00917 	ldw	r3,36(r18)
  805ae0:	91400717 	ldw	r5,28(r18)
  805ae4:	880d883a 	mov	r6,r17
  805ae8:	800f883a 	mov	r7,r16
  805aec:	9809883a 	mov	r4,r19
  805af0:	183ee83a 	callr	r3
  805af4:	88a3883a 	add	r17,r17,r2
  805af8:	80a1c83a 	sub	r16,r16,r2
  805afc:	00bff616 	blt	zero,r2,805ad8 <_fflush_r+0x100>
  805b00:	9080030b 	ldhu	r2,12(r18)
  805b04:	00ffffc4 	movi	r3,-1
  805b08:	10801014 	ori	r2,r2,64
  805b0c:	9080030d 	sth	r2,12(r18)
  805b10:	1805883a 	mov	r2,r3
  805b14:	dfc00417 	ldw	ra,16(sp)
  805b18:	dcc00317 	ldw	r19,12(sp)
  805b1c:	dc800217 	ldw	r18,8(sp)
  805b20:	dc400117 	ldw	r17,4(sp)
  805b24:	dc000017 	ldw	r16,0(sp)
  805b28:	dec00504 	addi	sp,sp,20
  805b2c:	f800283a 	ret
  805b30:	90800f17 	ldw	r2,60(r18)
  805b34:	00bfbe16 	blt	zero,r2,805a30 <_fflush_r+0x58>
  805b38:	0007883a 	mov	r3,zero
  805b3c:	1805883a 	mov	r2,r3
  805b40:	dfc00417 	ldw	ra,16(sp)
  805b44:	dcc00317 	ldw	r19,12(sp)
  805b48:	dc800217 	ldw	r18,8(sp)
  805b4c:	dc400117 	ldw	r17,4(sp)
  805b50:	dc000017 	ldw	r16,0(sp)
  805b54:	dec00504 	addi	sp,sp,20
  805b58:	f800283a 	ret
  805b5c:	0805c700 	call	805c70 <__sinit>
  805b60:	003fa806 	br	805a04 <_fflush_r+0x2c>
  805b64:	90800517 	ldw	r2,20(r18)
  805b68:	90800215 	stw	r2,8(r18)
  805b6c:	003fda06 	br	805ad8 <_fflush_r+0x100>
  805b70:	90800117 	ldw	r2,4(r18)
  805b74:	90c00c17 	ldw	r3,48(r18)
  805b78:	80a1c83a 	sub	r16,r16,r2
  805b7c:	183fb426 	beq	r3,zero,805a50 <_fflush_r+0x78>
  805b80:	90800f17 	ldw	r2,60(r18)
  805b84:	80a1c83a 	sub	r16,r16,r2
  805b88:	003fb106 	br	805a50 <_fflush_r+0x78>
  805b8c:	91400717 	ldw	r5,28(r18)
  805b90:	9809883a 	mov	r4,r19
  805b94:	000d883a 	mov	r6,zero
  805b98:	01c00044 	movi	r7,1
  805b9c:	403ee83a 	callr	r8
  805ba0:	1021883a 	mov	r16,r2
  805ba4:	00bfffc4 	movi	r2,-1
  805ba8:	80800226 	beq	r16,r2,805bb4 <_fflush_r+0x1dc>
  805bac:	92000a17 	ldw	r8,40(r18)
  805bb0:	003fa406 	br	805a44 <_fflush_r+0x6c>
  805bb4:	98c00017 	ldw	r3,0(r19)
  805bb8:	00800744 	movi	r2,29
  805bbc:	18bfde26 	beq	r3,r2,805b38 <_fflush_r+0x160>
  805bc0:	9080030b 	ldhu	r2,12(r18)
  805bc4:	8007883a 	mov	r3,r16
  805bc8:	10801014 	ori	r2,r2,64
  805bcc:	9080030d 	sth	r2,12(r18)
  805bd0:	003fcf06 	br	805b10 <_fflush_r+0x138>

00805bd4 <fflush>:
  805bd4:	01402034 	movhi	r5,128
  805bd8:	29567604 	addi	r5,r5,23000
  805bdc:	2007883a 	mov	r3,r4
  805be0:	20000526 	beq	r4,zero,805bf8 <fflush+0x24>
  805be4:	00802074 	movhi	r2,129
  805be8:	1099af04 	addi	r2,r2,26300
  805bec:	11000017 	ldw	r4,0(r2)
  805bf0:	180b883a 	mov	r5,r3
  805bf4:	08059d81 	jmpi	8059d8 <_fflush_r>
  805bf8:	00802074 	movhi	r2,129
  805bfc:	1099b004 	addi	r2,r2,26304
  805c00:	11000017 	ldw	r4,0(r2)
  805c04:	08067d81 	jmpi	8067d8 <_fwalk_reent>

00805c08 <std>:
  805c08:	00802074 	movhi	r2,129
  805c0c:	10a16704 	addi	r2,r2,-31332
  805c10:	20800b15 	stw	r2,44(r4)
  805c14:	00802074 	movhi	r2,129
  805c18:	10a1a204 	addi	r2,r2,-31096
  805c1c:	20800815 	stw	r2,32(r4)
  805c20:	00c02074 	movhi	r3,129
  805c24:	18e18304 	addi	r3,r3,-31220
  805c28:	00802074 	movhi	r2,129
  805c2c:	10a16904 	addi	r2,r2,-31324
  805c30:	2140030d 	sth	r5,12(r4)
  805c34:	2180038d 	sth	r6,14(r4)
  805c38:	20c00915 	stw	r3,36(r4)
  805c3c:	20800a15 	stw	r2,40(r4)
  805c40:	20000015 	stw	zero,0(r4)
  805c44:	20000115 	stw	zero,4(r4)
  805c48:	20000215 	stw	zero,8(r4)
  805c4c:	20000415 	stw	zero,16(r4)
  805c50:	20000515 	stw	zero,20(r4)
  805c54:	20000615 	stw	zero,24(r4)
  805c58:	21000715 	stw	r4,28(r4)
  805c5c:	f800283a 	ret

00805c60 <__sfp_lock_acquire>:
  805c60:	f800283a 	ret

00805c64 <__sfp_lock_release>:
  805c64:	f800283a 	ret

00805c68 <__sinit_lock_acquire>:
  805c68:	f800283a 	ret

00805c6c <__sinit_lock_release>:
  805c6c:	f800283a 	ret

00805c70 <__sinit>:
  805c70:	20800e17 	ldw	r2,56(r4)
  805c74:	defffd04 	addi	sp,sp,-12
  805c78:	dc400115 	stw	r17,4(sp)
  805c7c:	dc000015 	stw	r16,0(sp)
  805c80:	dfc00215 	stw	ra,8(sp)
  805c84:	04400044 	movi	r17,1
  805c88:	01400104 	movi	r5,4
  805c8c:	000d883a 	mov	r6,zero
  805c90:	2021883a 	mov	r16,r4
  805c94:	2200bb04 	addi	r8,r4,748
  805c98:	200f883a 	mov	r7,r4
  805c9c:	10000526 	beq	r2,zero,805cb4 <__sinit+0x44>
  805ca0:	dfc00217 	ldw	ra,8(sp)
  805ca4:	dc400117 	ldw	r17,4(sp)
  805ca8:	dc000017 	ldw	r16,0(sp)
  805cac:	dec00304 	addi	sp,sp,12
  805cb0:	f800283a 	ret
  805cb4:	21000117 	ldw	r4,4(r4)
  805cb8:	00802034 	movhi	r2,128
  805cbc:	10975504 	addi	r2,r2,23892
  805cc0:	00c000c4 	movi	r3,3
  805cc4:	80800f15 	stw	r2,60(r16)
  805cc8:	80c0b915 	stw	r3,740(r16)
  805ccc:	8200ba15 	stw	r8,744(r16)
  805cd0:	84400e15 	stw	r17,56(r16)
  805cd4:	8000b815 	stw	zero,736(r16)
  805cd8:	0805c080 	call	805c08 <std>
  805cdc:	81000217 	ldw	r4,8(r16)
  805ce0:	880d883a 	mov	r6,r17
  805ce4:	800f883a 	mov	r7,r16
  805ce8:	01400284 	movi	r5,10
  805cec:	0805c080 	call	805c08 <std>
  805cf0:	81000317 	ldw	r4,12(r16)
  805cf4:	800f883a 	mov	r7,r16
  805cf8:	01400484 	movi	r5,18
  805cfc:	01800084 	movi	r6,2
  805d00:	dfc00217 	ldw	ra,8(sp)
  805d04:	dc400117 	ldw	r17,4(sp)
  805d08:	dc000017 	ldw	r16,0(sp)
  805d0c:	dec00304 	addi	sp,sp,12
  805d10:	0805c081 	jmpi	805c08 <std>

00805d14 <__fp_lock>:
  805d14:	0005883a 	mov	r2,zero
  805d18:	f800283a 	ret

00805d1c <__fp_unlock>:
  805d1c:	0005883a 	mov	r2,zero
  805d20:	f800283a 	ret

00805d24 <__fp_unlock_all>:
  805d24:	00802074 	movhi	r2,129
  805d28:	1099af04 	addi	r2,r2,26300
  805d2c:	11000017 	ldw	r4,0(r2)
  805d30:	01402034 	movhi	r5,128
  805d34:	29574704 	addi	r5,r5,23836
  805d38:	08068a01 	jmpi	8068a0 <_fwalk>

00805d3c <__fp_lock_all>:
  805d3c:	00802074 	movhi	r2,129
  805d40:	1099af04 	addi	r2,r2,26300
  805d44:	11000017 	ldw	r4,0(r2)
  805d48:	01402034 	movhi	r5,128
  805d4c:	29574504 	addi	r5,r5,23828
  805d50:	08068a01 	jmpi	8068a0 <_fwalk>

00805d54 <_cleanup_r>:
  805d54:	01402074 	movhi	r5,129
  805d58:	29629904 	addi	r5,r5,-30108
  805d5c:	08068a01 	jmpi	8068a0 <_fwalk>

00805d60 <_cleanup>:
  805d60:	00802074 	movhi	r2,129
  805d64:	1099b004 	addi	r2,r2,26304
  805d68:	11000017 	ldw	r4,0(r2)
  805d6c:	0805d541 	jmpi	805d54 <_cleanup_r>

00805d70 <__sfmoreglue>:
  805d70:	defffc04 	addi	sp,sp,-16
  805d74:	dc000015 	stw	r16,0(sp)
  805d78:	2821883a 	mov	r16,r5
  805d7c:	dc400115 	stw	r17,4(sp)
  805d80:	01401704 	movi	r5,92
  805d84:	2023883a 	mov	r17,r4
  805d88:	8009883a 	mov	r4,r16
  805d8c:	dfc00315 	stw	ra,12(sp)
  805d90:	dcc00215 	stw	r19,8(sp)
  805d94:	08017b40 	call	8017b4 <__mulsi3>
  805d98:	11400304 	addi	r5,r2,12
  805d9c:	8809883a 	mov	r4,r17
  805da0:	1027883a 	mov	r19,r2
  805da4:	08018140 	call	801814 <_malloc_r>
  805da8:	10c00304 	addi	r3,r2,12
  805dac:	1023883a 	mov	r17,r2
  805db0:	1809883a 	mov	r4,r3
  805db4:	980d883a 	mov	r6,r19
  805db8:	000b883a 	mov	r5,zero
  805dbc:	10000b26 	beq	r2,zero,805dec <__sfmoreglue+0x7c>
  805dc0:	14000115 	stw	r16,4(r2)
  805dc4:	10c00215 	stw	r3,8(r2)
  805dc8:	10000015 	stw	zero,0(r2)
  805dcc:	0806e140 	call	806e14 <memset>
  805dd0:	8805883a 	mov	r2,r17
  805dd4:	dfc00317 	ldw	ra,12(sp)
  805dd8:	dcc00217 	ldw	r19,8(sp)
  805ddc:	dc400117 	ldw	r17,4(sp)
  805de0:	dc000017 	ldw	r16,0(sp)
  805de4:	dec00404 	addi	sp,sp,16
  805de8:	f800283a 	ret
  805dec:	0023883a 	mov	r17,zero
  805df0:	8805883a 	mov	r2,r17
  805df4:	dfc00317 	ldw	ra,12(sp)
  805df8:	dcc00217 	ldw	r19,8(sp)
  805dfc:	dc400117 	ldw	r17,4(sp)
  805e00:	dc000017 	ldw	r16,0(sp)
  805e04:	dec00404 	addi	sp,sp,16
  805e08:	f800283a 	ret

00805e0c <__sfp>:
  805e0c:	defffd04 	addi	sp,sp,-12
  805e10:	00802074 	movhi	r2,129
  805e14:	1099b004 	addi	r2,r2,26304
  805e18:	dc000015 	stw	r16,0(sp)
  805e1c:	14000017 	ldw	r16,0(r2)
  805e20:	dc400115 	stw	r17,4(sp)
  805e24:	dfc00215 	stw	ra,8(sp)
  805e28:	80800e17 	ldw	r2,56(r16)
  805e2c:	2023883a 	mov	r17,r4
  805e30:	10002626 	beq	r2,zero,805ecc <__sfp+0xc0>
  805e34:	8400b804 	addi	r16,r16,736
  805e38:	80800117 	ldw	r2,4(r16)
  805e3c:	81000217 	ldw	r4,8(r16)
  805e40:	10ffffc4 	addi	r3,r2,-1
  805e44:	18000916 	blt	r3,zero,805e6c <__sfp+0x60>
  805e48:	2080030f 	ldh	r2,12(r4)
  805e4c:	10000b26 	beq	r2,zero,805e7c <__sfp+0x70>
  805e50:	017fffc4 	movi	r5,-1
  805e54:	00000206 	br	805e60 <__sfp+0x54>
  805e58:	2080030f 	ldh	r2,12(r4)
  805e5c:	10000726 	beq	r2,zero,805e7c <__sfp+0x70>
  805e60:	18ffffc4 	addi	r3,r3,-1
  805e64:	21001704 	addi	r4,r4,92
  805e68:	197ffb1e 	bne	r3,r5,805e58 <__sfp+0x4c>
  805e6c:	80800017 	ldw	r2,0(r16)
  805e70:	10001926 	beq	r2,zero,805ed8 <__sfp+0xcc>
  805e74:	1021883a 	mov	r16,r2
  805e78:	003fef06 	br	805e38 <__sfp+0x2c>
  805e7c:	00bfffc4 	movi	r2,-1
  805e80:	00c00044 	movi	r3,1
  805e84:	2080038d 	sth	r2,14(r4)
  805e88:	20c0030d 	sth	r3,12(r4)
  805e8c:	20000015 	stw	zero,0(r4)
  805e90:	20000215 	stw	zero,8(r4)
  805e94:	20000115 	stw	zero,4(r4)
  805e98:	20000415 	stw	zero,16(r4)
  805e9c:	20000515 	stw	zero,20(r4)
  805ea0:	20000615 	stw	zero,24(r4)
  805ea4:	20000c15 	stw	zero,48(r4)
  805ea8:	20000d15 	stw	zero,52(r4)
  805eac:	20001115 	stw	zero,68(r4)
  805eb0:	20001215 	stw	zero,72(r4)
  805eb4:	2005883a 	mov	r2,r4
  805eb8:	dfc00217 	ldw	ra,8(sp)
  805ebc:	dc400117 	ldw	r17,4(sp)
  805ec0:	dc000017 	ldw	r16,0(sp)
  805ec4:	dec00304 	addi	sp,sp,12
  805ec8:	f800283a 	ret
  805ecc:	8009883a 	mov	r4,r16
  805ed0:	0805c700 	call	805c70 <__sinit>
  805ed4:	003fd706 	br	805e34 <__sfp+0x28>
  805ed8:	8809883a 	mov	r4,r17
  805edc:	01400104 	movi	r5,4
  805ee0:	0805d700 	call	805d70 <__sfmoreglue>
  805ee4:	80800015 	stw	r2,0(r16)
  805ee8:	103fe21e 	bne	r2,zero,805e74 <__sfp+0x68>
  805eec:	00800304 	movi	r2,12
  805ef0:	0009883a 	mov	r4,zero
  805ef4:	88800015 	stw	r2,0(r17)
  805ef8:	003fee06 	br	805eb4 <__sfp+0xa8>

00805efc <_malloc_trim_r>:
  805efc:	defffb04 	addi	sp,sp,-20
  805f00:	dcc00315 	stw	r19,12(sp)
  805f04:	04c02074 	movhi	r19,129
  805f08:	9cd2e904 	addi	r19,r19,19364
  805f0c:	dc800215 	stw	r18,8(sp)
  805f10:	dc400115 	stw	r17,4(sp)
  805f14:	dc000015 	stw	r16,0(sp)
  805f18:	2823883a 	mov	r17,r5
  805f1c:	2025883a 	mov	r18,r4
  805f20:	dfc00415 	stw	ra,16(sp)
  805f24:	080b8e40 	call	80b8e4 <__malloc_lock>
  805f28:	98800217 	ldw	r2,8(r19)
  805f2c:	9009883a 	mov	r4,r18
  805f30:	000b883a 	mov	r5,zero
  805f34:	10c00117 	ldw	r3,4(r2)
  805f38:	00bfff04 	movi	r2,-4
  805f3c:	18a0703a 	and	r16,r3,r2
  805f40:	8463c83a 	sub	r17,r16,r17
  805f44:	8c43fbc4 	addi	r17,r17,4079
  805f48:	8822d33a 	srli	r17,r17,12
  805f4c:	0083ffc4 	movi	r2,4095
  805f50:	8c7fffc4 	addi	r17,r17,-1
  805f54:	8822933a 	slli	r17,r17,12
  805f58:	1440060e 	bge	r2,r17,805f74 <_malloc_trim_r+0x78>
  805f5c:	08020800 	call	802080 <_sbrk_r>
  805f60:	98c00217 	ldw	r3,8(r19)
  805f64:	9009883a 	mov	r4,r18
  805f68:	044bc83a 	sub	r5,zero,r17
  805f6c:	80c7883a 	add	r3,r16,r3
  805f70:	10c00926 	beq	r2,r3,805f98 <_malloc_trim_r+0x9c>
  805f74:	080b9040 	call	80b904 <__malloc_unlock>
  805f78:	0005883a 	mov	r2,zero
  805f7c:	dfc00417 	ldw	ra,16(sp)
  805f80:	dcc00317 	ldw	r19,12(sp)
  805f84:	dc800217 	ldw	r18,8(sp)
  805f88:	dc400117 	ldw	r17,4(sp)
  805f8c:	dc000017 	ldw	r16,0(sp)
  805f90:	dec00504 	addi	sp,sp,20
  805f94:	f800283a 	ret
  805f98:	9009883a 	mov	r4,r18
  805f9c:	08020800 	call	802080 <_sbrk_r>
  805fa0:	844dc83a 	sub	r6,r16,r17
  805fa4:	00ffffc4 	movi	r3,-1
  805fa8:	9009883a 	mov	r4,r18
  805fac:	000b883a 	mov	r5,zero
  805fb0:	01c02174 	movhi	r7,133
  805fb4:	39c1e204 	addi	r7,r7,1928
  805fb8:	31800054 	ori	r6,r6,1
  805fbc:	10c00926 	beq	r2,r3,805fe4 <_malloc_trim_r+0xe8>
  805fc0:	38800017 	ldw	r2,0(r7)
  805fc4:	98c00217 	ldw	r3,8(r19)
  805fc8:	9009883a 	mov	r4,r18
  805fcc:	1445c83a 	sub	r2,r2,r17
  805fd0:	38800015 	stw	r2,0(r7)
  805fd4:	19800115 	stw	r6,4(r3)
  805fd8:	080b9040 	call	80b904 <__malloc_unlock>
  805fdc:	00800044 	movi	r2,1
  805fe0:	003fe606 	br	805f7c <_malloc_trim_r+0x80>
  805fe4:	08020800 	call	802080 <_sbrk_r>
  805fe8:	99800217 	ldw	r6,8(r19)
  805fec:	100f883a 	mov	r7,r2
  805ff0:	9009883a 	mov	r4,r18
  805ff4:	1187c83a 	sub	r3,r2,r6
  805ff8:	008003c4 	movi	r2,15
  805ffc:	19400054 	ori	r5,r3,1
  806000:	10ffdc0e 	bge	r2,r3,805f74 <_malloc_trim_r+0x78>
  806004:	00802074 	movhi	r2,129
  806008:	1099ae04 	addi	r2,r2,26296
  80600c:	10c00017 	ldw	r3,0(r2)
  806010:	00802174 	movhi	r2,133
  806014:	1081e204 	addi	r2,r2,1928
  806018:	31400115 	stw	r5,4(r6)
  80601c:	38c7c83a 	sub	r3,r7,r3
  806020:	10c00015 	stw	r3,0(r2)
  806024:	003fd306 	br	805f74 <_malloc_trim_r+0x78>

00806028 <_free_r>:
  806028:	defffd04 	addi	sp,sp,-12
  80602c:	dc400115 	stw	r17,4(sp)
  806030:	dc000015 	stw	r16,0(sp)
  806034:	dfc00215 	stw	ra,8(sp)
  806038:	2821883a 	mov	r16,r5
  80603c:	2023883a 	mov	r17,r4
  806040:	28005a26 	beq	r5,zero,8061ac <_free_r+0x184>
  806044:	080b8e40 	call	80b8e4 <__malloc_lock>
  806048:	823ffe04 	addi	r8,r16,-8
  80604c:	41400117 	ldw	r5,4(r8)
  806050:	00bfff84 	movi	r2,-2
  806054:	02802074 	movhi	r10,129
  806058:	5292e904 	addi	r10,r10,19364
  80605c:	288e703a 	and	r7,r5,r2
  806060:	41cd883a 	add	r6,r8,r7
  806064:	30c00117 	ldw	r3,4(r6)
  806068:	51000217 	ldw	r4,8(r10)
  80606c:	00bfff04 	movi	r2,-4
  806070:	1892703a 	and	r9,r3,r2
  806074:	5017883a 	mov	r11,r10
  806078:	31006726 	beq	r6,r4,806218 <_free_r+0x1f0>
  80607c:	2880004c 	andi	r2,r5,1
  806080:	1005003a 	cmpeq	r2,r2,zero
  806084:	32400115 	stw	r9,4(r6)
  806088:	10001a1e 	bne	r2,zero,8060f4 <_free_r+0xcc>
  80608c:	000b883a 	mov	r5,zero
  806090:	3247883a 	add	r3,r6,r9
  806094:	18800117 	ldw	r2,4(r3)
  806098:	1080004c 	andi	r2,r2,1
  80609c:	1000231e 	bne	r2,zero,80612c <_free_r+0x104>
  8060a0:	280ac03a 	cmpne	r5,r5,zero
  8060a4:	3a4f883a 	add	r7,r7,r9
  8060a8:	2800451e 	bne	r5,zero,8061c0 <_free_r+0x198>
  8060ac:	31000217 	ldw	r4,8(r6)
  8060b0:	00802074 	movhi	r2,129
  8060b4:	1092eb04 	addi	r2,r2,19372
  8060b8:	20807b26 	beq	r4,r2,8062a8 <_free_r+0x280>
  8060bc:	30800317 	ldw	r2,12(r6)
  8060c0:	3a07883a 	add	r3,r7,r8
  8060c4:	19c00015 	stw	r7,0(r3)
  8060c8:	11000215 	stw	r4,8(r2)
  8060cc:	20800315 	stw	r2,12(r4)
  8060d0:	38800054 	ori	r2,r7,1
  8060d4:	40800115 	stw	r2,4(r8)
  8060d8:	28001a26 	beq	r5,zero,806144 <_free_r+0x11c>
  8060dc:	8809883a 	mov	r4,r17
  8060e0:	dfc00217 	ldw	ra,8(sp)
  8060e4:	dc400117 	ldw	r17,4(sp)
  8060e8:	dc000017 	ldw	r16,0(sp)
  8060ec:	dec00304 	addi	sp,sp,12
  8060f0:	080b9041 	jmpi	80b904 <__malloc_unlock>
  8060f4:	80bffe17 	ldw	r2,-8(r16)
  8060f8:	50c00204 	addi	r3,r10,8
  8060fc:	4091c83a 	sub	r8,r8,r2
  806100:	41000217 	ldw	r4,8(r8)
  806104:	388f883a 	add	r7,r7,r2
  806108:	20c06126 	beq	r4,r3,806290 <_free_r+0x268>
  80610c:	40800317 	ldw	r2,12(r8)
  806110:	3247883a 	add	r3,r6,r9
  806114:	000b883a 	mov	r5,zero
  806118:	11000215 	stw	r4,8(r2)
  80611c:	20800315 	stw	r2,12(r4)
  806120:	18800117 	ldw	r2,4(r3)
  806124:	1080004c 	andi	r2,r2,1
  806128:	103fdd26 	beq	r2,zero,8060a0 <_free_r+0x78>
  80612c:	38800054 	ori	r2,r7,1
  806130:	3a07883a 	add	r3,r7,r8
  806134:	280ac03a 	cmpne	r5,r5,zero
  806138:	40800115 	stw	r2,4(r8)
  80613c:	19c00015 	stw	r7,0(r3)
  806140:	283fe61e 	bne	r5,zero,8060dc <_free_r+0xb4>
  806144:	00807fc4 	movi	r2,511
  806148:	11c01f2e 	bgeu	r2,r7,8061c8 <_free_r+0x1a0>
  80614c:	3806d27a 	srli	r3,r7,9
  806150:	1800481e 	bne	r3,zero,806274 <_free_r+0x24c>
  806154:	3804d0fa 	srli	r2,r7,3
  806158:	100690fa 	slli	r3,r2,3
  80615c:	1acd883a 	add	r6,r3,r11
  806160:	31400217 	ldw	r5,8(r6)
  806164:	31405926 	beq	r6,r5,8062cc <_free_r+0x2a4>
  806168:	28800117 	ldw	r2,4(r5)
  80616c:	00ffff04 	movi	r3,-4
  806170:	10c4703a 	and	r2,r2,r3
  806174:	3880022e 	bgeu	r7,r2,806180 <_free_r+0x158>
  806178:	29400217 	ldw	r5,8(r5)
  80617c:	317ffa1e 	bne	r6,r5,806168 <_free_r+0x140>
  806180:	29800317 	ldw	r6,12(r5)
  806184:	41800315 	stw	r6,12(r8)
  806188:	41400215 	stw	r5,8(r8)
  80618c:	8809883a 	mov	r4,r17
  806190:	2a000315 	stw	r8,12(r5)
  806194:	32000215 	stw	r8,8(r6)
  806198:	dfc00217 	ldw	ra,8(sp)
  80619c:	dc400117 	ldw	r17,4(sp)
  8061a0:	dc000017 	ldw	r16,0(sp)
  8061a4:	dec00304 	addi	sp,sp,12
  8061a8:	080b9041 	jmpi	80b904 <__malloc_unlock>
  8061ac:	dfc00217 	ldw	ra,8(sp)
  8061b0:	dc400117 	ldw	r17,4(sp)
  8061b4:	dc000017 	ldw	r16,0(sp)
  8061b8:	dec00304 	addi	sp,sp,12
  8061bc:	f800283a 	ret
  8061c0:	31000217 	ldw	r4,8(r6)
  8061c4:	003fbd06 	br	8060bc <_free_r+0x94>
  8061c8:	3806d0fa 	srli	r3,r7,3
  8061cc:	00800044 	movi	r2,1
  8061d0:	51400117 	ldw	r5,4(r10)
  8061d4:	180890fa 	slli	r4,r3,3
  8061d8:	1807d0ba 	srai	r3,r3,2
  8061dc:	22c9883a 	add	r4,r4,r11
  8061e0:	21800217 	ldw	r6,8(r4)
  8061e4:	10c4983a 	sll	r2,r2,r3
  8061e8:	41000315 	stw	r4,12(r8)
  8061ec:	41800215 	stw	r6,8(r8)
  8061f0:	288ab03a 	or	r5,r5,r2
  8061f4:	22000215 	stw	r8,8(r4)
  8061f8:	8809883a 	mov	r4,r17
  8061fc:	51400115 	stw	r5,4(r10)
  806200:	32000315 	stw	r8,12(r6)
  806204:	dfc00217 	ldw	ra,8(sp)
  806208:	dc400117 	ldw	r17,4(sp)
  80620c:	dc000017 	ldw	r16,0(sp)
  806210:	dec00304 	addi	sp,sp,12
  806214:	080b9041 	jmpi	80b904 <__malloc_unlock>
  806218:	2880004c 	andi	r2,r5,1
  80621c:	3a4d883a 	add	r6,r7,r9
  806220:	1000071e 	bne	r2,zero,806240 <_free_r+0x218>
  806224:	80bffe17 	ldw	r2,-8(r16)
  806228:	4091c83a 	sub	r8,r8,r2
  80622c:	41000317 	ldw	r4,12(r8)
  806230:	40c00217 	ldw	r3,8(r8)
  806234:	308d883a 	add	r6,r6,r2
  806238:	20c00215 	stw	r3,8(r4)
  80623c:	19000315 	stw	r4,12(r3)
  806240:	00802074 	movhi	r2,129
  806244:	1099ad04 	addi	r2,r2,26292
  806248:	11000017 	ldw	r4,0(r2)
  80624c:	30c00054 	ori	r3,r6,1
  806250:	52000215 	stw	r8,8(r10)
  806254:	40c00115 	stw	r3,4(r8)
  806258:	313fa036 	bltu	r6,r4,8060dc <_free_r+0xb4>
  80625c:	008020b4 	movhi	r2,130
  806260:	10a0c604 	addi	r2,r2,-31976
  806264:	11400017 	ldw	r5,0(r2)
  806268:	8809883a 	mov	r4,r17
  80626c:	0805efc0 	call	805efc <_malloc_trim_r>
  806270:	003f9a06 	br	8060dc <_free_r+0xb4>
  806274:	00800104 	movi	r2,4
  806278:	10c0072e 	bgeu	r2,r3,806298 <_free_r+0x270>
  80627c:	00800504 	movi	r2,20
  806280:	10c01936 	bltu	r2,r3,8062e8 <_free_r+0x2c0>
  806284:	188016c4 	addi	r2,r3,91
  806288:	100690fa 	slli	r3,r2,3
  80628c:	003fb306 	br	80615c <_free_r+0x134>
  806290:	01400044 	movi	r5,1
  806294:	003f7e06 	br	806090 <_free_r+0x68>
  806298:	3804d1ba 	srli	r2,r7,6
  80629c:	10800e04 	addi	r2,r2,56
  8062a0:	100690fa 	slli	r3,r2,3
  8062a4:	003fad06 	br	80615c <_free_r+0x134>
  8062a8:	22000315 	stw	r8,12(r4)
  8062ac:	22000215 	stw	r8,8(r4)
  8062b0:	3a05883a 	add	r2,r7,r8
  8062b4:	38c00054 	ori	r3,r7,1
  8062b8:	11c00015 	stw	r7,0(r2)
  8062bc:	41000215 	stw	r4,8(r8)
  8062c0:	40c00115 	stw	r3,4(r8)
  8062c4:	41000315 	stw	r4,12(r8)
  8062c8:	003f8406 	br	8060dc <_free_r+0xb4>
  8062cc:	1005d0ba 	srai	r2,r2,2
  8062d0:	00c00044 	movi	r3,1
  8062d4:	51000117 	ldw	r4,4(r10)
  8062d8:	1886983a 	sll	r3,r3,r2
  8062dc:	20c8b03a 	or	r4,r4,r3
  8062e0:	51000115 	stw	r4,4(r10)
  8062e4:	003fa706 	br	806184 <_free_r+0x15c>
  8062e8:	00801504 	movi	r2,84
  8062ec:	10c00436 	bltu	r2,r3,806300 <_free_r+0x2d8>
  8062f0:	3804d33a 	srli	r2,r7,12
  8062f4:	10801b84 	addi	r2,r2,110
  8062f8:	100690fa 	slli	r3,r2,3
  8062fc:	003f9706 	br	80615c <_free_r+0x134>
  806300:	00805504 	movi	r2,340
  806304:	10c00436 	bltu	r2,r3,806318 <_free_r+0x2f0>
  806308:	3804d3fa 	srli	r2,r7,15
  80630c:	10801dc4 	addi	r2,r2,119
  806310:	100690fa 	slli	r3,r2,3
  806314:	003f9106 	br	80615c <_free_r+0x134>
  806318:	00815504 	movi	r2,1364
  80631c:	10c0032e 	bgeu	r2,r3,80632c <_free_r+0x304>
  806320:	00801f84 	movi	r2,126
  806324:	00c0fc04 	movi	r3,1008
  806328:	003f8c06 	br	80615c <_free_r+0x134>
  80632c:	3804d4ba 	srli	r2,r7,18
  806330:	10801f04 	addi	r2,r2,124
  806334:	100690fa 	slli	r3,r2,3
  806338:	003f8806 	br	80615c <_free_r+0x134>

0080633c <__sfvwrite_r>:
  80633c:	30800217 	ldw	r2,8(r6)
  806340:	defff504 	addi	sp,sp,-44
  806344:	df000915 	stw	fp,36(sp)
  806348:	dd800715 	stw	r22,28(sp)
  80634c:	dc800315 	stw	r18,12(sp)
  806350:	dfc00a15 	stw	ra,40(sp)
  806354:	ddc00815 	stw	r23,32(sp)
  806358:	dd400615 	stw	r21,24(sp)
  80635c:	dd000515 	stw	r20,20(sp)
  806360:	dcc00415 	stw	r19,16(sp)
  806364:	dc400215 	stw	r17,8(sp)
  806368:	dc000115 	stw	r16,4(sp)
  80636c:	302d883a 	mov	r22,r6
  806370:	2039883a 	mov	fp,r4
  806374:	2825883a 	mov	r18,r5
  806378:	10001c26 	beq	r2,zero,8063ec <__sfvwrite_r+0xb0>
  80637c:	29c0030b 	ldhu	r7,12(r5)
  806380:	3880020c 	andi	r2,r7,8
  806384:	10002726 	beq	r2,zero,806424 <__sfvwrite_r+0xe8>
  806388:	28800417 	ldw	r2,16(r5)
  80638c:	10002526 	beq	r2,zero,806424 <__sfvwrite_r+0xe8>
  806390:	3880008c 	andi	r2,r7,2
  806394:	b5400017 	ldw	r21,0(r22)
  806398:	10002826 	beq	r2,zero,80643c <__sfvwrite_r+0x100>
  80639c:	0021883a 	mov	r16,zero
  8063a0:	0023883a 	mov	r17,zero
  8063a4:	880d883a 	mov	r6,r17
  8063a8:	e009883a 	mov	r4,fp
  8063ac:	00810004 	movi	r2,1024
  8063b0:	80006e26 	beq	r16,zero,80656c <__sfvwrite_r+0x230>
  8063b4:	800f883a 	mov	r7,r16
  8063b8:	91400717 	ldw	r5,28(r18)
  8063bc:	1400012e 	bgeu	r2,r16,8063c4 <__sfvwrite_r+0x88>
  8063c0:	100f883a 	mov	r7,r2
  8063c4:	90c00917 	ldw	r3,36(r18)
  8063c8:	183ee83a 	callr	r3
  8063cc:	1007883a 	mov	r3,r2
  8063d0:	80a1c83a 	sub	r16,r16,r2
  8063d4:	88a3883a 	add	r17,r17,r2
  8063d8:	00806d0e 	bge	zero,r2,806590 <__sfvwrite_r+0x254>
  8063dc:	b0800217 	ldw	r2,8(r22)
  8063e0:	10c5c83a 	sub	r2,r2,r3
  8063e4:	b0800215 	stw	r2,8(r22)
  8063e8:	103fee1e 	bne	r2,zero,8063a4 <__sfvwrite_r+0x68>
  8063ec:	0009883a 	mov	r4,zero
  8063f0:	2005883a 	mov	r2,r4
  8063f4:	dfc00a17 	ldw	ra,40(sp)
  8063f8:	df000917 	ldw	fp,36(sp)
  8063fc:	ddc00817 	ldw	r23,32(sp)
  806400:	dd800717 	ldw	r22,28(sp)
  806404:	dd400617 	ldw	r21,24(sp)
  806408:	dd000517 	ldw	r20,20(sp)
  80640c:	dcc00417 	ldw	r19,16(sp)
  806410:	dc800317 	ldw	r18,12(sp)
  806414:	dc400217 	ldw	r17,8(sp)
  806418:	dc000117 	ldw	r16,4(sp)
  80641c:	dec00b04 	addi	sp,sp,44
  806420:	f800283a 	ret
  806424:	08040a40 	call	8040a4 <__swsetup_r>
  806428:	1000e41e 	bne	r2,zero,8067bc <__sfvwrite_r+0x480>
  80642c:	91c0030b 	ldhu	r7,12(r18)
  806430:	b5400017 	ldw	r21,0(r22)
  806434:	3880008c 	andi	r2,r7,2
  806438:	103fd81e 	bne	r2,zero,80639c <__sfvwrite_r+0x60>
  80643c:	3880004c 	andi	r2,r7,1
  806440:	1005003a 	cmpeq	r2,r2,zero
  806444:	10005726 	beq	r2,zero,8065a4 <__sfvwrite_r+0x268>
  806448:	0029883a 	mov	r20,zero
  80644c:	002f883a 	mov	r23,zero
  806450:	a0004226 	beq	r20,zero,80655c <__sfvwrite_r+0x220>
  806454:	3880800c 	andi	r2,r7,512
  806458:	94000217 	ldw	r16,8(r18)
  80645c:	10008b26 	beq	r2,zero,80668c <__sfvwrite_r+0x350>
  806460:	800d883a 	mov	r6,r16
  806464:	a400a536 	bltu	r20,r16,8066fc <__sfvwrite_r+0x3c0>
  806468:	3881200c 	andi	r2,r7,1152
  80646c:	10002726 	beq	r2,zero,80650c <__sfvwrite_r+0x1d0>
  806470:	90800517 	ldw	r2,20(r18)
  806474:	92000417 	ldw	r8,16(r18)
  806478:	91400017 	ldw	r5,0(r18)
  80647c:	1087883a 	add	r3,r2,r2
  806480:	1887883a 	add	r3,r3,r2
  806484:	1808d7fa 	srli	r4,r3,31
  806488:	2a21c83a 	sub	r16,r5,r8
  80648c:	80800044 	addi	r2,r16,1
  806490:	20c9883a 	add	r4,r4,r3
  806494:	2027d07a 	srai	r19,r4,1
  806498:	a085883a 	add	r2,r20,r2
  80649c:	980d883a 	mov	r6,r19
  8064a0:	9880022e 	bgeu	r19,r2,8064ac <__sfvwrite_r+0x170>
  8064a4:	1027883a 	mov	r19,r2
  8064a8:	100d883a 	mov	r6,r2
  8064ac:	3881000c 	andi	r2,r7,1024
  8064b0:	1000b826 	beq	r2,zero,806794 <__sfvwrite_r+0x458>
  8064b4:	300b883a 	mov	r5,r6
  8064b8:	e009883a 	mov	r4,fp
  8064bc:	08018140 	call	801814 <_malloc_r>
  8064c0:	10003126 	beq	r2,zero,806588 <__sfvwrite_r+0x24c>
  8064c4:	91400417 	ldw	r5,16(r18)
  8064c8:	1009883a 	mov	r4,r2
  8064cc:	800d883a 	mov	r6,r16
  8064d0:	1023883a 	mov	r17,r2
  8064d4:	0806c940 	call	806c94 <memcpy>
  8064d8:	90c0030b 	ldhu	r3,12(r18)
  8064dc:	00beffc4 	movi	r2,-1025
  8064e0:	1886703a 	and	r3,r3,r2
  8064e4:	18c02014 	ori	r3,r3,128
  8064e8:	90c0030d 	sth	r3,12(r18)
  8064ec:	9c07c83a 	sub	r3,r19,r16
  8064f0:	8c05883a 	add	r2,r17,r16
  8064f4:	a00d883a 	mov	r6,r20
  8064f8:	a021883a 	mov	r16,r20
  8064fc:	90800015 	stw	r2,0(r18)
  806500:	90c00215 	stw	r3,8(r18)
  806504:	94400415 	stw	r17,16(r18)
  806508:	94c00515 	stw	r19,20(r18)
  80650c:	91000017 	ldw	r4,0(r18)
  806510:	b80b883a 	mov	r5,r23
  806514:	a023883a 	mov	r17,r20
  806518:	0806d340 	call	806d34 <memmove>
  80651c:	90c00217 	ldw	r3,8(r18)
  806520:	90800017 	ldw	r2,0(r18)
  806524:	a027883a 	mov	r19,r20
  806528:	1c07c83a 	sub	r3,r3,r16
  80652c:	1405883a 	add	r2,r2,r16
  806530:	90c00215 	stw	r3,8(r18)
  806534:	a021883a 	mov	r16,r20
  806538:	90800015 	stw	r2,0(r18)
  80653c:	b0800217 	ldw	r2,8(r22)
  806540:	1405c83a 	sub	r2,r2,r16
  806544:	b0800215 	stw	r2,8(r22)
  806548:	103fa826 	beq	r2,zero,8063ec <__sfvwrite_r+0xb0>
  80654c:	a469c83a 	sub	r20,r20,r17
  806550:	91c0030b 	ldhu	r7,12(r18)
  806554:	bcef883a 	add	r23,r23,r19
  806558:	a03fbe1e 	bne	r20,zero,806454 <__sfvwrite_r+0x118>
  80655c:	adc00017 	ldw	r23,0(r21)
  806560:	ad000117 	ldw	r20,4(r21)
  806564:	ad400204 	addi	r21,r21,8
  806568:	003fb906 	br	806450 <__sfvwrite_r+0x114>
  80656c:	ac400017 	ldw	r17,0(r21)
  806570:	ac000117 	ldw	r16,4(r21)
  806574:	ad400204 	addi	r21,r21,8
  806578:	003f8a06 	br	8063a4 <__sfvwrite_r+0x68>
  80657c:	91400417 	ldw	r5,16(r18)
  806580:	e009883a 	mov	r4,fp
  806584:	08060280 	call	806028 <_free_r>
  806588:	00800304 	movi	r2,12
  80658c:	e0800015 	stw	r2,0(fp)
  806590:	9080030b 	ldhu	r2,12(r18)
  806594:	013fffc4 	movi	r4,-1
  806598:	10801014 	ori	r2,r2,64
  80659c:	9080030d 	sth	r2,12(r18)
  8065a0:	003f9306 	br	8063f0 <__sfvwrite_r+0xb4>
  8065a4:	0027883a 	mov	r19,zero
  8065a8:	002f883a 	mov	r23,zero
  8065ac:	d8000015 	stw	zero,0(sp)
  8065b0:	0029883a 	mov	r20,zero
  8065b4:	98001e26 	beq	r19,zero,806630 <__sfvwrite_r+0x2f4>
  8065b8:	d8c00017 	ldw	r3,0(sp)
  8065bc:	1804c03a 	cmpne	r2,r3,zero
  8065c0:	10005e26 	beq	r2,zero,80673c <__sfvwrite_r+0x400>
  8065c4:	9821883a 	mov	r16,r19
  8065c8:	a4c0012e 	bgeu	r20,r19,8065d0 <__sfvwrite_r+0x294>
  8065cc:	a021883a 	mov	r16,r20
  8065d0:	91000017 	ldw	r4,0(r18)
  8065d4:	90800417 	ldw	r2,16(r18)
  8065d8:	91800217 	ldw	r6,8(r18)
  8065dc:	91c00517 	ldw	r7,20(r18)
  8065e0:	1100022e 	bgeu	r2,r4,8065ec <__sfvwrite_r+0x2b0>
  8065e4:	31e3883a 	add	r17,r6,r7
  8065e8:	8c001616 	blt	r17,r16,806644 <__sfvwrite_r+0x308>
  8065ec:	81c03816 	blt	r16,r7,8066d0 <__sfvwrite_r+0x394>
  8065f0:	90c00917 	ldw	r3,36(r18)
  8065f4:	91400717 	ldw	r5,28(r18)
  8065f8:	e009883a 	mov	r4,fp
  8065fc:	b80d883a 	mov	r6,r23
  806600:	183ee83a 	callr	r3
  806604:	1023883a 	mov	r17,r2
  806608:	00bfe10e 	bge	zero,r2,806590 <__sfvwrite_r+0x254>
  80660c:	a469c83a 	sub	r20,r20,r17
  806610:	a0001826 	beq	r20,zero,806674 <__sfvwrite_r+0x338>
  806614:	b0800217 	ldw	r2,8(r22)
  806618:	1445c83a 	sub	r2,r2,r17
  80661c:	b0800215 	stw	r2,8(r22)
  806620:	103f7226 	beq	r2,zero,8063ec <__sfvwrite_r+0xb0>
  806624:	9c67c83a 	sub	r19,r19,r17
  806628:	bc6f883a 	add	r23,r23,r17
  80662c:	983fe21e 	bne	r19,zero,8065b8 <__sfvwrite_r+0x27c>
  806630:	adc00017 	ldw	r23,0(r21)
  806634:	acc00117 	ldw	r19,4(r21)
  806638:	ad400204 	addi	r21,r21,8
  80663c:	d8000015 	stw	zero,0(sp)
  806640:	003fdc06 	br	8065b4 <__sfvwrite_r+0x278>
  806644:	b80b883a 	mov	r5,r23
  806648:	880d883a 	mov	r6,r17
  80664c:	0806d340 	call	806d34 <memmove>
  806650:	90c00017 	ldw	r3,0(r18)
  806654:	e009883a 	mov	r4,fp
  806658:	900b883a 	mov	r5,r18
  80665c:	1c47883a 	add	r3,r3,r17
  806660:	90c00015 	stw	r3,0(r18)
  806664:	08059d80 	call	8059d8 <_fflush_r>
  806668:	103fc91e 	bne	r2,zero,806590 <__sfvwrite_r+0x254>
  80666c:	a469c83a 	sub	r20,r20,r17
  806670:	a03fe81e 	bne	r20,zero,806614 <__sfvwrite_r+0x2d8>
  806674:	e009883a 	mov	r4,fp
  806678:	900b883a 	mov	r5,r18
  80667c:	08059d80 	call	8059d8 <_fflush_r>
  806680:	103fc31e 	bne	r2,zero,806590 <__sfvwrite_r+0x254>
  806684:	d8000015 	stw	zero,0(sp)
  806688:	003fe206 	br	806614 <__sfvwrite_r+0x2d8>
  80668c:	91000017 	ldw	r4,0(r18)
  806690:	90800417 	ldw	r2,16(r18)
  806694:	1100022e 	bgeu	r2,r4,8066a0 <__sfvwrite_r+0x364>
  806698:	8023883a 	mov	r17,r16
  80669c:	85003136 	bltu	r16,r20,806764 <__sfvwrite_r+0x428>
  8066a0:	91c00517 	ldw	r7,20(r18)
  8066a4:	a1c01836 	bltu	r20,r7,806708 <__sfvwrite_r+0x3cc>
  8066a8:	90c00917 	ldw	r3,36(r18)
  8066ac:	91400717 	ldw	r5,28(r18)
  8066b0:	e009883a 	mov	r4,fp
  8066b4:	b80d883a 	mov	r6,r23
  8066b8:	183ee83a 	callr	r3
  8066bc:	1021883a 	mov	r16,r2
  8066c0:	00bfb30e 	bge	zero,r2,806590 <__sfvwrite_r+0x254>
  8066c4:	1023883a 	mov	r17,r2
  8066c8:	1027883a 	mov	r19,r2
  8066cc:	003f9b06 	br	80653c <__sfvwrite_r+0x200>
  8066d0:	b80b883a 	mov	r5,r23
  8066d4:	800d883a 	mov	r6,r16
  8066d8:	0806d340 	call	806d34 <memmove>
  8066dc:	90c00217 	ldw	r3,8(r18)
  8066e0:	90800017 	ldw	r2,0(r18)
  8066e4:	8023883a 	mov	r17,r16
  8066e8:	1c07c83a 	sub	r3,r3,r16
  8066ec:	1405883a 	add	r2,r2,r16
  8066f0:	90c00215 	stw	r3,8(r18)
  8066f4:	90800015 	stw	r2,0(r18)
  8066f8:	003fc406 	br	80660c <__sfvwrite_r+0x2d0>
  8066fc:	a00d883a 	mov	r6,r20
  806700:	a021883a 	mov	r16,r20
  806704:	003f8106 	br	80650c <__sfvwrite_r+0x1d0>
  806708:	b80b883a 	mov	r5,r23
  80670c:	a00d883a 	mov	r6,r20
  806710:	0806d340 	call	806d34 <memmove>
  806714:	90c00217 	ldw	r3,8(r18)
  806718:	90800017 	ldw	r2,0(r18)
  80671c:	a021883a 	mov	r16,r20
  806720:	1d07c83a 	sub	r3,r3,r20
  806724:	1505883a 	add	r2,r2,r20
  806728:	a023883a 	mov	r17,r20
  80672c:	a027883a 	mov	r19,r20
  806730:	90c00215 	stw	r3,8(r18)
  806734:	90800015 	stw	r2,0(r18)
  806738:	003f8006 	br	80653c <__sfvwrite_r+0x200>
  80673c:	b809883a 	mov	r4,r23
  806740:	01400284 	movi	r5,10
  806744:	980d883a 	mov	r6,r19
  806748:	0806bb00 	call	806bb0 <memchr>
  80674c:	10001726 	beq	r2,zero,8067ac <__sfvwrite_r+0x470>
  806750:	15c5c83a 	sub	r2,r2,r23
  806754:	15000044 	addi	r20,r2,1
  806758:	00800044 	movi	r2,1
  80675c:	d8800015 	stw	r2,0(sp)
  806760:	003f9806 	br	8065c4 <__sfvwrite_r+0x288>
  806764:	b80b883a 	mov	r5,r23
  806768:	800d883a 	mov	r6,r16
  80676c:	0806d340 	call	806d34 <memmove>
  806770:	90c00017 	ldw	r3,0(r18)
  806774:	e009883a 	mov	r4,fp
  806778:	900b883a 	mov	r5,r18
  80677c:	1c07883a 	add	r3,r3,r16
  806780:	90c00015 	stw	r3,0(r18)
  806784:	8027883a 	mov	r19,r16
  806788:	08059d80 	call	8059d8 <_fflush_r>
  80678c:	103f6b26 	beq	r2,zero,80653c <__sfvwrite_r+0x200>
  806790:	003f7f06 	br	806590 <__sfvwrite_r+0x254>
  806794:	400b883a 	mov	r5,r8
  806798:	e009883a 	mov	r4,fp
  80679c:	0807f380 	call	807f38 <_realloc_r>
  8067a0:	103f7626 	beq	r2,zero,80657c <__sfvwrite_r+0x240>
  8067a4:	1023883a 	mov	r17,r2
  8067a8:	003f5006 	br	8064ec <__sfvwrite_r+0x1b0>
  8067ac:	00c00044 	movi	r3,1
  8067b0:	9d000044 	addi	r20,r19,1
  8067b4:	d8c00015 	stw	r3,0(sp)
  8067b8:	003f8206 	br	8065c4 <__sfvwrite_r+0x288>
  8067bc:	9080030b 	ldhu	r2,12(r18)
  8067c0:	00c00244 	movi	r3,9
  8067c4:	013fffc4 	movi	r4,-1
  8067c8:	10801014 	ori	r2,r2,64
  8067cc:	9080030d 	sth	r2,12(r18)
  8067d0:	e0c00015 	stw	r3,0(fp)
  8067d4:	003f0606 	br	8063f0 <__sfvwrite_r+0xb4>

008067d8 <_fwalk_reent>:
  8067d8:	defff704 	addi	sp,sp,-36
  8067dc:	dcc00315 	stw	r19,12(sp)
  8067e0:	24c0b804 	addi	r19,r4,736
  8067e4:	dd800615 	stw	r22,24(sp)
  8067e8:	dd400515 	stw	r21,20(sp)
  8067ec:	dfc00815 	stw	ra,32(sp)
  8067f0:	ddc00715 	stw	r23,28(sp)
  8067f4:	dd000415 	stw	r20,16(sp)
  8067f8:	dc800215 	stw	r18,8(sp)
  8067fc:	dc400115 	stw	r17,4(sp)
  806800:	dc000015 	stw	r16,0(sp)
  806804:	202b883a 	mov	r21,r4
  806808:	282d883a 	mov	r22,r5
  80680c:	0805c600 	call	805c60 <__sfp_lock_acquire>
  806810:	98002126 	beq	r19,zero,806898 <_fwalk_reent+0xc0>
  806814:	002f883a 	mov	r23,zero
  806818:	9c800117 	ldw	r18,4(r19)
  80681c:	9c000217 	ldw	r16,8(r19)
  806820:	90bfffc4 	addi	r2,r18,-1
  806824:	10000d16 	blt	r2,zero,80685c <_fwalk_reent+0x84>
  806828:	0023883a 	mov	r17,zero
  80682c:	053fffc4 	movi	r20,-1
  806830:	8080030f 	ldh	r2,12(r16)
  806834:	8c400044 	addi	r17,r17,1
  806838:	10000626 	beq	r2,zero,806854 <_fwalk_reent+0x7c>
  80683c:	8080038f 	ldh	r2,14(r16)
  806840:	800b883a 	mov	r5,r16
  806844:	a809883a 	mov	r4,r21
  806848:	15000226 	beq	r2,r20,806854 <_fwalk_reent+0x7c>
  80684c:	b03ee83a 	callr	r22
  806850:	b8aeb03a 	or	r23,r23,r2
  806854:	84001704 	addi	r16,r16,92
  806858:	947ff51e 	bne	r18,r17,806830 <_fwalk_reent+0x58>
  80685c:	9cc00017 	ldw	r19,0(r19)
  806860:	983fed1e 	bne	r19,zero,806818 <_fwalk_reent+0x40>
  806864:	0805c640 	call	805c64 <__sfp_lock_release>
  806868:	b805883a 	mov	r2,r23
  80686c:	dfc00817 	ldw	ra,32(sp)
  806870:	ddc00717 	ldw	r23,28(sp)
  806874:	dd800617 	ldw	r22,24(sp)
  806878:	dd400517 	ldw	r21,20(sp)
  80687c:	dd000417 	ldw	r20,16(sp)
  806880:	dcc00317 	ldw	r19,12(sp)
  806884:	dc800217 	ldw	r18,8(sp)
  806888:	dc400117 	ldw	r17,4(sp)
  80688c:	dc000017 	ldw	r16,0(sp)
  806890:	dec00904 	addi	sp,sp,36
  806894:	f800283a 	ret
  806898:	002f883a 	mov	r23,zero
  80689c:	003ff106 	br	806864 <_fwalk_reent+0x8c>

008068a0 <_fwalk>:
  8068a0:	defff804 	addi	sp,sp,-32
  8068a4:	dcc00315 	stw	r19,12(sp)
  8068a8:	24c0b804 	addi	r19,r4,736
  8068ac:	dd400515 	stw	r21,20(sp)
  8068b0:	dfc00715 	stw	ra,28(sp)
  8068b4:	dd800615 	stw	r22,24(sp)
  8068b8:	dd000415 	stw	r20,16(sp)
  8068bc:	dc800215 	stw	r18,8(sp)
  8068c0:	dc400115 	stw	r17,4(sp)
  8068c4:	dc000015 	stw	r16,0(sp)
  8068c8:	282b883a 	mov	r21,r5
  8068cc:	0805c600 	call	805c60 <__sfp_lock_acquire>
  8068d0:	98001f26 	beq	r19,zero,806950 <_fwalk+0xb0>
  8068d4:	002d883a 	mov	r22,zero
  8068d8:	9c800117 	ldw	r18,4(r19)
  8068dc:	9c000217 	ldw	r16,8(r19)
  8068e0:	90bfffc4 	addi	r2,r18,-1
  8068e4:	10000c16 	blt	r2,zero,806918 <_fwalk+0x78>
  8068e8:	0023883a 	mov	r17,zero
  8068ec:	053fffc4 	movi	r20,-1
  8068f0:	8080030f 	ldh	r2,12(r16)
  8068f4:	8c400044 	addi	r17,r17,1
  8068f8:	10000526 	beq	r2,zero,806910 <_fwalk+0x70>
  8068fc:	8080038f 	ldh	r2,14(r16)
  806900:	8009883a 	mov	r4,r16
  806904:	15000226 	beq	r2,r20,806910 <_fwalk+0x70>
  806908:	a83ee83a 	callr	r21
  80690c:	b0acb03a 	or	r22,r22,r2
  806910:	84001704 	addi	r16,r16,92
  806914:	947ff61e 	bne	r18,r17,8068f0 <_fwalk+0x50>
  806918:	9cc00017 	ldw	r19,0(r19)
  80691c:	983fee1e 	bne	r19,zero,8068d8 <_fwalk+0x38>
  806920:	0805c640 	call	805c64 <__sfp_lock_release>
  806924:	b005883a 	mov	r2,r22
  806928:	dfc00717 	ldw	ra,28(sp)
  80692c:	dd800617 	ldw	r22,24(sp)
  806930:	dd400517 	ldw	r21,20(sp)
  806934:	dd000417 	ldw	r20,16(sp)
  806938:	dcc00317 	ldw	r19,12(sp)
  80693c:	dc800217 	ldw	r18,8(sp)
  806940:	dc400117 	ldw	r17,4(sp)
  806944:	dc000017 	ldw	r16,0(sp)
  806948:	dec00804 	addi	sp,sp,32
  80694c:	f800283a 	ret
  806950:	002d883a 	mov	r22,zero
  806954:	003ff206 	br	806920 <_fwalk+0x80>

00806958 <__locale_charset>:
  806958:	d0a00517 	ldw	r2,-32748(gp)
  80695c:	f800283a 	ret

00806960 <_localeconv_r>:
  806960:	00802074 	movhi	r2,129
  806964:	1091f604 	addi	r2,r2,18392
  806968:	f800283a 	ret

0080696c <localeconv>:
  80696c:	00802074 	movhi	r2,129
  806970:	1099af04 	addi	r2,r2,26300
  806974:	11000017 	ldw	r4,0(r2)
  806978:	08069601 	jmpi	806960 <_localeconv_r>

0080697c <_setlocale_r>:
  80697c:	defffc04 	addi	sp,sp,-16
  806980:	00c02074 	movhi	r3,129
  806984:	18d1f104 	addi	r3,r3,18372
  806988:	dc800215 	stw	r18,8(sp)
  80698c:	dc400115 	stw	r17,4(sp)
  806990:	dc000015 	stw	r16,0(sp)
  806994:	2023883a 	mov	r17,r4
  806998:	2825883a 	mov	r18,r5
  80699c:	dfc00315 	stw	ra,12(sp)
  8069a0:	3021883a 	mov	r16,r6
  8069a4:	3009883a 	mov	r4,r6
  8069a8:	180b883a 	mov	r5,r3
  8069ac:	30000926 	beq	r6,zero,8069d4 <_setlocale_r+0x58>
  8069b0:	08086e80 	call	8086e8 <strcmp>
  8069b4:	8009883a 	mov	r4,r16
  8069b8:	01402074 	movhi	r5,129
  8069bc:	2951dc04 	addi	r5,r5,18288
  8069c0:	10000b1e 	bne	r2,zero,8069f0 <_setlocale_r+0x74>
  8069c4:	8c000d15 	stw	r16,52(r17)
  8069c8:	8c800c15 	stw	r18,48(r17)
  8069cc:	00c02074 	movhi	r3,129
  8069d0:	18d1f104 	addi	r3,r3,18372
  8069d4:	1805883a 	mov	r2,r3
  8069d8:	dfc00317 	ldw	ra,12(sp)
  8069dc:	dc800217 	ldw	r18,8(sp)
  8069e0:	dc400117 	ldw	r17,4(sp)
  8069e4:	dc000017 	ldw	r16,0(sp)
  8069e8:	dec00404 	addi	sp,sp,16
  8069ec:	f800283a 	ret
  8069f0:	08086e80 	call	8086e8 <strcmp>
  8069f4:	0007883a 	mov	r3,zero
  8069f8:	103ff226 	beq	r2,zero,8069c4 <_setlocale_r+0x48>
  8069fc:	003ff506 	br	8069d4 <_setlocale_r+0x58>

00806a00 <setlocale>:
  806a00:	01802074 	movhi	r6,129
  806a04:	3199af04 	addi	r6,r6,26300
  806a08:	2007883a 	mov	r3,r4
  806a0c:	31000017 	ldw	r4,0(r6)
  806a10:	280d883a 	mov	r6,r5
  806a14:	180b883a 	mov	r5,r3
  806a18:	080697c1 	jmpi	80697c <_setlocale_r>

00806a1c <__smakebuf_r>:
  806a1c:	2880030b 	ldhu	r2,12(r5)
  806a20:	deffed04 	addi	sp,sp,-76
  806a24:	dc401015 	stw	r17,64(sp)
  806a28:	1080008c 	andi	r2,r2,2
  806a2c:	dc000f15 	stw	r16,60(sp)
  806a30:	dfc01215 	stw	ra,72(sp)
  806a34:	dc801115 	stw	r18,68(sp)
  806a38:	2821883a 	mov	r16,r5
  806a3c:	2023883a 	mov	r17,r4
  806a40:	10000b26 	beq	r2,zero,806a70 <__smakebuf_r+0x54>
  806a44:	28c010c4 	addi	r3,r5,67
  806a48:	00800044 	movi	r2,1
  806a4c:	28800515 	stw	r2,20(r5)
  806a50:	28c00415 	stw	r3,16(r5)
  806a54:	28c00015 	stw	r3,0(r5)
  806a58:	dfc01217 	ldw	ra,72(sp)
  806a5c:	dc801117 	ldw	r18,68(sp)
  806a60:	dc401017 	ldw	r17,64(sp)
  806a64:	dc000f17 	ldw	r16,60(sp)
  806a68:	dec01304 	addi	sp,sp,76
  806a6c:	f800283a 	ret
  806a70:	2940038f 	ldh	r5,14(r5)
  806a74:	28002116 	blt	r5,zero,806afc <__smakebuf_r+0xe0>
  806a78:	d80d883a 	mov	r6,sp
  806a7c:	0808a780 	call	808a78 <_fstat_r>
  806a80:	10001e16 	blt	r2,zero,806afc <__smakebuf_r+0xe0>
  806a84:	d8800117 	ldw	r2,4(sp)
  806a88:	00e00014 	movui	r3,32768
  806a8c:	113c000c 	andi	r4,r2,61440
  806a90:	20c03126 	beq	r4,r3,806b58 <__smakebuf_r+0x13c>
  806a94:	8080030b 	ldhu	r2,12(r16)
  806a98:	00c80004 	movi	r3,8192
  806a9c:	10820014 	ori	r2,r2,2048
  806aa0:	8080030d 	sth	r2,12(r16)
  806aa4:	20c01e26 	beq	r4,r3,806b20 <__smakebuf_r+0x104>
  806aa8:	04810004 	movi	r18,1024
  806aac:	8809883a 	mov	r4,r17
  806ab0:	900b883a 	mov	r5,r18
  806ab4:	08018140 	call	801814 <_malloc_r>
  806ab8:	1009883a 	mov	r4,r2
  806abc:	10003126 	beq	r2,zero,806b84 <__smakebuf_r+0x168>
  806ac0:	80c0030b 	ldhu	r3,12(r16)
  806ac4:	00802034 	movhi	r2,128
  806ac8:	10975504 	addi	r2,r2,23892
  806acc:	88800f15 	stw	r2,60(r17)
  806ad0:	18c02014 	ori	r3,r3,128
  806ad4:	84800515 	stw	r18,20(r16)
  806ad8:	80c0030d 	sth	r3,12(r16)
  806adc:	81000415 	stw	r4,16(r16)
  806ae0:	81000015 	stw	r4,0(r16)
  806ae4:	dfc01217 	ldw	ra,72(sp)
  806ae8:	dc801117 	ldw	r18,68(sp)
  806aec:	dc401017 	ldw	r17,64(sp)
  806af0:	dc000f17 	ldw	r16,60(sp)
  806af4:	dec01304 	addi	sp,sp,76
  806af8:	f800283a 	ret
  806afc:	80c0030b 	ldhu	r3,12(r16)
  806b00:	1880200c 	andi	r2,r3,128
  806b04:	10000426 	beq	r2,zero,806b18 <__smakebuf_r+0xfc>
  806b08:	04801004 	movi	r18,64
  806b0c:	18820014 	ori	r2,r3,2048
  806b10:	8080030d 	sth	r2,12(r16)
  806b14:	003fe506 	br	806aac <__smakebuf_r+0x90>
  806b18:	04810004 	movi	r18,1024
  806b1c:	003ffb06 	br	806b0c <__smakebuf_r+0xf0>
  806b20:	8140038f 	ldh	r5,14(r16)
  806b24:	8809883a 	mov	r4,r17
  806b28:	0808aec0 	call	808aec <_isatty_r>
  806b2c:	103fde26 	beq	r2,zero,806aa8 <__smakebuf_r+0x8c>
  806b30:	8080030b 	ldhu	r2,12(r16)
  806b34:	80c010c4 	addi	r3,r16,67
  806b38:	04810004 	movi	r18,1024
  806b3c:	10800054 	ori	r2,r2,1
  806b40:	8080030d 	sth	r2,12(r16)
  806b44:	00800044 	movi	r2,1
  806b48:	80c00415 	stw	r3,16(r16)
  806b4c:	80800515 	stw	r2,20(r16)
  806b50:	80c00015 	stw	r3,0(r16)
  806b54:	003fd506 	br	806aac <__smakebuf_r+0x90>
  806b58:	80c00a17 	ldw	r3,40(r16)
  806b5c:	00802074 	movhi	r2,129
  806b60:	10a16904 	addi	r2,r2,-31324
  806b64:	18bfcb1e 	bne	r3,r2,806a94 <__smakebuf_r+0x78>
  806b68:	8080030b 	ldhu	r2,12(r16)
  806b6c:	00c10004 	movi	r3,1024
  806b70:	1825883a 	mov	r18,r3
  806b74:	10c4b03a 	or	r2,r2,r3
  806b78:	8080030d 	sth	r2,12(r16)
  806b7c:	80c01315 	stw	r3,76(r16)
  806b80:	003fca06 	br	806aac <__smakebuf_r+0x90>
  806b84:	8100030b 	ldhu	r4,12(r16)
  806b88:	2080800c 	andi	r2,r4,512
  806b8c:	103fb21e 	bne	r2,zero,806a58 <__smakebuf_r+0x3c>
  806b90:	80c010c4 	addi	r3,r16,67
  806b94:	21000094 	ori	r4,r4,2
  806b98:	00800044 	movi	r2,1
  806b9c:	80800515 	stw	r2,20(r16)
  806ba0:	8100030d 	sth	r4,12(r16)
  806ba4:	80c00415 	stw	r3,16(r16)
  806ba8:	80c00015 	stw	r3,0(r16)
  806bac:	003faa06 	br	806a58 <__smakebuf_r+0x3c>

00806bb0 <memchr>:
  806bb0:	008000c4 	movi	r2,3
  806bb4:	29403fcc 	andi	r5,r5,255
  806bb8:	2007883a 	mov	r3,r4
  806bbc:	1180022e 	bgeu	r2,r6,806bc8 <memchr+0x18>
  806bc0:	2084703a 	and	r2,r4,r2
  806bc4:	10000b26 	beq	r2,zero,806bf4 <memchr+0x44>
  806bc8:	313fffc4 	addi	r4,r6,-1
  806bcc:	3000051e 	bne	r6,zero,806be4 <memchr+0x34>
  806bd0:	00002c06 	br	806c84 <memchr+0xd4>
  806bd4:	213fffc4 	addi	r4,r4,-1
  806bd8:	00bfffc4 	movi	r2,-1
  806bdc:	18c00044 	addi	r3,r3,1
  806be0:	20802826 	beq	r4,r2,806c84 <memchr+0xd4>
  806be4:	18800003 	ldbu	r2,0(r3)
  806be8:	28bffa1e 	bne	r5,r2,806bd4 <memchr+0x24>
  806bec:	1805883a 	mov	r2,r3
  806bf0:	f800283a 	ret
  806bf4:	0011883a 	mov	r8,zero
  806bf8:	0007883a 	mov	r3,zero
  806bfc:	01c00104 	movi	r7,4
  806c00:	4004923a 	slli	r2,r8,8
  806c04:	18c00044 	addi	r3,r3,1
  806c08:	1151883a 	add	r8,r2,r5
  806c0c:	19fffc1e 	bne	r3,r7,806c00 <memchr+0x50>
  806c10:	02bfbff4 	movhi	r10,65279
  806c14:	52bfbfc4 	addi	r10,r10,-257
  806c18:	02602074 	movhi	r9,32897
  806c1c:	4a602004 	addi	r9,r9,-32640
  806c20:	02c000c4 	movi	r11,3
  806c24:	20800017 	ldw	r2,0(r4)
  806c28:	31bfff04 	addi	r6,r6,-4
  806c2c:	200f883a 	mov	r7,r4
  806c30:	1204f03a 	xor	r2,r2,r8
  806c34:	1287883a 	add	r3,r2,r10
  806c38:	1a46703a 	and	r3,r3,r9
  806c3c:	0084303a 	nor	r2,zero,r2
  806c40:	10c4703a 	and	r2,r2,r3
  806c44:	10000b26 	beq	r2,zero,806c74 <memchr+0xc4>
  806c48:	20800003 	ldbu	r2,0(r4)
  806c4c:	28800f26 	beq	r5,r2,806c8c <memchr+0xdc>
  806c50:	20800043 	ldbu	r2,1(r4)
  806c54:	21c00044 	addi	r7,r4,1
  806c58:	28800c26 	beq	r5,r2,806c8c <memchr+0xdc>
  806c5c:	20800083 	ldbu	r2,2(r4)
  806c60:	21c00084 	addi	r7,r4,2
  806c64:	28800926 	beq	r5,r2,806c8c <memchr+0xdc>
  806c68:	208000c3 	ldbu	r2,3(r4)
  806c6c:	21c000c4 	addi	r7,r4,3
  806c70:	28800626 	beq	r5,r2,806c8c <memchr+0xdc>
  806c74:	21000104 	addi	r4,r4,4
  806c78:	59bfea36 	bltu	r11,r6,806c24 <memchr+0x74>
  806c7c:	2007883a 	mov	r3,r4
  806c80:	003fd106 	br	806bc8 <memchr+0x18>
  806c84:	0005883a 	mov	r2,zero
  806c88:	f800283a 	ret
  806c8c:	3805883a 	mov	r2,r7
  806c90:	f800283a 	ret

00806c94 <memcpy>:
  806c94:	01c003c4 	movi	r7,15
  806c98:	2007883a 	mov	r3,r4
  806c9c:	3980032e 	bgeu	r7,r6,806cac <memcpy+0x18>
  806ca0:	2904b03a 	or	r2,r5,r4
  806ca4:	108000cc 	andi	r2,r2,3
  806ca8:	10000926 	beq	r2,zero,806cd0 <memcpy+0x3c>
  806cac:	30000626 	beq	r6,zero,806cc8 <memcpy+0x34>
  806cb0:	30cd883a 	add	r6,r6,r3
  806cb4:	28800003 	ldbu	r2,0(r5)
  806cb8:	29400044 	addi	r5,r5,1
  806cbc:	18800005 	stb	r2,0(r3)
  806cc0:	18c00044 	addi	r3,r3,1
  806cc4:	30fffb1e 	bne	r6,r3,806cb4 <memcpy+0x20>
  806cc8:	2005883a 	mov	r2,r4
  806ccc:	f800283a 	ret
  806cd0:	3811883a 	mov	r8,r7
  806cd4:	200f883a 	mov	r7,r4
  806cd8:	28c00017 	ldw	r3,0(r5)
  806cdc:	31bffc04 	addi	r6,r6,-16
  806ce0:	38c00015 	stw	r3,0(r7)
  806ce4:	28800117 	ldw	r2,4(r5)
  806ce8:	38800115 	stw	r2,4(r7)
  806cec:	28c00217 	ldw	r3,8(r5)
  806cf0:	38c00215 	stw	r3,8(r7)
  806cf4:	28800317 	ldw	r2,12(r5)
  806cf8:	29400404 	addi	r5,r5,16
  806cfc:	38800315 	stw	r2,12(r7)
  806d00:	39c00404 	addi	r7,r7,16
  806d04:	41bff436 	bltu	r8,r6,806cd8 <memcpy+0x44>
  806d08:	008000c4 	movi	r2,3
  806d0c:	1180072e 	bgeu	r2,r6,806d2c <memcpy+0x98>
  806d10:	1007883a 	mov	r3,r2
  806d14:	28800017 	ldw	r2,0(r5)
  806d18:	31bfff04 	addi	r6,r6,-4
  806d1c:	29400104 	addi	r5,r5,4
  806d20:	38800015 	stw	r2,0(r7)
  806d24:	39c00104 	addi	r7,r7,4
  806d28:	19bffa36 	bltu	r3,r6,806d14 <memcpy+0x80>
  806d2c:	3807883a 	mov	r3,r7
  806d30:	003fde06 	br	806cac <memcpy+0x18>

00806d34 <memmove>:
  806d34:	2807883a 	mov	r3,r5
  806d38:	2011883a 	mov	r8,r4
  806d3c:	29000c2e 	bgeu	r5,r4,806d70 <memmove+0x3c>
  806d40:	298f883a 	add	r7,r5,r6
  806d44:	21c00a2e 	bgeu	r4,r7,806d70 <memmove+0x3c>
  806d48:	30000726 	beq	r6,zero,806d68 <memmove+0x34>
  806d4c:	2187883a 	add	r3,r4,r6
  806d50:	198dc83a 	sub	r6,r3,r6
  806d54:	39ffffc4 	addi	r7,r7,-1
  806d58:	38800003 	ldbu	r2,0(r7)
  806d5c:	18ffffc4 	addi	r3,r3,-1
  806d60:	18800005 	stb	r2,0(r3)
  806d64:	19bffb1e 	bne	r3,r6,806d54 <memmove+0x20>
  806d68:	2005883a 	mov	r2,r4
  806d6c:	f800283a 	ret
  806d70:	01c003c4 	movi	r7,15
  806d74:	39800a36 	bltu	r7,r6,806da0 <memmove+0x6c>
  806d78:	303ffb26 	beq	r6,zero,806d68 <memmove+0x34>
  806d7c:	400f883a 	mov	r7,r8
  806d80:	320d883a 	add	r6,r6,r8
  806d84:	28800003 	ldbu	r2,0(r5)
  806d88:	29400044 	addi	r5,r5,1
  806d8c:	38800005 	stb	r2,0(r7)
  806d90:	39c00044 	addi	r7,r7,1
  806d94:	39bffb1e 	bne	r7,r6,806d84 <memmove+0x50>
  806d98:	2005883a 	mov	r2,r4
  806d9c:	f800283a 	ret
  806da0:	1904b03a 	or	r2,r3,r4
  806da4:	108000cc 	andi	r2,r2,3
  806da8:	103ff31e 	bne	r2,zero,806d78 <memmove+0x44>
  806dac:	3811883a 	mov	r8,r7
  806db0:	180b883a 	mov	r5,r3
  806db4:	200f883a 	mov	r7,r4
  806db8:	28c00017 	ldw	r3,0(r5)
  806dbc:	31bffc04 	addi	r6,r6,-16
  806dc0:	38c00015 	stw	r3,0(r7)
  806dc4:	28800117 	ldw	r2,4(r5)
  806dc8:	38800115 	stw	r2,4(r7)
  806dcc:	28c00217 	ldw	r3,8(r5)
  806dd0:	38c00215 	stw	r3,8(r7)
  806dd4:	28800317 	ldw	r2,12(r5)
  806dd8:	29400404 	addi	r5,r5,16
  806ddc:	38800315 	stw	r2,12(r7)
  806de0:	39c00404 	addi	r7,r7,16
  806de4:	41bff436 	bltu	r8,r6,806db8 <memmove+0x84>
  806de8:	008000c4 	movi	r2,3
  806dec:	1180072e 	bgeu	r2,r6,806e0c <memmove+0xd8>
  806df0:	1007883a 	mov	r3,r2
  806df4:	28800017 	ldw	r2,0(r5)
  806df8:	31bfff04 	addi	r6,r6,-4
  806dfc:	29400104 	addi	r5,r5,4
  806e00:	38800015 	stw	r2,0(r7)
  806e04:	39c00104 	addi	r7,r7,4
  806e08:	19bffa36 	bltu	r3,r6,806df4 <memmove+0xc0>
  806e0c:	3811883a 	mov	r8,r7
  806e10:	003fd906 	br	806d78 <memmove+0x44>

00806e14 <memset>:
  806e14:	008000c4 	movi	r2,3
  806e18:	29403fcc 	andi	r5,r5,255
  806e1c:	2007883a 	mov	r3,r4
  806e20:	1180022e 	bgeu	r2,r6,806e2c <memset+0x18>
  806e24:	2084703a 	and	r2,r4,r2
  806e28:	10000826 	beq	r2,zero,806e4c <memset+0x38>
  806e2c:	30000526 	beq	r6,zero,806e44 <memset+0x30>
  806e30:	2805883a 	mov	r2,r5
  806e34:	30cd883a 	add	r6,r6,r3
  806e38:	18800005 	stb	r2,0(r3)
  806e3c:	18c00044 	addi	r3,r3,1
  806e40:	19bffd1e 	bne	r3,r6,806e38 <memset+0x24>
  806e44:	2005883a 	mov	r2,r4
  806e48:	f800283a 	ret
  806e4c:	2804923a 	slli	r2,r5,8
  806e50:	020003c4 	movi	r8,15
  806e54:	200f883a 	mov	r7,r4
  806e58:	2884b03a 	or	r2,r5,r2
  806e5c:	1006943a 	slli	r3,r2,16
  806e60:	10c6b03a 	or	r3,r2,r3
  806e64:	41800a2e 	bgeu	r8,r6,806e90 <memset+0x7c>
  806e68:	4005883a 	mov	r2,r8
  806e6c:	31bffc04 	addi	r6,r6,-16
  806e70:	38c00015 	stw	r3,0(r7)
  806e74:	38c00115 	stw	r3,4(r7)
  806e78:	38c00215 	stw	r3,8(r7)
  806e7c:	38c00315 	stw	r3,12(r7)
  806e80:	39c00404 	addi	r7,r7,16
  806e84:	11bff936 	bltu	r2,r6,806e6c <memset+0x58>
  806e88:	008000c4 	movi	r2,3
  806e8c:	1180052e 	bgeu	r2,r6,806ea4 <memset+0x90>
  806e90:	31bfff04 	addi	r6,r6,-4
  806e94:	008000c4 	movi	r2,3
  806e98:	38c00015 	stw	r3,0(r7)
  806e9c:	39c00104 	addi	r7,r7,4
  806ea0:	11bffb36 	bltu	r2,r6,806e90 <memset+0x7c>
  806ea4:	3807883a 	mov	r3,r7
  806ea8:	003fe006 	br	806e2c <memset+0x18>

00806eac <_Bfree>:
  806eac:	28000826 	beq	r5,zero,806ed0 <_Bfree+0x24>
  806eb0:	28800117 	ldw	r2,4(r5)
  806eb4:	21001317 	ldw	r4,76(r4)
  806eb8:	1085883a 	add	r2,r2,r2
  806ebc:	1085883a 	add	r2,r2,r2
  806ec0:	1105883a 	add	r2,r2,r4
  806ec4:	10c00017 	ldw	r3,0(r2)
  806ec8:	28c00015 	stw	r3,0(r5)
  806ecc:	11400015 	stw	r5,0(r2)
  806ed0:	f800283a 	ret

00806ed4 <__hi0bits>:
  806ed4:	20bfffec 	andhi	r2,r4,65535
  806ed8:	10001426 	beq	r2,zero,806f2c <__hi0bits+0x58>
  806edc:	0007883a 	mov	r3,zero
  806ee0:	20bfc02c 	andhi	r2,r4,65280
  806ee4:	1000021e 	bne	r2,zero,806ef0 <__hi0bits+0x1c>
  806ee8:	2008923a 	slli	r4,r4,8
  806eec:	18c00204 	addi	r3,r3,8
  806ef0:	20bc002c 	andhi	r2,r4,61440
  806ef4:	1000021e 	bne	r2,zero,806f00 <__hi0bits+0x2c>
  806ef8:	2008913a 	slli	r4,r4,4
  806efc:	18c00104 	addi	r3,r3,4
  806f00:	20b0002c 	andhi	r2,r4,49152
  806f04:	1000031e 	bne	r2,zero,806f14 <__hi0bits+0x40>
  806f08:	2105883a 	add	r2,r4,r4
  806f0c:	18c00084 	addi	r3,r3,2
  806f10:	1089883a 	add	r4,r2,r2
  806f14:	20000316 	blt	r4,zero,806f24 <__hi0bits+0x50>
  806f18:	2090002c 	andhi	r2,r4,16384
  806f1c:	10000626 	beq	r2,zero,806f38 <__hi0bits+0x64>
  806f20:	18c00044 	addi	r3,r3,1
  806f24:	1805883a 	mov	r2,r3
  806f28:	f800283a 	ret
  806f2c:	2008943a 	slli	r4,r4,16
  806f30:	00c00404 	movi	r3,16
  806f34:	003fea06 	br	806ee0 <__hi0bits+0xc>
  806f38:	00c00804 	movi	r3,32
  806f3c:	1805883a 	mov	r2,r3
  806f40:	f800283a 	ret

00806f44 <__lo0bits>:
  806f44:	20c00017 	ldw	r3,0(r4)
  806f48:	188001cc 	andi	r2,r3,7
  806f4c:	10000a26 	beq	r2,zero,806f78 <__lo0bits+0x34>
  806f50:	1880004c 	andi	r2,r3,1
  806f54:	1005003a 	cmpeq	r2,r2,zero
  806f58:	10002126 	beq	r2,zero,806fe0 <__lo0bits+0x9c>
  806f5c:	1880008c 	andi	r2,r3,2
  806f60:	1000251e 	bne	r2,zero,806ff8 <__lo0bits+0xb4>
  806f64:	1804d0ba 	srli	r2,r3,2
  806f68:	01400084 	movi	r5,2
  806f6c:	20800015 	stw	r2,0(r4)
  806f70:	2805883a 	mov	r2,r5
  806f74:	f800283a 	ret
  806f78:	18bfffcc 	andi	r2,r3,65535
  806f7c:	10001526 	beq	r2,zero,806fd4 <__lo0bits+0x90>
  806f80:	000b883a 	mov	r5,zero
  806f84:	18803fcc 	andi	r2,r3,255
  806f88:	1000021e 	bne	r2,zero,806f94 <__lo0bits+0x50>
  806f8c:	1806d23a 	srli	r3,r3,8
  806f90:	29400204 	addi	r5,r5,8
  806f94:	188003cc 	andi	r2,r3,15
  806f98:	1000021e 	bne	r2,zero,806fa4 <__lo0bits+0x60>
  806f9c:	1806d13a 	srli	r3,r3,4
  806fa0:	29400104 	addi	r5,r5,4
  806fa4:	188000cc 	andi	r2,r3,3
  806fa8:	1000021e 	bne	r2,zero,806fb4 <__lo0bits+0x70>
  806fac:	1806d0ba 	srli	r3,r3,2
  806fb0:	29400084 	addi	r5,r5,2
  806fb4:	1880004c 	andi	r2,r3,1
  806fb8:	1000031e 	bne	r2,zero,806fc8 <__lo0bits+0x84>
  806fbc:	1806d07a 	srli	r3,r3,1
  806fc0:	18000a26 	beq	r3,zero,806fec <__lo0bits+0xa8>
  806fc4:	29400044 	addi	r5,r5,1
  806fc8:	2805883a 	mov	r2,r5
  806fcc:	20c00015 	stw	r3,0(r4)
  806fd0:	f800283a 	ret
  806fd4:	1806d43a 	srli	r3,r3,16
  806fd8:	01400404 	movi	r5,16
  806fdc:	003fe906 	br	806f84 <__lo0bits+0x40>
  806fe0:	000b883a 	mov	r5,zero
  806fe4:	2805883a 	mov	r2,r5
  806fe8:	f800283a 	ret
  806fec:	01400804 	movi	r5,32
  806ff0:	2805883a 	mov	r2,r5
  806ff4:	f800283a 	ret
  806ff8:	1804d07a 	srli	r2,r3,1
  806ffc:	01400044 	movi	r5,1
  807000:	20800015 	stw	r2,0(r4)
  807004:	003fda06 	br	806f70 <__lo0bits+0x2c>

00807008 <__mcmp>:
  807008:	20800417 	ldw	r2,16(r4)
  80700c:	28c00417 	ldw	r3,16(r5)
  807010:	10cfc83a 	sub	r7,r2,r3
  807014:	38000c1e 	bne	r7,zero,807048 <__mcmp+0x40>
  807018:	18c5883a 	add	r2,r3,r3
  80701c:	1085883a 	add	r2,r2,r2
  807020:	10c00504 	addi	r3,r2,20
  807024:	21000504 	addi	r4,r4,20
  807028:	28cb883a 	add	r5,r5,r3
  80702c:	2085883a 	add	r2,r4,r2
  807030:	10bfff04 	addi	r2,r2,-4
  807034:	297fff04 	addi	r5,r5,-4
  807038:	11800017 	ldw	r6,0(r2)
  80703c:	28c00017 	ldw	r3,0(r5)
  807040:	30c0031e 	bne	r6,r3,807050 <__mcmp+0x48>
  807044:	20bffa36 	bltu	r4,r2,807030 <__mcmp+0x28>
  807048:	3805883a 	mov	r2,r7
  80704c:	f800283a 	ret
  807050:	30c00336 	bltu	r6,r3,807060 <__mcmp+0x58>
  807054:	01c00044 	movi	r7,1
  807058:	3805883a 	mov	r2,r7
  80705c:	f800283a 	ret
  807060:	01ffffc4 	movi	r7,-1
  807064:	003ff806 	br	807048 <__mcmp+0x40>

00807068 <__ulp>:
  807068:	295ffc2c 	andhi	r5,r5,32752
  80706c:	013f3034 	movhi	r4,64704
  807070:	290b883a 	add	r5,r5,r4
  807074:	0145c83a 	sub	r2,zero,r5
  807078:	1007d53a 	srai	r3,r2,20
  80707c:	000d883a 	mov	r6,zero
  807080:	0140040e 	bge	zero,r5,807094 <__ulp+0x2c>
  807084:	280f883a 	mov	r7,r5
  807088:	3807883a 	mov	r3,r7
  80708c:	3005883a 	mov	r2,r6
  807090:	f800283a 	ret
  807094:	008004c4 	movi	r2,19
  807098:	193ffb04 	addi	r4,r3,-20
  80709c:	10c00c0e 	bge	r2,r3,8070d0 <__ulp+0x68>
  8070a0:	008007c4 	movi	r2,31
  8070a4:	1107c83a 	sub	r3,r2,r4
  8070a8:	00800784 	movi	r2,30
  8070ac:	01400044 	movi	r5,1
  8070b0:	11000216 	blt	r2,r4,8070bc <__ulp+0x54>
  8070b4:	00800044 	movi	r2,1
  8070b8:	10ca983a 	sll	r5,r2,r3
  8070bc:	000f883a 	mov	r7,zero
  8070c0:	280d883a 	mov	r6,r5
  8070c4:	3807883a 	mov	r3,r7
  8070c8:	3005883a 	mov	r2,r6
  8070cc:	f800283a 	ret
  8070d0:	00800234 	movhi	r2,8
  8070d4:	10cfd83a 	sra	r7,r2,r3
  8070d8:	000d883a 	mov	r6,zero
  8070dc:	3005883a 	mov	r2,r6
  8070e0:	3807883a 	mov	r3,r7
  8070e4:	f800283a 	ret

008070e8 <__b2d>:
  8070e8:	20800417 	ldw	r2,16(r4)
  8070ec:	defff904 	addi	sp,sp,-28
  8070f0:	dd000415 	stw	r20,16(sp)
  8070f4:	1085883a 	add	r2,r2,r2
  8070f8:	25000504 	addi	r20,r4,20
  8070fc:	1085883a 	add	r2,r2,r2
  807100:	dc000015 	stw	r16,0(sp)
  807104:	a0a1883a 	add	r16,r20,r2
  807108:	dd400515 	stw	r21,20(sp)
  80710c:	857fff17 	ldw	r21,-4(r16)
  807110:	dc400115 	stw	r17,4(sp)
  807114:	dfc00615 	stw	ra,24(sp)
  807118:	a809883a 	mov	r4,r21
  80711c:	2823883a 	mov	r17,r5
  807120:	dcc00315 	stw	r19,12(sp)
  807124:	dc800215 	stw	r18,8(sp)
  807128:	0806ed40 	call	806ed4 <__hi0bits>
  80712c:	100b883a 	mov	r5,r2
  807130:	00800804 	movi	r2,32
  807134:	1145c83a 	sub	r2,r2,r5
  807138:	88800015 	stw	r2,0(r17)
  80713c:	00800284 	movi	r2,10
  807140:	80ffff04 	addi	r3,r16,-4
  807144:	11401416 	blt	r2,r5,807198 <__b2d+0xb0>
  807148:	008002c4 	movi	r2,11
  80714c:	1149c83a 	sub	r4,r2,r5
  807150:	a0c02736 	bltu	r20,r3,8071f0 <__b2d+0x108>
  807154:	000d883a 	mov	r6,zero
  807158:	28800544 	addi	r2,r5,21
  80715c:	a906d83a 	srl	r3,r21,r4
  807160:	a884983a 	sll	r2,r21,r2
  807164:	1ccffc34 	orhi	r19,r3,16368
  807168:	11a4b03a 	or	r18,r2,r6
  80716c:	9005883a 	mov	r2,r18
  807170:	9807883a 	mov	r3,r19
  807174:	dfc00617 	ldw	ra,24(sp)
  807178:	dd400517 	ldw	r21,20(sp)
  80717c:	dd000417 	ldw	r20,16(sp)
  807180:	dcc00317 	ldw	r19,12(sp)
  807184:	dc800217 	ldw	r18,8(sp)
  807188:	dc400117 	ldw	r17,4(sp)
  80718c:	dc000017 	ldw	r16,0(sp)
  807190:	dec00704 	addi	sp,sp,28
  807194:	f800283a 	ret
  807198:	a0c00e36 	bltu	r20,r3,8071d4 <__b2d+0xec>
  80719c:	293ffd44 	addi	r4,r5,-11
  8071a0:	000d883a 	mov	r6,zero
  8071a4:	20000f26 	beq	r4,zero,8071e4 <__b2d+0xfc>
  8071a8:	00800804 	movi	r2,32
  8071ac:	110bc83a 	sub	r5,r2,r4
  8071b0:	a0c01236 	bltu	r20,r3,8071fc <__b2d+0x114>
  8071b4:	000f883a 	mov	r7,zero
  8071b8:	a904983a 	sll	r2,r21,r4
  8071bc:	3146d83a 	srl	r3,r6,r5
  8071c0:	3108983a 	sll	r4,r6,r4
  8071c4:	108ffc34 	orhi	r2,r2,16368
  8071c8:	18a6b03a 	or	r19,r3,r2
  8071cc:	3924b03a 	or	r18,r7,r4
  8071d0:	003fe606 	br	80716c <__b2d+0x84>
  8071d4:	293ffd44 	addi	r4,r5,-11
  8071d8:	81bffe17 	ldw	r6,-8(r16)
  8071dc:	80fffe04 	addi	r3,r16,-8
  8071e0:	203ff11e 	bne	r4,zero,8071a8 <__b2d+0xc0>
  8071e4:	accffc34 	orhi	r19,r21,16368
  8071e8:	3025883a 	mov	r18,r6
  8071ec:	003fdf06 	br	80716c <__b2d+0x84>
  8071f0:	18bfff17 	ldw	r2,-4(r3)
  8071f4:	110cd83a 	srl	r6,r2,r4
  8071f8:	003fd706 	br	807158 <__b2d+0x70>
  8071fc:	18bfff17 	ldw	r2,-4(r3)
  807200:	114ed83a 	srl	r7,r2,r5
  807204:	003fec06 	br	8071b8 <__b2d+0xd0>

00807208 <__ratio>:
  807208:	defff904 	addi	sp,sp,-28
  80720c:	dc400215 	stw	r17,8(sp)
  807210:	2823883a 	mov	r17,r5
  807214:	d80b883a 	mov	r5,sp
  807218:	dfc00615 	stw	ra,24(sp)
  80721c:	dd000515 	stw	r20,20(sp)
  807220:	dcc00415 	stw	r19,16(sp)
  807224:	dc800315 	stw	r18,12(sp)
  807228:	2025883a 	mov	r18,r4
  80722c:	08070e80 	call	8070e8 <__b2d>
  807230:	8809883a 	mov	r4,r17
  807234:	d9400104 	addi	r5,sp,4
  807238:	1027883a 	mov	r19,r2
  80723c:	1829883a 	mov	r20,r3
  807240:	08070e80 	call	8070e8 <__b2d>
  807244:	89000417 	ldw	r4,16(r17)
  807248:	91c00417 	ldw	r7,16(r18)
  80724c:	d9800117 	ldw	r6,4(sp)
  807250:	180b883a 	mov	r5,r3
  807254:	390fc83a 	sub	r7,r7,r4
  807258:	1009883a 	mov	r4,r2
  80725c:	d8800017 	ldw	r2,0(sp)
  807260:	380e917a 	slli	r7,r7,5
  807264:	2011883a 	mov	r8,r4
  807268:	1185c83a 	sub	r2,r2,r6
  80726c:	11c5883a 	add	r2,r2,r7
  807270:	1006953a 	slli	r3,r2,20
  807274:	2813883a 	mov	r9,r5
  807278:	00800d0e 	bge	zero,r2,8072b0 <__ratio+0xa8>
  80727c:	1d29883a 	add	r20,r3,r20
  807280:	a00b883a 	mov	r5,r20
  807284:	480f883a 	mov	r7,r9
  807288:	9809883a 	mov	r4,r19
  80728c:	400d883a 	mov	r6,r8
  807290:	080a1e00 	call	80a1e0 <__divdf3>
  807294:	dfc00617 	ldw	ra,24(sp)
  807298:	dd000517 	ldw	r20,20(sp)
  80729c:	dcc00417 	ldw	r19,16(sp)
  8072a0:	dc800317 	ldw	r18,12(sp)
  8072a4:	dc400217 	ldw	r17,8(sp)
  8072a8:	dec00704 	addi	sp,sp,28
  8072ac:	f800283a 	ret
  8072b0:	28d3c83a 	sub	r9,r5,r3
  8072b4:	003ff206 	br	807280 <__ratio+0x78>

008072b8 <_mprec_log10>:
  8072b8:	defffe04 	addi	sp,sp,-8
  8072bc:	008005c4 	movi	r2,23
  8072c0:	dc000015 	stw	r16,0(sp)
  8072c4:	dfc00115 	stw	ra,4(sp)
  8072c8:	2021883a 	mov	r16,r4
  8072cc:	11000c16 	blt	r2,r4,807300 <_mprec_log10+0x48>
  8072d0:	200490fa 	slli	r2,r4,3
  8072d4:	00c02074 	movhi	r3,129
  8072d8:	18d20204 	addi	r3,r3,18440
  8072dc:	10c5883a 	add	r2,r2,r3
  8072e0:	12400117 	ldw	r9,4(r2)
  8072e4:	12000017 	ldw	r8,0(r2)
  8072e8:	4807883a 	mov	r3,r9
  8072ec:	4005883a 	mov	r2,r8
  8072f0:	dfc00117 	ldw	ra,4(sp)
  8072f4:	dc000017 	ldw	r16,0(sp)
  8072f8:	dec00204 	addi	sp,sp,8
  8072fc:	f800283a 	ret
  807300:	0011883a 	mov	r8,zero
  807304:	024ffc34 	movhi	r9,16368
  807308:	0005883a 	mov	r2,zero
  80730c:	00d00934 	movhi	r3,16420
  807310:	480b883a 	mov	r5,r9
  807314:	4009883a 	mov	r4,r8
  807318:	180f883a 	mov	r7,r3
  80731c:	100d883a 	mov	r6,r2
  807320:	0809e1c0 	call	809e1c <__muldf3>
  807324:	843fffc4 	addi	r16,r16,-1
  807328:	1011883a 	mov	r8,r2
  80732c:	1813883a 	mov	r9,r3
  807330:	803ff51e 	bne	r16,zero,807308 <_mprec_log10+0x50>
  807334:	4005883a 	mov	r2,r8
  807338:	4807883a 	mov	r3,r9
  80733c:	dfc00117 	ldw	ra,4(sp)
  807340:	dc000017 	ldw	r16,0(sp)
  807344:	dec00204 	addi	sp,sp,8
  807348:	f800283a 	ret

0080734c <__copybits>:
  80734c:	297fffc4 	addi	r5,r5,-1
  807350:	30800417 	ldw	r2,16(r6)
  807354:	280bd17a 	srai	r5,r5,5
  807358:	31800504 	addi	r6,r6,20
  80735c:	1085883a 	add	r2,r2,r2
  807360:	294b883a 	add	r5,r5,r5
  807364:	294b883a 	add	r5,r5,r5
  807368:	1085883a 	add	r2,r2,r2
  80736c:	290b883a 	add	r5,r5,r4
  807370:	3087883a 	add	r3,r6,r2
  807374:	29400104 	addi	r5,r5,4
  807378:	30c0052e 	bgeu	r6,r3,807390 <__copybits+0x44>
  80737c:	30800017 	ldw	r2,0(r6)
  807380:	31800104 	addi	r6,r6,4
  807384:	20800015 	stw	r2,0(r4)
  807388:	21000104 	addi	r4,r4,4
  80738c:	30fffb36 	bltu	r6,r3,80737c <__copybits+0x30>
  807390:	2140032e 	bgeu	r4,r5,8073a0 <__copybits+0x54>
  807394:	20000015 	stw	zero,0(r4)
  807398:	21000104 	addi	r4,r4,4
  80739c:	217ffd36 	bltu	r4,r5,807394 <__copybits+0x48>
  8073a0:	f800283a 	ret

008073a4 <__any_on>:
  8073a4:	20800417 	ldw	r2,16(r4)
  8073a8:	2807d17a 	srai	r3,r5,5
  8073ac:	21000504 	addi	r4,r4,20
  8073b0:	10c00d0e 	bge	r2,r3,8073e8 <__any_on+0x44>
  8073b4:	1085883a 	add	r2,r2,r2
  8073b8:	1085883a 	add	r2,r2,r2
  8073bc:	208d883a 	add	r6,r4,r2
  8073c0:	2180182e 	bgeu	r4,r6,807424 <__any_on+0x80>
  8073c4:	30bfff17 	ldw	r2,-4(r6)
  8073c8:	30ffff04 	addi	r3,r6,-4
  8073cc:	1000041e 	bne	r2,zero,8073e0 <__any_on+0x3c>
  8073d0:	20c0142e 	bgeu	r4,r3,807424 <__any_on+0x80>
  8073d4:	18ffff04 	addi	r3,r3,-4
  8073d8:	18800017 	ldw	r2,0(r3)
  8073dc:	103ffc26 	beq	r2,zero,8073d0 <__any_on+0x2c>
  8073e0:	00800044 	movi	r2,1
  8073e4:	f800283a 	ret
  8073e8:	18800a0e 	bge	r3,r2,807414 <__any_on+0x70>
  8073ec:	294007cc 	andi	r5,r5,31
  8073f0:	28000826 	beq	r5,zero,807414 <__any_on+0x70>
  8073f4:	18c5883a 	add	r2,r3,r3
  8073f8:	1085883a 	add	r2,r2,r2
  8073fc:	208d883a 	add	r6,r4,r2
  807400:	30c00017 	ldw	r3,0(r6)
  807404:	1944d83a 	srl	r2,r3,r5
  807408:	1144983a 	sll	r2,r2,r5
  80740c:	18bff41e 	bne	r3,r2,8073e0 <__any_on+0x3c>
  807410:	003feb06 	br	8073c0 <__any_on+0x1c>
  807414:	18c5883a 	add	r2,r3,r3
  807418:	1085883a 	add	r2,r2,r2
  80741c:	208d883a 	add	r6,r4,r2
  807420:	003fe706 	br	8073c0 <__any_on+0x1c>
  807424:	0005883a 	mov	r2,zero
  807428:	f800283a 	ret

0080742c <_Balloc>:
  80742c:	20c01317 	ldw	r3,76(r4)
  807430:	defffb04 	addi	sp,sp,-20
  807434:	dcc00315 	stw	r19,12(sp)
  807438:	dc800215 	stw	r18,8(sp)
  80743c:	dfc00415 	stw	ra,16(sp)
  807440:	2825883a 	mov	r18,r5
  807444:	dc400115 	stw	r17,4(sp)
  807448:	dc000015 	stw	r16,0(sp)
  80744c:	2027883a 	mov	r19,r4
  807450:	01800404 	movi	r6,16
  807454:	01400104 	movi	r5,4
  807458:	18001726 	beq	r3,zero,8074b8 <_Balloc+0x8c>
  80745c:	01400044 	movi	r5,1
  807460:	9485883a 	add	r2,r18,r18
  807464:	2ca2983a 	sll	r17,r5,r18
  807468:	1085883a 	add	r2,r2,r2
  80746c:	10c7883a 	add	r3,r2,r3
  807470:	1c000017 	ldw	r16,0(r3)
  807474:	8c4d883a 	add	r6,r17,r17
  807478:	318d883a 	add	r6,r6,r6
  80747c:	9809883a 	mov	r4,r19
  807480:	31800504 	addi	r6,r6,20
  807484:	80001226 	beq	r16,zero,8074d0 <_Balloc+0xa4>
  807488:	80800017 	ldw	r2,0(r16)
  80748c:	18800015 	stw	r2,0(r3)
  807490:	80000415 	stw	zero,16(r16)
  807494:	80000315 	stw	zero,12(r16)
  807498:	8005883a 	mov	r2,r16
  80749c:	dfc00417 	ldw	ra,16(sp)
  8074a0:	dcc00317 	ldw	r19,12(sp)
  8074a4:	dc800217 	ldw	r18,8(sp)
  8074a8:	dc400117 	ldw	r17,4(sp)
  8074ac:	dc000017 	ldw	r16,0(sp)
  8074b0:	dec00504 	addi	sp,sp,20
  8074b4:	f800283a 	ret
  8074b8:	080881c0 	call	80881c <_calloc_r>
  8074bc:	1007883a 	mov	r3,r2
  8074c0:	0021883a 	mov	r16,zero
  8074c4:	98801315 	stw	r2,76(r19)
  8074c8:	103fe41e 	bne	r2,zero,80745c <_Balloc+0x30>
  8074cc:	003ff206 	br	807498 <_Balloc+0x6c>
  8074d0:	080881c0 	call	80881c <_calloc_r>
  8074d4:	103ff026 	beq	r2,zero,807498 <_Balloc+0x6c>
  8074d8:	1021883a 	mov	r16,r2
  8074dc:	14800115 	stw	r18,4(r2)
  8074e0:	14400215 	stw	r17,8(r2)
  8074e4:	003fea06 	br	807490 <_Balloc+0x64>

008074e8 <__d2b>:
  8074e8:	defff504 	addi	sp,sp,-44
  8074ec:	dcc00515 	stw	r19,20(sp)
  8074f0:	04c00044 	movi	r19,1
  8074f4:	dc000215 	stw	r16,8(sp)
  8074f8:	2821883a 	mov	r16,r5
  8074fc:	980b883a 	mov	r5,r19
  807500:	ddc00915 	stw	r23,36(sp)
  807504:	dd800815 	stw	r22,32(sp)
  807508:	dd400715 	stw	r21,28(sp)
  80750c:	dd000615 	stw	r20,24(sp)
  807510:	dc800415 	stw	r18,16(sp)
  807514:	dc400315 	stw	r17,12(sp)
  807518:	dfc00a15 	stw	ra,40(sp)
  80751c:	3023883a 	mov	r17,r6
  807520:	382d883a 	mov	r22,r7
  807524:	ddc00b17 	ldw	r23,44(sp)
  807528:	080742c0 	call	80742c <_Balloc>
  80752c:	1025883a 	mov	r18,r2
  807530:	00a00034 	movhi	r2,32768
  807534:	10bfffc4 	addi	r2,r2,-1
  807538:	8888703a 	and	r4,r17,r2
  80753c:	202ad53a 	srli	r21,r4,20
  807540:	00800434 	movhi	r2,16
  807544:	10bfffc4 	addi	r2,r2,-1
  807548:	8886703a 	and	r3,r17,r2
  80754c:	a829003a 	cmpeq	r20,r21,zero
  807550:	800b883a 	mov	r5,r16
  807554:	d8c00115 	stw	r3,4(sp)
  807558:	94000504 	addi	r16,r18,20
  80755c:	a000021e 	bne	r20,zero,807568 <__d2b+0x80>
  807560:	18c00434 	orhi	r3,r3,16
  807564:	d8c00115 	stw	r3,4(sp)
  807568:	28002726 	beq	r5,zero,807608 <__d2b+0x120>
  80756c:	d809883a 	mov	r4,sp
  807570:	d9400015 	stw	r5,0(sp)
  807574:	0806f440 	call	806f44 <__lo0bits>
  807578:	100d883a 	mov	r6,r2
  80757c:	10003526 	beq	r2,zero,807654 <__d2b+0x16c>
  807580:	d8c00117 	ldw	r3,4(sp)
  807584:	00800804 	movi	r2,32
  807588:	1185c83a 	sub	r2,r2,r6
  80758c:	d9000017 	ldw	r4,0(sp)
  807590:	1886983a 	sll	r3,r3,r2
  807594:	1906b03a 	or	r3,r3,r4
  807598:	90c00515 	stw	r3,20(r18)
  80759c:	d8c00117 	ldw	r3,4(sp)
  8075a0:	1986d83a 	srl	r3,r3,r6
  8075a4:	d8c00115 	stw	r3,4(sp)
  8075a8:	180b003a 	cmpeq	r5,r3,zero
  8075ac:	00800084 	movi	r2,2
  8075b0:	114bc83a 	sub	r5,r2,r5
  8075b4:	80c00115 	stw	r3,4(r16)
  8075b8:	91400415 	stw	r5,16(r18)
  8075bc:	a0001a1e 	bne	r20,zero,807628 <__d2b+0x140>
  8075c0:	3545883a 	add	r2,r6,r21
  8075c4:	10bef344 	addi	r2,r2,-1075
  8075c8:	00c00d44 	movi	r3,53
  8075cc:	b0800015 	stw	r2,0(r22)
  8075d0:	1987c83a 	sub	r3,r3,r6
  8075d4:	b8c00015 	stw	r3,0(r23)
  8075d8:	9005883a 	mov	r2,r18
  8075dc:	dfc00a17 	ldw	ra,40(sp)
  8075e0:	ddc00917 	ldw	r23,36(sp)
  8075e4:	dd800817 	ldw	r22,32(sp)
  8075e8:	dd400717 	ldw	r21,28(sp)
  8075ec:	dd000617 	ldw	r20,24(sp)
  8075f0:	dcc00517 	ldw	r19,20(sp)
  8075f4:	dc800417 	ldw	r18,16(sp)
  8075f8:	dc400317 	ldw	r17,12(sp)
  8075fc:	dc000217 	ldw	r16,8(sp)
  807600:	dec00b04 	addi	sp,sp,44
  807604:	f800283a 	ret
  807608:	d9000104 	addi	r4,sp,4
  80760c:	0806f440 	call	806f44 <__lo0bits>
  807610:	11800804 	addi	r6,r2,32
  807614:	d8800117 	ldw	r2,4(sp)
  807618:	94c00415 	stw	r19,16(r18)
  80761c:	980b883a 	mov	r5,r19
  807620:	90800515 	stw	r2,20(r18)
  807624:	a03fe626 	beq	r20,zero,8075c0 <__d2b+0xd8>
  807628:	2945883a 	add	r2,r5,r5
  80762c:	1085883a 	add	r2,r2,r2
  807630:	1405883a 	add	r2,r2,r16
  807634:	113fff17 	ldw	r4,-4(r2)
  807638:	30fef384 	addi	r3,r6,-1074
  80763c:	2820917a 	slli	r16,r5,5
  807640:	b0c00015 	stw	r3,0(r22)
  807644:	0806ed40 	call	806ed4 <__hi0bits>
  807648:	80a1c83a 	sub	r16,r16,r2
  80764c:	bc000015 	stw	r16,0(r23)
  807650:	003fe106 	br	8075d8 <__d2b+0xf0>
  807654:	d8800017 	ldw	r2,0(sp)
  807658:	90800515 	stw	r2,20(r18)
  80765c:	d8c00117 	ldw	r3,4(sp)
  807660:	003fd106 	br	8075a8 <__d2b+0xc0>

00807664 <__mdiff>:
  807664:	defffb04 	addi	sp,sp,-20
  807668:	dc000015 	stw	r16,0(sp)
  80766c:	2821883a 	mov	r16,r5
  807670:	dc800215 	stw	r18,8(sp)
  807674:	300b883a 	mov	r5,r6
  807678:	2025883a 	mov	r18,r4
  80767c:	8009883a 	mov	r4,r16
  807680:	dc400115 	stw	r17,4(sp)
  807684:	dfc00415 	stw	ra,16(sp)
  807688:	dcc00315 	stw	r19,12(sp)
  80768c:	3023883a 	mov	r17,r6
  807690:	08070080 	call	807008 <__mcmp>
  807694:	10004226 	beq	r2,zero,8077a0 <__mdiff+0x13c>
  807698:	10005016 	blt	r2,zero,8077dc <__mdiff+0x178>
  80769c:	0027883a 	mov	r19,zero
  8076a0:	81400117 	ldw	r5,4(r16)
  8076a4:	9009883a 	mov	r4,r18
  8076a8:	080742c0 	call	80742c <_Balloc>
  8076ac:	1019883a 	mov	r12,r2
  8076b0:	82800417 	ldw	r10,16(r16)
  8076b4:	88800417 	ldw	r2,16(r17)
  8076b8:	81800504 	addi	r6,r16,20
  8076bc:	5287883a 	add	r3,r10,r10
  8076c0:	1085883a 	add	r2,r2,r2
  8076c4:	18c7883a 	add	r3,r3,r3
  8076c8:	1085883a 	add	r2,r2,r2
  8076cc:	8a000504 	addi	r8,r17,20
  8076d0:	64c00315 	stw	r19,12(r12)
  8076d4:	30db883a 	add	r13,r6,r3
  8076d8:	4097883a 	add	r11,r8,r2
  8076dc:	61c00504 	addi	r7,r12,20
  8076e0:	0013883a 	mov	r9,zero
  8076e4:	31000017 	ldw	r4,0(r6)
  8076e8:	41400017 	ldw	r5,0(r8)
  8076ec:	42000104 	addi	r8,r8,4
  8076f0:	20bfffcc 	andi	r2,r4,65535
  8076f4:	28ffffcc 	andi	r3,r5,65535
  8076f8:	10c5c83a 	sub	r2,r2,r3
  8076fc:	1245883a 	add	r2,r2,r9
  807700:	2008d43a 	srli	r4,r4,16
  807704:	280ad43a 	srli	r5,r5,16
  807708:	1007d43a 	srai	r3,r2,16
  80770c:	3880000d 	sth	r2,0(r7)
  807710:	2149c83a 	sub	r4,r4,r5
  807714:	20c9883a 	add	r4,r4,r3
  807718:	3900008d 	sth	r4,2(r7)
  80771c:	31800104 	addi	r6,r6,4
  807720:	39c00104 	addi	r7,r7,4
  807724:	2013d43a 	srai	r9,r4,16
  807728:	42ffee36 	bltu	r8,r11,8076e4 <__mdiff+0x80>
  80772c:	33400c2e 	bgeu	r6,r13,807760 <__mdiff+0xfc>
  807730:	30800017 	ldw	r2,0(r6)
  807734:	31800104 	addi	r6,r6,4
  807738:	10ffffcc 	andi	r3,r2,65535
  80773c:	1a47883a 	add	r3,r3,r9
  807740:	1004d43a 	srli	r2,r2,16
  807744:	1809d43a 	srai	r4,r3,16
  807748:	38c0000d 	sth	r3,0(r7)
  80774c:	1105883a 	add	r2,r2,r4
  807750:	3880008d 	sth	r2,2(r7)
  807754:	1013d43a 	srai	r9,r2,16
  807758:	39c00104 	addi	r7,r7,4
  80775c:	337ff436 	bltu	r6,r13,807730 <__mdiff+0xcc>
  807760:	38bfff17 	ldw	r2,-4(r7)
  807764:	38ffff04 	addi	r3,r7,-4
  807768:	1000041e 	bne	r2,zero,80777c <__mdiff+0x118>
  80776c:	18ffff04 	addi	r3,r3,-4
  807770:	18800017 	ldw	r2,0(r3)
  807774:	52bfffc4 	addi	r10,r10,-1
  807778:	103ffc26 	beq	r2,zero,80776c <__mdiff+0x108>
  80777c:	6005883a 	mov	r2,r12
  807780:	62800415 	stw	r10,16(r12)
  807784:	dfc00417 	ldw	ra,16(sp)
  807788:	dcc00317 	ldw	r19,12(sp)
  80778c:	dc800217 	ldw	r18,8(sp)
  807790:	dc400117 	ldw	r17,4(sp)
  807794:	dc000017 	ldw	r16,0(sp)
  807798:	dec00504 	addi	sp,sp,20
  80779c:	f800283a 	ret
  8077a0:	9009883a 	mov	r4,r18
  8077a4:	000b883a 	mov	r5,zero
  8077a8:	080742c0 	call	80742c <_Balloc>
  8077ac:	1019883a 	mov	r12,r2
  8077b0:	00800044 	movi	r2,1
  8077b4:	60800415 	stw	r2,16(r12)
  8077b8:	6005883a 	mov	r2,r12
  8077bc:	60000515 	stw	zero,20(r12)
  8077c0:	dfc00417 	ldw	ra,16(sp)
  8077c4:	dcc00317 	ldw	r19,12(sp)
  8077c8:	dc800217 	ldw	r18,8(sp)
  8077cc:	dc400117 	ldw	r17,4(sp)
  8077d0:	dc000017 	ldw	r16,0(sp)
  8077d4:	dec00504 	addi	sp,sp,20
  8077d8:	f800283a 	ret
  8077dc:	880d883a 	mov	r6,r17
  8077e0:	04c00044 	movi	r19,1
  8077e4:	8023883a 	mov	r17,r16
  8077e8:	3021883a 	mov	r16,r6
  8077ec:	003fac06 	br	8076a0 <__mdiff+0x3c>

008077f0 <__lshift>:
  8077f0:	defff904 	addi	sp,sp,-28
  8077f4:	28800417 	ldw	r2,16(r5)
  8077f8:	dc000015 	stw	r16,0(sp)
  8077fc:	3021d17a 	srai	r16,r6,5
  807800:	28c00217 	ldw	r3,8(r5)
  807804:	10800044 	addi	r2,r2,1
  807808:	dc400115 	stw	r17,4(sp)
  80780c:	80a3883a 	add	r17,r16,r2
  807810:	dd400515 	stw	r21,20(sp)
  807814:	dd000415 	stw	r20,16(sp)
  807818:	dc800215 	stw	r18,8(sp)
  80781c:	dfc00615 	stw	ra,24(sp)
  807820:	2825883a 	mov	r18,r5
  807824:	dcc00315 	stw	r19,12(sp)
  807828:	3029883a 	mov	r20,r6
  80782c:	202b883a 	mov	r21,r4
  807830:	29400117 	ldw	r5,4(r5)
  807834:	1c40030e 	bge	r3,r17,807844 <__lshift+0x54>
  807838:	18c7883a 	add	r3,r3,r3
  80783c:	29400044 	addi	r5,r5,1
  807840:	1c7ffd16 	blt	r3,r17,807838 <__lshift+0x48>
  807844:	a809883a 	mov	r4,r21
  807848:	080742c0 	call	80742c <_Balloc>
  80784c:	1027883a 	mov	r19,r2
  807850:	11400504 	addi	r5,r2,20
  807854:	0400090e 	bge	zero,r16,80787c <__lshift+0x8c>
  807858:	2805883a 	mov	r2,r5
  80785c:	0007883a 	mov	r3,zero
  807860:	18c00044 	addi	r3,r3,1
  807864:	10000015 	stw	zero,0(r2)
  807868:	10800104 	addi	r2,r2,4
  80786c:	80fffc1e 	bne	r16,r3,807860 <__lshift+0x70>
  807870:	8405883a 	add	r2,r16,r16
  807874:	1085883a 	add	r2,r2,r2
  807878:	288b883a 	add	r5,r5,r2
  80787c:	90800417 	ldw	r2,16(r18)
  807880:	91000504 	addi	r4,r18,20
  807884:	a18007cc 	andi	r6,r20,31
  807888:	1085883a 	add	r2,r2,r2
  80788c:	1085883a 	add	r2,r2,r2
  807890:	208f883a 	add	r7,r4,r2
  807894:	30001e26 	beq	r6,zero,807910 <__lshift+0x120>
  807898:	00800804 	movi	r2,32
  80789c:	1191c83a 	sub	r8,r2,r6
  8078a0:	0007883a 	mov	r3,zero
  8078a4:	20800017 	ldw	r2,0(r4)
  8078a8:	1184983a 	sll	r2,r2,r6
  8078ac:	1884b03a 	or	r2,r3,r2
  8078b0:	28800015 	stw	r2,0(r5)
  8078b4:	20c00017 	ldw	r3,0(r4)
  8078b8:	21000104 	addi	r4,r4,4
  8078bc:	29400104 	addi	r5,r5,4
  8078c0:	1a06d83a 	srl	r3,r3,r8
  8078c4:	21fff736 	bltu	r4,r7,8078a4 <__lshift+0xb4>
  8078c8:	28c00015 	stw	r3,0(r5)
  8078cc:	18000126 	beq	r3,zero,8078d4 <__lshift+0xe4>
  8078d0:	8c400044 	addi	r17,r17,1
  8078d4:	88bfffc4 	addi	r2,r17,-1
  8078d8:	98800415 	stw	r2,16(r19)
  8078dc:	a809883a 	mov	r4,r21
  8078e0:	900b883a 	mov	r5,r18
  8078e4:	0806eac0 	call	806eac <_Bfree>
  8078e8:	9805883a 	mov	r2,r19
  8078ec:	dfc00617 	ldw	ra,24(sp)
  8078f0:	dd400517 	ldw	r21,20(sp)
  8078f4:	dd000417 	ldw	r20,16(sp)
  8078f8:	dcc00317 	ldw	r19,12(sp)
  8078fc:	dc800217 	ldw	r18,8(sp)
  807900:	dc400117 	ldw	r17,4(sp)
  807904:	dc000017 	ldw	r16,0(sp)
  807908:	dec00704 	addi	sp,sp,28
  80790c:	f800283a 	ret
  807910:	20800017 	ldw	r2,0(r4)
  807914:	21000104 	addi	r4,r4,4
  807918:	28800015 	stw	r2,0(r5)
  80791c:	29400104 	addi	r5,r5,4
  807920:	21ffec2e 	bgeu	r4,r7,8078d4 <__lshift+0xe4>
  807924:	20800017 	ldw	r2,0(r4)
  807928:	21000104 	addi	r4,r4,4
  80792c:	28800015 	stw	r2,0(r5)
  807930:	29400104 	addi	r5,r5,4
  807934:	21fff636 	bltu	r4,r7,807910 <__lshift+0x120>
  807938:	003fe606 	br	8078d4 <__lshift+0xe4>

0080793c <__multiply>:
  80793c:	defff004 	addi	sp,sp,-64
  807940:	dc800815 	stw	r18,32(sp)
  807944:	dc400715 	stw	r17,28(sp)
  807948:	2c800417 	ldw	r18,16(r5)
  80794c:	34400417 	ldw	r17,16(r6)
  807950:	dcc00915 	stw	r19,36(sp)
  807954:	dc000615 	stw	r16,24(sp)
  807958:	dfc00f15 	stw	ra,60(sp)
  80795c:	df000e15 	stw	fp,56(sp)
  807960:	ddc00d15 	stw	r23,52(sp)
  807964:	dd800c15 	stw	r22,48(sp)
  807968:	dd400b15 	stw	r21,44(sp)
  80796c:	dd000a15 	stw	r20,40(sp)
  807970:	2821883a 	mov	r16,r5
  807974:	3027883a 	mov	r19,r6
  807978:	9440040e 	bge	r18,r17,80798c <__multiply+0x50>
  80797c:	8825883a 	mov	r18,r17
  807980:	2c400417 	ldw	r17,16(r5)
  807984:	2827883a 	mov	r19,r5
  807988:	3021883a 	mov	r16,r6
  80798c:	80800217 	ldw	r2,8(r16)
  807990:	9447883a 	add	r3,r18,r17
  807994:	d8c00415 	stw	r3,16(sp)
  807998:	81400117 	ldw	r5,4(r16)
  80799c:	10c0010e 	bge	r2,r3,8079a4 <__multiply+0x68>
  8079a0:	29400044 	addi	r5,r5,1
  8079a4:	080742c0 	call	80742c <_Balloc>
  8079a8:	d8800515 	stw	r2,20(sp)
  8079ac:	d9000417 	ldw	r4,16(sp)
  8079b0:	d8c00517 	ldw	r3,20(sp)
  8079b4:	2105883a 	add	r2,r4,r4
  8079b8:	1085883a 	add	r2,r2,r2
  8079bc:	19000504 	addi	r4,r3,20
  8079c0:	2085883a 	add	r2,r4,r2
  8079c4:	d8800315 	stw	r2,12(sp)
  8079c8:	2080052e 	bgeu	r4,r2,8079e0 <__multiply+0xa4>
  8079cc:	2005883a 	mov	r2,r4
  8079d0:	d8c00317 	ldw	r3,12(sp)
  8079d4:	10000015 	stw	zero,0(r2)
  8079d8:	10800104 	addi	r2,r2,4
  8079dc:	10fffc36 	bltu	r2,r3,8079d0 <__multiply+0x94>
  8079e0:	8c45883a 	add	r2,r17,r17
  8079e4:	9487883a 	add	r3,r18,r18
  8079e8:	9dc00504 	addi	r23,r19,20
  8079ec:	1085883a 	add	r2,r2,r2
  8079f0:	84000504 	addi	r16,r16,20
  8079f4:	18c7883a 	add	r3,r3,r3
  8079f8:	b885883a 	add	r2,r23,r2
  8079fc:	dc000015 	stw	r16,0(sp)
  807a00:	d8800215 	stw	r2,8(sp)
  807a04:	80f9883a 	add	fp,r16,r3
  807a08:	b880432e 	bgeu	r23,r2,807b18 <__multiply+0x1dc>
  807a0c:	d9000115 	stw	r4,4(sp)
  807a10:	b9000017 	ldw	r4,0(r23)
  807a14:	253fffcc 	andi	r20,r4,65535
  807a18:	a0001a26 	beq	r20,zero,807a84 <__multiply+0x148>
  807a1c:	dcc00017 	ldw	r19,0(sp)
  807a20:	dc800117 	ldw	r18,4(sp)
  807a24:	002b883a 	mov	r21,zero
  807a28:	9c400017 	ldw	r17,0(r19)
  807a2c:	94000017 	ldw	r16,0(r18)
  807a30:	a009883a 	mov	r4,r20
  807a34:	897fffcc 	andi	r5,r17,65535
  807a38:	08017b40 	call	8017b4 <__mulsi3>
  807a3c:	880ad43a 	srli	r5,r17,16
  807a40:	80ffffcc 	andi	r3,r16,65535
  807a44:	a8c7883a 	add	r3,r21,r3
  807a48:	a009883a 	mov	r4,r20
  807a4c:	10e3883a 	add	r17,r2,r3
  807a50:	8020d43a 	srli	r16,r16,16
  807a54:	08017b40 	call	8017b4 <__mulsi3>
  807a58:	8806d43a 	srli	r3,r17,16
  807a5c:	1405883a 	add	r2,r2,r16
  807a60:	9cc00104 	addi	r19,r19,4
  807a64:	1887883a 	add	r3,r3,r2
  807a68:	90c0008d 	sth	r3,2(r18)
  807a6c:	9440000d 	sth	r17,0(r18)
  807a70:	182ad43a 	srli	r21,r3,16
  807a74:	94800104 	addi	r18,r18,4
  807a78:	9f3feb36 	bltu	r19,fp,807a28 <__multiply+0xec>
  807a7c:	95400015 	stw	r21,0(r18)
  807a80:	b9000017 	ldw	r4,0(r23)
  807a84:	202ad43a 	srli	r21,r4,16
  807a88:	a8001c26 	beq	r21,zero,807afc <__multiply+0x1c0>
  807a8c:	d9000117 	ldw	r4,4(sp)
  807a90:	dd000017 	ldw	r20,0(sp)
  807a94:	002d883a 	mov	r22,zero
  807a98:	24c00017 	ldw	r19,0(r4)
  807a9c:	2025883a 	mov	r18,r4
  807aa0:	9823883a 	mov	r17,r19
  807aa4:	a4000017 	ldw	r16,0(r20)
  807aa8:	a809883a 	mov	r4,r21
  807aac:	a5000104 	addi	r20,r20,4
  807ab0:	817fffcc 	andi	r5,r16,65535
  807ab4:	08017b40 	call	8017b4 <__mulsi3>
  807ab8:	8806d43a 	srli	r3,r17,16
  807abc:	800ad43a 	srli	r5,r16,16
  807ac0:	94c0000d 	sth	r19,0(r18)
  807ac4:	b0c7883a 	add	r3,r22,r3
  807ac8:	10e1883a 	add	r16,r2,r3
  807acc:	9400008d 	sth	r16,2(r18)
  807ad0:	a809883a 	mov	r4,r21
  807ad4:	94800104 	addi	r18,r18,4
  807ad8:	08017b40 	call	8017b4 <__mulsi3>
  807adc:	94400017 	ldw	r17,0(r18)
  807ae0:	8020d43a 	srli	r16,r16,16
  807ae4:	88ffffcc 	andi	r3,r17,65535
  807ae8:	10c5883a 	add	r2,r2,r3
  807aec:	80a7883a 	add	r19,r16,r2
  807af0:	982cd43a 	srli	r22,r19,16
  807af4:	a73feb36 	bltu	r20,fp,807aa4 <__multiply+0x168>
  807af8:	94c00015 	stw	r19,0(r18)
  807afc:	d8800217 	ldw	r2,8(sp)
  807b00:	bdc00104 	addi	r23,r23,4
  807b04:	b880042e 	bgeu	r23,r2,807b18 <__multiply+0x1dc>
  807b08:	d8c00117 	ldw	r3,4(sp)
  807b0c:	18c00104 	addi	r3,r3,4
  807b10:	d8c00115 	stw	r3,4(sp)
  807b14:	003fbe06 	br	807a10 <__multiply+0xd4>
  807b18:	d9000417 	ldw	r4,16(sp)
  807b1c:	01000c0e 	bge	zero,r4,807b50 <__multiply+0x214>
  807b20:	d8c00317 	ldw	r3,12(sp)
  807b24:	18bfff17 	ldw	r2,-4(r3)
  807b28:	18ffff04 	addi	r3,r3,-4
  807b2c:	10000326 	beq	r2,zero,807b3c <__multiply+0x200>
  807b30:	00000706 	br	807b50 <__multiply+0x214>
  807b34:	18800017 	ldw	r2,0(r3)
  807b38:	1000051e 	bne	r2,zero,807b50 <__multiply+0x214>
  807b3c:	d9000417 	ldw	r4,16(sp)
  807b40:	18ffff04 	addi	r3,r3,-4
  807b44:	213fffc4 	addi	r4,r4,-1
  807b48:	d9000415 	stw	r4,16(sp)
  807b4c:	203ff91e 	bne	r4,zero,807b34 <__multiply+0x1f8>
  807b50:	d8800417 	ldw	r2,16(sp)
  807b54:	d8c00517 	ldw	r3,20(sp)
  807b58:	18800415 	stw	r2,16(r3)
  807b5c:	1805883a 	mov	r2,r3
  807b60:	dfc00f17 	ldw	ra,60(sp)
  807b64:	df000e17 	ldw	fp,56(sp)
  807b68:	ddc00d17 	ldw	r23,52(sp)
  807b6c:	dd800c17 	ldw	r22,48(sp)
  807b70:	dd400b17 	ldw	r21,44(sp)
  807b74:	dd000a17 	ldw	r20,40(sp)
  807b78:	dcc00917 	ldw	r19,36(sp)
  807b7c:	dc800817 	ldw	r18,32(sp)
  807b80:	dc400717 	ldw	r17,28(sp)
  807b84:	dc000617 	ldw	r16,24(sp)
  807b88:	dec01004 	addi	sp,sp,64
  807b8c:	f800283a 	ret

00807b90 <__i2b>:
  807b90:	defffd04 	addi	sp,sp,-12
  807b94:	dc000015 	stw	r16,0(sp)
  807b98:	04000044 	movi	r16,1
  807b9c:	dc800115 	stw	r18,4(sp)
  807ba0:	2825883a 	mov	r18,r5
  807ba4:	800b883a 	mov	r5,r16
  807ba8:	dfc00215 	stw	ra,8(sp)
  807bac:	080742c0 	call	80742c <_Balloc>
  807bb0:	14000415 	stw	r16,16(r2)
  807bb4:	14800515 	stw	r18,20(r2)
  807bb8:	dfc00217 	ldw	ra,8(sp)
  807bbc:	dc800117 	ldw	r18,4(sp)
  807bc0:	dc000017 	ldw	r16,0(sp)
  807bc4:	dec00304 	addi	sp,sp,12
  807bc8:	f800283a 	ret

00807bcc <__multadd>:
  807bcc:	defff604 	addi	sp,sp,-40
  807bd0:	dd800615 	stw	r22,24(sp)
  807bd4:	2d800417 	ldw	r22,16(r5)
  807bd8:	df000815 	stw	fp,32(sp)
  807bdc:	ddc00715 	stw	r23,28(sp)
  807be0:	dd400515 	stw	r21,20(sp)
  807be4:	dd000415 	stw	r20,16(sp)
  807be8:	dcc00315 	stw	r19,12(sp)
  807bec:	dc800215 	stw	r18,8(sp)
  807bf0:	dfc00915 	stw	ra,36(sp)
  807bf4:	dc400115 	stw	r17,4(sp)
  807bf8:	dc000015 	stw	r16,0(sp)
  807bfc:	282f883a 	mov	r23,r5
  807c00:	2039883a 	mov	fp,r4
  807c04:	302b883a 	mov	r21,r6
  807c08:	3829883a 	mov	r20,r7
  807c0c:	2c800504 	addi	r18,r5,20
  807c10:	0027883a 	mov	r19,zero
  807c14:	94400017 	ldw	r17,0(r18)
  807c18:	a80b883a 	mov	r5,r21
  807c1c:	9cc00044 	addi	r19,r19,1
  807c20:	893fffcc 	andi	r4,r17,65535
  807c24:	08017b40 	call	8017b4 <__mulsi3>
  807c28:	8808d43a 	srli	r4,r17,16
  807c2c:	1521883a 	add	r16,r2,r20
  807c30:	a80b883a 	mov	r5,r21
  807c34:	08017b40 	call	8017b4 <__mulsi3>
  807c38:	8008d43a 	srli	r4,r16,16
  807c3c:	843fffcc 	andi	r16,r16,65535
  807c40:	1105883a 	add	r2,r2,r4
  807c44:	1006943a 	slli	r3,r2,16
  807c48:	1028d43a 	srli	r20,r2,16
  807c4c:	1c07883a 	add	r3,r3,r16
  807c50:	90c00015 	stw	r3,0(r18)
  807c54:	94800104 	addi	r18,r18,4
  807c58:	9dbfee16 	blt	r19,r22,807c14 <__multadd+0x48>
  807c5c:	a0000826 	beq	r20,zero,807c80 <__multadd+0xb4>
  807c60:	b8800217 	ldw	r2,8(r23)
  807c64:	b080130e 	bge	r22,r2,807cb4 <__multadd+0xe8>
  807c68:	b585883a 	add	r2,r22,r22
  807c6c:	1085883a 	add	r2,r2,r2
  807c70:	15c5883a 	add	r2,r2,r23
  807c74:	b0c00044 	addi	r3,r22,1
  807c78:	15000515 	stw	r20,20(r2)
  807c7c:	b8c00415 	stw	r3,16(r23)
  807c80:	b805883a 	mov	r2,r23
  807c84:	dfc00917 	ldw	ra,36(sp)
  807c88:	df000817 	ldw	fp,32(sp)
  807c8c:	ddc00717 	ldw	r23,28(sp)
  807c90:	dd800617 	ldw	r22,24(sp)
  807c94:	dd400517 	ldw	r21,20(sp)
  807c98:	dd000417 	ldw	r20,16(sp)
  807c9c:	dcc00317 	ldw	r19,12(sp)
  807ca0:	dc800217 	ldw	r18,8(sp)
  807ca4:	dc400117 	ldw	r17,4(sp)
  807ca8:	dc000017 	ldw	r16,0(sp)
  807cac:	dec00a04 	addi	sp,sp,40
  807cb0:	f800283a 	ret
  807cb4:	b9400117 	ldw	r5,4(r23)
  807cb8:	e009883a 	mov	r4,fp
  807cbc:	29400044 	addi	r5,r5,1
  807cc0:	080742c0 	call	80742c <_Balloc>
  807cc4:	b9800417 	ldw	r6,16(r23)
  807cc8:	b9400304 	addi	r5,r23,12
  807ccc:	11000304 	addi	r4,r2,12
  807cd0:	318d883a 	add	r6,r6,r6
  807cd4:	318d883a 	add	r6,r6,r6
  807cd8:	31800204 	addi	r6,r6,8
  807cdc:	1023883a 	mov	r17,r2
  807ce0:	0806c940 	call	806c94 <memcpy>
  807ce4:	b80b883a 	mov	r5,r23
  807ce8:	e009883a 	mov	r4,fp
  807cec:	0806eac0 	call	806eac <_Bfree>
  807cf0:	882f883a 	mov	r23,r17
  807cf4:	003fdc06 	br	807c68 <__multadd+0x9c>

00807cf8 <__pow5mult>:
  807cf8:	defffa04 	addi	sp,sp,-24
  807cfc:	308000cc 	andi	r2,r6,3
  807d00:	dd000415 	stw	r20,16(sp)
  807d04:	dcc00315 	stw	r19,12(sp)
  807d08:	dc000015 	stw	r16,0(sp)
  807d0c:	dfc00515 	stw	ra,20(sp)
  807d10:	dc800215 	stw	r18,8(sp)
  807d14:	dc400115 	stw	r17,4(sp)
  807d18:	3021883a 	mov	r16,r6
  807d1c:	2027883a 	mov	r19,r4
  807d20:	2829883a 	mov	r20,r5
  807d24:	10002b1e 	bne	r2,zero,807dd4 <__pow5mult+0xdc>
  807d28:	8025d0ba 	srai	r18,r16,2
  807d2c:	90001b26 	beq	r18,zero,807d9c <__pow5mult+0xa4>
  807d30:	9c001217 	ldw	r16,72(r19)
  807d34:	8000081e 	bne	r16,zero,807d58 <__pow5mult+0x60>
  807d38:	00003006 	br	807dfc <__pow5mult+0x104>
  807d3c:	800b883a 	mov	r5,r16
  807d40:	800d883a 	mov	r6,r16
  807d44:	9809883a 	mov	r4,r19
  807d48:	90001426 	beq	r18,zero,807d9c <__pow5mult+0xa4>
  807d4c:	80800017 	ldw	r2,0(r16)
  807d50:	10001b26 	beq	r2,zero,807dc0 <__pow5mult+0xc8>
  807d54:	1021883a 	mov	r16,r2
  807d58:	9080004c 	andi	r2,r18,1
  807d5c:	1005003a 	cmpeq	r2,r2,zero
  807d60:	9025d07a 	srai	r18,r18,1
  807d64:	800d883a 	mov	r6,r16
  807d68:	9809883a 	mov	r4,r19
  807d6c:	a00b883a 	mov	r5,r20
  807d70:	103ff21e 	bne	r2,zero,807d3c <__pow5mult+0x44>
  807d74:	080793c0 	call	80793c <__multiply>
  807d78:	a00b883a 	mov	r5,r20
  807d7c:	9809883a 	mov	r4,r19
  807d80:	1023883a 	mov	r17,r2
  807d84:	0806eac0 	call	806eac <_Bfree>
  807d88:	8829883a 	mov	r20,r17
  807d8c:	800b883a 	mov	r5,r16
  807d90:	800d883a 	mov	r6,r16
  807d94:	9809883a 	mov	r4,r19
  807d98:	903fec1e 	bne	r18,zero,807d4c <__pow5mult+0x54>
  807d9c:	a005883a 	mov	r2,r20
  807da0:	dfc00517 	ldw	ra,20(sp)
  807da4:	dd000417 	ldw	r20,16(sp)
  807da8:	dcc00317 	ldw	r19,12(sp)
  807dac:	dc800217 	ldw	r18,8(sp)
  807db0:	dc400117 	ldw	r17,4(sp)
  807db4:	dc000017 	ldw	r16,0(sp)
  807db8:	dec00604 	addi	sp,sp,24
  807dbc:	f800283a 	ret
  807dc0:	080793c0 	call	80793c <__multiply>
  807dc4:	80800015 	stw	r2,0(r16)
  807dc8:	1021883a 	mov	r16,r2
  807dcc:	10000015 	stw	zero,0(r2)
  807dd0:	003fe106 	br	807d58 <__pow5mult+0x60>
  807dd4:	1085883a 	add	r2,r2,r2
  807dd8:	00c02074 	movhi	r3,129
  807ddc:	18d24804 	addi	r3,r3,18720
  807de0:	1085883a 	add	r2,r2,r2
  807de4:	10c5883a 	add	r2,r2,r3
  807de8:	11bfff17 	ldw	r6,-4(r2)
  807dec:	000f883a 	mov	r7,zero
  807df0:	0807bcc0 	call	807bcc <__multadd>
  807df4:	1029883a 	mov	r20,r2
  807df8:	003fcb06 	br	807d28 <__pow5mult+0x30>
  807dfc:	9809883a 	mov	r4,r19
  807e00:	01409c44 	movi	r5,625
  807e04:	0807b900 	call	807b90 <__i2b>
  807e08:	98801215 	stw	r2,72(r19)
  807e0c:	1021883a 	mov	r16,r2
  807e10:	10000015 	stw	zero,0(r2)
  807e14:	003fd006 	br	807d58 <__pow5mult+0x60>

00807e18 <__s2b>:
  807e18:	defff904 	addi	sp,sp,-28
  807e1c:	dcc00315 	stw	r19,12(sp)
  807e20:	dc800215 	stw	r18,8(sp)
  807e24:	2827883a 	mov	r19,r5
  807e28:	2025883a 	mov	r18,r4
  807e2c:	01400244 	movi	r5,9
  807e30:	39000204 	addi	r4,r7,8
  807e34:	dd000415 	stw	r20,16(sp)
  807e38:	dc400115 	stw	r17,4(sp)
  807e3c:	dfc00615 	stw	ra,24(sp)
  807e40:	dd400515 	stw	r21,20(sp)
  807e44:	dc000015 	stw	r16,0(sp)
  807e48:	3829883a 	mov	r20,r7
  807e4c:	3023883a 	mov	r17,r6
  807e50:	08016e40 	call	8016e4 <__divsi3>
  807e54:	00c00044 	movi	r3,1
  807e58:	1880350e 	bge	r3,r2,807f30 <__s2b+0x118>
  807e5c:	000b883a 	mov	r5,zero
  807e60:	18c7883a 	add	r3,r3,r3
  807e64:	29400044 	addi	r5,r5,1
  807e68:	18bffd16 	blt	r3,r2,807e60 <__s2b+0x48>
  807e6c:	9009883a 	mov	r4,r18
  807e70:	080742c0 	call	80742c <_Balloc>
  807e74:	1011883a 	mov	r8,r2
  807e78:	d8800717 	ldw	r2,28(sp)
  807e7c:	00c00044 	movi	r3,1
  807e80:	01800244 	movi	r6,9
  807e84:	40800515 	stw	r2,20(r8)
  807e88:	40c00415 	stw	r3,16(r8)
  807e8c:	3440260e 	bge	r6,r17,807f28 <__s2b+0x110>
  807e90:	3021883a 	mov	r16,r6
  807e94:	99ab883a 	add	r21,r19,r6
  807e98:	9c05883a 	add	r2,r19,r16
  807e9c:	11c00007 	ldb	r7,0(r2)
  807ea0:	400b883a 	mov	r5,r8
  807ea4:	9009883a 	mov	r4,r18
  807ea8:	39fff404 	addi	r7,r7,-48
  807eac:	01800284 	movi	r6,10
  807eb0:	0807bcc0 	call	807bcc <__multadd>
  807eb4:	84000044 	addi	r16,r16,1
  807eb8:	1011883a 	mov	r8,r2
  807ebc:	8c3ff61e 	bne	r17,r16,807e98 <__s2b+0x80>
  807ec0:	ac45883a 	add	r2,r21,r17
  807ec4:	117ffe04 	addi	r5,r2,-8
  807ec8:	880d883a 	mov	r6,r17
  807ecc:	35000c0e 	bge	r6,r20,807f00 <__s2b+0xe8>
  807ed0:	a185c83a 	sub	r2,r20,r6
  807ed4:	2821883a 	mov	r16,r5
  807ed8:	28a3883a 	add	r17,r5,r2
  807edc:	81c00007 	ldb	r7,0(r16)
  807ee0:	400b883a 	mov	r5,r8
  807ee4:	9009883a 	mov	r4,r18
  807ee8:	39fff404 	addi	r7,r7,-48
  807eec:	01800284 	movi	r6,10
  807ef0:	0807bcc0 	call	807bcc <__multadd>
  807ef4:	84000044 	addi	r16,r16,1
  807ef8:	1011883a 	mov	r8,r2
  807efc:	847ff71e 	bne	r16,r17,807edc <__s2b+0xc4>
  807f00:	4005883a 	mov	r2,r8
  807f04:	dfc00617 	ldw	ra,24(sp)
  807f08:	dd400517 	ldw	r21,20(sp)
  807f0c:	dd000417 	ldw	r20,16(sp)
  807f10:	dcc00317 	ldw	r19,12(sp)
  807f14:	dc800217 	ldw	r18,8(sp)
  807f18:	dc400117 	ldw	r17,4(sp)
  807f1c:	dc000017 	ldw	r16,0(sp)
  807f20:	dec00704 	addi	sp,sp,28
  807f24:	f800283a 	ret
  807f28:	99400284 	addi	r5,r19,10
  807f2c:	003fe706 	br	807ecc <__s2b+0xb4>
  807f30:	000b883a 	mov	r5,zero
  807f34:	003fcd06 	br	807e6c <__s2b+0x54>

00807f38 <_realloc_r>:
  807f38:	defff404 	addi	sp,sp,-48
  807f3c:	dd800815 	stw	r22,32(sp)
  807f40:	dc800415 	stw	r18,16(sp)
  807f44:	dc400315 	stw	r17,12(sp)
  807f48:	dfc00b15 	stw	ra,44(sp)
  807f4c:	df000a15 	stw	fp,40(sp)
  807f50:	ddc00915 	stw	r23,36(sp)
  807f54:	dd400715 	stw	r21,28(sp)
  807f58:	dd000615 	stw	r20,24(sp)
  807f5c:	dcc00515 	stw	r19,20(sp)
  807f60:	dc000215 	stw	r16,8(sp)
  807f64:	2825883a 	mov	r18,r5
  807f68:	3023883a 	mov	r17,r6
  807f6c:	202d883a 	mov	r22,r4
  807f70:	2800c926 	beq	r5,zero,808298 <_realloc_r+0x360>
  807f74:	080b8e40 	call	80b8e4 <__malloc_lock>
  807f78:	943ffe04 	addi	r16,r18,-8
  807f7c:	88c002c4 	addi	r3,r17,11
  807f80:	00800584 	movi	r2,22
  807f84:	82000117 	ldw	r8,4(r16)
  807f88:	10c01b2e 	bgeu	r2,r3,807ff8 <_realloc_r+0xc0>
  807f8c:	00bffe04 	movi	r2,-8
  807f90:	188e703a 	and	r7,r3,r2
  807f94:	3839883a 	mov	fp,r7
  807f98:	38001a16 	blt	r7,zero,808004 <_realloc_r+0xcc>
  807f9c:	e4401936 	bltu	fp,r17,808004 <_realloc_r+0xcc>
  807fa0:	013fff04 	movi	r4,-4
  807fa4:	4126703a 	and	r19,r8,r4
  807fa8:	99c02616 	blt	r19,r7,808044 <_realloc_r+0x10c>
  807fac:	802b883a 	mov	r21,r16
  807fb0:	9829883a 	mov	r20,r19
  807fb4:	84000204 	addi	r16,r16,8
  807fb8:	a80f883a 	mov	r7,r21
  807fbc:	a70dc83a 	sub	r6,r20,fp
  807fc0:	008003c4 	movi	r2,15
  807fc4:	1180c136 	bltu	r2,r6,8082cc <_realloc_r+0x394>
  807fc8:	38800117 	ldw	r2,4(r7)
  807fcc:	a549883a 	add	r4,r20,r21
  807fd0:	1080004c 	andi	r2,r2,1
  807fd4:	a084b03a 	or	r2,r20,r2
  807fd8:	38800115 	stw	r2,4(r7)
  807fdc:	20c00117 	ldw	r3,4(r4)
  807fe0:	18c00054 	ori	r3,r3,1
  807fe4:	20c00115 	stw	r3,4(r4)
  807fe8:	b009883a 	mov	r4,r22
  807fec:	080b9040 	call	80b904 <__malloc_unlock>
  807ff0:	8023883a 	mov	r17,r16
  807ff4:	00000606 	br	808010 <_realloc_r+0xd8>
  807ff8:	01c00404 	movi	r7,16
  807ffc:	3839883a 	mov	fp,r7
  808000:	e47fe72e 	bgeu	fp,r17,807fa0 <_realloc_r+0x68>
  808004:	00800304 	movi	r2,12
  808008:	0023883a 	mov	r17,zero
  80800c:	b0800015 	stw	r2,0(r22)
  808010:	8805883a 	mov	r2,r17
  808014:	dfc00b17 	ldw	ra,44(sp)
  808018:	df000a17 	ldw	fp,40(sp)
  80801c:	ddc00917 	ldw	r23,36(sp)
  808020:	dd800817 	ldw	r22,32(sp)
  808024:	dd400717 	ldw	r21,28(sp)
  808028:	dd000617 	ldw	r20,24(sp)
  80802c:	dcc00517 	ldw	r19,20(sp)
  808030:	dc800417 	ldw	r18,16(sp)
  808034:	dc400317 	ldw	r17,12(sp)
  808038:	dc000217 	ldw	r16,8(sp)
  80803c:	dec00c04 	addi	sp,sp,48
  808040:	f800283a 	ret
  808044:	00802074 	movhi	r2,129
  808048:	1092e904 	addi	r2,r2,19364
  80804c:	12400217 	ldw	r9,8(r2)
  808050:	84cd883a 	add	r6,r16,r19
  808054:	802b883a 	mov	r21,r16
  808058:	3240b926 	beq	r6,r9,808340 <_realloc_r+0x408>
  80805c:	31400117 	ldw	r5,4(r6)
  808060:	00bfff84 	movi	r2,-2
  808064:	2884703a 	and	r2,r5,r2
  808068:	1185883a 	add	r2,r2,r6
  80806c:	10c00117 	ldw	r3,4(r2)
  808070:	18c0004c 	andi	r3,r3,1
  808074:	1807003a 	cmpeq	r3,r3,zero
  808078:	1800a326 	beq	r3,zero,808308 <_realloc_r+0x3d0>
  80807c:	2908703a 	and	r4,r5,r4
  808080:	9929883a 	add	r20,r19,r4
  808084:	a1c0a30e 	bge	r20,r7,808314 <_realloc_r+0x3dc>
  808088:	4080004c 	andi	r2,r8,1
  80808c:	1000551e 	bne	r2,zero,8081e4 <_realloc_r+0x2ac>
  808090:	80800017 	ldw	r2,0(r16)
  808094:	80afc83a 	sub	r23,r16,r2
  808098:	b8c00117 	ldw	r3,4(r23)
  80809c:	00bfff04 	movi	r2,-4
  8080a0:	1884703a 	and	r2,r3,r2
  8080a4:	30002e26 	beq	r6,zero,808160 <_realloc_r+0x228>
  8080a8:	3240b926 	beq	r6,r9,808390 <_realloc_r+0x458>
  8080ac:	98a9883a 	add	r20,r19,r2
  8080b0:	2509883a 	add	r4,r4,r20
  8080b4:	d9000015 	stw	r4,0(sp)
  8080b8:	21c02a16 	blt	r4,r7,808164 <_realloc_r+0x22c>
  8080bc:	30800317 	ldw	r2,12(r6)
  8080c0:	30c00217 	ldw	r3,8(r6)
  8080c4:	01400904 	movi	r5,36
  8080c8:	99bfff04 	addi	r6,r19,-4
  8080cc:	18800315 	stw	r2,12(r3)
  8080d0:	10c00215 	stw	r3,8(r2)
  8080d4:	b9000317 	ldw	r4,12(r23)
  8080d8:	b8800217 	ldw	r2,8(r23)
  8080dc:	b82b883a 	mov	r21,r23
  8080e0:	bc000204 	addi	r16,r23,8
  8080e4:	20800215 	stw	r2,8(r4)
  8080e8:	11000315 	stw	r4,12(r2)
  8080ec:	2980e436 	bltu	r5,r6,808480 <_realloc_r+0x548>
  8080f0:	008004c4 	movi	r2,19
  8080f4:	9009883a 	mov	r4,r18
  8080f8:	8011883a 	mov	r8,r16
  8080fc:	11800f2e 	bgeu	r2,r6,80813c <_realloc_r+0x204>
  808100:	90800017 	ldw	r2,0(r18)
  808104:	ba000404 	addi	r8,r23,16
  808108:	91000204 	addi	r4,r18,8
  80810c:	b8800215 	stw	r2,8(r23)
  808110:	90c00117 	ldw	r3,4(r18)
  808114:	008006c4 	movi	r2,27
  808118:	b8c00315 	stw	r3,12(r23)
  80811c:	1180072e 	bgeu	r2,r6,80813c <_realloc_r+0x204>
  808120:	90c00217 	ldw	r3,8(r18)
  808124:	ba000604 	addi	r8,r23,24
  808128:	91000404 	addi	r4,r18,16
  80812c:	b8c00415 	stw	r3,16(r23)
  808130:	90800317 	ldw	r2,12(r18)
  808134:	b8800515 	stw	r2,20(r23)
  808138:	3140e726 	beq	r6,r5,8084d8 <_realloc_r+0x5a0>
  80813c:	20800017 	ldw	r2,0(r4)
  808140:	dd000017 	ldw	r20,0(sp)
  808144:	b80f883a 	mov	r7,r23
  808148:	40800015 	stw	r2,0(r8)
  80814c:	20c00117 	ldw	r3,4(r4)
  808150:	40c00115 	stw	r3,4(r8)
  808154:	20800217 	ldw	r2,8(r4)
  808158:	40800215 	stw	r2,8(r8)
  80815c:	003f9706 	br	807fbc <_realloc_r+0x84>
  808160:	98a9883a 	add	r20,r19,r2
  808164:	a1c01f16 	blt	r20,r7,8081e4 <_realloc_r+0x2ac>
  808168:	b8c00317 	ldw	r3,12(r23)
  80816c:	b8800217 	ldw	r2,8(r23)
  808170:	99bfff04 	addi	r6,r19,-4
  808174:	01400904 	movi	r5,36
  808178:	b82b883a 	mov	r21,r23
  80817c:	18800215 	stw	r2,8(r3)
  808180:	10c00315 	stw	r3,12(r2)
  808184:	bc000204 	addi	r16,r23,8
  808188:	2980c336 	bltu	r5,r6,808498 <_realloc_r+0x560>
  80818c:	008004c4 	movi	r2,19
  808190:	9009883a 	mov	r4,r18
  808194:	8011883a 	mov	r8,r16
  808198:	11800f2e 	bgeu	r2,r6,8081d8 <_realloc_r+0x2a0>
  80819c:	90800017 	ldw	r2,0(r18)
  8081a0:	ba000404 	addi	r8,r23,16
  8081a4:	91000204 	addi	r4,r18,8
  8081a8:	b8800215 	stw	r2,8(r23)
  8081ac:	90c00117 	ldw	r3,4(r18)
  8081b0:	008006c4 	movi	r2,27
  8081b4:	b8c00315 	stw	r3,12(r23)
  8081b8:	1180072e 	bgeu	r2,r6,8081d8 <_realloc_r+0x2a0>
  8081bc:	90c00217 	ldw	r3,8(r18)
  8081c0:	ba000604 	addi	r8,r23,24
  8081c4:	91000404 	addi	r4,r18,16
  8081c8:	b8c00415 	stw	r3,16(r23)
  8081cc:	90800317 	ldw	r2,12(r18)
  8081d0:	b8800515 	stw	r2,20(r23)
  8081d4:	3140c726 	beq	r6,r5,8084f4 <_realloc_r+0x5bc>
  8081d8:	20800017 	ldw	r2,0(r4)
  8081dc:	b80f883a 	mov	r7,r23
  8081e0:	003fd906 	br	808148 <_realloc_r+0x210>
  8081e4:	880b883a 	mov	r5,r17
  8081e8:	b009883a 	mov	r4,r22
  8081ec:	08018140 	call	801814 <_malloc_r>
  8081f0:	1023883a 	mov	r17,r2
  8081f4:	10002526 	beq	r2,zero,80828c <_realloc_r+0x354>
  8081f8:	80800117 	ldw	r2,4(r16)
  8081fc:	00ffff84 	movi	r3,-2
  808200:	893ffe04 	addi	r4,r17,-8
  808204:	10c4703a 	and	r2,r2,r3
  808208:	8085883a 	add	r2,r16,r2
  80820c:	20809526 	beq	r4,r2,808464 <_realloc_r+0x52c>
  808210:	99bfff04 	addi	r6,r19,-4
  808214:	01c00904 	movi	r7,36
  808218:	39804536 	bltu	r7,r6,808330 <_realloc_r+0x3f8>
  80821c:	008004c4 	movi	r2,19
  808220:	9009883a 	mov	r4,r18
  808224:	880b883a 	mov	r5,r17
  808228:	11800f2e 	bgeu	r2,r6,808268 <_realloc_r+0x330>
  80822c:	90800017 	ldw	r2,0(r18)
  808230:	89400204 	addi	r5,r17,8
  808234:	91000204 	addi	r4,r18,8
  808238:	88800015 	stw	r2,0(r17)
  80823c:	90c00117 	ldw	r3,4(r18)
  808240:	008006c4 	movi	r2,27
  808244:	88c00115 	stw	r3,4(r17)
  808248:	1180072e 	bgeu	r2,r6,808268 <_realloc_r+0x330>
  80824c:	90c00217 	ldw	r3,8(r18)
  808250:	89400404 	addi	r5,r17,16
  808254:	91000404 	addi	r4,r18,16
  808258:	88c00215 	stw	r3,8(r17)
  80825c:	90800317 	ldw	r2,12(r18)
  808260:	88800315 	stw	r2,12(r17)
  808264:	31c09126 	beq	r6,r7,8084ac <_realloc_r+0x574>
  808268:	20800017 	ldw	r2,0(r4)
  80826c:	28800015 	stw	r2,0(r5)
  808270:	20c00117 	ldw	r3,4(r4)
  808274:	28c00115 	stw	r3,4(r5)
  808278:	20800217 	ldw	r2,8(r4)
  80827c:	28800215 	stw	r2,8(r5)
  808280:	900b883a 	mov	r5,r18
  808284:	b009883a 	mov	r4,r22
  808288:	08060280 	call	806028 <_free_r>
  80828c:	b009883a 	mov	r4,r22
  808290:	080b9040 	call	80b904 <__malloc_unlock>
  808294:	003f5e06 	br	808010 <_realloc_r+0xd8>
  808298:	300b883a 	mov	r5,r6
  80829c:	dfc00b17 	ldw	ra,44(sp)
  8082a0:	df000a17 	ldw	fp,40(sp)
  8082a4:	ddc00917 	ldw	r23,36(sp)
  8082a8:	dd800817 	ldw	r22,32(sp)
  8082ac:	dd400717 	ldw	r21,28(sp)
  8082b0:	dd000617 	ldw	r20,24(sp)
  8082b4:	dcc00517 	ldw	r19,20(sp)
  8082b8:	dc800417 	ldw	r18,16(sp)
  8082bc:	dc400317 	ldw	r17,12(sp)
  8082c0:	dc000217 	ldw	r16,8(sp)
  8082c4:	dec00c04 	addi	sp,sp,48
  8082c8:	08018141 	jmpi	801814 <_malloc_r>
  8082cc:	38800117 	ldw	r2,4(r7)
  8082d0:	e54b883a 	add	r5,fp,r21
  8082d4:	31000054 	ori	r4,r6,1
  8082d8:	1080004c 	andi	r2,r2,1
  8082dc:	1704b03a 	or	r2,r2,fp
  8082e0:	38800115 	stw	r2,4(r7)
  8082e4:	29000115 	stw	r4,4(r5)
  8082e8:	2987883a 	add	r3,r5,r6
  8082ec:	18800117 	ldw	r2,4(r3)
  8082f0:	29400204 	addi	r5,r5,8
  8082f4:	b009883a 	mov	r4,r22
  8082f8:	10800054 	ori	r2,r2,1
  8082fc:	18800115 	stw	r2,4(r3)
  808300:	08060280 	call	806028 <_free_r>
  808304:	003f3806 	br	807fe8 <_realloc_r+0xb0>
  808308:	000d883a 	mov	r6,zero
  80830c:	0009883a 	mov	r4,zero
  808310:	003f5d06 	br	808088 <_realloc_r+0x150>
  808314:	30c00217 	ldw	r3,8(r6)
  808318:	30800317 	ldw	r2,12(r6)
  80831c:	800f883a 	mov	r7,r16
  808320:	84000204 	addi	r16,r16,8
  808324:	10c00215 	stw	r3,8(r2)
  808328:	18800315 	stw	r2,12(r3)
  80832c:	003f2306 	br	807fbc <_realloc_r+0x84>
  808330:	8809883a 	mov	r4,r17
  808334:	900b883a 	mov	r5,r18
  808338:	0806d340 	call	806d34 <memmove>
  80833c:	003fd006 	br	808280 <_realloc_r+0x348>
  808340:	30800117 	ldw	r2,4(r6)
  808344:	e0c00404 	addi	r3,fp,16
  808348:	1108703a 	and	r4,r2,r4
  80834c:	9905883a 	add	r2,r19,r4
  808350:	10ff4d16 	blt	r2,r3,808088 <_realloc_r+0x150>
  808354:	1705c83a 	sub	r2,r2,fp
  808358:	870b883a 	add	r5,r16,fp
  80835c:	10800054 	ori	r2,r2,1
  808360:	28800115 	stw	r2,4(r5)
  808364:	80c00117 	ldw	r3,4(r16)
  808368:	00802074 	movhi	r2,129
  80836c:	1092e904 	addi	r2,r2,19364
  808370:	b009883a 	mov	r4,r22
  808374:	18c0004c 	andi	r3,r3,1
  808378:	e0c6b03a 	or	r3,fp,r3
  80837c:	11400215 	stw	r5,8(r2)
  808380:	80c00115 	stw	r3,4(r16)
  808384:	080b9040 	call	80b904 <__malloc_unlock>
  808388:	84400204 	addi	r17,r16,8
  80838c:	003f2006 	br	808010 <_realloc_r+0xd8>
  808390:	98a9883a 	add	r20,r19,r2
  808394:	2509883a 	add	r4,r4,r20
  808398:	e0800404 	addi	r2,fp,16
  80839c:	d9000115 	stw	r4,4(sp)
  8083a0:	20bf7016 	blt	r4,r2,808164 <_realloc_r+0x22c>
  8083a4:	b8c00317 	ldw	r3,12(r23)
  8083a8:	b8800217 	ldw	r2,8(r23)
  8083ac:	99bfff04 	addi	r6,r19,-4
  8083b0:	01400904 	movi	r5,36
  8083b4:	18800215 	stw	r2,8(r3)
  8083b8:	10c00315 	stw	r3,12(r2)
  8083bc:	bc400204 	addi	r17,r23,8
  8083c0:	29804136 	bltu	r5,r6,8084c8 <_realloc_r+0x590>
  8083c4:	008004c4 	movi	r2,19
  8083c8:	9009883a 	mov	r4,r18
  8083cc:	880f883a 	mov	r7,r17
  8083d0:	11800f2e 	bgeu	r2,r6,808410 <_realloc_r+0x4d8>
  8083d4:	90800017 	ldw	r2,0(r18)
  8083d8:	b9c00404 	addi	r7,r23,16
  8083dc:	91000204 	addi	r4,r18,8
  8083e0:	b8800215 	stw	r2,8(r23)
  8083e4:	90c00117 	ldw	r3,4(r18)
  8083e8:	008006c4 	movi	r2,27
  8083ec:	b8c00315 	stw	r3,12(r23)
  8083f0:	1180072e 	bgeu	r2,r6,808410 <_realloc_r+0x4d8>
  8083f4:	90c00217 	ldw	r3,8(r18)
  8083f8:	b9c00604 	addi	r7,r23,24
  8083fc:	91000404 	addi	r4,r18,16
  808400:	b8c00415 	stw	r3,16(r23)
  808404:	90800317 	ldw	r2,12(r18)
  808408:	b8800515 	stw	r2,20(r23)
  80840c:	31404026 	beq	r6,r5,808510 <_realloc_r+0x5d8>
  808410:	20800017 	ldw	r2,0(r4)
  808414:	38800015 	stw	r2,0(r7)
  808418:	20c00117 	ldw	r3,4(r4)
  80841c:	38c00115 	stw	r3,4(r7)
  808420:	20800217 	ldw	r2,8(r4)
  808424:	38800215 	stw	r2,8(r7)
  808428:	d8c00117 	ldw	r3,4(sp)
  80842c:	bf0b883a 	add	r5,r23,fp
  808430:	b009883a 	mov	r4,r22
  808434:	1f05c83a 	sub	r2,r3,fp
  808438:	10800054 	ori	r2,r2,1
  80843c:	28800115 	stw	r2,4(r5)
  808440:	b8c00117 	ldw	r3,4(r23)
  808444:	00802074 	movhi	r2,129
  808448:	1092e904 	addi	r2,r2,19364
  80844c:	11400215 	stw	r5,8(r2)
  808450:	18c0004c 	andi	r3,r3,1
  808454:	e0c6b03a 	or	r3,fp,r3
  808458:	b8c00115 	stw	r3,4(r23)
  80845c:	080b9040 	call	80b904 <__malloc_unlock>
  808460:	003eeb06 	br	808010 <_realloc_r+0xd8>
  808464:	20800117 	ldw	r2,4(r4)
  808468:	00ffff04 	movi	r3,-4
  80846c:	800f883a 	mov	r7,r16
  808470:	10c4703a 	and	r2,r2,r3
  808474:	98a9883a 	add	r20,r19,r2
  808478:	84000204 	addi	r16,r16,8
  80847c:	003ecf06 	br	807fbc <_realloc_r+0x84>
  808480:	900b883a 	mov	r5,r18
  808484:	8009883a 	mov	r4,r16
  808488:	0806d340 	call	806d34 <memmove>
  80848c:	dd000017 	ldw	r20,0(sp)
  808490:	b80f883a 	mov	r7,r23
  808494:	003ec906 	br	807fbc <_realloc_r+0x84>
  808498:	900b883a 	mov	r5,r18
  80849c:	8009883a 	mov	r4,r16
  8084a0:	0806d340 	call	806d34 <memmove>
  8084a4:	b80f883a 	mov	r7,r23
  8084a8:	003ec406 	br	807fbc <_realloc_r+0x84>
  8084ac:	90c00417 	ldw	r3,16(r18)
  8084b0:	89400604 	addi	r5,r17,24
  8084b4:	91000604 	addi	r4,r18,24
  8084b8:	88c00415 	stw	r3,16(r17)
  8084bc:	90800517 	ldw	r2,20(r18)
  8084c0:	88800515 	stw	r2,20(r17)
  8084c4:	003f6806 	br	808268 <_realloc_r+0x330>
  8084c8:	900b883a 	mov	r5,r18
  8084cc:	8809883a 	mov	r4,r17
  8084d0:	0806d340 	call	806d34 <memmove>
  8084d4:	003fd406 	br	808428 <_realloc_r+0x4f0>
  8084d8:	90c00417 	ldw	r3,16(r18)
  8084dc:	91000604 	addi	r4,r18,24
  8084e0:	ba000804 	addi	r8,r23,32
  8084e4:	b8c00615 	stw	r3,24(r23)
  8084e8:	90800517 	ldw	r2,20(r18)
  8084ec:	b8800715 	stw	r2,28(r23)
  8084f0:	003f1206 	br	80813c <_realloc_r+0x204>
  8084f4:	90c00417 	ldw	r3,16(r18)
  8084f8:	91000604 	addi	r4,r18,24
  8084fc:	ba000804 	addi	r8,r23,32
  808500:	b8c00615 	stw	r3,24(r23)
  808504:	90800517 	ldw	r2,20(r18)
  808508:	b8800715 	stw	r2,28(r23)
  80850c:	003f3206 	br	8081d8 <_realloc_r+0x2a0>
  808510:	90c00417 	ldw	r3,16(r18)
  808514:	91000604 	addi	r4,r18,24
  808518:	b9c00804 	addi	r7,r23,32
  80851c:	b8c00615 	stw	r3,24(r23)
  808520:	90800517 	ldw	r2,20(r18)
  808524:	b8800715 	stw	r2,28(r23)
  808528:	003fb906 	br	808410 <_realloc_r+0x4d8>

0080852c <__isinfd>:
  80852c:	200d883a 	mov	r6,r4
  808530:	0109c83a 	sub	r4,zero,r4
  808534:	2188b03a 	or	r4,r4,r6
  808538:	2008d7fa 	srli	r4,r4,31
  80853c:	00a00034 	movhi	r2,32768
  808540:	10bfffc4 	addi	r2,r2,-1
  808544:	1144703a 	and	r2,r2,r5
  808548:	2088b03a 	or	r4,r4,r2
  80854c:	009ffc34 	movhi	r2,32752
  808550:	1105c83a 	sub	r2,r2,r4
  808554:	0087c83a 	sub	r3,zero,r2
  808558:	10c4b03a 	or	r2,r2,r3
  80855c:	1004d7fa 	srli	r2,r2,31
  808560:	00c00044 	movi	r3,1
  808564:	1885c83a 	sub	r2,r3,r2
  808568:	f800283a 	ret

0080856c <__isnand>:
  80856c:	200d883a 	mov	r6,r4
  808570:	0109c83a 	sub	r4,zero,r4
  808574:	2188b03a 	or	r4,r4,r6
  808578:	2008d7fa 	srli	r4,r4,31
  80857c:	00a00034 	movhi	r2,32768
  808580:	10bfffc4 	addi	r2,r2,-1
  808584:	1144703a 	and	r2,r2,r5
  808588:	2088b03a 	or	r4,r4,r2
  80858c:	009ffc34 	movhi	r2,32752
  808590:	1105c83a 	sub	r2,r2,r4
  808594:	1004d7fa 	srli	r2,r2,31
  808598:	f800283a 	ret

0080859c <__sclose>:
  80859c:	2940038f 	ldh	r5,14(r5)
  8085a0:	08088e41 	jmpi	8088e4 <_close_r>

008085a4 <__sseek>:
  8085a4:	defffe04 	addi	sp,sp,-8
  8085a8:	dc000015 	stw	r16,0(sp)
  8085ac:	2821883a 	mov	r16,r5
  8085b0:	2940038f 	ldh	r5,14(r5)
  8085b4:	dfc00115 	stw	ra,4(sp)
  8085b8:	0808b5c0 	call	808b5c <_lseek_r>
  8085bc:	1007883a 	mov	r3,r2
  8085c0:	00bfffc4 	movi	r2,-1
  8085c4:	18800926 	beq	r3,r2,8085ec <__sseek+0x48>
  8085c8:	8080030b 	ldhu	r2,12(r16)
  8085cc:	80c01415 	stw	r3,80(r16)
  8085d0:	10840014 	ori	r2,r2,4096
  8085d4:	8080030d 	sth	r2,12(r16)
  8085d8:	1805883a 	mov	r2,r3
  8085dc:	dfc00117 	ldw	ra,4(sp)
  8085e0:	dc000017 	ldw	r16,0(sp)
  8085e4:	dec00204 	addi	sp,sp,8
  8085e8:	f800283a 	ret
  8085ec:	8080030b 	ldhu	r2,12(r16)
  8085f0:	10bbffcc 	andi	r2,r2,61439
  8085f4:	8080030d 	sth	r2,12(r16)
  8085f8:	1805883a 	mov	r2,r3
  8085fc:	dfc00117 	ldw	ra,4(sp)
  808600:	dc000017 	ldw	r16,0(sp)
  808604:	dec00204 	addi	sp,sp,8
  808608:	f800283a 	ret

0080860c <__swrite>:
  80860c:	2880030b 	ldhu	r2,12(r5)
  808610:	defffb04 	addi	sp,sp,-20
  808614:	dcc00315 	stw	r19,12(sp)
  808618:	1080400c 	andi	r2,r2,256
  80861c:	dc800215 	stw	r18,8(sp)
  808620:	dc400115 	stw	r17,4(sp)
  808624:	dc000015 	stw	r16,0(sp)
  808628:	3027883a 	mov	r19,r6
  80862c:	3825883a 	mov	r18,r7
  808630:	dfc00415 	stw	ra,16(sp)
  808634:	2821883a 	mov	r16,r5
  808638:	000d883a 	mov	r6,zero
  80863c:	01c00084 	movi	r7,2
  808640:	2023883a 	mov	r17,r4
  808644:	10000226 	beq	r2,zero,808650 <__swrite+0x44>
  808648:	2940038f 	ldh	r5,14(r5)
  80864c:	0808b5c0 	call	808b5c <_lseek_r>
  808650:	8080030b 	ldhu	r2,12(r16)
  808654:	8140038f 	ldh	r5,14(r16)
  808658:	8809883a 	mov	r4,r17
  80865c:	10bbffcc 	andi	r2,r2,61439
  808660:	980d883a 	mov	r6,r19
  808664:	900f883a 	mov	r7,r18
  808668:	8080030d 	sth	r2,12(r16)
  80866c:	dfc00417 	ldw	ra,16(sp)
  808670:	dcc00317 	ldw	r19,12(sp)
  808674:	dc800217 	ldw	r18,8(sp)
  808678:	dc400117 	ldw	r17,4(sp)
  80867c:	dc000017 	ldw	r16,0(sp)
  808680:	dec00504 	addi	sp,sp,20
  808684:	08087a41 	jmpi	8087a4 <_write_r>

00808688 <__sread>:
  808688:	defffe04 	addi	sp,sp,-8
  80868c:	dc000015 	stw	r16,0(sp)
  808690:	2821883a 	mov	r16,r5
  808694:	2940038f 	ldh	r5,14(r5)
  808698:	dfc00115 	stw	ra,4(sp)
  80869c:	0808bd40 	call	808bd4 <_read_r>
  8086a0:	1007883a 	mov	r3,r2
  8086a4:	10000816 	blt	r2,zero,8086c8 <__sread+0x40>
  8086a8:	80801417 	ldw	r2,80(r16)
  8086ac:	10c5883a 	add	r2,r2,r3
  8086b0:	80801415 	stw	r2,80(r16)
  8086b4:	1805883a 	mov	r2,r3
  8086b8:	dfc00117 	ldw	ra,4(sp)
  8086bc:	dc000017 	ldw	r16,0(sp)
  8086c0:	dec00204 	addi	sp,sp,8
  8086c4:	f800283a 	ret
  8086c8:	8080030b 	ldhu	r2,12(r16)
  8086cc:	10bbffcc 	andi	r2,r2,61439
  8086d0:	8080030d 	sth	r2,12(r16)
  8086d4:	1805883a 	mov	r2,r3
  8086d8:	dfc00117 	ldw	ra,4(sp)
  8086dc:	dc000017 	ldw	r16,0(sp)
  8086e0:	dec00204 	addi	sp,sp,8
  8086e4:	f800283a 	ret

008086e8 <strcmp>:
  8086e8:	2144b03a 	or	r2,r4,r5
  8086ec:	108000cc 	andi	r2,r2,3
  8086f0:	10001d1e 	bne	r2,zero,808768 <strcmp+0x80>
  8086f4:	200f883a 	mov	r7,r4
  8086f8:	28800017 	ldw	r2,0(r5)
  8086fc:	21000017 	ldw	r4,0(r4)
  808700:	280d883a 	mov	r6,r5
  808704:	2080161e 	bne	r4,r2,808760 <strcmp+0x78>
  808708:	023fbff4 	movhi	r8,65279
  80870c:	423fbfc4 	addi	r8,r8,-257
  808710:	2207883a 	add	r3,r4,r8
  808714:	01602074 	movhi	r5,32897
  808718:	29602004 	addi	r5,r5,-32640
  80871c:	1946703a 	and	r3,r3,r5
  808720:	0104303a 	nor	r2,zero,r4
  808724:	10c4703a 	and	r2,r2,r3
  808728:	10001c1e 	bne	r2,zero,80879c <strcmp+0xb4>
  80872c:	4013883a 	mov	r9,r8
  808730:	2811883a 	mov	r8,r5
  808734:	00000106 	br	80873c <strcmp+0x54>
  808738:	1800181e 	bne	r3,zero,80879c <strcmp+0xb4>
  80873c:	39c00104 	addi	r7,r7,4
  808740:	39000017 	ldw	r4,0(r7)
  808744:	31800104 	addi	r6,r6,4
  808748:	31400017 	ldw	r5,0(r6)
  80874c:	2245883a 	add	r2,r4,r9
  808750:	1204703a 	and	r2,r2,r8
  808754:	0106303a 	nor	r3,zero,r4
  808758:	1886703a 	and	r3,r3,r2
  80875c:	217ff626 	beq	r4,r5,808738 <strcmp+0x50>
  808760:	3809883a 	mov	r4,r7
  808764:	300b883a 	mov	r5,r6
  808768:	20c00007 	ldb	r3,0(r4)
  80876c:	1800051e 	bne	r3,zero,808784 <strcmp+0x9c>
  808770:	00000606 	br	80878c <strcmp+0xa4>
  808774:	21000044 	addi	r4,r4,1
  808778:	20c00007 	ldb	r3,0(r4)
  80877c:	29400044 	addi	r5,r5,1
  808780:	18000226 	beq	r3,zero,80878c <strcmp+0xa4>
  808784:	28800007 	ldb	r2,0(r5)
  808788:	18bffa26 	beq	r3,r2,808774 <strcmp+0x8c>
  80878c:	20c00003 	ldbu	r3,0(r4)
  808790:	28800003 	ldbu	r2,0(r5)
  808794:	1885c83a 	sub	r2,r3,r2
  808798:	f800283a 	ret
  80879c:	0005883a 	mov	r2,zero
  8087a0:	f800283a 	ret

008087a4 <_write_r>:
  8087a4:	defffd04 	addi	sp,sp,-12
  8087a8:	dc000015 	stw	r16,0(sp)
  8087ac:	040020b4 	movhi	r16,130
  8087b0:	8420c904 	addi	r16,r16,-31964
  8087b4:	dc400115 	stw	r17,4(sp)
  8087b8:	80000015 	stw	zero,0(r16)
  8087bc:	2023883a 	mov	r17,r4
  8087c0:	2809883a 	mov	r4,r5
  8087c4:	300b883a 	mov	r5,r6
  8087c8:	380d883a 	mov	r6,r7
  8087cc:	dfc00215 	stw	ra,8(sp)
  8087d0:	080bd800 	call	80bd80 <write>
  8087d4:	1007883a 	mov	r3,r2
  8087d8:	00bfffc4 	movi	r2,-1
  8087dc:	18800626 	beq	r3,r2,8087f8 <_write_r+0x54>
  8087e0:	1805883a 	mov	r2,r3
  8087e4:	dfc00217 	ldw	ra,8(sp)
  8087e8:	dc400117 	ldw	r17,4(sp)
  8087ec:	dc000017 	ldw	r16,0(sp)
  8087f0:	dec00304 	addi	sp,sp,12
  8087f4:	f800283a 	ret
  8087f8:	80800017 	ldw	r2,0(r16)
  8087fc:	103ff826 	beq	r2,zero,8087e0 <_write_r+0x3c>
  808800:	88800015 	stw	r2,0(r17)
  808804:	1805883a 	mov	r2,r3
  808808:	dfc00217 	ldw	ra,8(sp)
  80880c:	dc400117 	ldw	r17,4(sp)
  808810:	dc000017 	ldw	r16,0(sp)
  808814:	dec00304 	addi	sp,sp,12
  808818:	f800283a 	ret

0080881c <_calloc_r>:
  80881c:	defffe04 	addi	sp,sp,-8
  808820:	dc400015 	stw	r17,0(sp)
  808824:	2023883a 	mov	r17,r4
  808828:	2809883a 	mov	r4,r5
  80882c:	300b883a 	mov	r5,r6
  808830:	dfc00115 	stw	ra,4(sp)
  808834:	08017b40 	call	8017b4 <__mulsi3>
  808838:	100b883a 	mov	r5,r2
  80883c:	8809883a 	mov	r4,r17
  808840:	08018140 	call	801814 <_malloc_r>
  808844:	1023883a 	mov	r17,r2
  808848:	01c00904 	movi	r7,36
  80884c:	10000d26 	beq	r2,zero,808884 <_calloc_r+0x68>
  808850:	10ffff17 	ldw	r3,-4(r2)
  808854:	1009883a 	mov	r4,r2
  808858:	00bfff04 	movi	r2,-4
  80885c:	1886703a 	and	r3,r3,r2
  808860:	1887883a 	add	r3,r3,r2
  808864:	180d883a 	mov	r6,r3
  808868:	000b883a 	mov	r5,zero
  80886c:	38c01736 	bltu	r7,r3,8088cc <_calloc_r+0xb0>
  808870:	008004c4 	movi	r2,19
  808874:	10c00836 	bltu	r2,r3,808898 <_calloc_r+0x7c>
  808878:	20000215 	stw	zero,8(r4)
  80887c:	20000015 	stw	zero,0(r4)
  808880:	20000115 	stw	zero,4(r4)
  808884:	8805883a 	mov	r2,r17
  808888:	dfc00117 	ldw	ra,4(sp)
  80888c:	dc400017 	ldw	r17,0(sp)
  808890:	dec00204 	addi	sp,sp,8
  808894:	f800283a 	ret
  808898:	008006c4 	movi	r2,27
  80889c:	88000015 	stw	zero,0(r17)
  8088a0:	88000115 	stw	zero,4(r17)
  8088a4:	89000204 	addi	r4,r17,8
  8088a8:	10fff32e 	bgeu	r2,r3,808878 <_calloc_r+0x5c>
  8088ac:	88000215 	stw	zero,8(r17)
  8088b0:	88000315 	stw	zero,12(r17)
  8088b4:	89000404 	addi	r4,r17,16
  8088b8:	19ffef1e 	bne	r3,r7,808878 <_calloc_r+0x5c>
  8088bc:	89000604 	addi	r4,r17,24
  8088c0:	88000415 	stw	zero,16(r17)
  8088c4:	88000515 	stw	zero,20(r17)
  8088c8:	003feb06 	br	808878 <_calloc_r+0x5c>
  8088cc:	0806e140 	call	806e14 <memset>
  8088d0:	8805883a 	mov	r2,r17
  8088d4:	dfc00117 	ldw	ra,4(sp)
  8088d8:	dc400017 	ldw	r17,0(sp)
  8088dc:	dec00204 	addi	sp,sp,8
  8088e0:	f800283a 	ret

008088e4 <_close_r>:
  8088e4:	defffd04 	addi	sp,sp,-12
  8088e8:	dc000015 	stw	r16,0(sp)
  8088ec:	040020b4 	movhi	r16,130
  8088f0:	8420c904 	addi	r16,r16,-31964
  8088f4:	dc400115 	stw	r17,4(sp)
  8088f8:	80000015 	stw	zero,0(r16)
  8088fc:	2023883a 	mov	r17,r4
  808900:	2809883a 	mov	r4,r5
  808904:	dfc00215 	stw	ra,8(sp)
  808908:	080b2500 	call	80b250 <close>
  80890c:	1007883a 	mov	r3,r2
  808910:	00bfffc4 	movi	r2,-1
  808914:	18800626 	beq	r3,r2,808930 <_close_r+0x4c>
  808918:	1805883a 	mov	r2,r3
  80891c:	dfc00217 	ldw	ra,8(sp)
  808920:	dc400117 	ldw	r17,4(sp)
  808924:	dc000017 	ldw	r16,0(sp)
  808928:	dec00304 	addi	sp,sp,12
  80892c:	f800283a 	ret
  808930:	80800017 	ldw	r2,0(r16)
  808934:	103ff826 	beq	r2,zero,808918 <_close_r+0x34>
  808938:	88800015 	stw	r2,0(r17)
  80893c:	1805883a 	mov	r2,r3
  808940:	dfc00217 	ldw	ra,8(sp)
  808944:	dc400117 	ldw	r17,4(sp)
  808948:	dc000017 	ldw	r16,0(sp)
  80894c:	dec00304 	addi	sp,sp,12
  808950:	f800283a 	ret

00808954 <_fclose_r>:
  808954:	defffc04 	addi	sp,sp,-16
  808958:	dc400115 	stw	r17,4(sp)
  80895c:	dc000015 	stw	r16,0(sp)
  808960:	dfc00315 	stw	ra,12(sp)
  808964:	dc800215 	stw	r18,8(sp)
  808968:	2821883a 	mov	r16,r5
  80896c:	2023883a 	mov	r17,r4
  808970:	28002926 	beq	r5,zero,808a18 <_fclose_r+0xc4>
  808974:	0805c600 	call	805c60 <__sfp_lock_acquire>
  808978:	88000226 	beq	r17,zero,808984 <_fclose_r+0x30>
  80897c:	88800e17 	ldw	r2,56(r17)
  808980:	10002d26 	beq	r2,zero,808a38 <_fclose_r+0xe4>
  808984:	8080030f 	ldh	r2,12(r16)
  808988:	10002226 	beq	r2,zero,808a14 <_fclose_r+0xc0>
  80898c:	8809883a 	mov	r4,r17
  808990:	800b883a 	mov	r5,r16
  808994:	08059d80 	call	8059d8 <_fflush_r>
  808998:	1025883a 	mov	r18,r2
  80899c:	80800b17 	ldw	r2,44(r16)
  8089a0:	10000426 	beq	r2,zero,8089b4 <_fclose_r+0x60>
  8089a4:	81400717 	ldw	r5,28(r16)
  8089a8:	8809883a 	mov	r4,r17
  8089ac:	103ee83a 	callr	r2
  8089b0:	10002a16 	blt	r2,zero,808a5c <_fclose_r+0x108>
  8089b4:	8080030b 	ldhu	r2,12(r16)
  8089b8:	1080200c 	andi	r2,r2,128
  8089bc:	1000231e 	bne	r2,zero,808a4c <_fclose_r+0xf8>
  8089c0:	81400c17 	ldw	r5,48(r16)
  8089c4:	28000526 	beq	r5,zero,8089dc <_fclose_r+0x88>
  8089c8:	80801004 	addi	r2,r16,64
  8089cc:	28800226 	beq	r5,r2,8089d8 <_fclose_r+0x84>
  8089d0:	8809883a 	mov	r4,r17
  8089d4:	08060280 	call	806028 <_free_r>
  8089d8:	80000c15 	stw	zero,48(r16)
  8089dc:	81401117 	ldw	r5,68(r16)
  8089e0:	28000326 	beq	r5,zero,8089f0 <_fclose_r+0x9c>
  8089e4:	8809883a 	mov	r4,r17
  8089e8:	08060280 	call	806028 <_free_r>
  8089ec:	80001115 	stw	zero,68(r16)
  8089f0:	8000030d 	sth	zero,12(r16)
  8089f4:	0805c640 	call	805c64 <__sfp_lock_release>
  8089f8:	9005883a 	mov	r2,r18
  8089fc:	dfc00317 	ldw	ra,12(sp)
  808a00:	dc800217 	ldw	r18,8(sp)
  808a04:	dc400117 	ldw	r17,4(sp)
  808a08:	dc000017 	ldw	r16,0(sp)
  808a0c:	dec00404 	addi	sp,sp,16
  808a10:	f800283a 	ret
  808a14:	0805c640 	call	805c64 <__sfp_lock_release>
  808a18:	0025883a 	mov	r18,zero
  808a1c:	9005883a 	mov	r2,r18
  808a20:	dfc00317 	ldw	ra,12(sp)
  808a24:	dc800217 	ldw	r18,8(sp)
  808a28:	dc400117 	ldw	r17,4(sp)
  808a2c:	dc000017 	ldw	r16,0(sp)
  808a30:	dec00404 	addi	sp,sp,16
  808a34:	f800283a 	ret
  808a38:	8809883a 	mov	r4,r17
  808a3c:	0805c700 	call	805c70 <__sinit>
  808a40:	8080030f 	ldh	r2,12(r16)
  808a44:	103fd11e 	bne	r2,zero,80898c <_fclose_r+0x38>
  808a48:	003ff206 	br	808a14 <_fclose_r+0xc0>
  808a4c:	81400417 	ldw	r5,16(r16)
  808a50:	8809883a 	mov	r4,r17
  808a54:	08060280 	call	806028 <_free_r>
  808a58:	003fd906 	br	8089c0 <_fclose_r+0x6c>
  808a5c:	04bfffc4 	movi	r18,-1
  808a60:	003fd406 	br	8089b4 <_fclose_r+0x60>

00808a64 <fclose>:
  808a64:	00802074 	movhi	r2,129
  808a68:	1099af04 	addi	r2,r2,26300
  808a6c:	200b883a 	mov	r5,r4
  808a70:	11000017 	ldw	r4,0(r2)
  808a74:	08089541 	jmpi	808954 <_fclose_r>

00808a78 <_fstat_r>:
  808a78:	defffd04 	addi	sp,sp,-12
  808a7c:	dc000015 	stw	r16,0(sp)
  808a80:	040020b4 	movhi	r16,130
  808a84:	8420c904 	addi	r16,r16,-31964
  808a88:	dc400115 	stw	r17,4(sp)
  808a8c:	80000015 	stw	zero,0(r16)
  808a90:	2023883a 	mov	r17,r4
  808a94:	2809883a 	mov	r4,r5
  808a98:	300b883a 	mov	r5,r6
  808a9c:	dfc00215 	stw	ra,8(sp)
  808aa0:	080b3dc0 	call	80b3dc <fstat>
  808aa4:	1007883a 	mov	r3,r2
  808aa8:	00bfffc4 	movi	r2,-1
  808aac:	18800626 	beq	r3,r2,808ac8 <_fstat_r+0x50>
  808ab0:	1805883a 	mov	r2,r3
  808ab4:	dfc00217 	ldw	ra,8(sp)
  808ab8:	dc400117 	ldw	r17,4(sp)
  808abc:	dc000017 	ldw	r16,0(sp)
  808ac0:	dec00304 	addi	sp,sp,12
  808ac4:	f800283a 	ret
  808ac8:	80800017 	ldw	r2,0(r16)
  808acc:	103ff826 	beq	r2,zero,808ab0 <_fstat_r+0x38>
  808ad0:	88800015 	stw	r2,0(r17)
  808ad4:	1805883a 	mov	r2,r3
  808ad8:	dfc00217 	ldw	ra,8(sp)
  808adc:	dc400117 	ldw	r17,4(sp)
  808ae0:	dc000017 	ldw	r16,0(sp)
  808ae4:	dec00304 	addi	sp,sp,12
  808ae8:	f800283a 	ret

00808aec <_isatty_r>:
  808aec:	defffd04 	addi	sp,sp,-12
  808af0:	dc000015 	stw	r16,0(sp)
  808af4:	040020b4 	movhi	r16,130
  808af8:	8420c904 	addi	r16,r16,-31964
  808afc:	dc400115 	stw	r17,4(sp)
  808b00:	80000015 	stw	zero,0(r16)
  808b04:	2023883a 	mov	r17,r4
  808b08:	2809883a 	mov	r4,r5
  808b0c:	dfc00215 	stw	ra,8(sp)
  808b10:	080b5140 	call	80b514 <isatty>
  808b14:	1007883a 	mov	r3,r2
  808b18:	00bfffc4 	movi	r2,-1
  808b1c:	18800626 	beq	r3,r2,808b38 <_isatty_r+0x4c>
  808b20:	1805883a 	mov	r2,r3
  808b24:	dfc00217 	ldw	ra,8(sp)
  808b28:	dc400117 	ldw	r17,4(sp)
  808b2c:	dc000017 	ldw	r16,0(sp)
  808b30:	dec00304 	addi	sp,sp,12
  808b34:	f800283a 	ret
  808b38:	80800017 	ldw	r2,0(r16)
  808b3c:	103ff826 	beq	r2,zero,808b20 <_isatty_r+0x34>
  808b40:	88800015 	stw	r2,0(r17)
  808b44:	1805883a 	mov	r2,r3
  808b48:	dfc00217 	ldw	ra,8(sp)
  808b4c:	dc400117 	ldw	r17,4(sp)
  808b50:	dc000017 	ldw	r16,0(sp)
  808b54:	dec00304 	addi	sp,sp,12
  808b58:	f800283a 	ret

00808b5c <_lseek_r>:
  808b5c:	defffd04 	addi	sp,sp,-12
  808b60:	dc000015 	stw	r16,0(sp)
  808b64:	040020b4 	movhi	r16,130
  808b68:	8420c904 	addi	r16,r16,-31964
  808b6c:	dc400115 	stw	r17,4(sp)
  808b70:	80000015 	stw	zero,0(r16)
  808b74:	2023883a 	mov	r17,r4
  808b78:	2809883a 	mov	r4,r5
  808b7c:	300b883a 	mov	r5,r6
  808b80:	380d883a 	mov	r6,r7
  808b84:	dfc00215 	stw	ra,8(sp)
  808b88:	080b7240 	call	80b724 <lseek>
  808b8c:	1007883a 	mov	r3,r2
  808b90:	00bfffc4 	movi	r2,-1
  808b94:	18800626 	beq	r3,r2,808bb0 <_lseek_r+0x54>
  808b98:	1805883a 	mov	r2,r3
  808b9c:	dfc00217 	ldw	ra,8(sp)
  808ba0:	dc400117 	ldw	r17,4(sp)
  808ba4:	dc000017 	ldw	r16,0(sp)
  808ba8:	dec00304 	addi	sp,sp,12
  808bac:	f800283a 	ret
  808bb0:	80800017 	ldw	r2,0(r16)
  808bb4:	103ff826 	beq	r2,zero,808b98 <_lseek_r+0x3c>
  808bb8:	88800015 	stw	r2,0(r17)
  808bbc:	1805883a 	mov	r2,r3
  808bc0:	dfc00217 	ldw	ra,8(sp)
  808bc4:	dc400117 	ldw	r17,4(sp)
  808bc8:	dc000017 	ldw	r16,0(sp)
  808bcc:	dec00304 	addi	sp,sp,12
  808bd0:	f800283a 	ret

00808bd4 <_read_r>:
  808bd4:	defffd04 	addi	sp,sp,-12
  808bd8:	dc000015 	stw	r16,0(sp)
  808bdc:	040020b4 	movhi	r16,130
  808be0:	8420c904 	addi	r16,r16,-31964
  808be4:	dc400115 	stw	r17,4(sp)
  808be8:	80000015 	stw	zero,0(r16)
  808bec:	2023883a 	mov	r17,r4
  808bf0:	2809883a 	mov	r4,r5
  808bf4:	300b883a 	mov	r5,r6
  808bf8:	380d883a 	mov	r6,r7
  808bfc:	dfc00215 	stw	ra,8(sp)
  808c00:	080b9240 	call	80b924 <read>
  808c04:	1007883a 	mov	r3,r2
  808c08:	00bfffc4 	movi	r2,-1
  808c0c:	18800626 	beq	r3,r2,808c28 <_read_r+0x54>
  808c10:	1805883a 	mov	r2,r3
  808c14:	dfc00217 	ldw	ra,8(sp)
  808c18:	dc400117 	ldw	r17,4(sp)
  808c1c:	dc000017 	ldw	r16,0(sp)
  808c20:	dec00304 	addi	sp,sp,12
  808c24:	f800283a 	ret
  808c28:	80800017 	ldw	r2,0(r16)
  808c2c:	103ff826 	beq	r2,zero,808c10 <_read_r+0x3c>
  808c30:	88800015 	stw	r2,0(r17)
  808c34:	1805883a 	mov	r2,r3
  808c38:	dfc00217 	ldw	ra,8(sp)
  808c3c:	dc400117 	ldw	r17,4(sp)
  808c40:	dc000017 	ldw	r16,0(sp)
  808c44:	dec00304 	addi	sp,sp,12
  808c48:	f800283a 	ret

00808c4c <__udivdi3>:
  808c4c:	defff104 	addi	sp,sp,-60
  808c50:	0015883a 	mov	r10,zero
  808c54:	2005883a 	mov	r2,r4
  808c58:	3011883a 	mov	r8,r6
  808c5c:	df000d15 	stw	fp,52(sp)
  808c60:	dd400a15 	stw	r21,40(sp)
  808c64:	dcc00815 	stw	r19,32(sp)
  808c68:	dfc00e15 	stw	ra,56(sp)
  808c6c:	ddc00c15 	stw	r23,48(sp)
  808c70:	dd800b15 	stw	r22,44(sp)
  808c74:	dd000915 	stw	r20,36(sp)
  808c78:	dc800715 	stw	r18,28(sp)
  808c7c:	dc400615 	stw	r17,24(sp)
  808c80:	dc000515 	stw	r16,20(sp)
  808c84:	da800315 	stw	r10,12(sp)
  808c88:	4027883a 	mov	r19,r8
  808c8c:	1039883a 	mov	fp,r2
  808c90:	282b883a 	mov	r21,r5
  808c94:	da800415 	stw	r10,16(sp)
  808c98:	3800401e 	bne	r7,zero,808d9c <__udivdi3+0x150>
  808c9c:	2a006536 	bltu	r5,r8,808e34 <__udivdi3+0x1e8>
  808ca0:	4000b526 	beq	r8,zero,808f78 <__udivdi3+0x32c>
  808ca4:	00bfffd4 	movui	r2,65535
  808ca8:	14c0ad36 	bltu	r2,r19,808f60 <__udivdi3+0x314>
  808cac:	00803fc4 	movi	r2,255
  808cb0:	14c15e36 	bltu	r2,r19,80922c <__udivdi3+0x5e0>
  808cb4:	000b883a 	mov	r5,zero
  808cb8:	0005883a 	mov	r2,zero
  808cbc:	9884d83a 	srl	r2,r19,r2
  808cc0:	01002074 	movhi	r4,129
  808cc4:	21125004 	addi	r4,r4,18752
  808cc8:	01800804 	movi	r6,32
  808ccc:	1105883a 	add	r2,r2,r4
  808cd0:	10c00003 	ldbu	r3,0(r2)
  808cd4:	28c7883a 	add	r3,r5,r3
  808cd8:	30e9c83a 	sub	r20,r6,r3
  808cdc:	a0010a1e 	bne	r20,zero,809108 <__udivdi3+0x4bc>
  808ce0:	982ed43a 	srli	r23,r19,16
  808ce4:	acebc83a 	sub	r21,r21,r19
  808ce8:	9dbfffcc 	andi	r22,r19,65535
  808cec:	05000044 	movi	r20,1
  808cf0:	a809883a 	mov	r4,r21
  808cf4:	b80b883a 	mov	r5,r23
  808cf8:	08017a40 	call	8017a4 <__udivsi3>
  808cfc:	100b883a 	mov	r5,r2
  808d00:	b009883a 	mov	r4,r22
  808d04:	1021883a 	mov	r16,r2
  808d08:	08017b40 	call	8017b4 <__mulsi3>
  808d0c:	a809883a 	mov	r4,r21
  808d10:	b80b883a 	mov	r5,r23
  808d14:	1023883a 	mov	r17,r2
  808d18:	08017ac0 	call	8017ac <__umodsi3>
  808d1c:	1004943a 	slli	r2,r2,16
  808d20:	e006d43a 	srli	r3,fp,16
  808d24:	10c4b03a 	or	r2,r2,r3
  808d28:	1440042e 	bgeu	r2,r17,808d3c <__udivdi3+0xf0>
  808d2c:	14c5883a 	add	r2,r2,r19
  808d30:	843fffc4 	addi	r16,r16,-1
  808d34:	14c00136 	bltu	r2,r19,808d3c <__udivdi3+0xf0>
  808d38:	14415c36 	bltu	r2,r17,8092ac <__udivdi3+0x660>
  808d3c:	1463c83a 	sub	r17,r2,r17
  808d40:	8809883a 	mov	r4,r17
  808d44:	b80b883a 	mov	r5,r23
  808d48:	08017a40 	call	8017a4 <__udivsi3>
  808d4c:	100b883a 	mov	r5,r2
  808d50:	b009883a 	mov	r4,r22
  808d54:	102b883a 	mov	r21,r2
  808d58:	08017b40 	call	8017b4 <__mulsi3>
  808d5c:	8809883a 	mov	r4,r17
  808d60:	b80b883a 	mov	r5,r23
  808d64:	1025883a 	mov	r18,r2
  808d68:	08017ac0 	call	8017ac <__umodsi3>
  808d6c:	1004943a 	slli	r2,r2,16
  808d70:	e0ffffcc 	andi	r3,fp,65535
  808d74:	10c4b03a 	or	r2,r2,r3
  808d78:	1480042e 	bgeu	r2,r18,808d8c <__udivdi3+0x140>
  808d7c:	9885883a 	add	r2,r19,r2
  808d80:	ad7fffc4 	addi	r21,r21,-1
  808d84:	14c00136 	bltu	r2,r19,808d8c <__udivdi3+0x140>
  808d88:	14813c36 	bltu	r2,r18,80927c <__udivdi3+0x630>
  808d8c:	8004943a 	slli	r2,r16,16
  808d90:	a009883a 	mov	r4,r20
  808d94:	a884b03a 	or	r2,r21,r2
  808d98:	00001506 	br	808df0 <__udivdi3+0x1a4>
  808d9c:	380d883a 	mov	r6,r7
  808da0:	29c06c36 	bltu	r5,r7,808f54 <__udivdi3+0x308>
  808da4:	00bfffd4 	movui	r2,65535
  808da8:	11c06436 	bltu	r2,r7,808f3c <__udivdi3+0x2f0>
  808dac:	00803fc4 	movi	r2,255
  808db0:	11c11836 	bltu	r2,r7,809214 <__udivdi3+0x5c8>
  808db4:	000b883a 	mov	r5,zero
  808db8:	0005883a 	mov	r2,zero
  808dbc:	3084d83a 	srl	r2,r6,r2
  808dc0:	01002074 	movhi	r4,129
  808dc4:	21125004 	addi	r4,r4,18752
  808dc8:	01c00804 	movi	r7,32
  808dcc:	1105883a 	add	r2,r2,r4
  808dd0:	10c00003 	ldbu	r3,0(r2)
  808dd4:	28c7883a 	add	r3,r5,r3
  808dd8:	38edc83a 	sub	r22,r7,r3
  808ddc:	b000731e 	bne	r22,zero,808fac <__udivdi3+0x360>
  808de0:	35400136 	bltu	r6,r21,808de8 <__udivdi3+0x19c>
  808de4:	e4c05b36 	bltu	fp,r19,808f54 <__udivdi3+0x308>
  808de8:	00800044 	movi	r2,1
  808dec:	0009883a 	mov	r4,zero
  808df0:	d8800315 	stw	r2,12(sp)
  808df4:	d9400317 	ldw	r5,12(sp)
  808df8:	d9000415 	stw	r4,16(sp)
  808dfc:	2007883a 	mov	r3,r4
  808e00:	2805883a 	mov	r2,r5
  808e04:	dfc00e17 	ldw	ra,56(sp)
  808e08:	df000d17 	ldw	fp,52(sp)
  808e0c:	ddc00c17 	ldw	r23,48(sp)
  808e10:	dd800b17 	ldw	r22,44(sp)
  808e14:	dd400a17 	ldw	r21,40(sp)
  808e18:	dd000917 	ldw	r20,36(sp)
  808e1c:	dcc00817 	ldw	r19,32(sp)
  808e20:	dc800717 	ldw	r18,28(sp)
  808e24:	dc400617 	ldw	r17,24(sp)
  808e28:	dc000517 	ldw	r16,20(sp)
  808e2c:	dec00f04 	addi	sp,sp,60
  808e30:	f800283a 	ret
  808e34:	00bfffd4 	movui	r2,65535
  808e38:	12005636 	bltu	r2,r8,808f94 <__udivdi3+0x348>
  808e3c:	00803fc4 	movi	r2,255
  808e40:	12010036 	bltu	r2,r8,809244 <__udivdi3+0x5f8>
  808e44:	000b883a 	mov	r5,zero
  808e48:	0005883a 	mov	r2,zero
  808e4c:	9884d83a 	srl	r2,r19,r2
  808e50:	01002074 	movhi	r4,129
  808e54:	21125004 	addi	r4,r4,18752
  808e58:	01800804 	movi	r6,32
  808e5c:	1105883a 	add	r2,r2,r4
  808e60:	10c00003 	ldbu	r3,0(r2)
  808e64:	28c7883a 	add	r3,r5,r3
  808e68:	30cbc83a 	sub	r5,r6,r3
  808e6c:	28000626 	beq	r5,zero,808e88 <__udivdi3+0x23c>
  808e70:	3145c83a 	sub	r2,r6,r5
  808e74:	e084d83a 	srl	r2,fp,r2
  808e78:	a946983a 	sll	r3,r21,r5
  808e7c:	e178983a 	sll	fp,fp,r5
  808e80:	9966983a 	sll	r19,r19,r5
  808e84:	18aab03a 	or	r21,r3,r2
  808e88:	982ed43a 	srli	r23,r19,16
  808e8c:	a809883a 	mov	r4,r21
  808e90:	9cbfffcc 	andi	r18,r19,65535
  808e94:	b80b883a 	mov	r5,r23
  808e98:	08017a40 	call	8017a4 <__udivsi3>
  808e9c:	100b883a 	mov	r5,r2
  808ea0:	9009883a 	mov	r4,r18
  808ea4:	1021883a 	mov	r16,r2
  808ea8:	08017b40 	call	8017b4 <__mulsi3>
  808eac:	a809883a 	mov	r4,r21
  808eb0:	b80b883a 	mov	r5,r23
  808eb4:	1023883a 	mov	r17,r2
  808eb8:	08017ac0 	call	8017ac <__umodsi3>
  808ebc:	1004943a 	slli	r2,r2,16
  808ec0:	e006d43a 	srli	r3,fp,16
  808ec4:	10c4b03a 	or	r2,r2,r3
  808ec8:	1440042e 	bgeu	r2,r17,808edc <__udivdi3+0x290>
  808ecc:	14c5883a 	add	r2,r2,r19
  808ed0:	843fffc4 	addi	r16,r16,-1
  808ed4:	14c00136 	bltu	r2,r19,808edc <__udivdi3+0x290>
  808ed8:	1440ea36 	bltu	r2,r17,809284 <__udivdi3+0x638>
  808edc:	1463c83a 	sub	r17,r2,r17
  808ee0:	8809883a 	mov	r4,r17
  808ee4:	b80b883a 	mov	r5,r23
  808ee8:	08017a40 	call	8017a4 <__udivsi3>
  808eec:	100b883a 	mov	r5,r2
  808ef0:	9009883a 	mov	r4,r18
  808ef4:	102b883a 	mov	r21,r2
  808ef8:	08017b40 	call	8017b4 <__mulsi3>
  808efc:	8809883a 	mov	r4,r17
  808f00:	b80b883a 	mov	r5,r23
  808f04:	1025883a 	mov	r18,r2
  808f08:	08017ac0 	call	8017ac <__umodsi3>
  808f0c:	1004943a 	slli	r2,r2,16
  808f10:	e0ffffcc 	andi	r3,fp,65535
  808f14:	10c4b03a 	or	r2,r2,r3
  808f18:	1480042e 	bgeu	r2,r18,808f2c <__udivdi3+0x2e0>
  808f1c:	9885883a 	add	r2,r19,r2
  808f20:	ad7fffc4 	addi	r21,r21,-1
  808f24:	14c00136 	bltu	r2,r19,808f2c <__udivdi3+0x2e0>
  808f28:	1480d936 	bltu	r2,r18,809290 <__udivdi3+0x644>
  808f2c:	8004943a 	slli	r2,r16,16
  808f30:	0009883a 	mov	r4,zero
  808f34:	a884b03a 	or	r2,r21,r2
  808f38:	003fad06 	br	808df0 <__udivdi3+0x1a4>
  808f3c:	00804034 	movhi	r2,256
  808f40:	10bfffc4 	addi	r2,r2,-1
  808f44:	11c0b636 	bltu	r2,r7,809220 <__udivdi3+0x5d4>
  808f48:	01400404 	movi	r5,16
  808f4c:	2805883a 	mov	r2,r5
  808f50:	003f9a06 	br	808dbc <__udivdi3+0x170>
  808f54:	0005883a 	mov	r2,zero
  808f58:	0009883a 	mov	r4,zero
  808f5c:	003fa406 	br	808df0 <__udivdi3+0x1a4>
  808f60:	00804034 	movhi	r2,256
  808f64:	10bfffc4 	addi	r2,r2,-1
  808f68:	14c0b336 	bltu	r2,r19,809238 <__udivdi3+0x5ec>
  808f6c:	01400404 	movi	r5,16
  808f70:	2805883a 	mov	r2,r5
  808f74:	003f5106 	br	808cbc <__udivdi3+0x70>
  808f78:	01000044 	movi	r4,1
  808f7c:	000b883a 	mov	r5,zero
  808f80:	08017a40 	call	8017a4 <__udivsi3>
  808f84:	1027883a 	mov	r19,r2
  808f88:	00bfffd4 	movui	r2,65535
  808f8c:	14fff436 	bltu	r2,r19,808f60 <__udivdi3+0x314>
  808f90:	003f4606 	br	808cac <__udivdi3+0x60>
  808f94:	00804034 	movhi	r2,256
  808f98:	10bfffc4 	addi	r2,r2,-1
  808f9c:	1200ac36 	bltu	r2,r8,809250 <__udivdi3+0x604>
  808fa0:	01400404 	movi	r5,16
  808fa4:	2805883a 	mov	r2,r5
  808fa8:	003fa806 	br	808e4c <__udivdi3+0x200>
  808fac:	3d85c83a 	sub	r2,r7,r22
  808fb0:	3588983a 	sll	r4,r6,r22
  808fb4:	9886d83a 	srl	r3,r19,r2
  808fb8:	a8a2d83a 	srl	r17,r21,r2
  808fbc:	e084d83a 	srl	r2,fp,r2
  808fc0:	20eeb03a 	or	r23,r4,r3
  808fc4:	b824d43a 	srli	r18,r23,16
  808fc8:	ad86983a 	sll	r3,r21,r22
  808fcc:	8809883a 	mov	r4,r17
  808fd0:	900b883a 	mov	r5,r18
  808fd4:	1886b03a 	or	r3,r3,r2
  808fd8:	d8c00115 	stw	r3,4(sp)
  808fdc:	bc3fffcc 	andi	r16,r23,65535
  808fe0:	08017a40 	call	8017a4 <__udivsi3>
  808fe4:	100b883a 	mov	r5,r2
  808fe8:	8009883a 	mov	r4,r16
  808fec:	1029883a 	mov	r20,r2
  808ff0:	08017b40 	call	8017b4 <__mulsi3>
  808ff4:	900b883a 	mov	r5,r18
  808ff8:	8809883a 	mov	r4,r17
  808ffc:	102b883a 	mov	r21,r2
  809000:	08017ac0 	call	8017ac <__umodsi3>
  809004:	d9400117 	ldw	r5,4(sp)
  809008:	1004943a 	slli	r2,r2,16
  80900c:	9da6983a 	sll	r19,r19,r22
  809010:	2806d43a 	srli	r3,r5,16
  809014:	10c4b03a 	or	r2,r2,r3
  809018:	1540032e 	bgeu	r2,r21,809028 <__udivdi3+0x3dc>
  80901c:	15c5883a 	add	r2,r2,r23
  809020:	a53fffc4 	addi	r20,r20,-1
  809024:	15c0912e 	bgeu	r2,r23,80926c <__udivdi3+0x620>
  809028:	1563c83a 	sub	r17,r2,r21
  80902c:	8809883a 	mov	r4,r17
  809030:	900b883a 	mov	r5,r18
  809034:	08017a40 	call	8017a4 <__udivsi3>
  809038:	100b883a 	mov	r5,r2
  80903c:	8009883a 	mov	r4,r16
  809040:	102b883a 	mov	r21,r2
  809044:	08017b40 	call	8017b4 <__mulsi3>
  809048:	8809883a 	mov	r4,r17
  80904c:	900b883a 	mov	r5,r18
  809050:	1021883a 	mov	r16,r2
  809054:	08017ac0 	call	8017ac <__umodsi3>
  809058:	da800117 	ldw	r10,4(sp)
  80905c:	1004943a 	slli	r2,r2,16
  809060:	50ffffcc 	andi	r3,r10,65535
  809064:	10c6b03a 	or	r3,r2,r3
  809068:	1c00032e 	bgeu	r3,r16,809078 <__udivdi3+0x42c>
  80906c:	1dc7883a 	add	r3,r3,r23
  809070:	ad7fffc4 	addi	r21,r21,-1
  809074:	1dc0792e 	bgeu	r3,r23,80925c <__udivdi3+0x610>
  809078:	a004943a 	slli	r2,r20,16
  80907c:	982ed43a 	srli	r23,r19,16
  809080:	9cffffcc 	andi	r19,r19,65535
  809084:	a8a4b03a 	or	r18,r21,r2
  809088:	947fffcc 	andi	r17,r18,65535
  80908c:	902ad43a 	srli	r21,r18,16
  809090:	8809883a 	mov	r4,r17
  809094:	980b883a 	mov	r5,r19
  809098:	1c21c83a 	sub	r16,r3,r16
  80909c:	08017b40 	call	8017b4 <__mulsi3>
  8090a0:	8809883a 	mov	r4,r17
  8090a4:	b80b883a 	mov	r5,r23
  8090a8:	1029883a 	mov	r20,r2
  8090ac:	08017b40 	call	8017b4 <__mulsi3>
  8090b0:	980b883a 	mov	r5,r19
  8090b4:	a809883a 	mov	r4,r21
  8090b8:	1023883a 	mov	r17,r2
  8090bc:	08017b40 	call	8017b4 <__mulsi3>
  8090c0:	a809883a 	mov	r4,r21
  8090c4:	b80b883a 	mov	r5,r23
  8090c8:	1027883a 	mov	r19,r2
  8090cc:	08017b40 	call	8017b4 <__mulsi3>
  8090d0:	1009883a 	mov	r4,r2
  8090d4:	a004d43a 	srli	r2,r20,16
  8090d8:	8ce3883a 	add	r17,r17,r19
  8090dc:	1447883a 	add	r3,r2,r17
  8090e0:	1cc0022e 	bgeu	r3,r19,8090ec <__udivdi3+0x4a0>
  8090e4:	00800074 	movhi	r2,1
  8090e8:	2089883a 	add	r4,r4,r2
  8090ec:	1804d43a 	srli	r2,r3,16
  8090f0:	2085883a 	add	r2,r4,r2
  8090f4:	80804436 	bltu	r16,r2,809208 <__udivdi3+0x5bc>
  8090f8:	80803e26 	beq	r16,r2,8091f4 <__udivdi3+0x5a8>
  8090fc:	9005883a 	mov	r2,r18
  809100:	0009883a 	mov	r4,zero
  809104:	003f3a06 	br	808df0 <__udivdi3+0x1a4>
  809108:	9d26983a 	sll	r19,r19,r20
  80910c:	3505c83a 	sub	r2,r6,r20
  809110:	a8a2d83a 	srl	r17,r21,r2
  809114:	982ed43a 	srli	r23,r19,16
  809118:	e084d83a 	srl	r2,fp,r2
  80911c:	ad06983a 	sll	r3,r21,r20
  809120:	8809883a 	mov	r4,r17
  809124:	b80b883a 	mov	r5,r23
  809128:	1886b03a 	or	r3,r3,r2
  80912c:	d8c00015 	stw	r3,0(sp)
  809130:	9dbfffcc 	andi	r22,r19,65535
  809134:	08017a40 	call	8017a4 <__udivsi3>
  809138:	100b883a 	mov	r5,r2
  80913c:	b009883a 	mov	r4,r22
  809140:	d8800215 	stw	r2,8(sp)
  809144:	08017b40 	call	8017b4 <__mulsi3>
  809148:	8809883a 	mov	r4,r17
  80914c:	b80b883a 	mov	r5,r23
  809150:	102b883a 	mov	r21,r2
  809154:	08017ac0 	call	8017ac <__umodsi3>
  809158:	d9000017 	ldw	r4,0(sp)
  80915c:	1004943a 	slli	r2,r2,16
  809160:	2006d43a 	srli	r3,r4,16
  809164:	10c4b03a 	or	r2,r2,r3
  809168:	1540052e 	bgeu	r2,r21,809180 <__udivdi3+0x534>
  80916c:	d9400217 	ldw	r5,8(sp)
  809170:	14c5883a 	add	r2,r2,r19
  809174:	297fffc4 	addi	r5,r5,-1
  809178:	d9400215 	stw	r5,8(sp)
  80917c:	14c0462e 	bgeu	r2,r19,809298 <__udivdi3+0x64c>
  809180:	1563c83a 	sub	r17,r2,r21
  809184:	8809883a 	mov	r4,r17
  809188:	b80b883a 	mov	r5,r23
  80918c:	08017a40 	call	8017a4 <__udivsi3>
  809190:	100b883a 	mov	r5,r2
  809194:	b009883a 	mov	r4,r22
  809198:	1025883a 	mov	r18,r2
  80919c:	08017b40 	call	8017b4 <__mulsi3>
  8091a0:	8809883a 	mov	r4,r17
  8091a4:	b80b883a 	mov	r5,r23
  8091a8:	1021883a 	mov	r16,r2
  8091ac:	08017ac0 	call	8017ac <__umodsi3>
  8091b0:	da800017 	ldw	r10,0(sp)
  8091b4:	1004943a 	slli	r2,r2,16
  8091b8:	50ffffcc 	andi	r3,r10,65535
  8091bc:	10c6b03a 	or	r3,r2,r3
  8091c0:	1c00062e 	bgeu	r3,r16,8091dc <__udivdi3+0x590>
  8091c4:	1cc7883a 	add	r3,r3,r19
  8091c8:	94bfffc4 	addi	r18,r18,-1
  8091cc:	1cc00336 	bltu	r3,r19,8091dc <__udivdi3+0x590>
  8091d0:	1c00022e 	bgeu	r3,r16,8091dc <__udivdi3+0x590>
  8091d4:	94bfffc4 	addi	r18,r18,-1
  8091d8:	1cc7883a 	add	r3,r3,r19
  8091dc:	d9000217 	ldw	r4,8(sp)
  8091e0:	e538983a 	sll	fp,fp,r20
  8091e4:	1c2bc83a 	sub	r21,r3,r16
  8091e8:	2004943a 	slli	r2,r4,16
  8091ec:	90a8b03a 	or	r20,r18,r2
  8091f0:	003ebf06 	br	808cf0 <__udivdi3+0xa4>
  8091f4:	1804943a 	slli	r2,r3,16
  8091f8:	e588983a 	sll	r4,fp,r22
  8091fc:	a0ffffcc 	andi	r3,r20,65535
  809200:	10c5883a 	add	r2,r2,r3
  809204:	20bfbd2e 	bgeu	r4,r2,8090fc <__udivdi3+0x4b0>
  809208:	90bfffc4 	addi	r2,r18,-1
  80920c:	0009883a 	mov	r4,zero
  809210:	003ef706 	br	808df0 <__udivdi3+0x1a4>
  809214:	01400204 	movi	r5,8
  809218:	2805883a 	mov	r2,r5
  80921c:	003ee706 	br	808dbc <__udivdi3+0x170>
  809220:	01400604 	movi	r5,24
  809224:	2805883a 	mov	r2,r5
  809228:	003ee406 	br	808dbc <__udivdi3+0x170>
  80922c:	01400204 	movi	r5,8
  809230:	2805883a 	mov	r2,r5
  809234:	003ea106 	br	808cbc <__udivdi3+0x70>
  809238:	01400604 	movi	r5,24
  80923c:	2805883a 	mov	r2,r5
  809240:	003e9e06 	br	808cbc <__udivdi3+0x70>
  809244:	01400204 	movi	r5,8
  809248:	2805883a 	mov	r2,r5
  80924c:	003eff06 	br	808e4c <__udivdi3+0x200>
  809250:	01400604 	movi	r5,24
  809254:	2805883a 	mov	r2,r5
  809258:	003efc06 	br	808e4c <__udivdi3+0x200>
  80925c:	1c3f862e 	bgeu	r3,r16,809078 <__udivdi3+0x42c>
  809260:	1dc7883a 	add	r3,r3,r23
  809264:	ad7fffc4 	addi	r21,r21,-1
  809268:	003f8306 	br	809078 <__udivdi3+0x42c>
  80926c:	157f6e2e 	bgeu	r2,r21,809028 <__udivdi3+0x3dc>
  809270:	a53fffc4 	addi	r20,r20,-1
  809274:	15c5883a 	add	r2,r2,r23
  809278:	003f6b06 	br	809028 <__udivdi3+0x3dc>
  80927c:	ad7fffc4 	addi	r21,r21,-1
  809280:	003ec206 	br	808d8c <__udivdi3+0x140>
  809284:	843fffc4 	addi	r16,r16,-1
  809288:	14c5883a 	add	r2,r2,r19
  80928c:	003f1306 	br	808edc <__udivdi3+0x290>
  809290:	ad7fffc4 	addi	r21,r21,-1
  809294:	003f2506 	br	808f2c <__udivdi3+0x2e0>
  809298:	157fb92e 	bgeu	r2,r21,809180 <__udivdi3+0x534>
  80929c:	297fffc4 	addi	r5,r5,-1
  8092a0:	14c5883a 	add	r2,r2,r19
  8092a4:	d9400215 	stw	r5,8(sp)
  8092a8:	003fb506 	br	809180 <__udivdi3+0x534>
  8092ac:	843fffc4 	addi	r16,r16,-1
  8092b0:	14c5883a 	add	r2,r2,r19
  8092b4:	003ea106 	br	808d3c <__udivdi3+0xf0>

008092b8 <__umoddi3>:
  8092b8:	defff004 	addi	sp,sp,-64
  8092bc:	3011883a 	mov	r8,r6
  8092c0:	000d883a 	mov	r6,zero
  8092c4:	dd400b15 	stw	r21,44(sp)
  8092c8:	dcc00915 	stw	r19,36(sp)
  8092cc:	dc000615 	stw	r16,24(sp)
  8092d0:	dfc00f15 	stw	ra,60(sp)
  8092d4:	df000e15 	stw	fp,56(sp)
  8092d8:	ddc00d15 	stw	r23,52(sp)
  8092dc:	dd800c15 	stw	r22,48(sp)
  8092e0:	dd000a15 	stw	r20,40(sp)
  8092e4:	dc800815 	stw	r18,32(sp)
  8092e8:	dc400715 	stw	r17,28(sp)
  8092ec:	2817883a 	mov	r11,r5
  8092f0:	d9800415 	stw	r6,16(sp)
  8092f4:	4027883a 	mov	r19,r8
  8092f8:	d9800515 	stw	r6,20(sp)
  8092fc:	2021883a 	mov	r16,r4
  809300:	282b883a 	mov	r21,r5
  809304:	38002c1e 	bne	r7,zero,8093b8 <__umoddi3+0x100>
  809308:	2a005636 	bltu	r5,r8,809464 <__umoddi3+0x1ac>
  80930c:	40009a26 	beq	r8,zero,809578 <__umoddi3+0x2c0>
  809310:	00bfffd4 	movui	r2,65535
  809314:	14c09236 	bltu	r2,r19,809560 <__umoddi3+0x2a8>
  809318:	00803fc4 	movi	r2,255
  80931c:	14c15c36 	bltu	r2,r19,809890 <__umoddi3+0x5d8>
  809320:	000b883a 	mov	r5,zero
  809324:	0005883a 	mov	r2,zero
  809328:	9884d83a 	srl	r2,r19,r2
  80932c:	01002074 	movhi	r4,129
  809330:	21125004 	addi	r4,r4,18752
  809334:	01800804 	movi	r6,32
  809338:	1105883a 	add	r2,r2,r4
  80933c:	10c00003 	ldbu	r3,0(r2)
  809340:	28c7883a 	add	r3,r5,r3
  809344:	30e5c83a 	sub	r18,r6,r3
  809348:	9000a41e 	bne	r18,zero,8095dc <__umoddi3+0x324>
  80934c:	982ed43a 	srli	r23,r19,16
  809350:	acebc83a 	sub	r21,r21,r19
  809354:	9d3fffcc 	andi	r20,r19,65535
  809358:	002d883a 	mov	r22,zero
  80935c:	a809883a 	mov	r4,r21
  809360:	b80b883a 	mov	r5,r23
  809364:	08017a40 	call	8017a4 <__udivsi3>
  809368:	100b883a 	mov	r5,r2
  80936c:	a009883a 	mov	r4,r20
  809370:	08017b40 	call	8017b4 <__mulsi3>
  809374:	a809883a 	mov	r4,r21
  809378:	b80b883a 	mov	r5,r23
  80937c:	1023883a 	mov	r17,r2
  809380:	08017ac0 	call	8017ac <__umodsi3>
  809384:	1004943a 	slli	r2,r2,16
  809388:	8006d43a 	srli	r3,r16,16
  80938c:	10c4b03a 	or	r2,r2,r3
  809390:	1440032e 	bgeu	r2,r17,8093a0 <__umoddi3+0xe8>
  809394:	14c5883a 	add	r2,r2,r19
  809398:	14c00136 	bltu	r2,r19,8093a0 <__umoddi3+0xe8>
  80939c:	14415836 	bltu	r2,r17,809900 <__umoddi3+0x648>
  8093a0:	1463c83a 	sub	r17,r2,r17
  8093a4:	8809883a 	mov	r4,r17
  8093a8:	b80b883a 	mov	r5,r23
  8093ac:	08017a40 	call	8017a4 <__udivsi3>
  8093b0:	a009883a 	mov	r4,r20
  8093b4:	00005306 	br	809504 <__umoddi3+0x24c>
  8093b8:	380d883a 	mov	r6,r7
  8093bc:	29c0132e 	bgeu	r5,r7,80940c <__umoddi3+0x154>
  8093c0:	d9000415 	stw	r4,16(sp)
  8093c4:	d9400515 	stw	r5,20(sp)
  8093c8:	d9400417 	ldw	r5,16(sp)
  8093cc:	5813883a 	mov	r9,r11
  8093d0:	2811883a 	mov	r8,r5
  8093d4:	4005883a 	mov	r2,r8
  8093d8:	4807883a 	mov	r3,r9
  8093dc:	dfc00f17 	ldw	ra,60(sp)
  8093e0:	df000e17 	ldw	fp,56(sp)
  8093e4:	ddc00d17 	ldw	r23,52(sp)
  8093e8:	dd800c17 	ldw	r22,48(sp)
  8093ec:	dd400b17 	ldw	r21,44(sp)
  8093f0:	dd000a17 	ldw	r20,40(sp)
  8093f4:	dcc00917 	ldw	r19,36(sp)
  8093f8:	dc800817 	ldw	r18,32(sp)
  8093fc:	dc400717 	ldw	r17,28(sp)
  809400:	dc000617 	ldw	r16,24(sp)
  809404:	dec01004 	addi	sp,sp,64
  809408:	f800283a 	ret
  80940c:	00bfffd4 	movui	r2,65535
  809410:	11c06636 	bltu	r2,r7,8095ac <__umoddi3+0x2f4>
  809414:	00803fc4 	movi	r2,255
  809418:	11c12036 	bltu	r2,r7,80989c <__umoddi3+0x5e4>
  80941c:	000b883a 	mov	r5,zero
  809420:	0005883a 	mov	r2,zero
  809424:	3084d83a 	srl	r2,r6,r2
  809428:	01002074 	movhi	r4,129
  80942c:	21125004 	addi	r4,r4,18752
  809430:	01c00804 	movi	r7,32
  809434:	1105883a 	add	r2,r2,r4
  809438:	10c00003 	ldbu	r3,0(r2)
  80943c:	28c7883a 	add	r3,r5,r3
  809440:	38e5c83a 	sub	r18,r7,r3
  809444:	9000941e 	bne	r18,zero,809698 <__umoddi3+0x3e0>
  809448:	35405e36 	bltu	r6,r21,8095c4 <__umoddi3+0x30c>
  80944c:	84c05d2e 	bgeu	r16,r19,8095c4 <__umoddi3+0x30c>
  809450:	8011883a 	mov	r8,r16
  809454:	a813883a 	mov	r9,r21
  809458:	dc000415 	stw	r16,16(sp)
  80945c:	dd400515 	stw	r21,20(sp)
  809460:	003fdc06 	br	8093d4 <__umoddi3+0x11c>
  809464:	00bfffd4 	movui	r2,65535
  809468:	12004a36 	bltu	r2,r8,809594 <__umoddi3+0x2dc>
  80946c:	00803fc4 	movi	r2,255
  809470:	12010d36 	bltu	r2,r8,8098a8 <__umoddi3+0x5f0>
  809474:	000b883a 	mov	r5,zero
  809478:	0005883a 	mov	r2,zero
  80947c:	9884d83a 	srl	r2,r19,r2
  809480:	01002074 	movhi	r4,129
  809484:	21125004 	addi	r4,r4,18752
  809488:	01800804 	movi	r6,32
  80948c:	1105883a 	add	r2,r2,r4
  809490:	10c00003 	ldbu	r3,0(r2)
  809494:	28c7883a 	add	r3,r5,r3
  809498:	30c7c83a 	sub	r3,r6,r3
  80949c:	1800dc1e 	bne	r3,zero,809810 <__umoddi3+0x558>
  8094a0:	002d883a 	mov	r22,zero
  8094a4:	982ed43a 	srli	r23,r19,16
  8094a8:	a809883a 	mov	r4,r21
  8094ac:	9cbfffcc 	andi	r18,r19,65535
  8094b0:	b80b883a 	mov	r5,r23
  8094b4:	08017a40 	call	8017a4 <__udivsi3>
  8094b8:	100b883a 	mov	r5,r2
  8094bc:	9009883a 	mov	r4,r18
  8094c0:	08017b40 	call	8017b4 <__mulsi3>
  8094c4:	a809883a 	mov	r4,r21
  8094c8:	b80b883a 	mov	r5,r23
  8094cc:	1023883a 	mov	r17,r2
  8094d0:	08017ac0 	call	8017ac <__umodsi3>
  8094d4:	1004943a 	slli	r2,r2,16
  8094d8:	8006d43a 	srli	r3,r16,16
  8094dc:	10c4b03a 	or	r2,r2,r3
  8094e0:	1440032e 	bgeu	r2,r17,8094f0 <__umoddi3+0x238>
  8094e4:	14c5883a 	add	r2,r2,r19
  8094e8:	14c00136 	bltu	r2,r19,8094f0 <__umoddi3+0x238>
  8094ec:	14410236 	bltu	r2,r17,8098f8 <__umoddi3+0x640>
  8094f0:	1463c83a 	sub	r17,r2,r17
  8094f4:	8809883a 	mov	r4,r17
  8094f8:	b80b883a 	mov	r5,r23
  8094fc:	08017a40 	call	8017a4 <__udivsi3>
  809500:	9009883a 	mov	r4,r18
  809504:	100b883a 	mov	r5,r2
  809508:	08017b40 	call	8017b4 <__mulsi3>
  80950c:	8809883a 	mov	r4,r17
  809510:	b80b883a 	mov	r5,r23
  809514:	102b883a 	mov	r21,r2
  809518:	08017ac0 	call	8017ac <__umodsi3>
  80951c:	1004943a 	slli	r2,r2,16
  809520:	80ffffcc 	andi	r3,r16,65535
  809524:	10c4b03a 	or	r2,r2,r3
  809528:	1540042e 	bgeu	r2,r21,80953c <__umoddi3+0x284>
  80952c:	14c5883a 	add	r2,r2,r19
  809530:	14c00236 	bltu	r2,r19,80953c <__umoddi3+0x284>
  809534:	1540012e 	bgeu	r2,r21,80953c <__umoddi3+0x284>
  809538:	14c5883a 	add	r2,r2,r19
  80953c:	1545c83a 	sub	r2,r2,r21
  809540:	1584d83a 	srl	r2,r2,r22
  809544:	0013883a 	mov	r9,zero
  809548:	d8800415 	stw	r2,16(sp)
  80954c:	d8c00417 	ldw	r3,16(sp)
  809550:	0005883a 	mov	r2,zero
  809554:	d8800515 	stw	r2,20(sp)
  809558:	1811883a 	mov	r8,r3
  80955c:	003f9d06 	br	8093d4 <__umoddi3+0x11c>
  809560:	00804034 	movhi	r2,256
  809564:	10bfffc4 	addi	r2,r2,-1
  809568:	14c0c636 	bltu	r2,r19,809884 <__umoddi3+0x5cc>
  80956c:	01400404 	movi	r5,16
  809570:	2805883a 	mov	r2,r5
  809574:	003f6c06 	br	809328 <__umoddi3+0x70>
  809578:	01000044 	movi	r4,1
  80957c:	000b883a 	mov	r5,zero
  809580:	08017a40 	call	8017a4 <__udivsi3>
  809584:	1027883a 	mov	r19,r2
  809588:	00bfffd4 	movui	r2,65535
  80958c:	14fff436 	bltu	r2,r19,809560 <__umoddi3+0x2a8>
  809590:	003f6106 	br	809318 <__umoddi3+0x60>
  809594:	00804034 	movhi	r2,256
  809598:	10bfffc4 	addi	r2,r2,-1
  80959c:	1200c536 	bltu	r2,r8,8098b4 <__umoddi3+0x5fc>
  8095a0:	01400404 	movi	r5,16
  8095a4:	2805883a 	mov	r2,r5
  8095a8:	003fb406 	br	80947c <__umoddi3+0x1c4>
  8095ac:	00804034 	movhi	r2,256
  8095b0:	10bfffc4 	addi	r2,r2,-1
  8095b4:	11c0c236 	bltu	r2,r7,8098c0 <__umoddi3+0x608>
  8095b8:	01400404 	movi	r5,16
  8095bc:	2805883a 	mov	r2,r5
  8095c0:	003f9806 	br	809424 <__umoddi3+0x16c>
  8095c4:	84c9c83a 	sub	r4,r16,r19
  8095c8:	8105803a 	cmpltu	r2,r16,r4
  8095cc:	a987c83a 	sub	r3,r21,r6
  8095d0:	18abc83a 	sub	r21,r3,r2
  8095d4:	2021883a 	mov	r16,r4
  8095d8:	003f9d06 	br	809450 <__umoddi3+0x198>
  8095dc:	9ca6983a 	sll	r19,r19,r18
  8095e0:	3485c83a 	sub	r2,r6,r18
  8095e4:	a8a2d83a 	srl	r17,r21,r2
  8095e8:	982ed43a 	srli	r23,r19,16
  8095ec:	ac86983a 	sll	r3,r21,r18
  8095f0:	8084d83a 	srl	r2,r16,r2
  8095f4:	8809883a 	mov	r4,r17
  8095f8:	b80b883a 	mov	r5,r23
  8095fc:	18b8b03a 	or	fp,r3,r2
  809600:	9d3fffcc 	andi	r20,r19,65535
  809604:	08017a40 	call	8017a4 <__udivsi3>
  809608:	100b883a 	mov	r5,r2
  80960c:	a009883a 	mov	r4,r20
  809610:	08017b40 	call	8017b4 <__mulsi3>
  809614:	8809883a 	mov	r4,r17
  809618:	b80b883a 	mov	r5,r23
  80961c:	102b883a 	mov	r21,r2
  809620:	08017ac0 	call	8017ac <__umodsi3>
  809624:	1004943a 	slli	r2,r2,16
  809628:	e006d43a 	srli	r3,fp,16
  80962c:	902d883a 	mov	r22,r18
  809630:	10c4b03a 	or	r2,r2,r3
  809634:	1540022e 	bgeu	r2,r21,809640 <__umoddi3+0x388>
  809638:	14c5883a 	add	r2,r2,r19
  80963c:	14c0ab2e 	bgeu	r2,r19,8098ec <__umoddi3+0x634>
  809640:	1563c83a 	sub	r17,r2,r21
  809644:	8809883a 	mov	r4,r17
  809648:	b80b883a 	mov	r5,r23
  80964c:	08017a40 	call	8017a4 <__udivsi3>
  809650:	100b883a 	mov	r5,r2
  809654:	a009883a 	mov	r4,r20
  809658:	08017b40 	call	8017b4 <__mulsi3>
  80965c:	8809883a 	mov	r4,r17
  809660:	b80b883a 	mov	r5,r23
  809664:	102b883a 	mov	r21,r2
  809668:	08017ac0 	call	8017ac <__umodsi3>
  80966c:	1004943a 	slli	r2,r2,16
  809670:	e0ffffcc 	andi	r3,fp,65535
  809674:	10c4b03a 	or	r2,r2,r3
  809678:	1540042e 	bgeu	r2,r21,80968c <__umoddi3+0x3d4>
  80967c:	14c5883a 	add	r2,r2,r19
  809680:	14c00236 	bltu	r2,r19,80968c <__umoddi3+0x3d4>
  809684:	1540012e 	bgeu	r2,r21,80968c <__umoddi3+0x3d4>
  809688:	14c5883a 	add	r2,r2,r19
  80968c:	84a0983a 	sll	r16,r16,r18
  809690:	156bc83a 	sub	r21,r2,r21
  809694:	003f3106 	br	80935c <__umoddi3+0xa4>
  809698:	3c8fc83a 	sub	r7,r7,r18
  80969c:	3486983a 	sll	r3,r6,r18
  8096a0:	99c4d83a 	srl	r2,r19,r7
  8096a4:	a9e2d83a 	srl	r17,r21,r7
  8096a8:	ac8c983a 	sll	r6,r21,r18
  8096ac:	18acb03a 	or	r22,r3,r2
  8096b0:	b02ed43a 	srli	r23,r22,16
  8096b4:	81c4d83a 	srl	r2,r16,r7
  8096b8:	8809883a 	mov	r4,r17
  8096bc:	b80b883a 	mov	r5,r23
  8096c0:	308cb03a 	or	r6,r6,r2
  8096c4:	d9c00315 	stw	r7,12(sp)
  8096c8:	d9800215 	stw	r6,8(sp)
  8096cc:	b53fffcc 	andi	r20,r22,65535
  8096d0:	08017a40 	call	8017a4 <__udivsi3>
  8096d4:	100b883a 	mov	r5,r2
  8096d8:	a009883a 	mov	r4,r20
  8096dc:	1039883a 	mov	fp,r2
  8096e0:	08017b40 	call	8017b4 <__mulsi3>
  8096e4:	8809883a 	mov	r4,r17
  8096e8:	b80b883a 	mov	r5,r23
  8096ec:	102b883a 	mov	r21,r2
  8096f0:	08017ac0 	call	8017ac <__umodsi3>
  8096f4:	d9000217 	ldw	r4,8(sp)
  8096f8:	1004943a 	slli	r2,r2,16
  8096fc:	9ca6983a 	sll	r19,r19,r18
  809700:	2006d43a 	srli	r3,r4,16
  809704:	84a0983a 	sll	r16,r16,r18
  809708:	dcc00015 	stw	r19,0(sp)
  80970c:	10c4b03a 	or	r2,r2,r3
  809710:	dc000115 	stw	r16,4(sp)
  809714:	1540032e 	bgeu	r2,r21,809724 <__umoddi3+0x46c>
  809718:	1585883a 	add	r2,r2,r22
  80971c:	e73fffc4 	addi	fp,fp,-1
  809720:	15806e2e 	bgeu	r2,r22,8098dc <__umoddi3+0x624>
  809724:	1563c83a 	sub	r17,r2,r21
  809728:	8809883a 	mov	r4,r17
  80972c:	b80b883a 	mov	r5,r23
  809730:	08017a40 	call	8017a4 <__udivsi3>
  809734:	100b883a 	mov	r5,r2
  809738:	a009883a 	mov	r4,r20
  80973c:	1021883a 	mov	r16,r2
  809740:	08017b40 	call	8017b4 <__mulsi3>
  809744:	b80b883a 	mov	r5,r23
  809748:	8809883a 	mov	r4,r17
  80974c:	1029883a 	mov	r20,r2
  809750:	08017ac0 	call	8017ac <__umodsi3>
  809754:	d9400217 	ldw	r5,8(sp)
  809758:	1004943a 	slli	r2,r2,16
  80975c:	28ffffcc 	andi	r3,r5,65535
  809760:	10c4b03a 	or	r2,r2,r3
  809764:	1500032e 	bgeu	r2,r20,809774 <__umoddi3+0x4bc>
  809768:	1585883a 	add	r2,r2,r22
  80976c:	843fffc4 	addi	r16,r16,-1
  809770:	1580562e 	bgeu	r2,r22,8098cc <__umoddi3+0x614>
  809774:	d9800017 	ldw	r6,0(sp)
  809778:	e022943a 	slli	r17,fp,16
  80977c:	302ed43a 	srli	r23,r6,16
  809780:	8462b03a 	or	r17,r16,r17
  809784:	34ffffcc 	andi	r19,r6,65535
  809788:	882ad43a 	srli	r21,r17,16
  80978c:	8c7fffcc 	andi	r17,r17,65535
  809790:	8809883a 	mov	r4,r17
  809794:	980b883a 	mov	r5,r19
  809798:	1521c83a 	sub	r16,r2,r20
  80979c:	08017b40 	call	8017b4 <__mulsi3>
  8097a0:	8809883a 	mov	r4,r17
  8097a4:	b80b883a 	mov	r5,r23
  8097a8:	1029883a 	mov	r20,r2
  8097ac:	08017b40 	call	8017b4 <__mulsi3>
  8097b0:	980b883a 	mov	r5,r19
  8097b4:	a809883a 	mov	r4,r21
  8097b8:	1023883a 	mov	r17,r2
  8097bc:	08017b40 	call	8017b4 <__mulsi3>
  8097c0:	a809883a 	mov	r4,r21
  8097c4:	b80b883a 	mov	r5,r23
  8097c8:	1027883a 	mov	r19,r2
  8097cc:	08017b40 	call	8017b4 <__mulsi3>
  8097d0:	100b883a 	mov	r5,r2
  8097d4:	a004d43a 	srli	r2,r20,16
  8097d8:	8ce3883a 	add	r17,r17,r19
  8097dc:	1449883a 	add	r4,r2,r17
  8097e0:	24c0022e 	bgeu	r4,r19,8097ec <__umoddi3+0x534>
  8097e4:	00800074 	movhi	r2,1
  8097e8:	288b883a 	add	r5,r5,r2
  8097ec:	2004d43a 	srli	r2,r4,16
  8097f0:	2008943a 	slli	r4,r4,16
  8097f4:	a0ffffcc 	andi	r3,r20,65535
  8097f8:	288d883a 	add	r6,r5,r2
  8097fc:	20c9883a 	add	r4,r4,r3
  809800:	81800b36 	bltu	r16,r6,809830 <__umoddi3+0x578>
  809804:	81804026 	beq	r16,r6,809908 <__umoddi3+0x650>
  809808:	818dc83a 	sub	r6,r16,r6
  80980c:	00000f06 	br	80984c <__umoddi3+0x594>
  809810:	30c5c83a 	sub	r2,r6,r3
  809814:	182d883a 	mov	r22,r3
  809818:	8084d83a 	srl	r2,r16,r2
  80981c:	a8c6983a 	sll	r3,r21,r3
  809820:	9da6983a 	sll	r19,r19,r22
  809824:	85a0983a 	sll	r16,r16,r22
  809828:	18aab03a 	or	r21,r3,r2
  80982c:	003f1d06 	br	8094a4 <__umoddi3+0x1ec>
  809830:	d8c00017 	ldw	r3,0(sp)
  809834:	20c5c83a 	sub	r2,r4,r3
  809838:	2089803a 	cmpltu	r4,r4,r2
  80983c:	3587c83a 	sub	r3,r6,r22
  809840:	1907c83a 	sub	r3,r3,r4
  809844:	80cdc83a 	sub	r6,r16,r3
  809848:	1009883a 	mov	r4,r2
  80984c:	d9400117 	ldw	r5,4(sp)
  809850:	2905c83a 	sub	r2,r5,r4
  809854:	2887803a 	cmpltu	r3,r5,r2
  809858:	30c7c83a 	sub	r3,r6,r3
  80985c:	d9800317 	ldw	r6,12(sp)
  809860:	1484d83a 	srl	r2,r2,r18
  809864:	1988983a 	sll	r4,r3,r6
  809868:	1c86d83a 	srl	r3,r3,r18
  80986c:	2088b03a 	or	r4,r4,r2
  809870:	2011883a 	mov	r8,r4
  809874:	1813883a 	mov	r9,r3
  809878:	d9000415 	stw	r4,16(sp)
  80987c:	d8c00515 	stw	r3,20(sp)
  809880:	003ed406 	br	8093d4 <__umoddi3+0x11c>
  809884:	01400604 	movi	r5,24
  809888:	2805883a 	mov	r2,r5
  80988c:	003ea606 	br	809328 <__umoddi3+0x70>
  809890:	01400204 	movi	r5,8
  809894:	2805883a 	mov	r2,r5
  809898:	003ea306 	br	809328 <__umoddi3+0x70>
  80989c:	01400204 	movi	r5,8
  8098a0:	2805883a 	mov	r2,r5
  8098a4:	003edf06 	br	809424 <__umoddi3+0x16c>
  8098a8:	01400204 	movi	r5,8
  8098ac:	2805883a 	mov	r2,r5
  8098b0:	003ef206 	br	80947c <__umoddi3+0x1c4>
  8098b4:	01400604 	movi	r5,24
  8098b8:	2805883a 	mov	r2,r5
  8098bc:	003eef06 	br	80947c <__umoddi3+0x1c4>
  8098c0:	01400604 	movi	r5,24
  8098c4:	2805883a 	mov	r2,r5
  8098c8:	003ed606 	br	809424 <__umoddi3+0x16c>
  8098cc:	153fa92e 	bgeu	r2,r20,809774 <__umoddi3+0x4bc>
  8098d0:	843fffc4 	addi	r16,r16,-1
  8098d4:	1585883a 	add	r2,r2,r22
  8098d8:	003fa606 	br	809774 <__umoddi3+0x4bc>
  8098dc:	157f912e 	bgeu	r2,r21,809724 <__umoddi3+0x46c>
  8098e0:	e73fffc4 	addi	fp,fp,-1
  8098e4:	1585883a 	add	r2,r2,r22
  8098e8:	003f8e06 	br	809724 <__umoddi3+0x46c>
  8098ec:	157f542e 	bgeu	r2,r21,809640 <__umoddi3+0x388>
  8098f0:	14c5883a 	add	r2,r2,r19
  8098f4:	003f5206 	br	809640 <__umoddi3+0x388>
  8098f8:	14c5883a 	add	r2,r2,r19
  8098fc:	003efc06 	br	8094f0 <__umoddi3+0x238>
  809900:	14c5883a 	add	r2,r2,r19
  809904:	003ea606 	br	8093a0 <__umoddi3+0xe8>
  809908:	d8800117 	ldw	r2,4(sp)
  80990c:	113fc836 	bltu	r2,r4,809830 <__umoddi3+0x578>
  809910:	000d883a 	mov	r6,zero
  809914:	003fcd06 	br	80984c <__umoddi3+0x594>

00809918 <_fpadd_parts>:
  809918:	defff804 	addi	sp,sp,-32
  80991c:	dcc00315 	stw	r19,12(sp)
  809920:	2027883a 	mov	r19,r4
  809924:	21000017 	ldw	r4,0(r4)
  809928:	00c00044 	movi	r3,1
  80992c:	dd400515 	stw	r21,20(sp)
  809930:	dd000415 	stw	r20,16(sp)
  809934:	ddc00715 	stw	r23,28(sp)
  809938:	dd800615 	stw	r22,24(sp)
  80993c:	dc800215 	stw	r18,8(sp)
  809940:	dc400115 	stw	r17,4(sp)
  809944:	dc000015 	stw	r16,0(sp)
  809948:	282b883a 	mov	r21,r5
  80994c:	3029883a 	mov	r20,r6
  809950:	1900632e 	bgeu	r3,r4,809ae0 <_fpadd_parts+0x1c8>
  809954:	28800017 	ldw	r2,0(r5)
  809958:	1880812e 	bgeu	r3,r2,809b60 <_fpadd_parts+0x248>
  80995c:	00c00104 	movi	r3,4
  809960:	20c0dc26 	beq	r4,r3,809cd4 <_fpadd_parts+0x3bc>
  809964:	10c07e26 	beq	r2,r3,809b60 <_fpadd_parts+0x248>
  809968:	00c00084 	movi	r3,2
  80996c:	10c06726 	beq	r2,r3,809b0c <_fpadd_parts+0x1f4>
  809970:	20c07b26 	beq	r4,r3,809b60 <_fpadd_parts+0x248>
  809974:	9dc00217 	ldw	r23,8(r19)
  809978:	28c00217 	ldw	r3,8(r5)
  80997c:	9c400317 	ldw	r17,12(r19)
  809980:	2bc00317 	ldw	r15,12(r5)
  809984:	b8cdc83a 	sub	r6,r23,r3
  809988:	9c800417 	ldw	r18,16(r19)
  80998c:	2c000417 	ldw	r16,16(r5)
  809990:	3009883a 	mov	r4,r6
  809994:	30009716 	blt	r6,zero,809bf4 <_fpadd_parts+0x2dc>
  809998:	00800fc4 	movi	r2,63
  80999c:	11806b16 	blt	r2,r6,809b4c <_fpadd_parts+0x234>
  8099a0:	0100a40e 	bge	zero,r4,809c34 <_fpadd_parts+0x31c>
  8099a4:	35bff804 	addi	r22,r6,-32
  8099a8:	b000bc16 	blt	r22,zero,809c9c <_fpadd_parts+0x384>
  8099ac:	8596d83a 	srl	r11,r16,r22
  8099b0:	0019883a 	mov	r12,zero
  8099b4:	0013883a 	mov	r9,zero
  8099b8:	01000044 	movi	r4,1
  8099bc:	0015883a 	mov	r10,zero
  8099c0:	b000be16 	blt	r22,zero,809cbc <_fpadd_parts+0x3a4>
  8099c4:	2590983a 	sll	r8,r4,r22
  8099c8:	000f883a 	mov	r7,zero
  8099cc:	00bfffc4 	movi	r2,-1
  8099d0:	3889883a 	add	r4,r7,r2
  8099d4:	408b883a 	add	r5,r8,r2
  8099d8:	21cd803a 	cmpltu	r6,r4,r7
  8099dc:	314b883a 	add	r5,r6,r5
  8099e0:	7904703a 	and	r2,r15,r4
  8099e4:	8146703a 	and	r3,r16,r5
  8099e8:	10c4b03a 	or	r2,r2,r3
  8099ec:	10000226 	beq	r2,zero,8099f8 <_fpadd_parts+0xe0>
  8099f0:	02400044 	movi	r9,1
  8099f4:	0015883a 	mov	r10,zero
  8099f8:	5a5eb03a 	or	r15,r11,r9
  8099fc:	62a0b03a 	or	r16,r12,r10
  809a00:	99400117 	ldw	r5,4(r19)
  809a04:	a8800117 	ldw	r2,4(r21)
  809a08:	28806e26 	beq	r5,r2,809bc4 <_fpadd_parts+0x2ac>
  809a0c:	28006626 	beq	r5,zero,809ba8 <_fpadd_parts+0x290>
  809a10:	7c45c83a 	sub	r2,r15,r17
  809a14:	7889803a 	cmpltu	r4,r15,r2
  809a18:	8487c83a 	sub	r3,r16,r18
  809a1c:	1909c83a 	sub	r4,r3,r4
  809a20:	100d883a 	mov	r6,r2
  809a24:	200f883a 	mov	r7,r4
  809a28:	38007716 	blt	r7,zero,809c08 <_fpadd_parts+0x2f0>
  809a2c:	a5c00215 	stw	r23,8(r20)
  809a30:	a1c00415 	stw	r7,16(r20)
  809a34:	a0000115 	stw	zero,4(r20)
  809a38:	a1800315 	stw	r6,12(r20)
  809a3c:	a2000317 	ldw	r8,12(r20)
  809a40:	a2400417 	ldw	r9,16(r20)
  809a44:	00bfffc4 	movi	r2,-1
  809a48:	408b883a 	add	r5,r8,r2
  809a4c:	2a09803a 	cmpltu	r4,r5,r8
  809a50:	488d883a 	add	r6,r9,r2
  809a54:	01c40034 	movhi	r7,4096
  809a58:	39ffffc4 	addi	r7,r7,-1
  809a5c:	218d883a 	add	r6,r4,r6
  809a60:	39801736 	bltu	r7,r6,809ac0 <_fpadd_parts+0x1a8>
  809a64:	31c06526 	beq	r6,r7,809bfc <_fpadd_parts+0x2e4>
  809a68:	a3000217 	ldw	r12,8(r20)
  809a6c:	4209883a 	add	r4,r8,r8
  809a70:	00bfffc4 	movi	r2,-1
  809a74:	220f803a 	cmpltu	r7,r4,r8
  809a78:	4a4b883a 	add	r5,r9,r9
  809a7c:	394f883a 	add	r7,r7,r5
  809a80:	2095883a 	add	r10,r4,r2
  809a84:	3897883a 	add	r11,r7,r2
  809a88:	510d803a 	cmpltu	r6,r10,r4
  809a8c:	6099883a 	add	r12,r12,r2
  809a90:	32d7883a 	add	r11,r6,r11
  809a94:	00840034 	movhi	r2,4096
  809a98:	10bfffc4 	addi	r2,r2,-1
  809a9c:	2011883a 	mov	r8,r4
  809aa0:	3813883a 	mov	r9,r7
  809aa4:	a1000315 	stw	r4,12(r20)
  809aa8:	a1c00415 	stw	r7,16(r20)
  809aac:	a3000215 	stw	r12,8(r20)
  809ab0:	12c00336 	bltu	r2,r11,809ac0 <_fpadd_parts+0x1a8>
  809ab4:	58bfed1e 	bne	r11,r2,809a6c <_fpadd_parts+0x154>
  809ab8:	00bfff84 	movi	r2,-2
  809abc:	12bfeb2e 	bgeu	r2,r10,809a6c <_fpadd_parts+0x154>
  809ac0:	a2800417 	ldw	r10,16(r20)
  809ac4:	008000c4 	movi	r2,3
  809ac8:	00c80034 	movhi	r3,8192
  809acc:	18ffffc4 	addi	r3,r3,-1
  809ad0:	a2400317 	ldw	r9,12(r20)
  809ad4:	a0800015 	stw	r2,0(r20)
  809ad8:	1a802336 	bltu	r3,r10,809b68 <_fpadd_parts+0x250>
  809adc:	a027883a 	mov	r19,r20
  809ae0:	9805883a 	mov	r2,r19
  809ae4:	ddc00717 	ldw	r23,28(sp)
  809ae8:	dd800617 	ldw	r22,24(sp)
  809aec:	dd400517 	ldw	r21,20(sp)
  809af0:	dd000417 	ldw	r20,16(sp)
  809af4:	dcc00317 	ldw	r19,12(sp)
  809af8:	dc800217 	ldw	r18,8(sp)
  809afc:	dc400117 	ldw	r17,4(sp)
  809b00:	dc000017 	ldw	r16,0(sp)
  809b04:	dec00804 	addi	sp,sp,32
  809b08:	f800283a 	ret
  809b0c:	20fff41e 	bne	r4,r3,809ae0 <_fpadd_parts+0x1c8>
  809b10:	31000015 	stw	r4,0(r6)
  809b14:	98800117 	ldw	r2,4(r19)
  809b18:	30800115 	stw	r2,4(r6)
  809b1c:	98c00217 	ldw	r3,8(r19)
  809b20:	30c00215 	stw	r3,8(r6)
  809b24:	98800317 	ldw	r2,12(r19)
  809b28:	30800315 	stw	r2,12(r6)
  809b2c:	98c00417 	ldw	r3,16(r19)
  809b30:	30c00415 	stw	r3,16(r6)
  809b34:	98800117 	ldw	r2,4(r19)
  809b38:	28c00117 	ldw	r3,4(r5)
  809b3c:	3027883a 	mov	r19,r6
  809b40:	10c4703a 	and	r2,r2,r3
  809b44:	30800115 	stw	r2,4(r6)
  809b48:	003fe506 	br	809ae0 <_fpadd_parts+0x1c8>
  809b4c:	1dc02616 	blt	r3,r23,809be8 <_fpadd_parts+0x2d0>
  809b50:	0023883a 	mov	r17,zero
  809b54:	182f883a 	mov	r23,r3
  809b58:	0025883a 	mov	r18,zero
  809b5c:	003fa806 	br	809a00 <_fpadd_parts+0xe8>
  809b60:	a827883a 	mov	r19,r21
  809b64:	003fde06 	br	809ae0 <_fpadd_parts+0x1c8>
  809b68:	01800044 	movi	r6,1
  809b6c:	500497fa 	slli	r2,r10,31
  809b70:	4808d07a 	srli	r4,r9,1
  809b74:	518ad83a 	srl	r5,r10,r6
  809b78:	a2000217 	ldw	r8,8(r20)
  809b7c:	1108b03a 	or	r4,r2,r4
  809b80:	0007883a 	mov	r3,zero
  809b84:	4984703a 	and	r2,r9,r6
  809b88:	208cb03a 	or	r6,r4,r2
  809b8c:	28ceb03a 	or	r7,r5,r3
  809b90:	42000044 	addi	r8,r8,1
  809b94:	a027883a 	mov	r19,r20
  809b98:	a1c00415 	stw	r7,16(r20)
  809b9c:	a2000215 	stw	r8,8(r20)
  809ba0:	a1800315 	stw	r6,12(r20)
  809ba4:	003fce06 	br	809ae0 <_fpadd_parts+0x1c8>
  809ba8:	8bc5c83a 	sub	r2,r17,r15
  809bac:	8889803a 	cmpltu	r4,r17,r2
  809bb0:	9407c83a 	sub	r3,r18,r16
  809bb4:	1909c83a 	sub	r4,r3,r4
  809bb8:	100d883a 	mov	r6,r2
  809bbc:	200f883a 	mov	r7,r4
  809bc0:	003f9906 	br	809a28 <_fpadd_parts+0x110>
  809bc4:	7c45883a 	add	r2,r15,r17
  809bc8:	13c9803a 	cmpltu	r4,r2,r15
  809bcc:	8487883a 	add	r3,r16,r18
  809bd0:	20c9883a 	add	r4,r4,r3
  809bd4:	a1400115 	stw	r5,4(r20)
  809bd8:	a5c00215 	stw	r23,8(r20)
  809bdc:	a0800315 	stw	r2,12(r20)
  809be0:	a1000415 	stw	r4,16(r20)
  809be4:	003fb606 	br	809ac0 <_fpadd_parts+0x1a8>
  809be8:	001f883a 	mov	r15,zero
  809bec:	0021883a 	mov	r16,zero
  809bf0:	003f8306 	br	809a00 <_fpadd_parts+0xe8>
  809bf4:	018dc83a 	sub	r6,zero,r6
  809bf8:	003f6706 	br	809998 <_fpadd_parts+0x80>
  809bfc:	00bfff84 	movi	r2,-2
  809c00:	117faf36 	bltu	r2,r5,809ac0 <_fpadd_parts+0x1a8>
  809c04:	003f9806 	br	809a68 <_fpadd_parts+0x150>
  809c08:	0005883a 	mov	r2,zero
  809c0c:	1189c83a 	sub	r4,r2,r6
  809c10:	1105803a 	cmpltu	r2,r2,r4
  809c14:	01cbc83a 	sub	r5,zero,r7
  809c18:	2885c83a 	sub	r2,r5,r2
  809c1c:	01800044 	movi	r6,1
  809c20:	a1800115 	stw	r6,4(r20)
  809c24:	a5c00215 	stw	r23,8(r20)
  809c28:	a1000315 	stw	r4,12(r20)
  809c2c:	a0800415 	stw	r2,16(r20)
  809c30:	003f8206 	br	809a3c <_fpadd_parts+0x124>
  809c34:	203f7226 	beq	r4,zero,809a00 <_fpadd_parts+0xe8>
  809c38:	35bff804 	addi	r22,r6,-32
  809c3c:	b9af883a 	add	r23,r23,r6
  809c40:	b0003116 	blt	r22,zero,809d08 <_fpadd_parts+0x3f0>
  809c44:	959ad83a 	srl	r13,r18,r22
  809c48:	001d883a 	mov	r14,zero
  809c4c:	000f883a 	mov	r7,zero
  809c50:	01000044 	movi	r4,1
  809c54:	0011883a 	mov	r8,zero
  809c58:	b0002516 	blt	r22,zero,809cf0 <_fpadd_parts+0x3d8>
  809c5c:	2594983a 	sll	r10,r4,r22
  809c60:	0013883a 	mov	r9,zero
  809c64:	00bfffc4 	movi	r2,-1
  809c68:	4889883a 	add	r4,r9,r2
  809c6c:	508b883a 	add	r5,r10,r2
  809c70:	224d803a 	cmpltu	r6,r4,r9
  809c74:	314b883a 	add	r5,r6,r5
  809c78:	8904703a 	and	r2,r17,r4
  809c7c:	9146703a 	and	r3,r18,r5
  809c80:	10c4b03a 	or	r2,r2,r3
  809c84:	10000226 	beq	r2,zero,809c90 <_fpadd_parts+0x378>
  809c88:	01c00044 	movi	r7,1
  809c8c:	0011883a 	mov	r8,zero
  809c90:	69e2b03a 	or	r17,r13,r7
  809c94:	7224b03a 	or	r18,r14,r8
  809c98:	003f5906 	br	809a00 <_fpadd_parts+0xe8>
  809c9c:	8407883a 	add	r3,r16,r16
  809ca0:	008007c4 	movi	r2,31
  809ca4:	1185c83a 	sub	r2,r2,r6
  809ca8:	1886983a 	sll	r3,r3,r2
  809cac:	7996d83a 	srl	r11,r15,r6
  809cb0:	8198d83a 	srl	r12,r16,r6
  809cb4:	1ad6b03a 	or	r11,r3,r11
  809cb8:	003f3e06 	br	8099b4 <_fpadd_parts+0x9c>
  809cbc:	2006d07a 	srli	r3,r4,1
  809cc0:	008007c4 	movi	r2,31
  809cc4:	1185c83a 	sub	r2,r2,r6
  809cc8:	1890d83a 	srl	r8,r3,r2
  809ccc:	218e983a 	sll	r7,r4,r6
  809cd0:	003f3e06 	br	8099cc <_fpadd_parts+0xb4>
  809cd4:	113f821e 	bne	r2,r4,809ae0 <_fpadd_parts+0x1c8>
  809cd8:	28c00117 	ldw	r3,4(r5)
  809cdc:	98800117 	ldw	r2,4(r19)
  809ce0:	10ff7f26 	beq	r2,r3,809ae0 <_fpadd_parts+0x1c8>
  809ce4:	04c02074 	movhi	r19,129
  809ce8:	9cd24b04 	addi	r19,r19,18732
  809cec:	003f7c06 	br	809ae0 <_fpadd_parts+0x1c8>
  809cf0:	2006d07a 	srli	r3,r4,1
  809cf4:	008007c4 	movi	r2,31
  809cf8:	1185c83a 	sub	r2,r2,r6
  809cfc:	1894d83a 	srl	r10,r3,r2
  809d00:	2192983a 	sll	r9,r4,r6
  809d04:	003fd706 	br	809c64 <_fpadd_parts+0x34c>
  809d08:	9487883a 	add	r3,r18,r18
  809d0c:	008007c4 	movi	r2,31
  809d10:	1185c83a 	sub	r2,r2,r6
  809d14:	1886983a 	sll	r3,r3,r2
  809d18:	899ad83a 	srl	r13,r17,r6
  809d1c:	919cd83a 	srl	r14,r18,r6
  809d20:	1b5ab03a 	or	r13,r3,r13
  809d24:	003fc906 	br	809c4c <_fpadd_parts+0x334>

00809d28 <__subdf3>:
  809d28:	deffea04 	addi	sp,sp,-88
  809d2c:	dcc01415 	stw	r19,80(sp)
  809d30:	dcc00404 	addi	r19,sp,16
  809d34:	2011883a 	mov	r8,r4
  809d38:	2813883a 	mov	r9,r5
  809d3c:	dc401315 	stw	r17,76(sp)
  809d40:	d809883a 	mov	r4,sp
  809d44:	980b883a 	mov	r5,r19
  809d48:	dc400904 	addi	r17,sp,36
  809d4c:	dfc01515 	stw	ra,84(sp)
  809d50:	da400115 	stw	r9,4(sp)
  809d54:	d9c00315 	stw	r7,12(sp)
  809d58:	da000015 	stw	r8,0(sp)
  809d5c:	d9800215 	stw	r6,8(sp)
  809d60:	080aefc0 	call	80aefc <__unpack_d>
  809d64:	d9000204 	addi	r4,sp,8
  809d68:	880b883a 	mov	r5,r17
  809d6c:	080aefc0 	call	80aefc <__unpack_d>
  809d70:	d8800a17 	ldw	r2,40(sp)
  809d74:	880b883a 	mov	r5,r17
  809d78:	9809883a 	mov	r4,r19
  809d7c:	d9800e04 	addi	r6,sp,56
  809d80:	1080005c 	xori	r2,r2,1
  809d84:	d8800a15 	stw	r2,40(sp)
  809d88:	08099180 	call	809918 <_fpadd_parts>
  809d8c:	1009883a 	mov	r4,r2
  809d90:	080abe80 	call	80abe8 <__pack_d>
  809d94:	dfc01517 	ldw	ra,84(sp)
  809d98:	dcc01417 	ldw	r19,80(sp)
  809d9c:	dc401317 	ldw	r17,76(sp)
  809da0:	dec01604 	addi	sp,sp,88
  809da4:	f800283a 	ret

00809da8 <__adddf3>:
  809da8:	deffea04 	addi	sp,sp,-88
  809dac:	dcc01415 	stw	r19,80(sp)
  809db0:	dcc00404 	addi	r19,sp,16
  809db4:	2011883a 	mov	r8,r4
  809db8:	2813883a 	mov	r9,r5
  809dbc:	dc401315 	stw	r17,76(sp)
  809dc0:	d809883a 	mov	r4,sp
  809dc4:	980b883a 	mov	r5,r19
  809dc8:	dc400904 	addi	r17,sp,36
  809dcc:	dfc01515 	stw	ra,84(sp)
  809dd0:	da400115 	stw	r9,4(sp)
  809dd4:	d9c00315 	stw	r7,12(sp)
  809dd8:	da000015 	stw	r8,0(sp)
  809ddc:	d9800215 	stw	r6,8(sp)
  809de0:	080aefc0 	call	80aefc <__unpack_d>
  809de4:	d9000204 	addi	r4,sp,8
  809de8:	880b883a 	mov	r5,r17
  809dec:	080aefc0 	call	80aefc <__unpack_d>
  809df0:	d9800e04 	addi	r6,sp,56
  809df4:	9809883a 	mov	r4,r19
  809df8:	880b883a 	mov	r5,r17
  809dfc:	08099180 	call	809918 <_fpadd_parts>
  809e00:	1009883a 	mov	r4,r2
  809e04:	080abe80 	call	80abe8 <__pack_d>
  809e08:	dfc01517 	ldw	ra,84(sp)
  809e0c:	dcc01417 	ldw	r19,80(sp)
  809e10:	dc401317 	ldw	r17,76(sp)
  809e14:	dec01604 	addi	sp,sp,88
  809e18:	f800283a 	ret

00809e1c <__muldf3>:
  809e1c:	deffe004 	addi	sp,sp,-128
  809e20:	dc401815 	stw	r17,96(sp)
  809e24:	dc400404 	addi	r17,sp,16
  809e28:	2011883a 	mov	r8,r4
  809e2c:	2813883a 	mov	r9,r5
  809e30:	dc001715 	stw	r16,92(sp)
  809e34:	d809883a 	mov	r4,sp
  809e38:	880b883a 	mov	r5,r17
  809e3c:	dc000904 	addi	r16,sp,36
  809e40:	dfc01f15 	stw	ra,124(sp)
  809e44:	da400115 	stw	r9,4(sp)
  809e48:	d9c00315 	stw	r7,12(sp)
  809e4c:	da000015 	stw	r8,0(sp)
  809e50:	d9800215 	stw	r6,8(sp)
  809e54:	ddc01e15 	stw	r23,120(sp)
  809e58:	dd801d15 	stw	r22,116(sp)
  809e5c:	dd401c15 	stw	r21,112(sp)
  809e60:	dd001b15 	stw	r20,108(sp)
  809e64:	dcc01a15 	stw	r19,104(sp)
  809e68:	dc801915 	stw	r18,100(sp)
  809e6c:	080aefc0 	call	80aefc <__unpack_d>
  809e70:	d9000204 	addi	r4,sp,8
  809e74:	800b883a 	mov	r5,r16
  809e78:	080aefc0 	call	80aefc <__unpack_d>
  809e7c:	d9000417 	ldw	r4,16(sp)
  809e80:	00800044 	movi	r2,1
  809e84:	1100102e 	bgeu	r2,r4,809ec8 <__muldf3+0xac>
  809e88:	d8c00917 	ldw	r3,36(sp)
  809e8c:	10c0062e 	bgeu	r2,r3,809ea8 <__muldf3+0x8c>
  809e90:	00800104 	movi	r2,4
  809e94:	20800a26 	beq	r4,r2,809ec0 <__muldf3+0xa4>
  809e98:	1880cc26 	beq	r3,r2,80a1cc <__muldf3+0x3b0>
  809e9c:	00800084 	movi	r2,2
  809ea0:	20800926 	beq	r4,r2,809ec8 <__muldf3+0xac>
  809ea4:	1880191e 	bne	r3,r2,809f0c <__muldf3+0xf0>
  809ea8:	d8c00a17 	ldw	r3,40(sp)
  809eac:	d8800517 	ldw	r2,20(sp)
  809eb0:	8009883a 	mov	r4,r16
  809eb4:	10c4c03a 	cmpne	r2,r2,r3
  809eb8:	d8800a15 	stw	r2,40(sp)
  809ebc:	00000706 	br	809edc <__muldf3+0xc0>
  809ec0:	00800084 	movi	r2,2
  809ec4:	1880c326 	beq	r3,r2,80a1d4 <__muldf3+0x3b8>
  809ec8:	d8800517 	ldw	r2,20(sp)
  809ecc:	d8c00a17 	ldw	r3,40(sp)
  809ed0:	8809883a 	mov	r4,r17
  809ed4:	10c4c03a 	cmpne	r2,r2,r3
  809ed8:	d8800515 	stw	r2,20(sp)
  809edc:	080abe80 	call	80abe8 <__pack_d>
  809ee0:	dfc01f17 	ldw	ra,124(sp)
  809ee4:	ddc01e17 	ldw	r23,120(sp)
  809ee8:	dd801d17 	ldw	r22,116(sp)
  809eec:	dd401c17 	ldw	r21,112(sp)
  809ef0:	dd001b17 	ldw	r20,108(sp)
  809ef4:	dcc01a17 	ldw	r19,104(sp)
  809ef8:	dc801917 	ldw	r18,100(sp)
  809efc:	dc401817 	ldw	r17,96(sp)
  809f00:	dc001717 	ldw	r16,92(sp)
  809f04:	dec02004 	addi	sp,sp,128
  809f08:	f800283a 	ret
  809f0c:	dd800717 	ldw	r22,28(sp)
  809f10:	dc800c17 	ldw	r18,48(sp)
  809f14:	002b883a 	mov	r21,zero
  809f18:	0023883a 	mov	r17,zero
  809f1c:	a80b883a 	mov	r5,r21
  809f20:	b00d883a 	mov	r6,r22
  809f24:	880f883a 	mov	r7,r17
  809f28:	ddc00817 	ldw	r23,32(sp)
  809f2c:	dcc00d17 	ldw	r19,52(sp)
  809f30:	9009883a 	mov	r4,r18
  809f34:	080aa440 	call	80aa44 <__muldi3>
  809f38:	001b883a 	mov	r13,zero
  809f3c:	680f883a 	mov	r7,r13
  809f40:	b009883a 	mov	r4,r22
  809f44:	000b883a 	mov	r5,zero
  809f48:	980d883a 	mov	r6,r19
  809f4c:	b82d883a 	mov	r22,r23
  809f50:	002f883a 	mov	r23,zero
  809f54:	db401615 	stw	r13,88(sp)
  809f58:	d8801315 	stw	r2,76(sp)
  809f5c:	d8c01415 	stw	r3,80(sp)
  809f60:	dcc01515 	stw	r19,84(sp)
  809f64:	080aa440 	call	80aa44 <__muldi3>
  809f68:	b00d883a 	mov	r6,r22
  809f6c:	000b883a 	mov	r5,zero
  809f70:	9009883a 	mov	r4,r18
  809f74:	b80f883a 	mov	r7,r23
  809f78:	1021883a 	mov	r16,r2
  809f7c:	1823883a 	mov	r17,r3
  809f80:	080aa440 	call	80aa44 <__muldi3>
  809f84:	8085883a 	add	r2,r16,r2
  809f88:	140d803a 	cmpltu	r6,r2,r16
  809f8c:	88c7883a 	add	r3,r17,r3
  809f90:	30cd883a 	add	r6,r6,r3
  809f94:	1029883a 	mov	r20,r2
  809f98:	302b883a 	mov	r21,r6
  809f9c:	da801317 	ldw	r10,76(sp)
  809fa0:	dac01417 	ldw	r11,80(sp)
  809fa4:	db001517 	ldw	r12,84(sp)
  809fa8:	db401617 	ldw	r13,88(sp)
  809fac:	3440612e 	bgeu	r6,r17,80a134 <__muldf3+0x318>
  809fb0:	0009883a 	mov	r4,zero
  809fb4:	5105883a 	add	r2,r10,r4
  809fb8:	128d803a 	cmpltu	r6,r2,r10
  809fbc:	5d07883a 	add	r3,r11,r20
  809fc0:	30cd883a 	add	r6,r6,r3
  809fc4:	0021883a 	mov	r16,zero
  809fc8:	04400044 	movi	r17,1
  809fcc:	1025883a 	mov	r18,r2
  809fd0:	3027883a 	mov	r19,r6
  809fd4:	32c06236 	bltu	r6,r11,80a160 <__muldf3+0x344>
  809fd8:	59807a26 	beq	r11,r6,80a1c4 <__muldf3+0x3a8>
  809fdc:	680b883a 	mov	r5,r13
  809fe0:	b80f883a 	mov	r7,r23
  809fe4:	6009883a 	mov	r4,r12
  809fe8:	b00d883a 	mov	r6,r22
  809fec:	080aa440 	call	80aa44 <__muldi3>
  809ff0:	1009883a 	mov	r4,r2
  809ff4:	000f883a 	mov	r7,zero
  809ff8:	1545883a 	add	r2,r2,r21
  809ffc:	1111803a 	cmpltu	r8,r2,r4
  80a000:	19c7883a 	add	r3,r3,r7
  80a004:	40c7883a 	add	r3,r8,r3
  80a008:	88cb883a 	add	r5,r17,r3
  80a00c:	d8c00617 	ldw	r3,24(sp)
  80a010:	8089883a 	add	r4,r16,r2
  80a014:	d8800b17 	ldw	r2,44(sp)
  80a018:	18c00104 	addi	r3,r3,4
  80a01c:	240d803a 	cmpltu	r6,r4,r16
  80a020:	10c7883a 	add	r3,r2,r3
  80a024:	2013883a 	mov	r9,r4
  80a028:	d8800a17 	ldw	r2,40(sp)
  80a02c:	d9000517 	ldw	r4,20(sp)
  80a030:	314d883a 	add	r6,r6,r5
  80a034:	3015883a 	mov	r10,r6
  80a038:	2088c03a 	cmpne	r4,r4,r2
  80a03c:	00880034 	movhi	r2,8192
  80a040:	10bfffc4 	addi	r2,r2,-1
  80a044:	d9000f15 	stw	r4,60(sp)
  80a048:	d8c01015 	stw	r3,64(sp)
  80a04c:	1180162e 	bgeu	r2,r6,80a0a8 <__muldf3+0x28c>
  80a050:	1811883a 	mov	r8,r3
  80a054:	101f883a 	mov	r15,r2
  80a058:	980497fa 	slli	r2,r19,31
  80a05c:	9016d07a 	srli	r11,r18,1
  80a060:	500697fa 	slli	r3,r10,31
  80a064:	480cd07a 	srli	r6,r9,1
  80a068:	500ed07a 	srli	r7,r10,1
  80a06c:	12d6b03a 	or	r11,r2,r11
  80a070:	00800044 	movi	r2,1
  80a074:	198cb03a 	or	r6,r3,r6
  80a078:	4888703a 	and	r4,r9,r2
  80a07c:	9818d07a 	srli	r12,r19,1
  80a080:	001b883a 	mov	r13,zero
  80a084:	03a00034 	movhi	r14,32768
  80a088:	3013883a 	mov	r9,r6
  80a08c:	3815883a 	mov	r10,r7
  80a090:	4091883a 	add	r8,r8,r2
  80a094:	20000226 	beq	r4,zero,80a0a0 <__muldf3+0x284>
  80a098:	5b64b03a 	or	r18,r11,r13
  80a09c:	63a6b03a 	or	r19,r12,r14
  80a0a0:	7abfed36 	bltu	r15,r10,80a058 <__muldf3+0x23c>
  80a0a4:	da001015 	stw	r8,64(sp)
  80a0a8:	00840034 	movhi	r2,4096
  80a0ac:	10bfffc4 	addi	r2,r2,-1
  80a0b0:	12801436 	bltu	r2,r10,80a104 <__muldf3+0x2e8>
  80a0b4:	da001017 	ldw	r8,64(sp)
  80a0b8:	101f883a 	mov	r15,r2
  80a0bc:	4a45883a 	add	r2,r9,r9
  80a0c0:	124d803a 	cmpltu	r6,r2,r9
  80a0c4:	5287883a 	add	r3,r10,r10
  80a0c8:	9497883a 	add	r11,r18,r18
  80a0cc:	5c8f803a 	cmpltu	r7,r11,r18
  80a0d0:	9cd9883a 	add	r12,r19,r19
  80a0d4:	01000044 	movi	r4,1
  80a0d8:	30cd883a 	add	r6,r6,r3
  80a0dc:	3b0f883a 	add	r7,r7,r12
  80a0e0:	423fffc4 	addi	r8,r8,-1
  80a0e4:	1013883a 	mov	r9,r2
  80a0e8:	3015883a 	mov	r10,r6
  80a0ec:	111ab03a 	or	r13,r2,r4
  80a0f0:	98003016 	blt	r19,zero,80a1b4 <__muldf3+0x398>
  80a0f4:	5825883a 	mov	r18,r11
  80a0f8:	3827883a 	mov	r19,r7
  80a0fc:	7abfef2e 	bgeu	r15,r10,80a0bc <__muldf3+0x2a0>
  80a100:	da001015 	stw	r8,64(sp)
  80a104:	00803fc4 	movi	r2,255
  80a108:	488e703a 	and	r7,r9,r2
  80a10c:	00802004 	movi	r2,128
  80a110:	0007883a 	mov	r3,zero
  80a114:	0011883a 	mov	r8,zero
  80a118:	38801826 	beq	r7,r2,80a17c <__muldf3+0x360>
  80a11c:	008000c4 	movi	r2,3
  80a120:	d9000e04 	addi	r4,sp,56
  80a124:	da801215 	stw	r10,72(sp)
  80a128:	d8800e15 	stw	r2,56(sp)
  80a12c:	da401115 	stw	r9,68(sp)
  80a130:	003f6a06 	br	809edc <__muldf3+0xc0>
  80a134:	89802126 	beq	r17,r6,80a1bc <__muldf3+0x3a0>
  80a138:	0009883a 	mov	r4,zero
  80a13c:	5105883a 	add	r2,r10,r4
  80a140:	128d803a 	cmpltu	r6,r2,r10
  80a144:	5d07883a 	add	r3,r11,r20
  80a148:	30cd883a 	add	r6,r6,r3
  80a14c:	0021883a 	mov	r16,zero
  80a150:	0023883a 	mov	r17,zero
  80a154:	1025883a 	mov	r18,r2
  80a158:	3027883a 	mov	r19,r6
  80a15c:	32ff9e2e 	bgeu	r6,r11,809fd8 <__muldf3+0x1bc>
  80a160:	00800044 	movi	r2,1
  80a164:	8089883a 	add	r4,r16,r2
  80a168:	240d803a 	cmpltu	r6,r4,r16
  80a16c:	344d883a 	add	r6,r6,r17
  80a170:	2021883a 	mov	r16,r4
  80a174:	3023883a 	mov	r17,r6
  80a178:	003f9806 	br	809fdc <__muldf3+0x1c0>
  80a17c:	403fe71e 	bne	r8,zero,80a11c <__muldf3+0x300>
  80a180:	01004004 	movi	r4,256
  80a184:	4904703a 	and	r2,r9,r4
  80a188:	10c4b03a 	or	r2,r2,r3
  80a18c:	103fe31e 	bne	r2,zero,80a11c <__muldf3+0x300>
  80a190:	94c4b03a 	or	r2,r18,r19
  80a194:	103fe126 	beq	r2,zero,80a11c <__muldf3+0x300>
  80a198:	49c5883a 	add	r2,r9,r7
  80a19c:	1251803a 	cmpltu	r8,r2,r9
  80a1a0:	4291883a 	add	r8,r8,r10
  80a1a4:	013fc004 	movi	r4,-256
  80a1a8:	1112703a 	and	r9,r2,r4
  80a1ac:	4015883a 	mov	r10,r8
  80a1b0:	003fda06 	br	80a11c <__muldf3+0x300>
  80a1b4:	6813883a 	mov	r9,r13
  80a1b8:	003fce06 	br	80a0f4 <__muldf3+0x2d8>
  80a1bc:	143f7c36 	bltu	r2,r16,809fb0 <__muldf3+0x194>
  80a1c0:	003fdd06 	br	80a138 <__muldf3+0x31c>
  80a1c4:	12bf852e 	bgeu	r2,r10,809fdc <__muldf3+0x1c0>
  80a1c8:	003fe506 	br	80a160 <__muldf3+0x344>
  80a1cc:	00800084 	movi	r2,2
  80a1d0:	20bf351e 	bne	r4,r2,809ea8 <__muldf3+0x8c>
  80a1d4:	01002074 	movhi	r4,129
  80a1d8:	21124b04 	addi	r4,r4,18732
  80a1dc:	003f3f06 	br	809edc <__muldf3+0xc0>

0080a1e0 <__divdf3>:
  80a1e0:	deffed04 	addi	sp,sp,-76
  80a1e4:	dcc01115 	stw	r19,68(sp)
  80a1e8:	dcc00404 	addi	r19,sp,16
  80a1ec:	2011883a 	mov	r8,r4
  80a1f0:	2813883a 	mov	r9,r5
  80a1f4:	dc000e15 	stw	r16,56(sp)
  80a1f8:	d809883a 	mov	r4,sp
  80a1fc:	980b883a 	mov	r5,r19
  80a200:	dc000904 	addi	r16,sp,36
  80a204:	dfc01215 	stw	ra,72(sp)
  80a208:	da400115 	stw	r9,4(sp)
  80a20c:	d9c00315 	stw	r7,12(sp)
  80a210:	da000015 	stw	r8,0(sp)
  80a214:	d9800215 	stw	r6,8(sp)
  80a218:	dc801015 	stw	r18,64(sp)
  80a21c:	dc400f15 	stw	r17,60(sp)
  80a220:	080aefc0 	call	80aefc <__unpack_d>
  80a224:	d9000204 	addi	r4,sp,8
  80a228:	800b883a 	mov	r5,r16
  80a22c:	080aefc0 	call	80aefc <__unpack_d>
  80a230:	d9000417 	ldw	r4,16(sp)
  80a234:	00800044 	movi	r2,1
  80a238:	11000b2e 	bgeu	r2,r4,80a268 <__divdf3+0x88>
  80a23c:	d9400917 	ldw	r5,36(sp)
  80a240:	1140762e 	bgeu	r2,r5,80a41c <__divdf3+0x23c>
  80a244:	d8800517 	ldw	r2,20(sp)
  80a248:	d8c00a17 	ldw	r3,40(sp)
  80a24c:	01800104 	movi	r6,4
  80a250:	10c4f03a 	xor	r2,r2,r3
  80a254:	d8800515 	stw	r2,20(sp)
  80a258:	21800226 	beq	r4,r6,80a264 <__divdf3+0x84>
  80a25c:	00800084 	movi	r2,2
  80a260:	2080141e 	bne	r4,r2,80a2b4 <__divdf3+0xd4>
  80a264:	29000926 	beq	r5,r4,80a28c <__divdf3+0xac>
  80a268:	9809883a 	mov	r4,r19
  80a26c:	080abe80 	call	80abe8 <__pack_d>
  80a270:	dfc01217 	ldw	ra,72(sp)
  80a274:	dcc01117 	ldw	r19,68(sp)
  80a278:	dc801017 	ldw	r18,64(sp)
  80a27c:	dc400f17 	ldw	r17,60(sp)
  80a280:	dc000e17 	ldw	r16,56(sp)
  80a284:	dec01304 	addi	sp,sp,76
  80a288:	f800283a 	ret
  80a28c:	01002074 	movhi	r4,129
  80a290:	21124b04 	addi	r4,r4,18732
  80a294:	080abe80 	call	80abe8 <__pack_d>
  80a298:	dfc01217 	ldw	ra,72(sp)
  80a29c:	dcc01117 	ldw	r19,68(sp)
  80a2a0:	dc801017 	ldw	r18,64(sp)
  80a2a4:	dc400f17 	ldw	r17,60(sp)
  80a2a8:	dc000e17 	ldw	r16,56(sp)
  80a2ac:	dec01304 	addi	sp,sp,76
  80a2b0:	f800283a 	ret
  80a2b4:	29805b26 	beq	r5,r6,80a424 <__divdf3+0x244>
  80a2b8:	28802d26 	beq	r5,r2,80a370 <__divdf3+0x190>
  80a2bc:	d8c00617 	ldw	r3,24(sp)
  80a2c0:	d8800b17 	ldw	r2,44(sp)
  80a2c4:	d9c00817 	ldw	r7,32(sp)
  80a2c8:	dc400d17 	ldw	r17,52(sp)
  80a2cc:	188bc83a 	sub	r5,r3,r2
  80a2d0:	d9800717 	ldw	r6,28(sp)
  80a2d4:	dc000c17 	ldw	r16,48(sp)
  80a2d8:	d9400615 	stw	r5,24(sp)
  80a2dc:	3c403836 	bltu	r7,r17,80a3c0 <__divdf3+0x1e0>
  80a2e0:	89c03626 	beq	r17,r7,80a3bc <__divdf3+0x1dc>
  80a2e4:	0015883a 	mov	r10,zero
  80a2e8:	001d883a 	mov	r14,zero
  80a2ec:	02c40034 	movhi	r11,4096
  80a2f0:	001f883a 	mov	r15,zero
  80a2f4:	003f883a 	mov	ra,zero
  80a2f8:	04800f44 	movi	r18,61
  80a2fc:	00000f06 	br	80a33c <__divdf3+0x15c>
  80a300:	601d883a 	mov	r14,r12
  80a304:	681f883a 	mov	r15,r13
  80a308:	400d883a 	mov	r6,r8
  80a30c:	100f883a 	mov	r7,r2
  80a310:	3191883a 	add	r8,r6,r6
  80a314:	5808d07a 	srli	r4,r11,1
  80a318:	4185803a 	cmpltu	r2,r8,r6
  80a31c:	39d3883a 	add	r9,r7,r7
  80a320:	28c6b03a 	or	r3,r5,r3
  80a324:	1245883a 	add	r2,r2,r9
  80a328:	1815883a 	mov	r10,r3
  80a32c:	2017883a 	mov	r11,r4
  80a330:	400d883a 	mov	r6,r8
  80a334:	100f883a 	mov	r7,r2
  80a338:	fc801726 	beq	ra,r18,80a398 <__divdf3+0x1b8>
  80a33c:	580a97fa 	slli	r5,r11,31
  80a340:	5006d07a 	srli	r3,r10,1
  80a344:	ffc00044 	addi	ra,ra,1
  80a348:	3c7ff136 	bltu	r7,r17,80a310 <__divdf3+0x130>
  80a34c:	3411c83a 	sub	r8,r6,r16
  80a350:	3205803a 	cmpltu	r2,r6,r8
  80a354:	3c53c83a 	sub	r9,r7,r17
  80a358:	7298b03a 	or	r12,r14,r10
  80a35c:	7adab03a 	or	r13,r15,r11
  80a360:	4885c83a 	sub	r2,r9,r2
  80a364:	89ffe61e 	bne	r17,r7,80a300 <__divdf3+0x120>
  80a368:	343fe936 	bltu	r6,r16,80a310 <__divdf3+0x130>
  80a36c:	003fe406 	br	80a300 <__divdf3+0x120>
  80a370:	9809883a 	mov	r4,r19
  80a374:	d9800415 	stw	r6,16(sp)
  80a378:	080abe80 	call	80abe8 <__pack_d>
  80a37c:	dfc01217 	ldw	ra,72(sp)
  80a380:	dcc01117 	ldw	r19,68(sp)
  80a384:	dc801017 	ldw	r18,64(sp)
  80a388:	dc400f17 	ldw	r17,60(sp)
  80a38c:	dc000e17 	ldw	r16,56(sp)
  80a390:	dec01304 	addi	sp,sp,76
  80a394:	f800283a 	ret
  80a398:	00803fc4 	movi	r2,255
  80a39c:	7090703a 	and	r8,r14,r2
  80a3a0:	00802004 	movi	r2,128
  80a3a4:	0007883a 	mov	r3,zero
  80a3a8:	0013883a 	mov	r9,zero
  80a3ac:	40800d26 	beq	r8,r2,80a3e4 <__divdf3+0x204>
  80a3b0:	dbc00815 	stw	r15,32(sp)
  80a3b4:	db800715 	stw	r14,28(sp)
  80a3b8:	003fab06 	br	80a268 <__divdf3+0x88>
  80a3bc:	343fc92e 	bgeu	r6,r16,80a2e4 <__divdf3+0x104>
  80a3c0:	3185883a 	add	r2,r6,r6
  80a3c4:	1189803a 	cmpltu	r4,r2,r6
  80a3c8:	39c7883a 	add	r3,r7,r7
  80a3cc:	20c9883a 	add	r4,r4,r3
  80a3d0:	297fffc4 	addi	r5,r5,-1
  80a3d4:	100d883a 	mov	r6,r2
  80a3d8:	200f883a 	mov	r7,r4
  80a3dc:	d9400615 	stw	r5,24(sp)
  80a3e0:	003fc006 	br	80a2e4 <__divdf3+0x104>
  80a3e4:	483ff21e 	bne	r9,zero,80a3b0 <__divdf3+0x1d0>
  80a3e8:	01004004 	movi	r4,256
  80a3ec:	7104703a 	and	r2,r14,r4
  80a3f0:	10c4b03a 	or	r2,r2,r3
  80a3f4:	103fee1e 	bne	r2,zero,80a3b0 <__divdf3+0x1d0>
  80a3f8:	31c4b03a 	or	r2,r6,r7
  80a3fc:	103fec26 	beq	r2,zero,80a3b0 <__divdf3+0x1d0>
  80a400:	7205883a 	add	r2,r14,r8
  80a404:	1391803a 	cmpltu	r8,r2,r14
  80a408:	43d1883a 	add	r8,r8,r15
  80a40c:	013fc004 	movi	r4,-256
  80a410:	111c703a 	and	r14,r2,r4
  80a414:	401f883a 	mov	r15,r8
  80a418:	003fe506 	br	80a3b0 <__divdf3+0x1d0>
  80a41c:	8009883a 	mov	r4,r16
  80a420:	003f9206 	br	80a26c <__divdf3+0x8c>
  80a424:	9809883a 	mov	r4,r19
  80a428:	d8000715 	stw	zero,28(sp)
  80a42c:	d8000815 	stw	zero,32(sp)
  80a430:	d8000615 	stw	zero,24(sp)
  80a434:	003f8d06 	br	80a26c <__divdf3+0x8c>

0080a438 <__eqdf2>:
  80a438:	deffef04 	addi	sp,sp,-68
  80a43c:	dc400f15 	stw	r17,60(sp)
  80a440:	dc400404 	addi	r17,sp,16
  80a444:	2005883a 	mov	r2,r4
  80a448:	2807883a 	mov	r3,r5
  80a44c:	dc000e15 	stw	r16,56(sp)
  80a450:	d809883a 	mov	r4,sp
  80a454:	880b883a 	mov	r5,r17
  80a458:	dc000904 	addi	r16,sp,36
  80a45c:	d8c00115 	stw	r3,4(sp)
  80a460:	d8800015 	stw	r2,0(sp)
  80a464:	d9800215 	stw	r6,8(sp)
  80a468:	dfc01015 	stw	ra,64(sp)
  80a46c:	d9c00315 	stw	r7,12(sp)
  80a470:	080aefc0 	call	80aefc <__unpack_d>
  80a474:	d9000204 	addi	r4,sp,8
  80a478:	800b883a 	mov	r5,r16
  80a47c:	080aefc0 	call	80aefc <__unpack_d>
  80a480:	d8800417 	ldw	r2,16(sp)
  80a484:	00c00044 	movi	r3,1
  80a488:	180d883a 	mov	r6,r3
  80a48c:	1880062e 	bgeu	r3,r2,80a4a8 <__eqdf2+0x70>
  80a490:	d8800917 	ldw	r2,36(sp)
  80a494:	8809883a 	mov	r4,r17
  80a498:	800b883a 	mov	r5,r16
  80a49c:	1880022e 	bgeu	r3,r2,80a4a8 <__eqdf2+0x70>
  80a4a0:	080b0340 	call	80b034 <__fpcmp_parts_d>
  80a4a4:	100d883a 	mov	r6,r2
  80a4a8:	3005883a 	mov	r2,r6
  80a4ac:	dfc01017 	ldw	ra,64(sp)
  80a4b0:	dc400f17 	ldw	r17,60(sp)
  80a4b4:	dc000e17 	ldw	r16,56(sp)
  80a4b8:	dec01104 	addi	sp,sp,68
  80a4bc:	f800283a 	ret

0080a4c0 <__nedf2>:
  80a4c0:	deffef04 	addi	sp,sp,-68
  80a4c4:	dc400f15 	stw	r17,60(sp)
  80a4c8:	dc400404 	addi	r17,sp,16
  80a4cc:	2005883a 	mov	r2,r4
  80a4d0:	2807883a 	mov	r3,r5
  80a4d4:	dc000e15 	stw	r16,56(sp)
  80a4d8:	d809883a 	mov	r4,sp
  80a4dc:	880b883a 	mov	r5,r17
  80a4e0:	dc000904 	addi	r16,sp,36
  80a4e4:	d8c00115 	stw	r3,4(sp)
  80a4e8:	d8800015 	stw	r2,0(sp)
  80a4ec:	d9800215 	stw	r6,8(sp)
  80a4f0:	dfc01015 	stw	ra,64(sp)
  80a4f4:	d9c00315 	stw	r7,12(sp)
  80a4f8:	080aefc0 	call	80aefc <__unpack_d>
  80a4fc:	d9000204 	addi	r4,sp,8
  80a500:	800b883a 	mov	r5,r16
  80a504:	080aefc0 	call	80aefc <__unpack_d>
  80a508:	d8800417 	ldw	r2,16(sp)
  80a50c:	00c00044 	movi	r3,1
  80a510:	180d883a 	mov	r6,r3
  80a514:	1880062e 	bgeu	r3,r2,80a530 <__nedf2+0x70>
  80a518:	d8800917 	ldw	r2,36(sp)
  80a51c:	8809883a 	mov	r4,r17
  80a520:	800b883a 	mov	r5,r16
  80a524:	1880022e 	bgeu	r3,r2,80a530 <__nedf2+0x70>
  80a528:	080b0340 	call	80b034 <__fpcmp_parts_d>
  80a52c:	100d883a 	mov	r6,r2
  80a530:	3005883a 	mov	r2,r6
  80a534:	dfc01017 	ldw	ra,64(sp)
  80a538:	dc400f17 	ldw	r17,60(sp)
  80a53c:	dc000e17 	ldw	r16,56(sp)
  80a540:	dec01104 	addi	sp,sp,68
  80a544:	f800283a 	ret

0080a548 <__gtdf2>:
  80a548:	deffef04 	addi	sp,sp,-68
  80a54c:	dc400f15 	stw	r17,60(sp)
  80a550:	dc400404 	addi	r17,sp,16
  80a554:	2005883a 	mov	r2,r4
  80a558:	2807883a 	mov	r3,r5
  80a55c:	dc000e15 	stw	r16,56(sp)
  80a560:	d809883a 	mov	r4,sp
  80a564:	880b883a 	mov	r5,r17
  80a568:	dc000904 	addi	r16,sp,36
  80a56c:	d8c00115 	stw	r3,4(sp)
  80a570:	d8800015 	stw	r2,0(sp)
  80a574:	d9800215 	stw	r6,8(sp)
  80a578:	dfc01015 	stw	ra,64(sp)
  80a57c:	d9c00315 	stw	r7,12(sp)
  80a580:	080aefc0 	call	80aefc <__unpack_d>
  80a584:	d9000204 	addi	r4,sp,8
  80a588:	800b883a 	mov	r5,r16
  80a58c:	080aefc0 	call	80aefc <__unpack_d>
  80a590:	d8800417 	ldw	r2,16(sp)
  80a594:	00c00044 	movi	r3,1
  80a598:	01bfffc4 	movi	r6,-1
  80a59c:	1880062e 	bgeu	r3,r2,80a5b8 <__gtdf2+0x70>
  80a5a0:	d8800917 	ldw	r2,36(sp)
  80a5a4:	8809883a 	mov	r4,r17
  80a5a8:	800b883a 	mov	r5,r16
  80a5ac:	1880022e 	bgeu	r3,r2,80a5b8 <__gtdf2+0x70>
  80a5b0:	080b0340 	call	80b034 <__fpcmp_parts_d>
  80a5b4:	100d883a 	mov	r6,r2
  80a5b8:	3005883a 	mov	r2,r6
  80a5bc:	dfc01017 	ldw	ra,64(sp)
  80a5c0:	dc400f17 	ldw	r17,60(sp)
  80a5c4:	dc000e17 	ldw	r16,56(sp)
  80a5c8:	dec01104 	addi	sp,sp,68
  80a5cc:	f800283a 	ret

0080a5d0 <__gedf2>:
  80a5d0:	deffef04 	addi	sp,sp,-68
  80a5d4:	dc400f15 	stw	r17,60(sp)
  80a5d8:	dc400404 	addi	r17,sp,16
  80a5dc:	2005883a 	mov	r2,r4
  80a5e0:	2807883a 	mov	r3,r5
  80a5e4:	dc000e15 	stw	r16,56(sp)
  80a5e8:	d809883a 	mov	r4,sp
  80a5ec:	880b883a 	mov	r5,r17
  80a5f0:	dc000904 	addi	r16,sp,36
  80a5f4:	d8c00115 	stw	r3,4(sp)
  80a5f8:	d8800015 	stw	r2,0(sp)
  80a5fc:	d9800215 	stw	r6,8(sp)
  80a600:	dfc01015 	stw	ra,64(sp)
  80a604:	d9c00315 	stw	r7,12(sp)
  80a608:	080aefc0 	call	80aefc <__unpack_d>
  80a60c:	d9000204 	addi	r4,sp,8
  80a610:	800b883a 	mov	r5,r16
  80a614:	080aefc0 	call	80aefc <__unpack_d>
  80a618:	d8800417 	ldw	r2,16(sp)
  80a61c:	00c00044 	movi	r3,1
  80a620:	01bfffc4 	movi	r6,-1
  80a624:	1880062e 	bgeu	r3,r2,80a640 <__gedf2+0x70>
  80a628:	d8800917 	ldw	r2,36(sp)
  80a62c:	8809883a 	mov	r4,r17
  80a630:	800b883a 	mov	r5,r16
  80a634:	1880022e 	bgeu	r3,r2,80a640 <__gedf2+0x70>
  80a638:	080b0340 	call	80b034 <__fpcmp_parts_d>
  80a63c:	100d883a 	mov	r6,r2
  80a640:	3005883a 	mov	r2,r6
  80a644:	dfc01017 	ldw	ra,64(sp)
  80a648:	dc400f17 	ldw	r17,60(sp)
  80a64c:	dc000e17 	ldw	r16,56(sp)
  80a650:	dec01104 	addi	sp,sp,68
  80a654:	f800283a 	ret

0080a658 <__ltdf2>:
  80a658:	deffef04 	addi	sp,sp,-68
  80a65c:	dc400f15 	stw	r17,60(sp)
  80a660:	dc400404 	addi	r17,sp,16
  80a664:	2005883a 	mov	r2,r4
  80a668:	2807883a 	mov	r3,r5
  80a66c:	dc000e15 	stw	r16,56(sp)
  80a670:	d809883a 	mov	r4,sp
  80a674:	880b883a 	mov	r5,r17
  80a678:	dc000904 	addi	r16,sp,36
  80a67c:	d8c00115 	stw	r3,4(sp)
  80a680:	d8800015 	stw	r2,0(sp)
  80a684:	d9800215 	stw	r6,8(sp)
  80a688:	dfc01015 	stw	ra,64(sp)
  80a68c:	d9c00315 	stw	r7,12(sp)
  80a690:	080aefc0 	call	80aefc <__unpack_d>
  80a694:	d9000204 	addi	r4,sp,8
  80a698:	800b883a 	mov	r5,r16
  80a69c:	080aefc0 	call	80aefc <__unpack_d>
  80a6a0:	d8800417 	ldw	r2,16(sp)
  80a6a4:	00c00044 	movi	r3,1
  80a6a8:	180d883a 	mov	r6,r3
  80a6ac:	1880062e 	bgeu	r3,r2,80a6c8 <__ltdf2+0x70>
  80a6b0:	d8800917 	ldw	r2,36(sp)
  80a6b4:	8809883a 	mov	r4,r17
  80a6b8:	800b883a 	mov	r5,r16
  80a6bc:	1880022e 	bgeu	r3,r2,80a6c8 <__ltdf2+0x70>
  80a6c0:	080b0340 	call	80b034 <__fpcmp_parts_d>
  80a6c4:	100d883a 	mov	r6,r2
  80a6c8:	3005883a 	mov	r2,r6
  80a6cc:	dfc01017 	ldw	ra,64(sp)
  80a6d0:	dc400f17 	ldw	r17,60(sp)
  80a6d4:	dc000e17 	ldw	r16,56(sp)
  80a6d8:	dec01104 	addi	sp,sp,68
  80a6dc:	f800283a 	ret

0080a6e0 <__floatsidf>:
  80a6e0:	2006d7fa 	srli	r3,r4,31
  80a6e4:	defff604 	addi	sp,sp,-40
  80a6e8:	008000c4 	movi	r2,3
  80a6ec:	dfc00915 	stw	ra,36(sp)
  80a6f0:	dcc00815 	stw	r19,32(sp)
  80a6f4:	dc800715 	stw	r18,28(sp)
  80a6f8:	dc400615 	stw	r17,24(sp)
  80a6fc:	dc000515 	stw	r16,20(sp)
  80a700:	d8800015 	stw	r2,0(sp)
  80a704:	d8c00115 	stw	r3,4(sp)
  80a708:	20000f1e 	bne	r4,zero,80a748 <__floatsidf+0x68>
  80a70c:	00800084 	movi	r2,2
  80a710:	d8800015 	stw	r2,0(sp)
  80a714:	d809883a 	mov	r4,sp
  80a718:	080abe80 	call	80abe8 <__pack_d>
  80a71c:	1009883a 	mov	r4,r2
  80a720:	180b883a 	mov	r5,r3
  80a724:	2005883a 	mov	r2,r4
  80a728:	2807883a 	mov	r3,r5
  80a72c:	dfc00917 	ldw	ra,36(sp)
  80a730:	dcc00817 	ldw	r19,32(sp)
  80a734:	dc800717 	ldw	r18,28(sp)
  80a738:	dc400617 	ldw	r17,24(sp)
  80a73c:	dc000517 	ldw	r16,20(sp)
  80a740:	dec00a04 	addi	sp,sp,40
  80a744:	f800283a 	ret
  80a748:	00800f04 	movi	r2,60
  80a74c:	1807003a 	cmpeq	r3,r3,zero
  80a750:	d8800215 	stw	r2,8(sp)
  80a754:	18001126 	beq	r3,zero,80a79c <__floatsidf+0xbc>
  80a758:	0027883a 	mov	r19,zero
  80a75c:	2025883a 	mov	r18,r4
  80a760:	d9000315 	stw	r4,12(sp)
  80a764:	dcc00415 	stw	r19,16(sp)
  80a768:	080ab680 	call	80ab68 <__clzsi2>
  80a76c:	11000744 	addi	r4,r2,29
  80a770:	013fe80e 	bge	zero,r4,80a714 <__floatsidf+0x34>
  80a774:	10bfff44 	addi	r2,r2,-3
  80a778:	10000c16 	blt	r2,zero,80a7ac <__floatsidf+0xcc>
  80a77c:	90a2983a 	sll	r17,r18,r2
  80a780:	0021883a 	mov	r16,zero
  80a784:	d8800217 	ldw	r2,8(sp)
  80a788:	dc400415 	stw	r17,16(sp)
  80a78c:	dc000315 	stw	r16,12(sp)
  80a790:	1105c83a 	sub	r2,r2,r4
  80a794:	d8800215 	stw	r2,8(sp)
  80a798:	003fde06 	br	80a714 <__floatsidf+0x34>
  80a79c:	00a00034 	movhi	r2,32768
  80a7a0:	20800a26 	beq	r4,r2,80a7cc <__floatsidf+0xec>
  80a7a4:	0109c83a 	sub	r4,zero,r4
  80a7a8:	003feb06 	br	80a758 <__floatsidf+0x78>
  80a7ac:	9006d07a 	srli	r3,r18,1
  80a7b0:	008007c4 	movi	r2,31
  80a7b4:	1105c83a 	sub	r2,r2,r4
  80a7b8:	1886d83a 	srl	r3,r3,r2
  80a7bc:	9922983a 	sll	r17,r19,r4
  80a7c0:	9120983a 	sll	r16,r18,r4
  80a7c4:	1c62b03a 	or	r17,r3,r17
  80a7c8:	003fee06 	br	80a784 <__floatsidf+0xa4>
  80a7cc:	0009883a 	mov	r4,zero
  80a7d0:	01707834 	movhi	r5,49632
  80a7d4:	003fd306 	br	80a724 <__floatsidf+0x44>

0080a7d8 <__fixdfsi>:
  80a7d8:	defff804 	addi	sp,sp,-32
  80a7dc:	2005883a 	mov	r2,r4
  80a7e0:	2807883a 	mov	r3,r5
  80a7e4:	d809883a 	mov	r4,sp
  80a7e8:	d9400204 	addi	r5,sp,8
  80a7ec:	d8c00115 	stw	r3,4(sp)
  80a7f0:	d8800015 	stw	r2,0(sp)
  80a7f4:	dfc00715 	stw	ra,28(sp)
  80a7f8:	080aefc0 	call	80aefc <__unpack_d>
  80a7fc:	d8c00217 	ldw	r3,8(sp)
  80a800:	00800084 	movi	r2,2
  80a804:	1880051e 	bne	r3,r2,80a81c <__fixdfsi+0x44>
  80a808:	0007883a 	mov	r3,zero
  80a80c:	1805883a 	mov	r2,r3
  80a810:	dfc00717 	ldw	ra,28(sp)
  80a814:	dec00804 	addi	sp,sp,32
  80a818:	f800283a 	ret
  80a81c:	00800044 	movi	r2,1
  80a820:	10fff92e 	bgeu	r2,r3,80a808 <__fixdfsi+0x30>
  80a824:	00800104 	movi	r2,4
  80a828:	18800426 	beq	r3,r2,80a83c <__fixdfsi+0x64>
  80a82c:	d8c00417 	ldw	r3,16(sp)
  80a830:	183ff516 	blt	r3,zero,80a808 <__fixdfsi+0x30>
  80a834:	00800784 	movi	r2,30
  80a838:	10c0080e 	bge	r2,r3,80a85c <__fixdfsi+0x84>
  80a83c:	d8800317 	ldw	r2,12(sp)
  80a840:	1000121e 	bne	r2,zero,80a88c <__fixdfsi+0xb4>
  80a844:	00e00034 	movhi	r3,32768
  80a848:	18ffffc4 	addi	r3,r3,-1
  80a84c:	1805883a 	mov	r2,r3
  80a850:	dfc00717 	ldw	ra,28(sp)
  80a854:	dec00804 	addi	sp,sp,32
  80a858:	f800283a 	ret
  80a85c:	00800f04 	movi	r2,60
  80a860:	10d1c83a 	sub	r8,r2,r3
  80a864:	40bff804 	addi	r2,r8,-32
  80a868:	d9800517 	ldw	r6,20(sp)
  80a86c:	d9c00617 	ldw	r7,24(sp)
  80a870:	10000816 	blt	r2,zero,80a894 <__fixdfsi+0xbc>
  80a874:	3888d83a 	srl	r4,r7,r2
  80a878:	d8800317 	ldw	r2,12(sp)
  80a87c:	2007883a 	mov	r3,r4
  80a880:	103fe226 	beq	r2,zero,80a80c <__fixdfsi+0x34>
  80a884:	0107c83a 	sub	r3,zero,r4
  80a888:	003fe006 	br	80a80c <__fixdfsi+0x34>
  80a88c:	00e00034 	movhi	r3,32768
  80a890:	003fde06 	br	80a80c <__fixdfsi+0x34>
  80a894:	39c7883a 	add	r3,r7,r7
  80a898:	008007c4 	movi	r2,31
  80a89c:	1205c83a 	sub	r2,r2,r8
  80a8a0:	1886983a 	sll	r3,r3,r2
  80a8a4:	3208d83a 	srl	r4,r6,r8
  80a8a8:	1908b03a 	or	r4,r3,r4
  80a8ac:	003ff206 	br	80a878 <__fixdfsi+0xa0>

0080a8b0 <__floatunsidf>:
  80a8b0:	defff204 	addi	sp,sp,-56
  80a8b4:	dfc00d15 	stw	ra,52(sp)
  80a8b8:	ddc00c15 	stw	r23,48(sp)
  80a8bc:	dd800b15 	stw	r22,44(sp)
  80a8c0:	dd400a15 	stw	r21,40(sp)
  80a8c4:	dd000915 	stw	r20,36(sp)
  80a8c8:	dcc00815 	stw	r19,32(sp)
  80a8cc:	dc800715 	stw	r18,28(sp)
  80a8d0:	dc400615 	stw	r17,24(sp)
  80a8d4:	dc000515 	stw	r16,20(sp)
  80a8d8:	d8000115 	stw	zero,4(sp)
  80a8dc:	20000f1e 	bne	r4,zero,80a91c <__floatunsidf+0x6c>
  80a8e0:	00800084 	movi	r2,2
  80a8e4:	d8800015 	stw	r2,0(sp)
  80a8e8:	d809883a 	mov	r4,sp
  80a8ec:	080abe80 	call	80abe8 <__pack_d>
  80a8f0:	dfc00d17 	ldw	ra,52(sp)
  80a8f4:	ddc00c17 	ldw	r23,48(sp)
  80a8f8:	dd800b17 	ldw	r22,44(sp)
  80a8fc:	dd400a17 	ldw	r21,40(sp)
  80a900:	dd000917 	ldw	r20,36(sp)
  80a904:	dcc00817 	ldw	r19,32(sp)
  80a908:	dc800717 	ldw	r18,28(sp)
  80a90c:	dc400617 	ldw	r17,24(sp)
  80a910:	dc000517 	ldw	r16,20(sp)
  80a914:	dec00e04 	addi	sp,sp,56
  80a918:	f800283a 	ret
  80a91c:	008000c4 	movi	r2,3
  80a920:	00c00f04 	movi	r3,60
  80a924:	002f883a 	mov	r23,zero
  80a928:	202d883a 	mov	r22,r4
  80a92c:	d8800015 	stw	r2,0(sp)
  80a930:	d8c00215 	stw	r3,8(sp)
  80a934:	d9000315 	stw	r4,12(sp)
  80a938:	ddc00415 	stw	r23,16(sp)
  80a93c:	080ab680 	call	80ab68 <__clzsi2>
  80a940:	12400744 	addi	r9,r2,29
  80a944:	48000b16 	blt	r9,zero,80a974 <__floatunsidf+0xc4>
  80a948:	483fe726 	beq	r9,zero,80a8e8 <__floatunsidf+0x38>
  80a94c:	10bfff44 	addi	r2,r2,-3
  80a950:	10002e16 	blt	r2,zero,80aa0c <__floatunsidf+0x15c>
  80a954:	b0a2983a 	sll	r17,r22,r2
  80a958:	0021883a 	mov	r16,zero
  80a95c:	d8800217 	ldw	r2,8(sp)
  80a960:	dc400415 	stw	r17,16(sp)
  80a964:	dc000315 	stw	r16,12(sp)
  80a968:	1245c83a 	sub	r2,r2,r9
  80a96c:	d8800215 	stw	r2,8(sp)
  80a970:	003fdd06 	br	80a8e8 <__floatunsidf+0x38>
  80a974:	0255c83a 	sub	r10,zero,r9
  80a978:	51bff804 	addi	r6,r10,-32
  80a97c:	30001b16 	blt	r6,zero,80a9ec <__floatunsidf+0x13c>
  80a980:	b9a8d83a 	srl	r20,r23,r6
  80a984:	002b883a 	mov	r21,zero
  80a988:	000f883a 	mov	r7,zero
  80a98c:	01000044 	movi	r4,1
  80a990:	0011883a 	mov	r8,zero
  80a994:	30002516 	blt	r6,zero,80aa2c <__floatunsidf+0x17c>
  80a998:	21a6983a 	sll	r19,r4,r6
  80a99c:	0025883a 	mov	r18,zero
  80a9a0:	00bfffc4 	movi	r2,-1
  80a9a4:	9089883a 	add	r4,r18,r2
  80a9a8:	988b883a 	add	r5,r19,r2
  80a9ac:	248d803a 	cmpltu	r6,r4,r18
  80a9b0:	314b883a 	add	r5,r6,r5
  80a9b4:	b104703a 	and	r2,r22,r4
  80a9b8:	b946703a 	and	r3,r23,r5
  80a9bc:	10c4b03a 	or	r2,r2,r3
  80a9c0:	10000226 	beq	r2,zero,80a9cc <__floatunsidf+0x11c>
  80a9c4:	01c00044 	movi	r7,1
  80a9c8:	0011883a 	mov	r8,zero
  80a9cc:	d9000217 	ldw	r4,8(sp)
  80a9d0:	a1c4b03a 	or	r2,r20,r7
  80a9d4:	aa06b03a 	or	r3,r21,r8
  80a9d8:	2249c83a 	sub	r4,r4,r9
  80a9dc:	d8c00415 	stw	r3,16(sp)
  80a9e0:	d9000215 	stw	r4,8(sp)
  80a9e4:	d8800315 	stw	r2,12(sp)
  80a9e8:	003fbf06 	br	80a8e8 <__floatunsidf+0x38>
  80a9ec:	bdc7883a 	add	r3,r23,r23
  80a9f0:	008007c4 	movi	r2,31
  80a9f4:	1285c83a 	sub	r2,r2,r10
  80a9f8:	1886983a 	sll	r3,r3,r2
  80a9fc:	b2a8d83a 	srl	r20,r22,r10
  80aa00:	baaad83a 	srl	r21,r23,r10
  80aa04:	1d28b03a 	or	r20,r3,r20
  80aa08:	003fdf06 	br	80a988 <__floatunsidf+0xd8>
  80aa0c:	b006d07a 	srli	r3,r22,1
  80aa10:	008007c4 	movi	r2,31
  80aa14:	1245c83a 	sub	r2,r2,r9
  80aa18:	1886d83a 	srl	r3,r3,r2
  80aa1c:	ba62983a 	sll	r17,r23,r9
  80aa20:	b260983a 	sll	r16,r22,r9
  80aa24:	1c62b03a 	or	r17,r3,r17
  80aa28:	003fcc06 	br	80a95c <__floatunsidf+0xac>
  80aa2c:	2006d07a 	srli	r3,r4,1
  80aa30:	008007c4 	movi	r2,31
  80aa34:	1285c83a 	sub	r2,r2,r10
  80aa38:	18a6d83a 	srl	r19,r3,r2
  80aa3c:	22a4983a 	sll	r18,r4,r10
  80aa40:	003fd706 	br	80a9a0 <__floatunsidf+0xf0>

0080aa44 <__muldi3>:
  80aa44:	defff204 	addi	sp,sp,-56
  80aa48:	df000c15 	stw	fp,48(sp)
  80aa4c:	3038d43a 	srli	fp,r6,16
  80aa50:	dd000815 	stw	r20,32(sp)
  80aa54:	dc400515 	stw	r17,20(sp)
  80aa58:	2028d43a 	srli	r20,r4,16
  80aa5c:	247fffcc 	andi	r17,r4,65535
  80aa60:	dc000415 	stw	r16,16(sp)
  80aa64:	343fffcc 	andi	r16,r6,65535
  80aa68:	dcc00715 	stw	r19,28(sp)
  80aa6c:	d9000015 	stw	r4,0(sp)
  80aa70:	2827883a 	mov	r19,r5
  80aa74:	8809883a 	mov	r4,r17
  80aa78:	d9400115 	stw	r5,4(sp)
  80aa7c:	800b883a 	mov	r5,r16
  80aa80:	d9800215 	stw	r6,8(sp)
  80aa84:	dfc00d15 	stw	ra,52(sp)
  80aa88:	d9c00315 	stw	r7,12(sp)
  80aa8c:	dd800a15 	stw	r22,40(sp)
  80aa90:	dd400915 	stw	r21,36(sp)
  80aa94:	302d883a 	mov	r22,r6
  80aa98:	ddc00b15 	stw	r23,44(sp)
  80aa9c:	dc800615 	stw	r18,24(sp)
  80aaa0:	08017b40 	call	8017b4 <__mulsi3>
  80aaa4:	8809883a 	mov	r4,r17
  80aaa8:	e00b883a 	mov	r5,fp
  80aaac:	102b883a 	mov	r21,r2
  80aab0:	08017b40 	call	8017b4 <__mulsi3>
  80aab4:	800b883a 	mov	r5,r16
  80aab8:	a009883a 	mov	r4,r20
  80aabc:	1023883a 	mov	r17,r2
  80aac0:	08017b40 	call	8017b4 <__mulsi3>
  80aac4:	a009883a 	mov	r4,r20
  80aac8:	e00b883a 	mov	r5,fp
  80aacc:	1021883a 	mov	r16,r2
  80aad0:	08017b40 	call	8017b4 <__mulsi3>
  80aad4:	a8ffffcc 	andi	r3,r21,65535
  80aad8:	a82ad43a 	srli	r21,r21,16
  80aadc:	8c23883a 	add	r17,r17,r16
  80aae0:	1011883a 	mov	r8,r2
  80aae4:	ac6b883a 	add	r21,r21,r17
  80aae8:	a804943a 	slli	r2,r21,16
  80aaec:	b009883a 	mov	r4,r22
  80aaf0:	980b883a 	mov	r5,r19
  80aaf4:	10c7883a 	add	r3,r2,r3
  80aaf8:	a812d43a 	srli	r9,r21,16
  80aafc:	180d883a 	mov	r6,r3
  80ab00:	ac00022e 	bgeu	r21,r16,80ab0c <__muldi3+0xc8>
  80ab04:	00800074 	movhi	r2,1
  80ab08:	4091883a 	add	r8,r8,r2
  80ab0c:	4267883a 	add	r19,r8,r9
  80ab10:	302d883a 	mov	r22,r6
  80ab14:	08017b40 	call	8017b4 <__mulsi3>
  80ab18:	d9400317 	ldw	r5,12(sp)
  80ab1c:	d9000017 	ldw	r4,0(sp)
  80ab20:	1023883a 	mov	r17,r2
  80ab24:	08017b40 	call	8017b4 <__mulsi3>
  80ab28:	14cb883a 	add	r5,r2,r19
  80ab2c:	894b883a 	add	r5,r17,r5
  80ab30:	b005883a 	mov	r2,r22
  80ab34:	2807883a 	mov	r3,r5
  80ab38:	dfc00d17 	ldw	ra,52(sp)
  80ab3c:	df000c17 	ldw	fp,48(sp)
  80ab40:	ddc00b17 	ldw	r23,44(sp)
  80ab44:	dd800a17 	ldw	r22,40(sp)
  80ab48:	dd400917 	ldw	r21,36(sp)
  80ab4c:	dd000817 	ldw	r20,32(sp)
  80ab50:	dcc00717 	ldw	r19,28(sp)
  80ab54:	dc800617 	ldw	r18,24(sp)
  80ab58:	dc400517 	ldw	r17,20(sp)
  80ab5c:	dc000417 	ldw	r16,16(sp)
  80ab60:	dec00e04 	addi	sp,sp,56
  80ab64:	f800283a 	ret

0080ab68 <__clzsi2>:
  80ab68:	00bfffd4 	movui	r2,65535
  80ab6c:	11000e36 	bltu	r2,r4,80aba8 <__clzsi2+0x40>
  80ab70:	00803fc4 	movi	r2,255
  80ab74:	01400204 	movi	r5,8
  80ab78:	0007883a 	mov	r3,zero
  80ab7c:	11001036 	bltu	r2,r4,80abc0 <__clzsi2+0x58>
  80ab80:	000b883a 	mov	r5,zero
  80ab84:	20c6d83a 	srl	r3,r4,r3
  80ab88:	00802074 	movhi	r2,129
  80ab8c:	10925004 	addi	r2,r2,18752
  80ab90:	1887883a 	add	r3,r3,r2
  80ab94:	18800003 	ldbu	r2,0(r3)
  80ab98:	00c00804 	movi	r3,32
  80ab9c:	2885883a 	add	r2,r5,r2
  80aba0:	1885c83a 	sub	r2,r3,r2
  80aba4:	f800283a 	ret
  80aba8:	01400404 	movi	r5,16
  80abac:	00804034 	movhi	r2,256
  80abb0:	10bfffc4 	addi	r2,r2,-1
  80abb4:	2807883a 	mov	r3,r5
  80abb8:	113ff22e 	bgeu	r2,r4,80ab84 <__clzsi2+0x1c>
  80abbc:	01400604 	movi	r5,24
  80abc0:	2807883a 	mov	r3,r5
  80abc4:	20c6d83a 	srl	r3,r4,r3
  80abc8:	00802074 	movhi	r2,129
  80abcc:	10925004 	addi	r2,r2,18752
  80abd0:	1887883a 	add	r3,r3,r2
  80abd4:	18800003 	ldbu	r2,0(r3)
  80abd8:	00c00804 	movi	r3,32
  80abdc:	2885883a 	add	r2,r5,r2
  80abe0:	1885c83a 	sub	r2,r3,r2
  80abe4:	f800283a 	ret

0080abe8 <__pack_d>:
  80abe8:	20c00017 	ldw	r3,0(r4)
  80abec:	defffd04 	addi	sp,sp,-12
  80abf0:	dc000015 	stw	r16,0(sp)
  80abf4:	dc800215 	stw	r18,8(sp)
  80abf8:	dc400115 	stw	r17,4(sp)
  80abfc:	00800044 	movi	r2,1
  80ac00:	22000317 	ldw	r8,12(r4)
  80ac04:	001f883a 	mov	r15,zero
  80ac08:	22400417 	ldw	r9,16(r4)
  80ac0c:	24000117 	ldw	r16,4(r4)
  80ac10:	10c0552e 	bgeu	r2,r3,80ad68 <__pack_d+0x180>
  80ac14:	00800104 	movi	r2,4
  80ac18:	18804f26 	beq	r3,r2,80ad58 <__pack_d+0x170>
  80ac1c:	00800084 	movi	r2,2
  80ac20:	18800226 	beq	r3,r2,80ac2c <__pack_d+0x44>
  80ac24:	4244b03a 	or	r2,r8,r9
  80ac28:	10001a1e 	bne	r2,zero,80ac94 <__pack_d+0xac>
  80ac2c:	000d883a 	mov	r6,zero
  80ac30:	000f883a 	mov	r7,zero
  80ac34:	0011883a 	mov	r8,zero
  80ac38:	00800434 	movhi	r2,16
  80ac3c:	10bfffc4 	addi	r2,r2,-1
  80ac40:	301d883a 	mov	r14,r6
  80ac44:	3884703a 	and	r2,r7,r2
  80ac48:	400a953a 	slli	r5,r8,20
  80ac4c:	79bffc2c 	andhi	r6,r15,65520
  80ac50:	308cb03a 	or	r6,r6,r2
  80ac54:	00e00434 	movhi	r3,32784
  80ac58:	18ffffc4 	addi	r3,r3,-1
  80ac5c:	800497fa 	slli	r2,r16,31
  80ac60:	30c6703a 	and	r3,r6,r3
  80ac64:	1946b03a 	or	r3,r3,r5
  80ac68:	01600034 	movhi	r5,32768
  80ac6c:	297fffc4 	addi	r5,r5,-1
  80ac70:	194a703a 	and	r5,r3,r5
  80ac74:	288ab03a 	or	r5,r5,r2
  80ac78:	2807883a 	mov	r3,r5
  80ac7c:	7005883a 	mov	r2,r14
  80ac80:	dc800217 	ldw	r18,8(sp)
  80ac84:	dc400117 	ldw	r17,4(sp)
  80ac88:	dc000017 	ldw	r16,0(sp)
  80ac8c:	dec00304 	addi	sp,sp,12
  80ac90:	f800283a 	ret
  80ac94:	21000217 	ldw	r4,8(r4)
  80ac98:	00bf0084 	movi	r2,-1022
  80ac9c:	20803f16 	blt	r4,r2,80ad9c <__pack_d+0x1b4>
  80aca0:	0080ffc4 	movi	r2,1023
  80aca4:	11002c16 	blt	r2,r4,80ad58 <__pack_d+0x170>
  80aca8:	00803fc4 	movi	r2,255
  80acac:	408c703a 	and	r6,r8,r2
  80acb0:	00802004 	movi	r2,128
  80acb4:	0007883a 	mov	r3,zero
  80acb8:	000f883a 	mov	r7,zero
  80acbc:	2280ffc4 	addi	r10,r4,1023
  80acc0:	30801e26 	beq	r6,r2,80ad3c <__pack_d+0x154>
  80acc4:	00801fc4 	movi	r2,127
  80acc8:	4089883a 	add	r4,r8,r2
  80accc:	220d803a 	cmpltu	r6,r4,r8
  80acd0:	324d883a 	add	r6,r6,r9
  80acd4:	2011883a 	mov	r8,r4
  80acd8:	3013883a 	mov	r9,r6
  80acdc:	00880034 	movhi	r2,8192
  80ace0:	10bfffc4 	addi	r2,r2,-1
  80ace4:	12400d36 	bltu	r2,r9,80ad1c <__pack_d+0x134>
  80ace8:	4804963a 	slli	r2,r9,24
  80acec:	400cd23a 	srli	r6,r8,8
  80acf0:	480ed23a 	srli	r7,r9,8
  80acf4:	013fffc4 	movi	r4,-1
  80acf8:	118cb03a 	or	r6,r2,r6
  80acfc:	01400434 	movhi	r5,16
  80ad00:	297fffc4 	addi	r5,r5,-1
  80ad04:	3104703a 	and	r2,r6,r4
  80ad08:	3946703a 	and	r3,r7,r5
  80ad0c:	5201ffcc 	andi	r8,r10,2047
  80ad10:	100d883a 	mov	r6,r2
  80ad14:	180f883a 	mov	r7,r3
  80ad18:	003fc706 	br	80ac38 <__pack_d+0x50>
  80ad1c:	480897fa 	slli	r4,r9,31
  80ad20:	4004d07a 	srli	r2,r8,1
  80ad24:	4806d07a 	srli	r3,r9,1
  80ad28:	52800044 	addi	r10,r10,1
  80ad2c:	2084b03a 	or	r2,r4,r2
  80ad30:	1011883a 	mov	r8,r2
  80ad34:	1813883a 	mov	r9,r3
  80ad38:	003feb06 	br	80ace8 <__pack_d+0x100>
  80ad3c:	383fe11e 	bne	r7,zero,80acc4 <__pack_d+0xdc>
  80ad40:	01004004 	movi	r4,256
  80ad44:	4104703a 	and	r2,r8,r4
  80ad48:	10c4b03a 	or	r2,r2,r3
  80ad4c:	103fe326 	beq	r2,zero,80acdc <__pack_d+0xf4>
  80ad50:	3005883a 	mov	r2,r6
  80ad54:	003fdc06 	br	80acc8 <__pack_d+0xe0>
  80ad58:	000d883a 	mov	r6,zero
  80ad5c:	000f883a 	mov	r7,zero
  80ad60:	0201ffc4 	movi	r8,2047
  80ad64:	003fb406 	br	80ac38 <__pack_d+0x50>
  80ad68:	0005883a 	mov	r2,zero
  80ad6c:	00c00234 	movhi	r3,8
  80ad70:	408cb03a 	or	r6,r8,r2
  80ad74:	48ceb03a 	or	r7,r9,r3
  80ad78:	013fffc4 	movi	r4,-1
  80ad7c:	01400434 	movhi	r5,16
  80ad80:	297fffc4 	addi	r5,r5,-1
  80ad84:	3104703a 	and	r2,r6,r4
  80ad88:	3946703a 	and	r3,r7,r5
  80ad8c:	100d883a 	mov	r6,r2
  80ad90:	180f883a 	mov	r7,r3
  80ad94:	0201ffc4 	movi	r8,2047
  80ad98:	003fa706 	br	80ac38 <__pack_d+0x50>
  80ad9c:	1109c83a 	sub	r4,r2,r4
  80ada0:	00800e04 	movi	r2,56
  80ada4:	11004316 	blt	r2,r4,80aeb4 <__pack_d+0x2cc>
  80ada8:	21fff804 	addi	r7,r4,-32
  80adac:	38004516 	blt	r7,zero,80aec4 <__pack_d+0x2dc>
  80adb0:	49d8d83a 	srl	r12,r9,r7
  80adb4:	001b883a 	mov	r13,zero
  80adb8:	0023883a 	mov	r17,zero
  80adbc:	01400044 	movi	r5,1
  80adc0:	0025883a 	mov	r18,zero
  80adc4:	38004716 	blt	r7,zero,80aee4 <__pack_d+0x2fc>
  80adc8:	29d6983a 	sll	r11,r5,r7
  80adcc:	0015883a 	mov	r10,zero
  80add0:	00bfffc4 	movi	r2,-1
  80add4:	5089883a 	add	r4,r10,r2
  80add8:	588b883a 	add	r5,r11,r2
  80addc:	228d803a 	cmpltu	r6,r4,r10
  80ade0:	314b883a 	add	r5,r6,r5
  80ade4:	4104703a 	and	r2,r8,r4
  80ade8:	4946703a 	and	r3,r9,r5
  80adec:	10c4b03a 	or	r2,r2,r3
  80adf0:	10000226 	beq	r2,zero,80adfc <__pack_d+0x214>
  80adf4:	04400044 	movi	r17,1
  80adf8:	0025883a 	mov	r18,zero
  80adfc:	00803fc4 	movi	r2,255
  80ae00:	644eb03a 	or	r7,r12,r17
  80ae04:	3892703a 	and	r9,r7,r2
  80ae08:	00802004 	movi	r2,128
  80ae0c:	6c90b03a 	or	r8,r13,r18
  80ae10:	0015883a 	mov	r10,zero
  80ae14:	48801626 	beq	r9,r2,80ae70 <__pack_d+0x288>
  80ae18:	01001fc4 	movi	r4,127
  80ae1c:	3905883a 	add	r2,r7,r4
  80ae20:	11cd803a 	cmpltu	r6,r2,r7
  80ae24:	320d883a 	add	r6,r6,r8
  80ae28:	100f883a 	mov	r7,r2
  80ae2c:	00840034 	movhi	r2,4096
  80ae30:	10bfffc4 	addi	r2,r2,-1
  80ae34:	3011883a 	mov	r8,r6
  80ae38:	0007883a 	mov	r3,zero
  80ae3c:	11801b36 	bltu	r2,r6,80aeac <__pack_d+0x2c4>
  80ae40:	4004963a 	slli	r2,r8,24
  80ae44:	3808d23a 	srli	r4,r7,8
  80ae48:	400ad23a 	srli	r5,r8,8
  80ae4c:	1813883a 	mov	r9,r3
  80ae50:	1108b03a 	or	r4,r2,r4
  80ae54:	00bfffc4 	movi	r2,-1
  80ae58:	00c00434 	movhi	r3,16
  80ae5c:	18ffffc4 	addi	r3,r3,-1
  80ae60:	208c703a 	and	r6,r4,r2
  80ae64:	28ce703a 	and	r7,r5,r3
  80ae68:	4a01ffcc 	andi	r8,r9,2047
  80ae6c:	003f7206 	br	80ac38 <__pack_d+0x50>
  80ae70:	503fe91e 	bne	r10,zero,80ae18 <__pack_d+0x230>
  80ae74:	01004004 	movi	r4,256
  80ae78:	3904703a 	and	r2,r7,r4
  80ae7c:	0007883a 	mov	r3,zero
  80ae80:	10c4b03a 	or	r2,r2,r3
  80ae84:	10000626 	beq	r2,zero,80aea0 <__pack_d+0x2b8>
  80ae88:	3a45883a 	add	r2,r7,r9
  80ae8c:	11cd803a 	cmpltu	r6,r2,r7
  80ae90:	320d883a 	add	r6,r6,r8
  80ae94:	100f883a 	mov	r7,r2
  80ae98:	3011883a 	mov	r8,r6
  80ae9c:	0007883a 	mov	r3,zero
  80aea0:	00840034 	movhi	r2,4096
  80aea4:	10bfffc4 	addi	r2,r2,-1
  80aea8:	123fe52e 	bgeu	r2,r8,80ae40 <__pack_d+0x258>
  80aeac:	00c00044 	movi	r3,1
  80aeb0:	003fe306 	br	80ae40 <__pack_d+0x258>
  80aeb4:	0009883a 	mov	r4,zero
  80aeb8:	0013883a 	mov	r9,zero
  80aebc:	000b883a 	mov	r5,zero
  80aec0:	003fe406 	br	80ae54 <__pack_d+0x26c>
  80aec4:	4a47883a 	add	r3,r9,r9
  80aec8:	008007c4 	movi	r2,31
  80aecc:	1105c83a 	sub	r2,r2,r4
  80aed0:	1886983a 	sll	r3,r3,r2
  80aed4:	4118d83a 	srl	r12,r8,r4
  80aed8:	491ad83a 	srl	r13,r9,r4
  80aedc:	1b18b03a 	or	r12,r3,r12
  80aee0:	003fb506 	br	80adb8 <__pack_d+0x1d0>
  80aee4:	2806d07a 	srli	r3,r5,1
  80aee8:	008007c4 	movi	r2,31
  80aeec:	1105c83a 	sub	r2,r2,r4
  80aef0:	1896d83a 	srl	r11,r3,r2
  80aef4:	2914983a 	sll	r10,r5,r4
  80aef8:	003fb506 	br	80add0 <__pack_d+0x1e8>

0080aefc <__unpack_d>:
  80aefc:	20c00117 	ldw	r3,4(r4)
  80af00:	22400017 	ldw	r9,0(r4)
  80af04:	00800434 	movhi	r2,16
  80af08:	10bfffc4 	addi	r2,r2,-1
  80af0c:	1808d53a 	srli	r4,r3,20
  80af10:	180cd7fa 	srli	r6,r3,31
  80af14:	1894703a 	and	r10,r3,r2
  80af18:	2201ffcc 	andi	r8,r4,2047
  80af1c:	281b883a 	mov	r13,r5
  80af20:	4817883a 	mov	r11,r9
  80af24:	29800115 	stw	r6,4(r5)
  80af28:	5019883a 	mov	r12,r10
  80af2c:	40001e1e 	bne	r8,zero,80afa8 <__unpack_d+0xac>
  80af30:	4a84b03a 	or	r2,r9,r10
  80af34:	10001926 	beq	r2,zero,80af9c <__unpack_d+0xa0>
  80af38:	4804d63a 	srli	r2,r9,24
  80af3c:	500c923a 	slli	r6,r10,8
  80af40:	013f0084 	movi	r4,-1022
  80af44:	00c40034 	movhi	r3,4096
  80af48:	18ffffc4 	addi	r3,r3,-1
  80af4c:	118cb03a 	or	r6,r2,r6
  80af50:	008000c4 	movi	r2,3
  80af54:	480a923a 	slli	r5,r9,8
  80af58:	68800015 	stw	r2,0(r13)
  80af5c:	69000215 	stw	r4,8(r13)
  80af60:	19800b36 	bltu	r3,r6,80af90 <__unpack_d+0x94>
  80af64:	200f883a 	mov	r7,r4
  80af68:	1811883a 	mov	r8,r3
  80af6c:	2945883a 	add	r2,r5,r5
  80af70:	1149803a 	cmpltu	r4,r2,r5
  80af74:	3187883a 	add	r3,r6,r6
  80af78:	20c9883a 	add	r4,r4,r3
  80af7c:	100b883a 	mov	r5,r2
  80af80:	200d883a 	mov	r6,r4
  80af84:	39ffffc4 	addi	r7,r7,-1
  80af88:	413ff82e 	bgeu	r8,r4,80af6c <__unpack_d+0x70>
  80af8c:	69c00215 	stw	r7,8(r13)
  80af90:	69800415 	stw	r6,16(r13)
  80af94:	69400315 	stw	r5,12(r13)
  80af98:	f800283a 	ret
  80af9c:	00800084 	movi	r2,2
  80afa0:	28800015 	stw	r2,0(r5)
  80afa4:	f800283a 	ret
  80afa8:	0081ffc4 	movi	r2,2047
  80afac:	40800f26 	beq	r8,r2,80afec <__unpack_d+0xf0>
  80afb0:	480cd63a 	srli	r6,r9,24
  80afb4:	5006923a 	slli	r3,r10,8
  80afb8:	4804923a 	slli	r2,r9,8
  80afbc:	0009883a 	mov	r4,zero
  80afc0:	30c6b03a 	or	r3,r6,r3
  80afc4:	01440034 	movhi	r5,4096
  80afc8:	110cb03a 	or	r6,r2,r4
  80afcc:	423f0044 	addi	r8,r8,-1023
  80afd0:	194eb03a 	or	r7,r3,r5
  80afd4:	008000c4 	movi	r2,3
  80afd8:	69c00415 	stw	r7,16(r13)
  80afdc:	6a000215 	stw	r8,8(r13)
  80afe0:	68800015 	stw	r2,0(r13)
  80afe4:	69800315 	stw	r6,12(r13)
  80afe8:	f800283a 	ret
  80afec:	4a84b03a 	or	r2,r9,r10
  80aff0:	1000031e 	bne	r2,zero,80b000 <__unpack_d+0x104>
  80aff4:	00800104 	movi	r2,4
  80aff8:	28800015 	stw	r2,0(r5)
  80affc:	f800283a 	ret
  80b000:	0009883a 	mov	r4,zero
  80b004:	01400234 	movhi	r5,8
  80b008:	4904703a 	and	r2,r9,r4
  80b00c:	5146703a 	and	r3,r10,r5
  80b010:	10c4b03a 	or	r2,r2,r3
  80b014:	10000526 	beq	r2,zero,80b02c <__unpack_d+0x130>
  80b018:	00800044 	movi	r2,1
  80b01c:	68800015 	stw	r2,0(r13)
  80b020:	6b000415 	stw	r12,16(r13)
  80b024:	6ac00315 	stw	r11,12(r13)
  80b028:	f800283a 	ret
  80b02c:	68000015 	stw	zero,0(r13)
  80b030:	003ffb06 	br	80b020 <__unpack_d+0x124>

0080b034 <__fpcmp_parts_d>:
  80b034:	21800017 	ldw	r6,0(r4)
  80b038:	00c00044 	movi	r3,1
  80b03c:	19800a2e 	bgeu	r3,r6,80b068 <__fpcmp_parts_d+0x34>
  80b040:	28800017 	ldw	r2,0(r5)
  80b044:	1880082e 	bgeu	r3,r2,80b068 <__fpcmp_parts_d+0x34>
  80b048:	00c00104 	movi	r3,4
  80b04c:	30c02626 	beq	r6,r3,80b0e8 <__fpcmp_parts_d+0xb4>
  80b050:	10c02226 	beq	r2,r3,80b0dc <__fpcmp_parts_d+0xa8>
  80b054:	00c00084 	movi	r3,2
  80b058:	30c00526 	beq	r6,r3,80b070 <__fpcmp_parts_d+0x3c>
  80b05c:	10c0071e 	bne	r2,r3,80b07c <__fpcmp_parts_d+0x48>
  80b060:	20800117 	ldw	r2,4(r4)
  80b064:	1000091e 	bne	r2,zero,80b08c <__fpcmp_parts_d+0x58>
  80b068:	00800044 	movi	r2,1
  80b06c:	f800283a 	ret
  80b070:	10c01a1e 	bne	r2,r3,80b0dc <__fpcmp_parts_d+0xa8>
  80b074:	0005883a 	mov	r2,zero
  80b078:	f800283a 	ret
  80b07c:	22000117 	ldw	r8,4(r4)
  80b080:	28800117 	ldw	r2,4(r5)
  80b084:	40800326 	beq	r8,r2,80b094 <__fpcmp_parts_d+0x60>
  80b088:	403ff726 	beq	r8,zero,80b068 <__fpcmp_parts_d+0x34>
  80b08c:	00bfffc4 	movi	r2,-1
  80b090:	f800283a 	ret
  80b094:	20c00217 	ldw	r3,8(r4)
  80b098:	28800217 	ldw	r2,8(r5)
  80b09c:	10fffa16 	blt	r2,r3,80b088 <__fpcmp_parts_d+0x54>
  80b0a0:	18800916 	blt	r3,r2,80b0c8 <__fpcmp_parts_d+0x94>
  80b0a4:	21c00417 	ldw	r7,16(r4)
  80b0a8:	28c00417 	ldw	r3,16(r5)
  80b0ac:	21800317 	ldw	r6,12(r4)
  80b0b0:	28800317 	ldw	r2,12(r5)
  80b0b4:	19fff436 	bltu	r3,r7,80b088 <__fpcmp_parts_d+0x54>
  80b0b8:	38c00526 	beq	r7,r3,80b0d0 <__fpcmp_parts_d+0x9c>
  80b0bc:	38c00236 	bltu	r7,r3,80b0c8 <__fpcmp_parts_d+0x94>
  80b0c0:	19ffec1e 	bne	r3,r7,80b074 <__fpcmp_parts_d+0x40>
  80b0c4:	30bfeb2e 	bgeu	r6,r2,80b074 <__fpcmp_parts_d+0x40>
  80b0c8:	403fe71e 	bne	r8,zero,80b068 <__fpcmp_parts_d+0x34>
  80b0cc:	003fef06 	br	80b08c <__fpcmp_parts_d+0x58>
  80b0d0:	11bffa2e 	bgeu	r2,r6,80b0bc <__fpcmp_parts_d+0x88>
  80b0d4:	403fe426 	beq	r8,zero,80b068 <__fpcmp_parts_d+0x34>
  80b0d8:	003fec06 	br	80b08c <__fpcmp_parts_d+0x58>
  80b0dc:	28800117 	ldw	r2,4(r5)
  80b0e0:	103fe11e 	bne	r2,zero,80b068 <__fpcmp_parts_d+0x34>
  80b0e4:	003fe906 	br	80b08c <__fpcmp_parts_d+0x58>
  80b0e8:	11bfdd1e 	bne	r2,r6,80b060 <__fpcmp_parts_d+0x2c>
  80b0ec:	28c00117 	ldw	r3,4(r5)
  80b0f0:	20800117 	ldw	r2,4(r4)
  80b0f4:	1885c83a 	sub	r2,r3,r2
  80b0f8:	f800283a 	ret

0080b0fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80b0fc:	defff404 	addi	sp,sp,-48
  80b100:	df000b15 	stw	fp,44(sp)
  80b104:	df000b04 	addi	fp,sp,44
  80b108:	e13ffb15 	stw	r4,-20(fp)
  80b10c:	e17ffc15 	stw	r5,-16(fp)
  80b110:	e1bffd15 	stw	r6,-12(fp)
  80b114:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80b118:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b11c:	008020b4 	movhi	r2,130
  80b120:	10a0d004 	addi	r2,r2,-31936
  80b124:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80b128:	1005003a 	cmpeq	r2,r2,zero
  80b12c:	1000411e 	bne	r2,zero,80b234 <alt_alarm_start+0x138>
  {
    if (alarm)
  80b130:	e0bffb17 	ldw	r2,-20(fp)
  80b134:	1005003a 	cmpeq	r2,r2,zero
  80b138:	10003b1e 	bne	r2,zero,80b228 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80b13c:	e0fffb17 	ldw	r3,-20(fp)
  80b140:	e0bffd17 	ldw	r2,-12(fp)
  80b144:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80b148:	e0fffb17 	ldw	r3,-20(fp)
  80b14c:	e0bffe17 	ldw	r2,-8(fp)
  80b150:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b154:	0005303a 	rdctl	r2,status
  80b158:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b15c:	e0fff817 	ldw	r3,-32(fp)
  80b160:	00bfff84 	movi	r2,-2
  80b164:	1884703a 	and	r2,r3,r2
  80b168:	1001703a 	wrctl	status,r2
  
  return context;
  80b16c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80b170:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80b174:	008020b4 	movhi	r2,130
  80b178:	10a0d104 	addi	r2,r2,-31932
  80b17c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80b180:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80b184:	e0fffc17 	ldw	r3,-16(fp)
  80b188:	e0bff917 	ldw	r2,-28(fp)
  80b18c:	1885883a 	add	r2,r3,r2
  80b190:	10c00044 	addi	r3,r2,1
  80b194:	e0bffb17 	ldw	r2,-20(fp)
  80b198:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80b19c:	e0bffb17 	ldw	r2,-20(fp)
  80b1a0:	10c00217 	ldw	r3,8(r2)
  80b1a4:	e0bff917 	ldw	r2,-28(fp)
  80b1a8:	1880042e 	bgeu	r3,r2,80b1bc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80b1ac:	e0fffb17 	ldw	r3,-20(fp)
  80b1b0:	00800044 	movi	r2,1
  80b1b4:	18800405 	stb	r2,16(r3)
  80b1b8:	00000206 	br	80b1c4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80b1bc:	e0bffb17 	ldw	r2,-20(fp)
  80b1c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80b1c4:	e0fffb17 	ldw	r3,-20(fp)
  80b1c8:	00802074 	movhi	r2,129
  80b1cc:	1099ba04 	addi	r2,r2,26344
  80b1d0:	e0bff615 	stw	r2,-40(fp)
  80b1d4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b1d8:	e0fff717 	ldw	r3,-36(fp)
  80b1dc:	e0bff617 	ldw	r2,-40(fp)
  80b1e0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80b1e4:	e0bff617 	ldw	r2,-40(fp)
  80b1e8:	10c00017 	ldw	r3,0(r2)
  80b1ec:	e0bff717 	ldw	r2,-36(fp)
  80b1f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b1f4:	e0bff617 	ldw	r2,-40(fp)
  80b1f8:	10c00017 	ldw	r3,0(r2)
  80b1fc:	e0bff717 	ldw	r2,-36(fp)
  80b200:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80b204:	e0fff617 	ldw	r3,-40(fp)
  80b208:	e0bff717 	ldw	r2,-36(fp)
  80b20c:	18800015 	stw	r2,0(r3)
  80b210:	e0bffa17 	ldw	r2,-24(fp)
  80b214:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b218:	e0bff517 	ldw	r2,-44(fp)
  80b21c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80b220:	e03fff15 	stw	zero,-4(fp)
  80b224:	00000506 	br	80b23c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80b228:	00bffa84 	movi	r2,-22
  80b22c:	e0bfff15 	stw	r2,-4(fp)
  80b230:	00000206 	br	80b23c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80b234:	00bfde84 	movi	r2,-134
  80b238:	e0bfff15 	stw	r2,-4(fp)
  80b23c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80b240:	e037883a 	mov	sp,fp
  80b244:	df000017 	ldw	fp,0(sp)
  80b248:	dec00104 	addi	sp,sp,4
  80b24c:	f800283a 	ret

0080b250 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80b250:	defff804 	addi	sp,sp,-32
  80b254:	dfc00715 	stw	ra,28(sp)
  80b258:	df000615 	stw	fp,24(sp)
  80b25c:	df000604 	addi	fp,sp,24
  80b260:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80b264:	e0bffc17 	ldw	r2,-16(fp)
  80b268:	1004803a 	cmplt	r2,r2,zero
  80b26c:	1000091e 	bne	r2,zero,80b294 <close+0x44>
  80b270:	e13ffc17 	ldw	r4,-16(fp)
  80b274:	01400304 	movi	r5,12
  80b278:	08017b40 	call	8017b4 <__mulsi3>
  80b27c:	1007883a 	mov	r3,r2
  80b280:	00802074 	movhi	r2,129
  80b284:	1094f804 	addi	r2,r2,21472
  80b288:	1887883a 	add	r3,r3,r2
  80b28c:	e0ffff15 	stw	r3,-4(fp)
  80b290:	00000106 	br	80b298 <close+0x48>
  80b294:	e03fff15 	stw	zero,-4(fp)
  80b298:	e0bfff17 	ldw	r2,-4(fp)
  80b29c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80b2a0:	e0bffb17 	ldw	r2,-20(fp)
  80b2a4:	1005003a 	cmpeq	r2,r2,zero
  80b2a8:	10001d1e 	bne	r2,zero,80b320 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80b2ac:	e0bffb17 	ldw	r2,-20(fp)
  80b2b0:	10800017 	ldw	r2,0(r2)
  80b2b4:	10800417 	ldw	r2,16(r2)
  80b2b8:	1005003a 	cmpeq	r2,r2,zero
  80b2bc:	1000071e 	bne	r2,zero,80b2dc <close+0x8c>
  80b2c0:	e0bffb17 	ldw	r2,-20(fp)
  80b2c4:	10800017 	ldw	r2,0(r2)
  80b2c8:	10800417 	ldw	r2,16(r2)
  80b2cc:	e13ffb17 	ldw	r4,-20(fp)
  80b2d0:	103ee83a 	callr	r2
  80b2d4:	e0bffe15 	stw	r2,-8(fp)
  80b2d8:	00000106 	br	80b2e0 <close+0x90>
  80b2dc:	e03ffe15 	stw	zero,-8(fp)
  80b2e0:	e0bffe17 	ldw	r2,-8(fp)
  80b2e4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80b2e8:	e13ffc17 	ldw	r4,-16(fp)
  80b2ec:	080baa80 	call	80baa8 <alt_release_fd>
    if (rval < 0)
  80b2f0:	e0bffa17 	ldw	r2,-24(fp)
  80b2f4:	1004403a 	cmpge	r2,r2,zero
  80b2f8:	1000071e 	bne	r2,zero,80b318 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80b2fc:	080b3500 	call	80b350 <alt_get_errno>
  80b300:	e0fffa17 	ldw	r3,-24(fp)
  80b304:	00c7c83a 	sub	r3,zero,r3
  80b308:	10c00015 	stw	r3,0(r2)
      return -1;
  80b30c:	00bfffc4 	movi	r2,-1
  80b310:	e0bffd15 	stw	r2,-12(fp)
  80b314:	00000806 	br	80b338 <close+0xe8>
    }
    return 0;
  80b318:	e03ffd15 	stw	zero,-12(fp)
  80b31c:	00000606 	br	80b338 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b320:	080b3500 	call	80b350 <alt_get_errno>
  80b324:	1007883a 	mov	r3,r2
  80b328:	00801444 	movi	r2,81
  80b32c:	18800015 	stw	r2,0(r3)
    return -1;
  80b330:	00bfffc4 	movi	r2,-1
  80b334:	e0bffd15 	stw	r2,-12(fp)
  80b338:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80b33c:	e037883a 	mov	sp,fp
  80b340:	dfc00117 	ldw	ra,4(sp)
  80b344:	df000017 	ldw	fp,0(sp)
  80b348:	dec00204 	addi	sp,sp,8
  80b34c:	f800283a 	ret

0080b350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b350:	defffd04 	addi	sp,sp,-12
  80b354:	dfc00215 	stw	ra,8(sp)
  80b358:	df000115 	stw	fp,4(sp)
  80b35c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b360:	00802074 	movhi	r2,129
  80b364:	1099b804 	addi	r2,r2,26336
  80b368:	10800017 	ldw	r2,0(r2)
  80b36c:	1005003a 	cmpeq	r2,r2,zero
  80b370:	1000061e 	bne	r2,zero,80b38c <alt_get_errno+0x3c>
  80b374:	00802074 	movhi	r2,129
  80b378:	1099b804 	addi	r2,r2,26336
  80b37c:	10800017 	ldw	r2,0(r2)
  80b380:	103ee83a 	callr	r2
  80b384:	e0bfff15 	stw	r2,-4(fp)
  80b388:	00000306 	br	80b398 <alt_get_errno+0x48>
  80b38c:	008020b4 	movhi	r2,130
  80b390:	10a0c904 	addi	r2,r2,-31964
  80b394:	e0bfff15 	stw	r2,-4(fp)
  80b398:	e0bfff17 	ldw	r2,-4(fp)
}
  80b39c:	e037883a 	mov	sp,fp
  80b3a0:	dfc00117 	ldw	ra,4(sp)
  80b3a4:	df000017 	ldw	fp,0(sp)
  80b3a8:	dec00204 	addi	sp,sp,8
  80b3ac:	f800283a 	ret

0080b3b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80b3b0:	defffc04 	addi	sp,sp,-16
  80b3b4:	df000315 	stw	fp,12(sp)
  80b3b8:	df000304 	addi	fp,sp,12
  80b3bc:	e13ffd15 	stw	r4,-12(fp)
  80b3c0:	e17ffe15 	stw	r5,-8(fp)
  80b3c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80b3c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b3cc:	e037883a 	mov	sp,fp
  80b3d0:	df000017 	ldw	fp,0(sp)
  80b3d4:	dec00104 	addi	sp,sp,4
  80b3d8:	f800283a 	ret

0080b3dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80b3dc:	defff904 	addi	sp,sp,-28
  80b3e0:	dfc00615 	stw	ra,24(sp)
  80b3e4:	df000515 	stw	fp,20(sp)
  80b3e8:	df000504 	addi	fp,sp,20
  80b3ec:	e13ffc15 	stw	r4,-16(fp)
  80b3f0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b3f4:	e0bffc17 	ldw	r2,-16(fp)
  80b3f8:	1004803a 	cmplt	r2,r2,zero
  80b3fc:	1000091e 	bne	r2,zero,80b424 <fstat+0x48>
  80b400:	e13ffc17 	ldw	r4,-16(fp)
  80b404:	01400304 	movi	r5,12
  80b408:	08017b40 	call	8017b4 <__mulsi3>
  80b40c:	1007883a 	mov	r3,r2
  80b410:	00802074 	movhi	r2,129
  80b414:	1094f804 	addi	r2,r2,21472
  80b418:	1887883a 	add	r3,r3,r2
  80b41c:	e0ffff15 	stw	r3,-4(fp)
  80b420:	00000106 	br	80b428 <fstat+0x4c>
  80b424:	e03fff15 	stw	zero,-4(fp)
  80b428:	e0bfff17 	ldw	r2,-4(fp)
  80b42c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80b430:	e0bffb17 	ldw	r2,-20(fp)
  80b434:	1005003a 	cmpeq	r2,r2,zero
  80b438:	1000121e 	bne	r2,zero,80b484 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80b43c:	e0bffb17 	ldw	r2,-20(fp)
  80b440:	10800017 	ldw	r2,0(r2)
  80b444:	10800817 	ldw	r2,32(r2)
  80b448:	1005003a 	cmpeq	r2,r2,zero
  80b44c:	1000081e 	bne	r2,zero,80b470 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80b450:	e0bffb17 	ldw	r2,-20(fp)
  80b454:	10800017 	ldw	r2,0(r2)
  80b458:	10800817 	ldw	r2,32(r2)
  80b45c:	e13ffb17 	ldw	r4,-20(fp)
  80b460:	e17ffd17 	ldw	r5,-12(fp)
  80b464:	103ee83a 	callr	r2
  80b468:	e0bffe15 	stw	r2,-8(fp)
  80b46c:	00000b06 	br	80b49c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80b470:	e0fffd17 	ldw	r3,-12(fp)
  80b474:	00880004 	movi	r2,8192
  80b478:	18800115 	stw	r2,4(r3)
      return 0;
  80b47c:	e03ffe15 	stw	zero,-8(fp)
  80b480:	00000606 	br	80b49c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b484:	080b4b40 	call	80b4b4 <alt_get_errno>
  80b488:	1007883a 	mov	r3,r2
  80b48c:	00801444 	movi	r2,81
  80b490:	18800015 	stw	r2,0(r3)
    return -1;
  80b494:	00bfffc4 	movi	r2,-1
  80b498:	e0bffe15 	stw	r2,-8(fp)
  80b49c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80b4a0:	e037883a 	mov	sp,fp
  80b4a4:	dfc00117 	ldw	ra,4(sp)
  80b4a8:	df000017 	ldw	fp,0(sp)
  80b4ac:	dec00204 	addi	sp,sp,8
  80b4b0:	f800283a 	ret

0080b4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b4b4:	defffd04 	addi	sp,sp,-12
  80b4b8:	dfc00215 	stw	ra,8(sp)
  80b4bc:	df000115 	stw	fp,4(sp)
  80b4c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b4c4:	00802074 	movhi	r2,129
  80b4c8:	1099b804 	addi	r2,r2,26336
  80b4cc:	10800017 	ldw	r2,0(r2)
  80b4d0:	1005003a 	cmpeq	r2,r2,zero
  80b4d4:	1000061e 	bne	r2,zero,80b4f0 <alt_get_errno+0x3c>
  80b4d8:	00802074 	movhi	r2,129
  80b4dc:	1099b804 	addi	r2,r2,26336
  80b4e0:	10800017 	ldw	r2,0(r2)
  80b4e4:	103ee83a 	callr	r2
  80b4e8:	e0bfff15 	stw	r2,-4(fp)
  80b4ec:	00000306 	br	80b4fc <alt_get_errno+0x48>
  80b4f0:	008020b4 	movhi	r2,130
  80b4f4:	10a0c904 	addi	r2,r2,-31964
  80b4f8:	e0bfff15 	stw	r2,-4(fp)
  80b4fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80b500:	e037883a 	mov	sp,fp
  80b504:	dfc00117 	ldw	ra,4(sp)
  80b508:	df000017 	ldw	fp,0(sp)
  80b50c:	dec00204 	addi	sp,sp,8
  80b510:	f800283a 	ret

0080b514 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80b514:	deffeb04 	addi	sp,sp,-84
  80b518:	dfc01415 	stw	ra,80(sp)
  80b51c:	df001315 	stw	fp,76(sp)
  80b520:	df001304 	addi	fp,sp,76
  80b524:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b528:	e0bffd17 	ldw	r2,-12(fp)
  80b52c:	1004803a 	cmplt	r2,r2,zero
  80b530:	1000091e 	bne	r2,zero,80b558 <isatty+0x44>
  80b534:	e13ffd17 	ldw	r4,-12(fp)
  80b538:	01400304 	movi	r5,12
  80b53c:	08017b40 	call	8017b4 <__mulsi3>
  80b540:	1007883a 	mov	r3,r2
  80b544:	00802074 	movhi	r2,129
  80b548:	1094f804 	addi	r2,r2,21472
  80b54c:	1887883a 	add	r3,r3,r2
  80b550:	e0ffff15 	stw	r3,-4(fp)
  80b554:	00000106 	br	80b55c <isatty+0x48>
  80b558:	e03fff15 	stw	zero,-4(fp)
  80b55c:	e0bfff17 	ldw	r2,-4(fp)
  80b560:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80b564:	e0bfed17 	ldw	r2,-76(fp)
  80b568:	1005003a 	cmpeq	r2,r2,zero
  80b56c:	10000f1e 	bne	r2,zero,80b5ac <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80b570:	e0bfed17 	ldw	r2,-76(fp)
  80b574:	10800017 	ldw	r2,0(r2)
  80b578:	10800817 	ldw	r2,32(r2)
  80b57c:	1004c03a 	cmpne	r2,r2,zero
  80b580:	1000031e 	bne	r2,zero,80b590 <isatty+0x7c>
    {
      return 1;
  80b584:	00800044 	movi	r2,1
  80b588:	e0bffe15 	stw	r2,-8(fp)
  80b58c:	00000c06 	br	80b5c0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80b590:	e17fee04 	addi	r5,fp,-72
  80b594:	e13ffd17 	ldw	r4,-12(fp)
  80b598:	080b3dc0 	call	80b3dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80b59c:	e0bfef17 	ldw	r2,-68(fp)
  80b5a0:	10880020 	cmpeqi	r2,r2,8192
  80b5a4:	e0bffe15 	stw	r2,-8(fp)
  80b5a8:	00000506 	br	80b5c0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b5ac:	080b5d80 	call	80b5d8 <alt_get_errno>
  80b5b0:	1007883a 	mov	r3,r2
  80b5b4:	00801444 	movi	r2,81
  80b5b8:	18800015 	stw	r2,0(r3)
    return 0;
  80b5bc:	e03ffe15 	stw	zero,-8(fp)
  80b5c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80b5c4:	e037883a 	mov	sp,fp
  80b5c8:	dfc00117 	ldw	ra,4(sp)
  80b5cc:	df000017 	ldw	fp,0(sp)
  80b5d0:	dec00204 	addi	sp,sp,8
  80b5d4:	f800283a 	ret

0080b5d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b5d8:	defffd04 	addi	sp,sp,-12
  80b5dc:	dfc00215 	stw	ra,8(sp)
  80b5e0:	df000115 	stw	fp,4(sp)
  80b5e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b5e8:	00802074 	movhi	r2,129
  80b5ec:	1099b804 	addi	r2,r2,26336
  80b5f0:	10800017 	ldw	r2,0(r2)
  80b5f4:	1005003a 	cmpeq	r2,r2,zero
  80b5f8:	1000061e 	bne	r2,zero,80b614 <alt_get_errno+0x3c>
  80b5fc:	00802074 	movhi	r2,129
  80b600:	1099b804 	addi	r2,r2,26336
  80b604:	10800017 	ldw	r2,0(r2)
  80b608:	103ee83a 	callr	r2
  80b60c:	e0bfff15 	stw	r2,-4(fp)
  80b610:	00000306 	br	80b620 <alt_get_errno+0x48>
  80b614:	008020b4 	movhi	r2,130
  80b618:	10a0c904 	addi	r2,r2,-31964
  80b61c:	e0bfff15 	stw	r2,-4(fp)
  80b620:	e0bfff17 	ldw	r2,-4(fp)
}
  80b624:	e037883a 	mov	sp,fp
  80b628:	dfc00117 	ldw	ra,4(sp)
  80b62c:	df000017 	ldw	fp,0(sp)
  80b630:	dec00204 	addi	sp,sp,8
  80b634:	f800283a 	ret

0080b638 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80b638:	defffe04 	addi	sp,sp,-8
  80b63c:	dfc00115 	stw	ra,4(sp)
  80b640:	df000015 	stw	fp,0(sp)
  80b644:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80b648:	01002074 	movhi	r4,129
  80b64c:	2119bd04 	addi	r4,r4,26356
  80b650:	01402074 	movhi	r5,129
  80b654:	2952bd04 	addi	r5,r5,19188
  80b658:	01802074 	movhi	r6,129
  80b65c:	3199bd04 	addi	r6,r6,26356
  80b660:	080b6b80 	call	80b6b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80b664:	01002034 	movhi	r4,128
  80b668:	21000804 	addi	r4,r4,32
  80b66c:	01402034 	movhi	r5,128
  80b670:	29400804 	addi	r5,r5,32
  80b674:	01802034 	movhi	r6,128
  80b678:	31806d04 	addi	r6,r6,436
  80b67c:	080b6b80 	call	80b6b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80b680:	01002074 	movhi	r4,129
  80b684:	2110be04 	addi	r4,r4,17144
  80b688:	01402074 	movhi	r5,129
  80b68c:	2950be04 	addi	r5,r5,17144
  80b690:	01802074 	movhi	r6,129
  80b694:	3192bd04 	addi	r6,r6,19188
  80b698:	080b6b80 	call	80b6b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80b69c:	08132240 	call	813224 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80b6a0:	08134b00 	call	8134b0 <alt_icache_flush_all>
}
  80b6a4:	e037883a 	mov	sp,fp
  80b6a8:	dfc00117 	ldw	ra,4(sp)
  80b6ac:	df000017 	ldw	fp,0(sp)
  80b6b0:	dec00204 	addi	sp,sp,8
  80b6b4:	f800283a 	ret

0080b6b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80b6b8:	defffc04 	addi	sp,sp,-16
  80b6bc:	df000315 	stw	fp,12(sp)
  80b6c0:	df000304 	addi	fp,sp,12
  80b6c4:	e13ffd15 	stw	r4,-12(fp)
  80b6c8:	e17ffe15 	stw	r5,-8(fp)
  80b6cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80b6d0:	e0fffe17 	ldw	r3,-8(fp)
  80b6d4:	e0bffd17 	ldw	r2,-12(fp)
  80b6d8:	18800e26 	beq	r3,r2,80b714 <alt_load_section+0x5c>
  {
    while( to != end )
  80b6dc:	00000a06 	br	80b708 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80b6e0:	e0bffd17 	ldw	r2,-12(fp)
  80b6e4:	10c00017 	ldw	r3,0(r2)
  80b6e8:	e0bffe17 	ldw	r2,-8(fp)
  80b6ec:	10c00015 	stw	r3,0(r2)
  80b6f0:	e0bffe17 	ldw	r2,-8(fp)
  80b6f4:	10800104 	addi	r2,r2,4
  80b6f8:	e0bffe15 	stw	r2,-8(fp)
  80b6fc:	e0bffd17 	ldw	r2,-12(fp)
  80b700:	10800104 	addi	r2,r2,4
  80b704:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80b708:	e0fffe17 	ldw	r3,-8(fp)
  80b70c:	e0bfff17 	ldw	r2,-4(fp)
  80b710:	18bff31e 	bne	r3,r2,80b6e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80b714:	e037883a 	mov	sp,fp
  80b718:	df000017 	ldw	fp,0(sp)
  80b71c:	dec00104 	addi	sp,sp,4
  80b720:	f800283a 	ret

0080b724 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80b724:	defff804 	addi	sp,sp,-32
  80b728:	dfc00715 	stw	ra,28(sp)
  80b72c:	df000615 	stw	fp,24(sp)
  80b730:	df000604 	addi	fp,sp,24
  80b734:	e13ffc15 	stw	r4,-16(fp)
  80b738:	e17ffd15 	stw	r5,-12(fp)
  80b73c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80b740:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b744:	e0bffc17 	ldw	r2,-16(fp)
  80b748:	1004803a 	cmplt	r2,r2,zero
  80b74c:	1000091e 	bne	r2,zero,80b774 <lseek+0x50>
  80b750:	e13ffc17 	ldw	r4,-16(fp)
  80b754:	01400304 	movi	r5,12
  80b758:	08017b40 	call	8017b4 <__mulsi3>
  80b75c:	1007883a 	mov	r3,r2
  80b760:	00802074 	movhi	r2,129
  80b764:	1094f804 	addi	r2,r2,21472
  80b768:	1887883a 	add	r3,r3,r2
  80b76c:	e0ffff15 	stw	r3,-4(fp)
  80b770:	00000106 	br	80b778 <lseek+0x54>
  80b774:	e03fff15 	stw	zero,-4(fp)
  80b778:	e0bfff17 	ldw	r2,-4(fp)
  80b77c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80b780:	e0bffb17 	ldw	r2,-20(fp)
  80b784:	1005003a 	cmpeq	r2,r2,zero
  80b788:	1000111e 	bne	r2,zero,80b7d0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b78c:	e0bffb17 	ldw	r2,-20(fp)
  80b790:	10800017 	ldw	r2,0(r2)
  80b794:	10800717 	ldw	r2,28(r2)
  80b798:	1005003a 	cmpeq	r2,r2,zero
  80b79c:	1000091e 	bne	r2,zero,80b7c4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80b7a0:	e0bffb17 	ldw	r2,-20(fp)
  80b7a4:	10800017 	ldw	r2,0(r2)
  80b7a8:	10800717 	ldw	r2,28(r2)
  80b7ac:	e13ffb17 	ldw	r4,-20(fp)
  80b7b0:	e17ffd17 	ldw	r5,-12(fp)
  80b7b4:	e1bffe17 	ldw	r6,-8(fp)
  80b7b8:	103ee83a 	callr	r2
  80b7bc:	e0bffa15 	stw	r2,-24(fp)
  80b7c0:	00000506 	br	80b7d8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80b7c4:	00bfde84 	movi	r2,-134
  80b7c8:	e0bffa15 	stw	r2,-24(fp)
  80b7cc:	00000206 	br	80b7d8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80b7d0:	00bfebc4 	movi	r2,-81
  80b7d4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80b7d8:	e0bffa17 	ldw	r2,-24(fp)
  80b7dc:	1004403a 	cmpge	r2,r2,zero
  80b7e0:	1000071e 	bne	r2,zero,80b800 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80b7e4:	080b8180 	call	80b818 <alt_get_errno>
  80b7e8:	1007883a 	mov	r3,r2
  80b7ec:	e0bffa17 	ldw	r2,-24(fp)
  80b7f0:	0085c83a 	sub	r2,zero,r2
  80b7f4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80b7f8:	00bfffc4 	movi	r2,-1
  80b7fc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80b800:	e0bffa17 	ldw	r2,-24(fp)
}
  80b804:	e037883a 	mov	sp,fp
  80b808:	dfc00117 	ldw	ra,4(sp)
  80b80c:	df000017 	ldw	fp,0(sp)
  80b810:	dec00204 	addi	sp,sp,8
  80b814:	f800283a 	ret

0080b818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b818:	defffd04 	addi	sp,sp,-12
  80b81c:	dfc00215 	stw	ra,8(sp)
  80b820:	df000115 	stw	fp,4(sp)
  80b824:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b828:	00802074 	movhi	r2,129
  80b82c:	1099b804 	addi	r2,r2,26336
  80b830:	10800017 	ldw	r2,0(r2)
  80b834:	1005003a 	cmpeq	r2,r2,zero
  80b838:	1000061e 	bne	r2,zero,80b854 <alt_get_errno+0x3c>
  80b83c:	00802074 	movhi	r2,129
  80b840:	1099b804 	addi	r2,r2,26336
  80b844:	10800017 	ldw	r2,0(r2)
  80b848:	103ee83a 	callr	r2
  80b84c:	e0bfff15 	stw	r2,-4(fp)
  80b850:	00000306 	br	80b860 <alt_get_errno+0x48>
  80b854:	008020b4 	movhi	r2,130
  80b858:	10a0c904 	addi	r2,r2,-31964
  80b85c:	e0bfff15 	stw	r2,-4(fp)
  80b860:	e0bfff17 	ldw	r2,-4(fp)
}
  80b864:	e037883a 	mov	sp,fp
  80b868:	dfc00117 	ldw	ra,4(sp)
  80b86c:	df000017 	ldw	fp,0(sp)
  80b870:	dec00204 	addi	sp,sp,8
  80b874:	f800283a 	ret

0080b878 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b878:	defffd04 	addi	sp,sp,-12
  80b87c:	dfc00215 	stw	ra,8(sp)
  80b880:	df000115 	stw	fp,4(sp)
  80b884:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b888:	0009883a 	mov	r4,zero
  80b88c:	080bf040 	call	80bf04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b890:	080bf380 	call	80bf38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b894:	01002074 	movhi	r4,129
  80b898:	21129304 	addi	r4,r4,19020
  80b89c:	01402074 	movhi	r5,129
  80b8a0:	29529304 	addi	r5,r5,19020
  80b8a4:	01802074 	movhi	r6,129
  80b8a8:	31929304 	addi	r6,r6,19020
  80b8ac:	08138840 	call	813884 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b8b0:	08133540 	call	813354 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b8b4:	01002074 	movhi	r4,129
  80b8b8:	210cee04 	addi	r4,r4,13240
  80b8bc:	0813e800 	call	813e80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b8c0:	d1272017 	ldw	r4,-25472(gp)
  80b8c4:	d1672117 	ldw	r5,-25468(gp)
  80b8c8:	d1a72217 	ldw	r6,-25464(gp)
  80b8cc:	08012540 	call	801254 <main>
  80b8d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b8d4:	01000044 	movi	r4,1
  80b8d8:	080b2500 	call	80b250 <close>
  exit (result);
  80b8dc:	e13fff17 	ldw	r4,-4(fp)
  80b8e0:	0813e940 	call	813e94 <exit>

0080b8e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b8e4:	defffe04 	addi	sp,sp,-8
  80b8e8:	df000115 	stw	fp,4(sp)
  80b8ec:	df000104 	addi	fp,sp,4
  80b8f0:	e13fff15 	stw	r4,-4(fp)
}
  80b8f4:	e037883a 	mov	sp,fp
  80b8f8:	df000017 	ldw	fp,0(sp)
  80b8fc:	dec00104 	addi	sp,sp,4
  80b900:	f800283a 	ret

0080b904 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b904:	defffe04 	addi	sp,sp,-8
  80b908:	df000115 	stw	fp,4(sp)
  80b90c:	df000104 	addi	fp,sp,4
  80b910:	e13fff15 	stw	r4,-4(fp)
}
  80b914:	e037883a 	mov	sp,fp
  80b918:	df000017 	ldw	fp,0(sp)
  80b91c:	dec00104 	addi	sp,sp,4
  80b920:	f800283a 	ret

0080b924 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b924:	defff704 	addi	sp,sp,-36
  80b928:	dfc00815 	stw	ra,32(sp)
  80b92c:	df000715 	stw	fp,28(sp)
  80b930:	df000704 	addi	fp,sp,28
  80b934:	e13ffb15 	stw	r4,-20(fp)
  80b938:	e17ffc15 	stw	r5,-16(fp)
  80b93c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b940:	e0bffb17 	ldw	r2,-20(fp)
  80b944:	1004803a 	cmplt	r2,r2,zero
  80b948:	1000091e 	bne	r2,zero,80b970 <read+0x4c>
  80b94c:	e13ffb17 	ldw	r4,-20(fp)
  80b950:	01400304 	movi	r5,12
  80b954:	08017b40 	call	8017b4 <__mulsi3>
  80b958:	1007883a 	mov	r3,r2
  80b95c:	00802074 	movhi	r2,129
  80b960:	1094f804 	addi	r2,r2,21472
  80b964:	1887883a 	add	r3,r3,r2
  80b968:	e0ffff15 	stw	r3,-4(fp)
  80b96c:	00000106 	br	80b974 <read+0x50>
  80b970:	e03fff15 	stw	zero,-4(fp)
  80b974:	e0bfff17 	ldw	r2,-4(fp)
  80b978:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b97c:	e0bffa17 	ldw	r2,-24(fp)
  80b980:	1005003a 	cmpeq	r2,r2,zero
  80b984:	1000241e 	bne	r2,zero,80ba18 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b988:	e0bffa17 	ldw	r2,-24(fp)
  80b98c:	10800217 	ldw	r2,8(r2)
  80b990:	108000cc 	andi	r2,r2,3
  80b994:	10800060 	cmpeqi	r2,r2,1
  80b998:	10001a1e 	bne	r2,zero,80ba04 <read+0xe0>
  80b99c:	e0bffa17 	ldw	r2,-24(fp)
  80b9a0:	10800017 	ldw	r2,0(r2)
  80b9a4:	10800517 	ldw	r2,20(r2)
  80b9a8:	1005003a 	cmpeq	r2,r2,zero
  80b9ac:	1000151e 	bne	r2,zero,80ba04 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b9b0:	e0bffa17 	ldw	r2,-24(fp)
  80b9b4:	10800017 	ldw	r2,0(r2)
  80b9b8:	10800517 	ldw	r2,20(r2)
  80b9bc:	e17ffc17 	ldw	r5,-16(fp)
  80b9c0:	e1bffd17 	ldw	r6,-12(fp)
  80b9c4:	e13ffa17 	ldw	r4,-24(fp)
  80b9c8:	103ee83a 	callr	r2
  80b9cc:	e0bff915 	stw	r2,-28(fp)
  80b9d0:	e0bff917 	ldw	r2,-28(fp)
  80b9d4:	1004403a 	cmpge	r2,r2,zero
  80b9d8:	1000071e 	bne	r2,zero,80b9f8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80b9dc:	080ba480 	call	80ba48 <alt_get_errno>
  80b9e0:	e0fff917 	ldw	r3,-28(fp)
  80b9e4:	00c7c83a 	sub	r3,zero,r3
  80b9e8:	10c00015 	stw	r3,0(r2)
          return -1;
  80b9ec:	00bfffc4 	movi	r2,-1
  80b9f0:	e0bffe15 	stw	r2,-8(fp)
  80b9f4:	00000e06 	br	80ba30 <read+0x10c>
        }
        return rval;
  80b9f8:	e0bff917 	ldw	r2,-28(fp)
  80b9fc:	e0bffe15 	stw	r2,-8(fp)
  80ba00:	00000b06 	br	80ba30 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ba04:	080ba480 	call	80ba48 <alt_get_errno>
  80ba08:	1007883a 	mov	r3,r2
  80ba0c:	00800344 	movi	r2,13
  80ba10:	18800015 	stw	r2,0(r3)
  80ba14:	00000406 	br	80ba28 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ba18:	080ba480 	call	80ba48 <alt_get_errno>
  80ba1c:	1007883a 	mov	r3,r2
  80ba20:	00801444 	movi	r2,81
  80ba24:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80ba28:	00bfffc4 	movi	r2,-1
  80ba2c:	e0bffe15 	stw	r2,-8(fp)
  80ba30:	e0bffe17 	ldw	r2,-8(fp)
}
  80ba34:	e037883a 	mov	sp,fp
  80ba38:	dfc00117 	ldw	ra,4(sp)
  80ba3c:	df000017 	ldw	fp,0(sp)
  80ba40:	dec00204 	addi	sp,sp,8
  80ba44:	f800283a 	ret

0080ba48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ba48:	defffd04 	addi	sp,sp,-12
  80ba4c:	dfc00215 	stw	ra,8(sp)
  80ba50:	df000115 	stw	fp,4(sp)
  80ba54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ba58:	00802074 	movhi	r2,129
  80ba5c:	1099b804 	addi	r2,r2,26336
  80ba60:	10800017 	ldw	r2,0(r2)
  80ba64:	1005003a 	cmpeq	r2,r2,zero
  80ba68:	1000061e 	bne	r2,zero,80ba84 <alt_get_errno+0x3c>
  80ba6c:	00802074 	movhi	r2,129
  80ba70:	1099b804 	addi	r2,r2,26336
  80ba74:	10800017 	ldw	r2,0(r2)
  80ba78:	103ee83a 	callr	r2
  80ba7c:	e0bfff15 	stw	r2,-4(fp)
  80ba80:	00000306 	br	80ba90 <alt_get_errno+0x48>
  80ba84:	008020b4 	movhi	r2,130
  80ba88:	10a0c904 	addi	r2,r2,-31964
  80ba8c:	e0bfff15 	stw	r2,-4(fp)
  80ba90:	e0bfff17 	ldw	r2,-4(fp)
}
  80ba94:	e037883a 	mov	sp,fp
  80ba98:	dfc00117 	ldw	ra,4(sp)
  80ba9c:	df000017 	ldw	fp,0(sp)
  80baa0:	dec00204 	addi	sp,sp,8
  80baa4:	f800283a 	ret

0080baa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80baa8:	defffc04 	addi	sp,sp,-16
  80baac:	dfc00315 	stw	ra,12(sp)
  80bab0:	df000215 	stw	fp,8(sp)
  80bab4:	dc000115 	stw	r16,4(sp)
  80bab8:	df000104 	addi	fp,sp,4
  80babc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80bac0:	e0bfff17 	ldw	r2,-4(fp)
  80bac4:	108000d0 	cmplti	r2,r2,3
  80bac8:	10000f1e 	bne	r2,zero,80bb08 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80bacc:	e13fff17 	ldw	r4,-4(fp)
  80bad0:	04002074 	movhi	r16,129
  80bad4:	8414f804 	addi	r16,r16,21472
  80bad8:	01400304 	movi	r5,12
  80badc:	08017b40 	call	8017b4 <__mulsi3>
  80bae0:	1405883a 	add	r2,r2,r16
  80bae4:	10800204 	addi	r2,r2,8
  80bae8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80baec:	e13fff17 	ldw	r4,-4(fp)
  80baf0:	04002074 	movhi	r16,129
  80baf4:	8414f804 	addi	r16,r16,21472
  80baf8:	01400304 	movi	r5,12
  80bafc:	08017b40 	call	8017b4 <__mulsi3>
  80bb00:	1405883a 	add	r2,r2,r16
  80bb04:	10000015 	stw	zero,0(r2)
  }
}
  80bb08:	e037883a 	mov	sp,fp
  80bb0c:	dfc00217 	ldw	ra,8(sp)
  80bb10:	df000117 	ldw	fp,4(sp)
  80bb14:	dc000017 	ldw	r16,0(sp)
  80bb18:	dec00304 	addi	sp,sp,12
  80bb1c:	f800283a 	ret

0080bb20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80bb20:	defff804 	addi	sp,sp,-32
  80bb24:	df000715 	stw	fp,28(sp)
  80bb28:	df000704 	addi	fp,sp,28
  80bb2c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb30:	0005303a 	rdctl	r2,status
  80bb34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb38:	e0fffb17 	ldw	r3,-20(fp)
  80bb3c:	00bfff84 	movi	r2,-2
  80bb40:	1884703a 	and	r2,r3,r2
  80bb44:	1001703a 	wrctl	status,r2
  
  return context;
  80bb48:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80bb4c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80bb50:	d0a00c17 	ldw	r2,-32720(gp)
  80bb54:	10c000c4 	addi	r3,r2,3
  80bb58:	00bfff04 	movi	r2,-4
  80bb5c:	1884703a 	and	r2,r3,r2
  80bb60:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80bb64:	d0e00c17 	ldw	r3,-32720(gp)
  80bb68:	e0bffe17 	ldw	r2,-8(fp)
  80bb6c:	1887883a 	add	r3,r3,r2
  80bb70:	00804034 	movhi	r2,256
  80bb74:	10800004 	addi	r2,r2,0
  80bb78:	10c0072e 	bgeu	r2,r3,80bb98 <sbrk+0x78>
  80bb7c:	e0bffd17 	ldw	r2,-12(fp)
  80bb80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb84:	e0bffa17 	ldw	r2,-24(fp)
  80bb88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80bb8c:	00bfffc4 	movi	r2,-1
  80bb90:	e0bfff15 	stw	r2,-4(fp)
  80bb94:	00000c06 	br	80bbc8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80bb98:	d0a00c17 	ldw	r2,-32720(gp)
  80bb9c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80bba0:	d0e00c17 	ldw	r3,-32720(gp)
  80bba4:	e0bffe17 	ldw	r2,-8(fp)
  80bba8:	1885883a 	add	r2,r3,r2
  80bbac:	d0a00c15 	stw	r2,-32720(gp)
  80bbb0:	e0bffd17 	ldw	r2,-12(fp)
  80bbb4:	e0bff915 	stw	r2,-28(fp)
  80bbb8:	e0bff917 	ldw	r2,-28(fp)
  80bbbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80bbc0:	e0bffc17 	ldw	r2,-16(fp)
  80bbc4:	e0bfff15 	stw	r2,-4(fp)
  80bbc8:	e0bfff17 	ldw	r2,-4(fp)
} 
  80bbcc:	e037883a 	mov	sp,fp
  80bbd0:	df000017 	ldw	fp,0(sp)
  80bbd4:	dec00104 	addi	sp,sp,4
  80bbd8:	f800283a 	ret

0080bbdc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80bbdc:	defffa04 	addi	sp,sp,-24
  80bbe0:	df000515 	stw	fp,20(sp)
  80bbe4:	df000504 	addi	fp,sp,20
  80bbe8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbec:	0005303a 	rdctl	r2,status
  80bbf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbf4:	e0fffd17 	ldw	r3,-12(fp)
  80bbf8:	00bfff84 	movi	r2,-2
  80bbfc:	1884703a 	and	r2,r3,r2
  80bc00:	1001703a 	wrctl	status,r2
  
  return context;
  80bc04:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80bc08:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80bc0c:	e0bfff17 	ldw	r2,-4(fp)
  80bc10:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80bc14:	e0bffc17 	ldw	r2,-16(fp)
  80bc18:	10c00017 	ldw	r3,0(r2)
  80bc1c:	e0bffc17 	ldw	r2,-16(fp)
  80bc20:	10800117 	ldw	r2,4(r2)
  80bc24:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80bc28:	e0bffc17 	ldw	r2,-16(fp)
  80bc2c:	10c00117 	ldw	r3,4(r2)
  80bc30:	e0bffc17 	ldw	r2,-16(fp)
  80bc34:	10800017 	ldw	r2,0(r2)
  80bc38:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80bc3c:	e0fffc17 	ldw	r3,-16(fp)
  80bc40:	e0bffc17 	ldw	r2,-16(fp)
  80bc44:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80bc48:	e0fffc17 	ldw	r3,-16(fp)
  80bc4c:	e0bffc17 	ldw	r2,-16(fp)
  80bc50:	18800015 	stw	r2,0(r3)
  80bc54:	e0bffe17 	ldw	r2,-8(fp)
  80bc58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc5c:	e0bffb17 	ldw	r2,-20(fp)
  80bc60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80bc64:	e037883a 	mov	sp,fp
  80bc68:	df000017 	ldw	fp,0(sp)
  80bc6c:	dec00104 	addi	sp,sp,4
  80bc70:	f800283a 	ret

0080bc74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80bc74:	defffb04 	addi	sp,sp,-20
  80bc78:	dfc00415 	stw	ra,16(sp)
  80bc7c:	df000315 	stw	fp,12(sp)
  80bc80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80bc84:	d0a00d17 	ldw	r2,-32716(gp)
  80bc88:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80bc8c:	d0a72417 	ldw	r2,-25456(gp)
  80bc90:	10800044 	addi	r2,r2,1
  80bc94:	d0a72415 	stw	r2,-25456(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bc98:	00003106 	br	80bd60 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80bc9c:	e0bffe17 	ldw	r2,-8(fp)
  80bca0:	10800017 	ldw	r2,0(r2)
  80bca4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80bca8:	e0bffe17 	ldw	r2,-8(fp)
  80bcac:	10800403 	ldbu	r2,16(r2)
  80bcb0:	10803fcc 	andi	r2,r2,255
  80bcb4:	1005003a 	cmpeq	r2,r2,zero
  80bcb8:	1000051e 	bne	r2,zero,80bcd0 <alt_tick+0x5c>
  80bcbc:	d0a72417 	ldw	r2,-25456(gp)
  80bcc0:	1004c03a 	cmpne	r2,r2,zero
  80bcc4:	1000021e 	bne	r2,zero,80bcd0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80bcc8:	e0bffe17 	ldw	r2,-8(fp)
  80bccc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80bcd0:	e0bffe17 	ldw	r2,-8(fp)
  80bcd4:	10c00217 	ldw	r3,8(r2)
  80bcd8:	d0a72417 	ldw	r2,-25456(gp)
  80bcdc:	10c01e36 	bltu	r2,r3,80bd58 <alt_tick+0xe4>
  80bce0:	e0bffe17 	ldw	r2,-8(fp)
  80bce4:	10800403 	ldbu	r2,16(r2)
  80bce8:	10803fcc 	andi	r2,r2,255
  80bcec:	1004c03a 	cmpne	r2,r2,zero
  80bcf0:	1000191e 	bne	r2,zero,80bd58 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80bcf4:	e0bffe17 	ldw	r2,-8(fp)
  80bcf8:	10c00317 	ldw	r3,12(r2)
  80bcfc:	e0bffe17 	ldw	r2,-8(fp)
  80bd00:	11000517 	ldw	r4,20(r2)
  80bd04:	183ee83a 	callr	r3
  80bd08:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80bd0c:	e0bffd17 	ldw	r2,-12(fp)
  80bd10:	1004c03a 	cmpne	r2,r2,zero
  80bd14:	1000031e 	bne	r2,zero,80bd24 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80bd18:	e13ffe17 	ldw	r4,-8(fp)
  80bd1c:	080bbdc0 	call	80bbdc <alt_alarm_stop>
  80bd20:	00000d06 	br	80bd58 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80bd24:	e0bffe17 	ldw	r2,-8(fp)
  80bd28:	10c00217 	ldw	r3,8(r2)
  80bd2c:	e0bffd17 	ldw	r2,-12(fp)
  80bd30:	1887883a 	add	r3,r3,r2
  80bd34:	e0bffe17 	ldw	r2,-8(fp)
  80bd38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80bd3c:	e0bffe17 	ldw	r2,-8(fp)
  80bd40:	10c00217 	ldw	r3,8(r2)
  80bd44:	d0a72417 	ldw	r2,-25456(gp)
  80bd48:	1880032e 	bgeu	r3,r2,80bd58 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80bd4c:	e0fffe17 	ldw	r3,-8(fp)
  80bd50:	00800044 	movi	r2,1
  80bd54:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80bd58:	e0bfff17 	ldw	r2,-4(fp)
  80bd5c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bd60:	d0e00d04 	addi	r3,gp,-32716
  80bd64:	e0bffe17 	ldw	r2,-8(fp)
  80bd68:	10ffcc1e 	bne	r2,r3,80bc9c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80bd6c:	e037883a 	mov	sp,fp
  80bd70:	dfc00117 	ldw	ra,4(sp)
  80bd74:	df000017 	ldw	fp,0(sp)
  80bd78:	dec00204 	addi	sp,sp,8
  80bd7c:	f800283a 	ret

0080bd80 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80bd80:	defff704 	addi	sp,sp,-36
  80bd84:	dfc00815 	stw	ra,32(sp)
  80bd88:	df000715 	stw	fp,28(sp)
  80bd8c:	df000704 	addi	fp,sp,28
  80bd90:	e13ffb15 	stw	r4,-20(fp)
  80bd94:	e17ffc15 	stw	r5,-16(fp)
  80bd98:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bd9c:	e0bffb17 	ldw	r2,-20(fp)
  80bda0:	1004803a 	cmplt	r2,r2,zero
  80bda4:	1000091e 	bne	r2,zero,80bdcc <write+0x4c>
  80bda8:	e13ffb17 	ldw	r4,-20(fp)
  80bdac:	01400304 	movi	r5,12
  80bdb0:	08017b40 	call	8017b4 <__mulsi3>
  80bdb4:	1007883a 	mov	r3,r2
  80bdb8:	00802074 	movhi	r2,129
  80bdbc:	1094f804 	addi	r2,r2,21472
  80bdc0:	1887883a 	add	r3,r3,r2
  80bdc4:	e0ffff15 	stw	r3,-4(fp)
  80bdc8:	00000106 	br	80bdd0 <write+0x50>
  80bdcc:	e03fff15 	stw	zero,-4(fp)
  80bdd0:	e0bfff17 	ldw	r2,-4(fp)
  80bdd4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80bdd8:	e0bffa17 	ldw	r2,-24(fp)
  80bddc:	1005003a 	cmpeq	r2,r2,zero
  80bde0:	1000241e 	bne	r2,zero,80be74 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80bde4:	e0bffa17 	ldw	r2,-24(fp)
  80bde8:	10800217 	ldw	r2,8(r2)
  80bdec:	108000cc 	andi	r2,r2,3
  80bdf0:	1005003a 	cmpeq	r2,r2,zero
  80bdf4:	10001a1e 	bne	r2,zero,80be60 <write+0xe0>
  80bdf8:	e0bffa17 	ldw	r2,-24(fp)
  80bdfc:	10800017 	ldw	r2,0(r2)
  80be00:	10800617 	ldw	r2,24(r2)
  80be04:	1005003a 	cmpeq	r2,r2,zero
  80be08:	1000151e 	bne	r2,zero,80be60 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80be0c:	e0bffa17 	ldw	r2,-24(fp)
  80be10:	10800017 	ldw	r2,0(r2)
  80be14:	10800617 	ldw	r2,24(r2)
  80be18:	e17ffc17 	ldw	r5,-16(fp)
  80be1c:	e1bffd17 	ldw	r6,-12(fp)
  80be20:	e13ffa17 	ldw	r4,-24(fp)
  80be24:	103ee83a 	callr	r2
  80be28:	e0bff915 	stw	r2,-28(fp)
  80be2c:	e0bff917 	ldw	r2,-28(fp)
  80be30:	1004403a 	cmpge	r2,r2,zero
  80be34:	1000071e 	bne	r2,zero,80be54 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80be38:	080bea40 	call	80bea4 <alt_get_errno>
  80be3c:	e0fff917 	ldw	r3,-28(fp)
  80be40:	00c7c83a 	sub	r3,zero,r3
  80be44:	10c00015 	stw	r3,0(r2)
        return -1;
  80be48:	00bfffc4 	movi	r2,-1
  80be4c:	e0bffe15 	stw	r2,-8(fp)
  80be50:	00000e06 	br	80be8c <write+0x10c>
      }
      return rval;
  80be54:	e0bff917 	ldw	r2,-28(fp)
  80be58:	e0bffe15 	stw	r2,-8(fp)
  80be5c:	00000b06 	br	80be8c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80be60:	080bea40 	call	80bea4 <alt_get_errno>
  80be64:	1007883a 	mov	r3,r2
  80be68:	00800344 	movi	r2,13
  80be6c:	18800015 	stw	r2,0(r3)
  80be70:	00000406 	br	80be84 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80be74:	080bea40 	call	80bea4 <alt_get_errno>
  80be78:	1007883a 	mov	r3,r2
  80be7c:	00801444 	movi	r2,81
  80be80:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80be84:	00bfffc4 	movi	r2,-1
  80be88:	e0bffe15 	stw	r2,-8(fp)
  80be8c:	e0bffe17 	ldw	r2,-8(fp)
}
  80be90:	e037883a 	mov	sp,fp
  80be94:	dfc00117 	ldw	ra,4(sp)
  80be98:	df000017 	ldw	fp,0(sp)
  80be9c:	dec00204 	addi	sp,sp,8
  80bea0:	f800283a 	ret

0080bea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bea4:	defffd04 	addi	sp,sp,-12
  80bea8:	dfc00215 	stw	ra,8(sp)
  80beac:	df000115 	stw	fp,4(sp)
  80beb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80beb4:	00802074 	movhi	r2,129
  80beb8:	1099b804 	addi	r2,r2,26336
  80bebc:	10800017 	ldw	r2,0(r2)
  80bec0:	1005003a 	cmpeq	r2,r2,zero
  80bec4:	1000061e 	bne	r2,zero,80bee0 <alt_get_errno+0x3c>
  80bec8:	00802074 	movhi	r2,129
  80becc:	1099b804 	addi	r2,r2,26336
  80bed0:	10800017 	ldw	r2,0(r2)
  80bed4:	103ee83a 	callr	r2
  80bed8:	e0bfff15 	stw	r2,-4(fp)
  80bedc:	00000306 	br	80beec <alt_get_errno+0x48>
  80bee0:	008020b4 	movhi	r2,130
  80bee4:	10a0c904 	addi	r2,r2,-31964
  80bee8:	e0bfff15 	stw	r2,-4(fp)
  80beec:	e0bfff17 	ldw	r2,-4(fp)
}
  80bef0:	e037883a 	mov	sp,fp
  80bef4:	dfc00117 	ldw	ra,4(sp)
  80bef8:	df000017 	ldw	fp,0(sp)
  80befc:	dec00204 	addi	sp,sp,8
  80bf00:	f800283a 	ret

0080bf04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bf04:	defffd04 	addi	sp,sp,-12
  80bf08:	dfc00215 	stw	ra,8(sp)
  80bf0c:	df000115 	stw	fp,4(sp)
  80bf10:	df000104 	addi	fp,sp,4
  80bf14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
  80bf18:	0813be00 	call	813be0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bf1c:	00800044 	movi	r2,1
  80bf20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bf24:	e037883a 	mov	sp,fp
  80bf28:	dfc00117 	ldw	ra,4(sp)
  80bf2c:	df000017 	ldw	fp,0(sp)
  80bf30:	dec00204 	addi	sp,sp,8
  80bf34:	f800283a 	ret

0080bf38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bf38:	defffd04 	addi	sp,sp,-12
  80bf3c:	dfc00215 	stw	ra,8(sp)
  80bf40:	df000115 	stw	fp,4(sp)
  80bf44:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80bf48:	01004234 	movhi	r4,264
  80bf4c:	210d0004 	addi	r4,r4,13312
  80bf50:	000b883a 	mov	r5,zero
  80bf54:	000d883a 	mov	r6,zero
  80bf58:	01c0fa04 	movi	r7,1000
  80bf5c:	080cde80 	call	80cde8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
  80bf60:	00c020b4 	movhi	r3,130
  80bf64:	18e0d204 	addi	r3,r3,-31928
  80bf68:	00804234 	movhi	r2,264
  80bf6c:	108d0804 	addi	r2,r2,13344
  80bf70:	18800015 	stw	r2,0(r3)
  80bf74:	00c020b4 	movhi	r3,130
  80bf78:	18e0d304 	addi	r3,r3,-31924
  80bf7c:	0080bef4 	movhi	r2,763
  80bf80:	10bc2004 	addi	r2,r2,-3968
  80bf84:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80bf88:	01002074 	movhi	r4,129
  80bf8c:	21156204 	addi	r4,r4,21896
  80bf90:	000b883a 	mov	r5,zero
  80bf94:	01800144 	movi	r6,5
  80bf98:	080c4140 	call	80c414 <altera_avalon_jtag_uart_init>
  80bf9c:	01002074 	movhi	r4,129
  80bfa0:	21155804 	addi	r4,r4,21856
  80bfa4:	080c2940 	call	80c294 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  80bfa8:	01002074 	movhi	r4,129
  80bfac:	21197004 	addi	r4,r4,26048
  80bfb0:	080cf280 	call	80cf28 <alt_up_character_lcd_init>
  80bfb4:	01002074 	movhi	r4,129
  80bfb8:	21197004 	addi	r4,r4,26048
  80bfbc:	080c2940 	call	80c294 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  80bfc0:	00802074 	movhi	r2,129
  80bfc4:	10997b04 	addi	r2,r2,26092
  80bfc8:	10800a17 	ldw	r2,40(r2)
  80bfcc:	10800104 	addi	r2,r2,4
  80bfd0:	10800017 	ldw	r2,0(r2)
  80bfd4:	10ffffcc 	andi	r3,r2,65535
  80bfd8:	00802074 	movhi	r2,129
  80bfdc:	10997b04 	addi	r2,r2,26092
  80bfe0:	10c00c15 	stw	r3,48(r2)
  80bfe4:	00802074 	movhi	r2,129
  80bfe8:	10997b04 	addi	r2,r2,26092
  80bfec:	10800a17 	ldw	r2,40(r2)
  80bff0:	10800104 	addi	r2,r2,4
  80bff4:	10800017 	ldw	r2,0(r2)
  80bff8:	1005d43a 	srai	r2,r2,16
  80bffc:	10ffffcc 	andi	r3,r2,65535
  80c000:	00802074 	movhi	r2,129
  80c004:	10997b04 	addi	r2,r2,26092
  80c008:	10c00d15 	stw	r3,52(r2)
  80c00c:	00802074 	movhi	r2,129
  80c010:	10997b04 	addi	r2,r2,26092
  80c014:	10800c17 	ldw	r2,48(r2)
  80c018:	10801068 	cmpgeui	r2,r2,65
  80c01c:	1000081e 	bne	r2,zero,80c040 <alt_sys_init+0x108>
  80c020:	00c02074 	movhi	r3,129
  80c024:	18d97b04 	addi	r3,r3,26092
  80c028:	00800fc4 	movi	r2,63
  80c02c:	18800f15 	stw	r2,60(r3)
  80c030:	00c02074 	movhi	r3,129
  80c034:	18d97b04 	addi	r3,r3,26092
  80c038:	00800184 	movi	r2,6
  80c03c:	18801015 	stw	r2,64(r3)
  80c040:	00802074 	movhi	r2,129
  80c044:	10997b04 	addi	r2,r2,26092
  80c048:	10800d17 	ldw	r2,52(r2)
  80c04c:	10800868 	cmpgeui	r2,r2,33
  80c050:	1000041e 	bne	r2,zero,80c064 <alt_sys_init+0x12c>
  80c054:	00c02074 	movhi	r3,129
  80c058:	18d97b04 	addi	r3,r3,26092
  80c05c:	008007c4 	movi	r2,31
  80c060:	18801115 	stw	r2,68(r3)
  80c064:	01002074 	movhi	r4,129
  80c068:	21197b04 	addi	r4,r4,26092
  80c06c:	080d3a80 	call	80d3a8 <alt_up_char_buffer_init>
  80c070:	01002074 	movhi	r4,129
  80c074:	21197b04 	addi	r4,r4,26092
  80c078:	080c2940 	call	80c294 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( DMA_BUFFER, dma_buffer);
  80c07c:	00802074 	movhi	r2,129
  80c080:	10998d04 	addi	r2,r2,26164
  80c084:	10800a17 	ldw	r2,40(r2)
  80c088:	10800017 	ldw	r2,0(r2)
  80c08c:	1007883a 	mov	r3,r2
  80c090:	00802074 	movhi	r2,129
  80c094:	10998d04 	addi	r2,r2,26164
  80c098:	10c00b15 	stw	r3,44(r2)
  80c09c:	00802074 	movhi	r2,129
  80c0a0:	10998d04 	addi	r2,r2,26164
  80c0a4:	10800a17 	ldw	r2,40(r2)
  80c0a8:	10800104 	addi	r2,r2,4
  80c0ac:	10800017 	ldw	r2,0(r2)
  80c0b0:	1007883a 	mov	r3,r2
  80c0b4:	00802074 	movhi	r2,129
  80c0b8:	10998d04 	addi	r2,r2,26164
  80c0bc:	10c00c15 	stw	r3,48(r2)
  80c0c0:	00802074 	movhi	r2,129
  80c0c4:	10998d04 	addi	r2,r2,26164
  80c0c8:	10800a17 	ldw	r2,40(r2)
  80c0cc:	10800204 	addi	r2,r2,8
  80c0d0:	10800017 	ldw	r2,0(r2)
  80c0d4:	10ffffcc 	andi	r3,r2,65535
  80c0d8:	00802074 	movhi	r2,129
  80c0dc:	10998d04 	addi	r2,r2,26164
  80c0e0:	10c00f15 	stw	r3,60(r2)
  80c0e4:	00802074 	movhi	r2,129
  80c0e8:	10998d04 	addi	r2,r2,26164
  80c0ec:	10800a17 	ldw	r2,40(r2)
  80c0f0:	10800204 	addi	r2,r2,8
  80c0f4:	10800017 	ldw	r2,0(r2)
  80c0f8:	1005d43a 	srai	r2,r2,16
  80c0fc:	10ffffcc 	andi	r3,r2,65535
  80c100:	00802074 	movhi	r2,129
  80c104:	10998d04 	addi	r2,r2,26164
  80c108:	10c01015 	stw	r3,64(r2)
  80c10c:	00802074 	movhi	r2,129
  80c110:	10998d04 	addi	r2,r2,26164
  80c114:	10800a17 	ldw	r2,40(r2)
  80c118:	10800304 	addi	r2,r2,12
  80c11c:	10800017 	ldw	r2,0(r2)
  80c120:	1005d07a 	srai	r2,r2,1
  80c124:	10c0004c 	andi	r3,r2,1
  80c128:	00802074 	movhi	r2,129
  80c12c:	10998d04 	addi	r2,r2,26164
  80c130:	10c00d15 	stw	r3,52(r2)
  80c134:	00802074 	movhi	r2,129
  80c138:	10998d04 	addi	r2,r2,26164
  80c13c:	10800a17 	ldw	r2,40(r2)
  80c140:	10800304 	addi	r2,r2,12
  80c144:	10800017 	ldw	r2,0(r2)
  80c148:	1005d13a 	srai	r2,r2,4
  80c14c:	10c003cc 	andi	r3,r2,15
  80c150:	00802074 	movhi	r2,129
  80c154:	10998d04 	addi	r2,r2,26164
  80c158:	10c00e15 	stw	r3,56(r2)
  80c15c:	00802074 	movhi	r2,129
  80c160:	10998d04 	addi	r2,r2,26164
  80c164:	10800a17 	ldw	r2,40(r2)
  80c168:	10800304 	addi	r2,r2,12
  80c16c:	10800017 	ldw	r2,0(r2)
  80c170:	1005d43a 	srai	r2,r2,16
  80c174:	1007883a 	mov	r3,r2
  80c178:	00bfffc4 	movi	r2,-1
  80c17c:	1884703a 	and	r2,r3,r2
  80c180:	e0bfff45 	stb	r2,-3(fp)
  80c184:	00802074 	movhi	r2,129
  80c188:	10998d04 	addi	r2,r2,26164
  80c18c:	10800a17 	ldw	r2,40(r2)
  80c190:	10800304 	addi	r2,r2,12
  80c194:	10800017 	ldw	r2,0(r2)
  80c198:	1005d63a 	srai	r2,r2,24
  80c19c:	1007883a 	mov	r3,r2
  80c1a0:	00bfffc4 	movi	r2,-1
  80c1a4:	1884703a 	and	r2,r3,r2
  80c1a8:	e0bfff05 	stb	r2,-4(fp)
  80c1ac:	00802074 	movhi	r2,129
  80c1b0:	10998d04 	addi	r2,r2,26164
  80c1b4:	10800e17 	ldw	r2,56(r2)
  80c1b8:	10800058 	cmpnei	r2,r2,1
  80c1bc:	1000041e 	bne	r2,zero,80c1d0 <alt_sys_init+0x298>
  80c1c0:	00802074 	movhi	r2,129
  80c1c4:	10998d04 	addi	r2,r2,26164
  80c1c8:	10001115 	stw	zero,68(r2)
  80c1cc:	00000e06 	br	80c208 <alt_sys_init+0x2d0>
  80c1d0:	00802074 	movhi	r2,129
  80c1d4:	10998d04 	addi	r2,r2,26164
  80c1d8:	10800e17 	ldw	r2,56(r2)
  80c1dc:	10800098 	cmpnei	r2,r2,2
  80c1e0:	1000051e 	bne	r2,zero,80c1f8 <alt_sys_init+0x2c0>
  80c1e4:	00c02074 	movhi	r3,129
  80c1e8:	18d98d04 	addi	r3,r3,26164
  80c1ec:	00800044 	movi	r2,1
  80c1f0:	18801115 	stw	r2,68(r3)
  80c1f4:	00000406 	br	80c208 <alt_sys_init+0x2d0>
  80c1f8:	00c02074 	movhi	r3,129
  80c1fc:	18d98d04 	addi	r3,r3,26164
  80c200:	00800084 	movi	r2,2
  80c204:	18801115 	stw	r2,68(r3)
  80c208:	e0ffff43 	ldbu	r3,-3(fp)
  80c20c:	00800804 	movi	r2,32
  80c210:	10c7c83a 	sub	r3,r2,r3
  80c214:	00bfffc4 	movi	r2,-1
  80c218:	10c6d83a 	srl	r3,r2,r3
  80c21c:	00802074 	movhi	r2,129
  80c220:	10998d04 	addi	r2,r2,26164
  80c224:	10c01215 	stw	r3,72(r2)
  80c228:	e0ffff43 	ldbu	r3,-3(fp)
  80c22c:	00802074 	movhi	r2,129
  80c230:	10998d04 	addi	r2,r2,26164
  80c234:	10801117 	ldw	r2,68(r2)
  80c238:	1887883a 	add	r3,r3,r2
  80c23c:	00802074 	movhi	r2,129
  80c240:	10998d04 	addi	r2,r2,26164
  80c244:	10c01315 	stw	r3,76(r2)
  80c248:	e0ffff03 	ldbu	r3,-4(fp)
  80c24c:	00800804 	movi	r2,32
  80c250:	10c7c83a 	sub	r3,r2,r3
  80c254:	00bfffc4 	movi	r2,-1
  80c258:	10c6d83a 	srl	r3,r2,r3
  80c25c:	00802074 	movhi	r2,129
  80c260:	10998d04 	addi	r2,r2,26164
  80c264:	10c01415 	stw	r3,80(r2)
  80c268:	01002074 	movhi	r4,129
  80c26c:	21198d04 	addi	r4,r4,26164
  80c270:	080c2940 	call	80c294 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SDCARD_INTERFACE, sdcard_interface);
  80c274:	01002074 	movhi	r4,129
  80c278:	2119a204 	addi	r4,r4,26248
  80c27c:	080c2940 	call	80c294 <alt_dev_reg>
}
  80c280:	e037883a 	mov	sp,fp
  80c284:	dfc00117 	ldw	ra,4(sp)
  80c288:	df000017 	ldw	fp,0(sp)
  80c28c:	dec00204 	addi	sp,sp,8
  80c290:	f800283a 	ret

0080c294 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80c294:	defffd04 	addi	sp,sp,-12
  80c298:	dfc00215 	stw	ra,8(sp)
  80c29c:	df000115 	stw	fp,4(sp)
  80c2a0:	df000104 	addi	fp,sp,4
  80c2a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80c2a8:	e13fff17 	ldw	r4,-4(fp)
  80c2ac:	01402074 	movhi	r5,129
  80c2b0:	2959b504 	addi	r5,r5,26324
  80c2b4:	08132400 	call	813240 <alt_dev_llist_insert>
}
  80c2b8:	e037883a 	mov	sp,fp
  80c2bc:	dfc00117 	ldw	ra,4(sp)
  80c2c0:	df000017 	ldw	fp,0(sp)
  80c2c4:	dec00204 	addi	sp,sp,8
  80c2c8:	f800283a 	ret

0080c2cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c2cc:	defffa04 	addi	sp,sp,-24
  80c2d0:	dfc00515 	stw	ra,20(sp)
  80c2d4:	df000415 	stw	fp,16(sp)
  80c2d8:	df000404 	addi	fp,sp,16
  80c2dc:	e13ffd15 	stw	r4,-12(fp)
  80c2e0:	e17ffe15 	stw	r5,-8(fp)
  80c2e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c2e8:	e0bffd17 	ldw	r2,-12(fp)
  80c2ec:	10800017 	ldw	r2,0(r2)
  80c2f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80c2f4:	e0bffc17 	ldw	r2,-16(fp)
  80c2f8:	11000a04 	addi	r4,r2,40
  80c2fc:	e0bffd17 	ldw	r2,-12(fp)
  80c300:	11c00217 	ldw	r7,8(r2)
  80c304:	e17ffe17 	ldw	r5,-8(fp)
  80c308:	e1bfff17 	ldw	r6,-4(fp)
  80c30c:	080c9140 	call	80c914 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80c310:	e037883a 	mov	sp,fp
  80c314:	dfc00117 	ldw	ra,4(sp)
  80c318:	df000017 	ldw	fp,0(sp)
  80c31c:	dec00204 	addi	sp,sp,8
  80c320:	f800283a 	ret

0080c324 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80c324:	defffa04 	addi	sp,sp,-24
  80c328:	dfc00515 	stw	ra,20(sp)
  80c32c:	df000415 	stw	fp,16(sp)
  80c330:	df000404 	addi	fp,sp,16
  80c334:	e13ffd15 	stw	r4,-12(fp)
  80c338:	e17ffe15 	stw	r5,-8(fp)
  80c33c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c340:	e0bffd17 	ldw	r2,-12(fp)
  80c344:	10800017 	ldw	r2,0(r2)
  80c348:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80c34c:	e0bffc17 	ldw	r2,-16(fp)
  80c350:	11000a04 	addi	r4,r2,40
  80c354:	e0bffd17 	ldw	r2,-12(fp)
  80c358:	11c00217 	ldw	r7,8(r2)
  80c35c:	e17ffe17 	ldw	r5,-8(fp)
  80c360:	e1bfff17 	ldw	r6,-4(fp)
  80c364:	080cb380 	call	80cb38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80c368:	e037883a 	mov	sp,fp
  80c36c:	dfc00117 	ldw	ra,4(sp)
  80c370:	df000017 	ldw	fp,0(sp)
  80c374:	dec00204 	addi	sp,sp,8
  80c378:	f800283a 	ret

0080c37c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80c37c:	defffc04 	addi	sp,sp,-16
  80c380:	dfc00315 	stw	ra,12(sp)
  80c384:	df000215 	stw	fp,8(sp)
  80c388:	df000204 	addi	fp,sp,8
  80c38c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c390:	e0bfff17 	ldw	r2,-4(fp)
  80c394:	10800017 	ldw	r2,0(r2)
  80c398:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80c39c:	e0bffe17 	ldw	r2,-8(fp)
  80c3a0:	11000a04 	addi	r4,r2,40
  80c3a4:	e0bfff17 	ldw	r2,-4(fp)
  80c3a8:	11400217 	ldw	r5,8(r2)
  80c3ac:	080c7ac0 	call	80c7ac <altera_avalon_jtag_uart_close>
}
  80c3b0:	e037883a 	mov	sp,fp
  80c3b4:	dfc00117 	ldw	ra,4(sp)
  80c3b8:	df000017 	ldw	fp,0(sp)
  80c3bc:	dec00204 	addi	sp,sp,8
  80c3c0:	f800283a 	ret

0080c3c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80c3c4:	defffa04 	addi	sp,sp,-24
  80c3c8:	dfc00515 	stw	ra,20(sp)
  80c3cc:	df000415 	stw	fp,16(sp)
  80c3d0:	df000404 	addi	fp,sp,16
  80c3d4:	e13ffd15 	stw	r4,-12(fp)
  80c3d8:	e17ffe15 	stw	r5,-8(fp)
  80c3dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80c3e0:	e0bffd17 	ldw	r2,-12(fp)
  80c3e4:	10800017 	ldw	r2,0(r2)
  80c3e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80c3ec:	e0bffc17 	ldw	r2,-16(fp)
  80c3f0:	11000a04 	addi	r4,r2,40
  80c3f4:	e17ffe17 	ldw	r5,-8(fp)
  80c3f8:	e1bfff17 	ldw	r6,-4(fp)
  80c3fc:	080c8200 	call	80c820 <altera_avalon_jtag_uart_ioctl>
}
  80c400:	e037883a 	mov	sp,fp
  80c404:	dfc00117 	ldw	ra,4(sp)
  80c408:	df000017 	ldw	fp,0(sp)
  80c40c:	dec00204 	addi	sp,sp,8
  80c410:	f800283a 	ret

0080c414 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80c414:	defffa04 	addi	sp,sp,-24
  80c418:	dfc00515 	stw	ra,20(sp)
  80c41c:	df000415 	stw	fp,16(sp)
  80c420:	df000404 	addi	fp,sp,16
  80c424:	e13ffd15 	stw	r4,-12(fp)
  80c428:	e17ffe15 	stw	r5,-8(fp)
  80c42c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c430:	e0fffd17 	ldw	r3,-12(fp)
  80c434:	00800044 	movi	r2,1
  80c438:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80c43c:	e0bffd17 	ldw	r2,-12(fp)
  80c440:	10800017 	ldw	r2,0(r2)
  80c444:	11000104 	addi	r4,r2,4
  80c448:	e0bffd17 	ldw	r2,-12(fp)
  80c44c:	10800817 	ldw	r2,32(r2)
  80c450:	1007883a 	mov	r3,r2
  80c454:	2005883a 	mov	r2,r4
  80c458:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80c45c:	e13ffe17 	ldw	r4,-8(fp)
  80c460:	e17fff17 	ldw	r5,-4(fp)
  80c464:	d8000015 	stw	zero,0(sp)
  80c468:	01802074 	movhi	r6,129
  80c46c:	31b13504 	addi	r6,r6,-15148
  80c470:	e1fffd17 	ldw	r7,-12(fp)
  80c474:	08134e00 	call	8134e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80c478:	e0bffd17 	ldw	r2,-12(fp)
  80c47c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80c480:	e0bffd17 	ldw	r2,-12(fp)
  80c484:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c488:	008020b4 	movhi	r2,130
  80c48c:	10a0d004 	addi	r2,r2,-31936
  80c490:	10800017 	ldw	r2,0(r2)
  80c494:	100b883a 	mov	r5,r2
  80c498:	01802074 	movhi	r6,129
  80c49c:	31b1bf04 	addi	r6,r6,-14596
  80c4a0:	e1fffd17 	ldw	r7,-12(fp)
  80c4a4:	080b0fc0 	call	80b0fc <alt_alarm_start>
  80c4a8:	1004403a 	cmpge	r2,r2,zero
  80c4ac:	1000041e 	bne	r2,zero,80c4c0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80c4b0:	e0fffd17 	ldw	r3,-12(fp)
  80c4b4:	00a00034 	movhi	r2,32768
  80c4b8:	10bfffc4 	addi	r2,r2,-1
  80c4bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80c4c0:	e037883a 	mov	sp,fp
  80c4c4:	dfc00117 	ldw	ra,4(sp)
  80c4c8:	df000017 	ldw	fp,0(sp)
  80c4cc:	dec00204 	addi	sp,sp,8
  80c4d0:	f800283a 	ret

0080c4d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80c4d4:	defff804 	addi	sp,sp,-32
  80c4d8:	df000715 	stw	fp,28(sp)
  80c4dc:	df000704 	addi	fp,sp,28
  80c4e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80c4e4:	e0bfff17 	ldw	r2,-4(fp)
  80c4e8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80c4ec:	e0bffe17 	ldw	r2,-8(fp)
  80c4f0:	10800017 	ldw	r2,0(r2)
  80c4f4:	e0bffd15 	stw	r2,-12(fp)
  80c4f8:	00000006 	br	80c4fc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c4fc:	e0bffd17 	ldw	r2,-12(fp)
  80c500:	10800104 	addi	r2,r2,4
  80c504:	10800037 	ldwio	r2,0(r2)
  80c508:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80c50c:	e0bffc17 	ldw	r2,-16(fp)
  80c510:	1080c00c 	andi	r2,r2,768
  80c514:	1005003a 	cmpeq	r2,r2,zero
  80c518:	1000741e 	bne	r2,zero,80c6ec <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80c51c:	e0bffc17 	ldw	r2,-16(fp)
  80c520:	1080400c 	andi	r2,r2,256
  80c524:	1005003a 	cmpeq	r2,r2,zero
  80c528:	1000351e 	bne	r2,zero,80c600 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80c52c:	00800074 	movhi	r2,1
  80c530:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c534:	e0bffe17 	ldw	r2,-8(fp)
  80c538:	10800a17 	ldw	r2,40(r2)
  80c53c:	10800044 	addi	r2,r2,1
  80c540:	1081ffcc 	andi	r2,r2,2047
  80c544:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80c548:	e0bffe17 	ldw	r2,-8(fp)
  80c54c:	10c00b17 	ldw	r3,44(r2)
  80c550:	e0bffa17 	ldw	r2,-24(fp)
  80c554:	18801626 	beq	r3,r2,80c5b0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80c558:	e0bffd17 	ldw	r2,-12(fp)
  80c55c:	10800037 	ldwio	r2,0(r2)
  80c560:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80c564:	e0bffb17 	ldw	r2,-20(fp)
  80c568:	10a0000c 	andi	r2,r2,32768
  80c56c:	1005003a 	cmpeq	r2,r2,zero
  80c570:	10000f1e 	bne	r2,zero,80c5b0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80c574:	e0bffe17 	ldw	r2,-8(fp)
  80c578:	10c00a17 	ldw	r3,40(r2)
  80c57c:	e0bffb17 	ldw	r2,-20(fp)
  80c580:	1009883a 	mov	r4,r2
  80c584:	e0bffe17 	ldw	r2,-8(fp)
  80c588:	1885883a 	add	r2,r3,r2
  80c58c:	10800e04 	addi	r2,r2,56
  80c590:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c594:	e0bffe17 	ldw	r2,-8(fp)
  80c598:	10800a17 	ldw	r2,40(r2)
  80c59c:	10800044 	addi	r2,r2,1
  80c5a0:	10c1ffcc 	andi	r3,r2,2047
  80c5a4:	e0bffe17 	ldw	r2,-8(fp)
  80c5a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80c5ac:	003fe106 	br	80c534 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c5b0:	e0bffb17 	ldw	r2,-20(fp)
  80c5b4:	10bfffec 	andhi	r2,r2,65535
  80c5b8:	1005003a 	cmpeq	r2,r2,zero
  80c5bc:	1000101e 	bne	r2,zero,80c600 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c5c0:	e0bffe17 	ldw	r2,-8(fp)
  80c5c4:	10c00817 	ldw	r3,32(r2)
  80c5c8:	00bfff84 	movi	r2,-2
  80c5cc:	1886703a 	and	r3,r3,r2
  80c5d0:	e0bffe17 	ldw	r2,-8(fp)
  80c5d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c5d8:	e0bffd17 	ldw	r2,-12(fp)
  80c5dc:	11000104 	addi	r4,r2,4
  80c5e0:	e0bffe17 	ldw	r2,-8(fp)
  80c5e4:	10800817 	ldw	r2,32(r2)
  80c5e8:	1007883a 	mov	r3,r2
  80c5ec:	2005883a 	mov	r2,r4
  80c5f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c5f4:	e0bffd17 	ldw	r2,-12(fp)
  80c5f8:	10800104 	addi	r2,r2,4
  80c5fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c600:	e0bffc17 	ldw	r2,-16(fp)
  80c604:	1080800c 	andi	r2,r2,512
  80c608:	1005003a 	cmpeq	r2,r2,zero
  80c60c:	103fbb1e 	bne	r2,zero,80c4fc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c610:	e0bffc17 	ldw	r2,-16(fp)
  80c614:	10bfffec 	andhi	r2,r2,65535
  80c618:	1004d43a 	srli	r2,r2,16
  80c61c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c620:	00001506 	br	80c678 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c624:	e13ffd17 	ldw	r4,-12(fp)
  80c628:	e0bffe17 	ldw	r2,-8(fp)
  80c62c:	10c00d17 	ldw	r3,52(r2)
  80c630:	e0bffe17 	ldw	r2,-8(fp)
  80c634:	1885883a 	add	r2,r3,r2
  80c638:	10820e04 	addi	r2,r2,2104
  80c63c:	10800003 	ldbu	r2,0(r2)
  80c640:	10c03fcc 	andi	r3,r2,255
  80c644:	18c0201c 	xori	r3,r3,128
  80c648:	18ffe004 	addi	r3,r3,-128
  80c64c:	2005883a 	mov	r2,r4
  80c650:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c654:	e0bffe17 	ldw	r2,-8(fp)
  80c658:	10800d17 	ldw	r2,52(r2)
  80c65c:	10800044 	addi	r2,r2,1
  80c660:	10c1ffcc 	andi	r3,r2,2047
  80c664:	e0bffe17 	ldw	r2,-8(fp)
  80c668:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80c66c:	e0bff917 	ldw	r2,-28(fp)
  80c670:	10bfffc4 	addi	r2,r2,-1
  80c674:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c678:	e0bff917 	ldw	r2,-28(fp)
  80c67c:	1005003a 	cmpeq	r2,r2,zero
  80c680:	1000051e 	bne	r2,zero,80c698 <altera_avalon_jtag_uart_irq+0x1c4>
  80c684:	e0bffe17 	ldw	r2,-8(fp)
  80c688:	10c00d17 	ldw	r3,52(r2)
  80c68c:	e0bffe17 	ldw	r2,-8(fp)
  80c690:	10800c17 	ldw	r2,48(r2)
  80c694:	18bfe31e 	bne	r3,r2,80c624 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c698:	e0bff917 	ldw	r2,-28(fp)
  80c69c:	1005003a 	cmpeq	r2,r2,zero
  80c6a0:	103f961e 	bne	r2,zero,80c4fc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c6a4:	e0bffe17 	ldw	r2,-8(fp)
  80c6a8:	10c00817 	ldw	r3,32(r2)
  80c6ac:	00bfff44 	movi	r2,-3
  80c6b0:	1886703a 	and	r3,r3,r2
  80c6b4:	e0bffe17 	ldw	r2,-8(fp)
  80c6b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c6bc:	e0bffe17 	ldw	r2,-8(fp)
  80c6c0:	10800017 	ldw	r2,0(r2)
  80c6c4:	11000104 	addi	r4,r2,4
  80c6c8:	e0bffe17 	ldw	r2,-8(fp)
  80c6cc:	10800817 	ldw	r2,32(r2)
  80c6d0:	1007883a 	mov	r3,r2
  80c6d4:	2005883a 	mov	r2,r4
  80c6d8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c6dc:	e0bffd17 	ldw	r2,-12(fp)
  80c6e0:	10800104 	addi	r2,r2,4
  80c6e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c6e8:	003f8406 	br	80c4fc <altera_avalon_jtag_uart_irq+0x28>
}
  80c6ec:	e037883a 	mov	sp,fp
  80c6f0:	df000017 	ldw	fp,0(sp)
  80c6f4:	dec00104 	addi	sp,sp,4
  80c6f8:	f800283a 	ret

0080c6fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c6fc:	defffc04 	addi	sp,sp,-16
  80c700:	df000315 	stw	fp,12(sp)
  80c704:	df000304 	addi	fp,sp,12
  80c708:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c70c:	e0bfff17 	ldw	r2,-4(fp)
  80c710:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c714:	e0bffe17 	ldw	r2,-8(fp)
  80c718:	10800017 	ldw	r2,0(r2)
  80c71c:	10800104 	addi	r2,r2,4
  80c720:	10800037 	ldwio	r2,0(r2)
  80c724:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c728:	e0bffd17 	ldw	r2,-12(fp)
  80c72c:	1081000c 	andi	r2,r2,1024
  80c730:	1005003a 	cmpeq	r2,r2,zero
  80c734:	10000c1e 	bne	r2,zero,80c768 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c738:	e0bffe17 	ldw	r2,-8(fp)
  80c73c:	10800017 	ldw	r2,0(r2)
  80c740:	11000104 	addi	r4,r2,4
  80c744:	e0bffe17 	ldw	r2,-8(fp)
  80c748:	10800817 	ldw	r2,32(r2)
  80c74c:	10810014 	ori	r2,r2,1024
  80c750:	1007883a 	mov	r3,r2
  80c754:	2005883a 	mov	r2,r4
  80c758:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80c75c:	e0bffe17 	ldw	r2,-8(fp)
  80c760:	10000915 	stw	zero,36(r2)
  80c764:	00000a06 	br	80c790 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c768:	e0bffe17 	ldw	r2,-8(fp)
  80c76c:	10c00917 	ldw	r3,36(r2)
  80c770:	00a00034 	movhi	r2,32768
  80c774:	10bfff04 	addi	r2,r2,-4
  80c778:	10c00536 	bltu	r2,r3,80c790 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80c77c:	e0bffe17 	ldw	r2,-8(fp)
  80c780:	10800917 	ldw	r2,36(r2)
  80c784:	10c00044 	addi	r3,r2,1
  80c788:	e0bffe17 	ldw	r2,-8(fp)
  80c78c:	10c00915 	stw	r3,36(r2)
  80c790:	008020b4 	movhi	r2,130
  80c794:	10a0d004 	addi	r2,r2,-31936
  80c798:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80c79c:	e037883a 	mov	sp,fp
  80c7a0:	df000017 	ldw	fp,0(sp)
  80c7a4:	dec00104 	addi	sp,sp,4
  80c7a8:	f800283a 	ret

0080c7ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c7ac:	defffc04 	addi	sp,sp,-16
  80c7b0:	df000315 	stw	fp,12(sp)
  80c7b4:	df000304 	addi	fp,sp,12
  80c7b8:	e13ffd15 	stw	r4,-12(fp)
  80c7bc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c7c0:	00000706 	br	80c7e0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80c7c4:	e0bffe17 	ldw	r2,-8(fp)
  80c7c8:	1090000c 	andi	r2,r2,16384
  80c7cc:	1005003a 	cmpeq	r2,r2,zero
  80c7d0:	1000031e 	bne	r2,zero,80c7e0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80c7d4:	00bffd44 	movi	r2,-11
  80c7d8:	e0bfff15 	stw	r2,-4(fp)
  80c7dc:	00000b06 	br	80c80c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c7e0:	e0bffd17 	ldw	r2,-12(fp)
  80c7e4:	10c00d17 	ldw	r3,52(r2)
  80c7e8:	e0bffd17 	ldw	r2,-12(fp)
  80c7ec:	10800c17 	ldw	r2,48(r2)
  80c7f0:	18800526 	beq	r3,r2,80c808 <altera_avalon_jtag_uart_close+0x5c>
  80c7f4:	e0bffd17 	ldw	r2,-12(fp)
  80c7f8:	10c00917 	ldw	r3,36(r2)
  80c7fc:	e0bffd17 	ldw	r2,-12(fp)
  80c800:	10800117 	ldw	r2,4(r2)
  80c804:	18bfef36 	bltu	r3,r2,80c7c4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c808:	e03fff15 	stw	zero,-4(fp)
  80c80c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c810:	e037883a 	mov	sp,fp
  80c814:	df000017 	ldw	fp,0(sp)
  80c818:	dec00104 	addi	sp,sp,4
  80c81c:	f800283a 	ret

0080c820 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c820:	defff804 	addi	sp,sp,-32
  80c824:	df000715 	stw	fp,28(sp)
  80c828:	df000704 	addi	fp,sp,28
  80c82c:	e13ffb15 	stw	r4,-20(fp)
  80c830:	e17ffc15 	stw	r5,-16(fp)
  80c834:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80c838:	00bff9c4 	movi	r2,-25
  80c83c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80c840:	e0bffc17 	ldw	r2,-16(fp)
  80c844:	e0bfff15 	stw	r2,-4(fp)
  80c848:	e0ffff17 	ldw	r3,-4(fp)
  80c84c:	189a8060 	cmpeqi	r2,r3,27137
  80c850:	1000041e 	bne	r2,zero,80c864 <altera_avalon_jtag_uart_ioctl+0x44>
  80c854:	e0ffff17 	ldw	r3,-4(fp)
  80c858:	189a80a0 	cmpeqi	r2,r3,27138
  80c85c:	10001b1e 	bne	r2,zero,80c8cc <altera_avalon_jtag_uart_ioctl+0xac>
  80c860:	00002706 	br	80c900 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c864:	e0bffb17 	ldw	r2,-20(fp)
  80c868:	10c00117 	ldw	r3,4(r2)
  80c86c:	00a00034 	movhi	r2,32768
  80c870:	10bfffc4 	addi	r2,r2,-1
  80c874:	18802226 	beq	r3,r2,80c900 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80c878:	e0bffd17 	ldw	r2,-12(fp)
  80c87c:	10800017 	ldw	r2,0(r2)
  80c880:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c884:	e0bff917 	ldw	r2,-28(fp)
  80c888:	10800090 	cmplti	r2,r2,2
  80c88c:	1000071e 	bne	r2,zero,80c8ac <altera_avalon_jtag_uart_ioctl+0x8c>
  80c890:	e0fff917 	ldw	r3,-28(fp)
  80c894:	00a00034 	movhi	r2,32768
  80c898:	10bfffc4 	addi	r2,r2,-1
  80c89c:	18800326 	beq	r3,r2,80c8ac <altera_avalon_jtag_uart_ioctl+0x8c>
  80c8a0:	e0bff917 	ldw	r2,-28(fp)
  80c8a4:	e0bffe15 	stw	r2,-8(fp)
  80c8a8:	00000306 	br	80c8b8 <altera_avalon_jtag_uart_ioctl+0x98>
  80c8ac:	00e00034 	movhi	r3,32768
  80c8b0:	18ffff84 	addi	r3,r3,-2
  80c8b4:	e0fffe15 	stw	r3,-8(fp)
  80c8b8:	e0bffb17 	ldw	r2,-20(fp)
  80c8bc:	e0fffe17 	ldw	r3,-8(fp)
  80c8c0:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80c8c4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80c8c8:	00000d06 	br	80c900 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c8cc:	e0bffb17 	ldw	r2,-20(fp)
  80c8d0:	10c00117 	ldw	r3,4(r2)
  80c8d4:	00a00034 	movhi	r2,32768
  80c8d8:	10bfffc4 	addi	r2,r2,-1
  80c8dc:	18800826 	beq	r3,r2,80c900 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c8e0:	e13ffd17 	ldw	r4,-12(fp)
  80c8e4:	e0bffb17 	ldw	r2,-20(fp)
  80c8e8:	10c00917 	ldw	r3,36(r2)
  80c8ec:	e0bffb17 	ldw	r2,-20(fp)
  80c8f0:	10800117 	ldw	r2,4(r2)
  80c8f4:	1885803a 	cmpltu	r2,r3,r2
  80c8f8:	20800015 	stw	r2,0(r4)
      rc = 0;
  80c8fc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80c900:	e0bffa17 	ldw	r2,-24(fp)
}
  80c904:	e037883a 	mov	sp,fp
  80c908:	df000017 	ldw	fp,0(sp)
  80c90c:	dec00104 	addi	sp,sp,4
  80c910:	f800283a 	ret

0080c914 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c914:	defff204 	addi	sp,sp,-56
  80c918:	dfc00d15 	stw	ra,52(sp)
  80c91c:	df000c15 	stw	fp,48(sp)
  80c920:	df000c04 	addi	fp,sp,48
  80c924:	e13ffb15 	stw	r4,-20(fp)
  80c928:	e17ffc15 	stw	r5,-16(fp)
  80c92c:	e1bffd15 	stw	r6,-12(fp)
  80c930:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80c934:	e0bffc17 	ldw	r2,-16(fp)
  80c938:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c93c:	00004806 	br	80ca60 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c940:	e0bffb17 	ldw	r2,-20(fp)
  80c944:	10800a17 	ldw	r2,40(r2)
  80c948:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c94c:	e0bffb17 	ldw	r2,-20(fp)
  80c950:	10800b17 	ldw	r2,44(r2)
  80c954:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80c958:	e0fff717 	ldw	r3,-36(fp)
  80c95c:	e0bff617 	ldw	r2,-40(fp)
  80c960:	18800536 	bltu	r3,r2,80c978 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c964:	e0bff717 	ldw	r2,-36(fp)
  80c968:	e0fff617 	ldw	r3,-40(fp)
  80c96c:	10c5c83a 	sub	r2,r2,r3
  80c970:	e0bff815 	stw	r2,-32(fp)
  80c974:	00000406 	br	80c988 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c978:	00820004 	movi	r2,2048
  80c97c:	e0fff617 	ldw	r3,-40(fp)
  80c980:	10c5c83a 	sub	r2,r2,r3
  80c984:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c988:	e0bff817 	ldw	r2,-32(fp)
  80c98c:	1005003a 	cmpeq	r2,r2,zero
  80c990:	10001f1e 	bne	r2,zero,80ca10 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80c994:	e0fffd17 	ldw	r3,-12(fp)
  80c998:	e0bff817 	ldw	r2,-32(fp)
  80c99c:	1880022e 	bgeu	r3,r2,80c9a8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80c9a0:	e0bffd17 	ldw	r2,-12(fp)
  80c9a4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c9a8:	e0bffb17 	ldw	r2,-20(fp)
  80c9ac:	10c00e04 	addi	r3,r2,56
  80c9b0:	e0bff617 	ldw	r2,-40(fp)
  80c9b4:	1887883a 	add	r3,r3,r2
  80c9b8:	e0bffa17 	ldw	r2,-24(fp)
  80c9bc:	1009883a 	mov	r4,r2
  80c9c0:	180b883a 	mov	r5,r3
  80c9c4:	e1bff817 	ldw	r6,-32(fp)
  80c9c8:	0806c940 	call	806c94 <memcpy>
      ptr   += n;
  80c9cc:	e0fff817 	ldw	r3,-32(fp)
  80c9d0:	e0bffa17 	ldw	r2,-24(fp)
  80c9d4:	10c5883a 	add	r2,r2,r3
  80c9d8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80c9dc:	e0fffd17 	ldw	r3,-12(fp)
  80c9e0:	e0bff817 	ldw	r2,-32(fp)
  80c9e4:	1885c83a 	sub	r2,r3,r2
  80c9e8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c9ec:	e0fff617 	ldw	r3,-40(fp)
  80c9f0:	e0bff817 	ldw	r2,-32(fp)
  80c9f4:	1885883a 	add	r2,r3,r2
  80c9f8:	10c1ffcc 	andi	r3,r2,2047
  80c9fc:	e0bffb17 	ldw	r2,-20(fp)
  80ca00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80ca04:	e0bffd17 	ldw	r2,-12(fp)
  80ca08:	10800048 	cmpgei	r2,r2,1
  80ca0c:	103fcc1e 	bne	r2,zero,80c940 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80ca10:	e0fffa17 	ldw	r3,-24(fp)
  80ca14:	e0bffc17 	ldw	r2,-16(fp)
  80ca18:	1880141e 	bne	r3,r2,80ca6c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80ca1c:	e0bffe17 	ldw	r2,-8(fp)
  80ca20:	1090000c 	andi	r2,r2,16384
  80ca24:	1004c03a 	cmpne	r2,r2,zero
  80ca28:	1000101e 	bne	r2,zero,80ca6c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80ca2c:	e0bffb17 	ldw	r2,-20(fp)
  80ca30:	10c00a17 	ldw	r3,40(r2)
  80ca34:	e0bff717 	ldw	r2,-36(fp)
  80ca38:	1880051e 	bne	r3,r2,80ca50 <altera_avalon_jtag_uart_read+0x13c>
  80ca3c:	e0bffb17 	ldw	r2,-20(fp)
  80ca40:	10c00917 	ldw	r3,36(r2)
  80ca44:	e0bffb17 	ldw	r2,-20(fp)
  80ca48:	10800117 	ldw	r2,4(r2)
  80ca4c:	18bff736 	bltu	r3,r2,80ca2c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80ca50:	e0bffb17 	ldw	r2,-20(fp)
  80ca54:	10c00a17 	ldw	r3,40(r2)
  80ca58:	e0bff717 	ldw	r2,-36(fp)
  80ca5c:	18800326 	beq	r3,r2,80ca6c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ca60:	e0bffd17 	ldw	r2,-12(fp)
  80ca64:	10800048 	cmpgei	r2,r2,1
  80ca68:	103fb51e 	bne	r2,zero,80c940 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80ca6c:	e0fffa17 	ldw	r3,-24(fp)
  80ca70:	e0bffc17 	ldw	r2,-16(fp)
  80ca74:	18801926 	beq	r3,r2,80cadc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca78:	0005303a 	rdctl	r2,status
  80ca7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca80:	e0fff517 	ldw	r3,-44(fp)
  80ca84:	00bfff84 	movi	r2,-2
  80ca88:	1884703a 	and	r2,r3,r2
  80ca8c:	1001703a 	wrctl	status,r2
  
  return context;
  80ca90:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80ca94:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ca98:	e0bffb17 	ldw	r2,-20(fp)
  80ca9c:	10800817 	ldw	r2,32(r2)
  80caa0:	10c00054 	ori	r3,r2,1
  80caa4:	e0bffb17 	ldw	r2,-20(fp)
  80caa8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80caac:	e0bffb17 	ldw	r2,-20(fp)
  80cab0:	10800017 	ldw	r2,0(r2)
  80cab4:	11000104 	addi	r4,r2,4
  80cab8:	e0bffb17 	ldw	r2,-20(fp)
  80cabc:	10800817 	ldw	r2,32(r2)
  80cac0:	1007883a 	mov	r3,r2
  80cac4:	2005883a 	mov	r2,r4
  80cac8:	10c00035 	stwio	r3,0(r2)
  80cacc:	e0bff917 	ldw	r2,-28(fp)
  80cad0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cad4:	e0bff417 	ldw	r2,-48(fp)
  80cad8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80cadc:	e0fffa17 	ldw	r3,-24(fp)
  80cae0:	e0bffc17 	ldw	r2,-16(fp)
  80cae4:	18800526 	beq	r3,r2,80cafc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80cae8:	e0fffa17 	ldw	r3,-24(fp)
  80caec:	e0bffc17 	ldw	r2,-16(fp)
  80caf0:	1887c83a 	sub	r3,r3,r2
  80caf4:	e0ffff15 	stw	r3,-4(fp)
  80caf8:	00000906 	br	80cb20 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80cafc:	e0bffe17 	ldw	r2,-8(fp)
  80cb00:	1090000c 	andi	r2,r2,16384
  80cb04:	1005003a 	cmpeq	r2,r2,zero
  80cb08:	1000031e 	bne	r2,zero,80cb18 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80cb0c:	00bffd44 	movi	r2,-11
  80cb10:	e0bfff15 	stw	r2,-4(fp)
  80cb14:	00000206 	br	80cb20 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80cb18:	00bffec4 	movi	r2,-5
  80cb1c:	e0bfff15 	stw	r2,-4(fp)
  80cb20:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb24:	e037883a 	mov	sp,fp
  80cb28:	dfc00117 	ldw	ra,4(sp)
  80cb2c:	df000017 	ldw	fp,0(sp)
  80cb30:	dec00204 	addi	sp,sp,8
  80cb34:	f800283a 	ret

0080cb38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80cb38:	defff204 	addi	sp,sp,-56
  80cb3c:	dfc00d15 	stw	ra,52(sp)
  80cb40:	df000c15 	stw	fp,48(sp)
  80cb44:	df000c04 	addi	fp,sp,48
  80cb48:	e13ffb15 	stw	r4,-20(fp)
  80cb4c:	e17ffc15 	stw	r5,-16(fp)
  80cb50:	e1bffd15 	stw	r6,-12(fp)
  80cb54:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80cb58:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80cb5c:	e0bffc17 	ldw	r2,-16(fp)
  80cb60:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80cb64:	00003a06 	br	80cc50 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80cb68:	e0bffb17 	ldw	r2,-20(fp)
  80cb6c:	10800c17 	ldw	r2,48(r2)
  80cb70:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80cb74:	e0bffb17 	ldw	r2,-20(fp)
  80cb78:	10800d17 	ldw	r2,52(r2)
  80cb7c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80cb80:	e0fffa17 	ldw	r3,-24(fp)
  80cb84:	e0bff917 	ldw	r2,-28(fp)
  80cb88:	1880062e 	bgeu	r3,r2,80cba4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80cb8c:	e0fff917 	ldw	r3,-28(fp)
  80cb90:	e0bffa17 	ldw	r2,-24(fp)
  80cb94:	1885c83a 	sub	r2,r3,r2
  80cb98:	10bfffc4 	addi	r2,r2,-1
  80cb9c:	e0bff815 	stw	r2,-32(fp)
  80cba0:	00000c06 	br	80cbd4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80cba4:	e0bff917 	ldw	r2,-28(fp)
  80cba8:	1005003a 	cmpeq	r2,r2,zero
  80cbac:	1000051e 	bne	r2,zero,80cbc4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80cbb0:	00820004 	movi	r2,2048
  80cbb4:	e0fffa17 	ldw	r3,-24(fp)
  80cbb8:	10c5c83a 	sub	r2,r2,r3
  80cbbc:	e0bff815 	stw	r2,-32(fp)
  80cbc0:	00000406 	br	80cbd4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80cbc4:	0081ffc4 	movi	r2,2047
  80cbc8:	e0fffa17 	ldw	r3,-24(fp)
  80cbcc:	10c5c83a 	sub	r2,r2,r3
  80cbd0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80cbd4:	e0bff817 	ldw	r2,-32(fp)
  80cbd8:	1005003a 	cmpeq	r2,r2,zero
  80cbdc:	10001f1e 	bne	r2,zero,80cc5c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80cbe0:	e0fffd17 	ldw	r3,-12(fp)
  80cbe4:	e0bff817 	ldw	r2,-32(fp)
  80cbe8:	1880022e 	bgeu	r3,r2,80cbf4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80cbec:	e0bffd17 	ldw	r2,-12(fp)
  80cbf0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80cbf4:	e0bffb17 	ldw	r2,-20(fp)
  80cbf8:	10c20e04 	addi	r3,r2,2104
  80cbfc:	e0bffa17 	ldw	r2,-24(fp)
  80cc00:	1885883a 	add	r2,r3,r2
  80cc04:	e0fffc17 	ldw	r3,-16(fp)
  80cc08:	1009883a 	mov	r4,r2
  80cc0c:	180b883a 	mov	r5,r3
  80cc10:	e1bff817 	ldw	r6,-32(fp)
  80cc14:	0806c940 	call	806c94 <memcpy>
      ptr   += n;
  80cc18:	e0fff817 	ldw	r3,-32(fp)
  80cc1c:	e0bffc17 	ldw	r2,-16(fp)
  80cc20:	10c5883a 	add	r2,r2,r3
  80cc24:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80cc28:	e0fffd17 	ldw	r3,-12(fp)
  80cc2c:	e0bff817 	ldw	r2,-32(fp)
  80cc30:	1885c83a 	sub	r2,r3,r2
  80cc34:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cc38:	e0fffa17 	ldw	r3,-24(fp)
  80cc3c:	e0bff817 	ldw	r2,-32(fp)
  80cc40:	1885883a 	add	r2,r3,r2
  80cc44:	10c1ffcc 	andi	r3,r2,2047
  80cc48:	e0bffb17 	ldw	r2,-20(fp)
  80cc4c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80cc50:	e0bffd17 	ldw	r2,-12(fp)
  80cc54:	10800048 	cmpgei	r2,r2,1
  80cc58:	103fc31e 	bne	r2,zero,80cb68 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc5c:	0005303a 	rdctl	r2,status
  80cc60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc64:	e0fff517 	ldw	r3,-44(fp)
  80cc68:	00bfff84 	movi	r2,-2
  80cc6c:	1884703a 	and	r2,r3,r2
  80cc70:	1001703a 	wrctl	status,r2
  
  return context;
  80cc74:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80cc78:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cc7c:	e0bffb17 	ldw	r2,-20(fp)
  80cc80:	10800817 	ldw	r2,32(r2)
  80cc84:	10c00094 	ori	r3,r2,2
  80cc88:	e0bffb17 	ldw	r2,-20(fp)
  80cc8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cc90:	e0bffb17 	ldw	r2,-20(fp)
  80cc94:	10800017 	ldw	r2,0(r2)
  80cc98:	11000104 	addi	r4,r2,4
  80cc9c:	e0bffb17 	ldw	r2,-20(fp)
  80cca0:	10800817 	ldw	r2,32(r2)
  80cca4:	1007883a 	mov	r3,r2
  80cca8:	2005883a 	mov	r2,r4
  80ccac:	10c00035 	stwio	r3,0(r2)
  80ccb0:	e0bff717 	ldw	r2,-36(fp)
  80ccb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ccb8:	e0bff417 	ldw	r2,-48(fp)
  80ccbc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80ccc0:	e0bffd17 	ldw	r2,-12(fp)
  80ccc4:	10800050 	cmplti	r2,r2,1
  80ccc8:	1000111e 	bne	r2,zero,80cd10 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80cccc:	e0bffe17 	ldw	r2,-8(fp)
  80ccd0:	1090000c 	andi	r2,r2,16384
  80ccd4:	1004c03a 	cmpne	r2,r2,zero
  80ccd8:	1000101e 	bne	r2,zero,80cd1c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80ccdc:	e0bffb17 	ldw	r2,-20(fp)
  80cce0:	10c00d17 	ldw	r3,52(r2)
  80cce4:	e0bff917 	ldw	r2,-28(fp)
  80cce8:	1880051e 	bne	r3,r2,80cd00 <altera_avalon_jtag_uart_write+0x1c8>
  80ccec:	e0bffb17 	ldw	r2,-20(fp)
  80ccf0:	10c00917 	ldw	r3,36(r2)
  80ccf4:	e0bffb17 	ldw	r2,-20(fp)
  80ccf8:	10800117 	ldw	r2,4(r2)
  80ccfc:	18bff736 	bltu	r3,r2,80ccdc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80cd00:	e0bffb17 	ldw	r2,-20(fp)
  80cd04:	10c00d17 	ldw	r3,52(r2)
  80cd08:	e0bff917 	ldw	r2,-28(fp)
  80cd0c:	18800326 	beq	r3,r2,80cd1c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80cd10:	e0bffd17 	ldw	r2,-12(fp)
  80cd14:	10800048 	cmpgei	r2,r2,1
  80cd18:	103fcd1e 	bne	r2,zero,80cc50 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80cd1c:	e0fffc17 	ldw	r3,-16(fp)
  80cd20:	e0bff617 	ldw	r2,-40(fp)
  80cd24:	18800526 	beq	r3,r2,80cd3c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80cd28:	e0fffc17 	ldw	r3,-16(fp)
  80cd2c:	e0bff617 	ldw	r2,-40(fp)
  80cd30:	1887c83a 	sub	r3,r3,r2
  80cd34:	e0ffff15 	stw	r3,-4(fp)
  80cd38:	00000906 	br	80cd60 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80cd3c:	e0bffe17 	ldw	r2,-8(fp)
  80cd40:	1090000c 	andi	r2,r2,16384
  80cd44:	1005003a 	cmpeq	r2,r2,zero
  80cd48:	1000031e 	bne	r2,zero,80cd58 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80cd4c:	00bffd44 	movi	r2,-11
  80cd50:	e0bfff15 	stw	r2,-4(fp)
  80cd54:	00000206 	br	80cd60 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80cd58:	00bffec4 	movi	r2,-5
  80cd5c:	e0bfff15 	stw	r2,-4(fp)
  80cd60:	e0bfff17 	ldw	r2,-4(fp)
}
  80cd64:	e037883a 	mov	sp,fp
  80cd68:	dfc00117 	ldw	ra,4(sp)
  80cd6c:	df000017 	ldw	fp,0(sp)
  80cd70:	dec00204 	addi	sp,sp,8
  80cd74:	f800283a 	ret

0080cd78 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80cd78:	defffa04 	addi	sp,sp,-24
  80cd7c:	dfc00515 	stw	ra,20(sp)
  80cd80:	df000415 	stw	fp,16(sp)
  80cd84:	df000404 	addi	fp,sp,16
  80cd88:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80cd8c:	e0bfff17 	ldw	r2,-4(fp)
  80cd90:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80cd94:	e0bfff17 	ldw	r2,-4(fp)
  80cd98:	10800104 	addi	r2,r2,4
  80cd9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cda0:	0005303a 	rdctl	r2,status
  80cda4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cda8:	e0fffd17 	ldw	r3,-12(fp)
  80cdac:	00bfff84 	movi	r2,-2
  80cdb0:	1884703a 	and	r2,r3,r2
  80cdb4:	1001703a 	wrctl	status,r2
  
  return context;
  80cdb8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80cdbc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80cdc0:	080bc740 	call	80bc74 <alt_tick>
  80cdc4:	e0bffe17 	ldw	r2,-8(fp)
  80cdc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cdcc:	e0bffc17 	ldw	r2,-16(fp)
  80cdd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80cdd4:	e037883a 	mov	sp,fp
  80cdd8:	dfc00117 	ldw	ra,4(sp)
  80cddc:	df000017 	ldw	fp,0(sp)
  80cde0:	dec00204 	addi	sp,sp,8
  80cde4:	f800283a 	ret

0080cde8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80cde8:	defff804 	addi	sp,sp,-32
  80cdec:	dfc00715 	stw	ra,28(sp)
  80cdf0:	df000615 	stw	fp,24(sp)
  80cdf4:	df000604 	addi	fp,sp,24
  80cdf8:	e13ffc15 	stw	r4,-16(fp)
  80cdfc:	e17ffd15 	stw	r5,-12(fp)
  80ce00:	e1bffe15 	stw	r6,-8(fp)
  80ce04:	e1ffff15 	stw	r7,-4(fp)
  80ce08:	e0bfff17 	ldw	r2,-4(fp)
  80ce0c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ce10:	008020b4 	movhi	r2,130
  80ce14:	10a0d004 	addi	r2,r2,-31936
  80ce18:	10800017 	ldw	r2,0(r2)
  80ce1c:	1004c03a 	cmpne	r2,r2,zero
  80ce20:	1000041e 	bne	r2,zero,80ce34 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80ce24:	00c020b4 	movhi	r3,130
  80ce28:	18e0d004 	addi	r3,r3,-31936
  80ce2c:	e0bffb17 	ldw	r2,-20(fp)
  80ce30:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ce34:	e0bffc17 	ldw	r2,-16(fp)
  80ce38:	10800104 	addi	r2,r2,4
  80ce3c:	1007883a 	mov	r3,r2
  80ce40:	008001c4 	movi	r2,7
  80ce44:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80ce48:	d8000015 	stw	zero,0(sp)
  80ce4c:	e13ffd17 	ldw	r4,-12(fp)
  80ce50:	e17ffe17 	ldw	r5,-8(fp)
  80ce54:	01802074 	movhi	r6,129
  80ce58:	31b35e04 	addi	r6,r6,-12936
  80ce5c:	e1fffc17 	ldw	r7,-16(fp)
  80ce60:	08134e00 	call	8134e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80ce64:	e037883a 	mov	sp,fp
  80ce68:	dfc00117 	ldw	ra,4(sp)
  80ce6c:	df000017 	ldw	fp,0(sp)
  80ce70:	dec00204 	addi	sp,sp,8
  80ce74:	f800283a 	ret

0080ce78 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  80ce78:	defffc04 	addi	sp,sp,-16
  80ce7c:	df000315 	stw	fp,12(sp)
  80ce80:	df000304 	addi	fp,sp,12
  80ce84:	e13ffe15 	stw	r4,-8(fp)
  80ce88:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  80ce8c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  80ce90:	e0bfff17 	ldw	r2,-4(fp)
  80ce94:	1004c03a 	cmpne	r2,r2,zero
  80ce98:	1000061e 	bne	r2,zero,80ceb4 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  80ce9c:	e0bffe17 	ldw	r2,-8(fp)
  80cea0:	1007883a 	mov	r3,r2
  80cea4:	e0bffd03 	ldbu	r2,-12(fp)
  80cea8:	10c4b03a 	or	r2,r2,r3
  80ceac:	e0bffd05 	stb	r2,-12(fp)
  80ceb0:	00000806 	br	80ced4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  80ceb4:	e0bffe17 	ldw	r2,-8(fp)
  80ceb8:	1007883a 	mov	r3,r2
  80cebc:	e0bffd03 	ldbu	r2,-12(fp)
  80cec0:	10c4b03a 	or	r2,r2,r3
  80cec4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  80cec8:	e0bffd03 	ldbu	r2,-12(fp)
  80cecc:	10801014 	ori	r2,r2,64
  80ced0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  80ced4:	e0fffd03 	ldbu	r3,-12(fp)
  80ced8:	00bfe004 	movi	r2,-128
  80cedc:	1884b03a 	or	r2,r3,r2
  80cee0:	10803fcc 	andi	r2,r2,255
}
  80cee4:	e037883a 	mov	sp,fp
  80cee8:	df000017 	ldw	fp,0(sp)
  80ceec:	dec00104 	addi	sp,sp,4
  80cef0:	f800283a 	ret

0080cef4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  80cef4:	defffd04 	addi	sp,sp,-12
  80cef8:	df000215 	stw	fp,8(sp)
  80cefc:	df000204 	addi	fp,sp,8
  80cf00:	e13ffe15 	stw	r4,-8(fp)
  80cf04:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  80cf08:	e0bffe17 	ldw	r2,-8(fp)
  80cf0c:	10800a17 	ldw	r2,40(r2)
  80cf10:	e0ffff03 	ldbu	r3,-4(fp)
  80cf14:	10c00025 	stbio	r3,0(r2)
}
  80cf18:	e037883a 	mov	sp,fp
  80cf1c:	df000017 	ldw	fp,0(sp)
  80cf20:	dec00104 	addi	sp,sp,4
  80cf24:	f800283a 	ret

0080cf28 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  80cf28:	defffe04 	addi	sp,sp,-8
  80cf2c:	df000115 	stw	fp,4(sp)
  80cf30:	df000104 	addi	fp,sp,4
  80cf34:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  80cf38:	e0bfff17 	ldw	r2,-4(fp)
  80cf3c:	10800a17 	ldw	r2,40(r2)
  80cf40:	1007883a 	mov	r3,r2
  80cf44:	00800044 	movi	r2,1
  80cf48:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  80cf4c:	e037883a 	mov	sp,fp
  80cf50:	df000017 	ldw	fp,0(sp)
  80cf54:	dec00104 	addi	sp,sp,4
  80cf58:	f800283a 	ret

0080cf5c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  80cf5c:	defffc04 	addi	sp,sp,-16
  80cf60:	dfc00315 	stw	ra,12(sp)
  80cf64:	df000215 	stw	fp,8(sp)
  80cf68:	df000204 	addi	fp,sp,8
  80cf6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  80cf70:	e13fff17 	ldw	r4,-4(fp)
  80cf74:	01402074 	movhi	r5,129
  80cf78:	2959b504 	addi	r5,r5,26324
  80cf7c:	081341c0 	call	81341c <alt_find_dev>
  80cf80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80cf84:	e0bffe17 	ldw	r2,-8(fp)
}
  80cf88:	e037883a 	mov	sp,fp
  80cf8c:	dfc00117 	ldw	ra,4(sp)
  80cf90:	df000017 	ldw	fp,0(sp)
  80cf94:	dec00204 	addi	sp,sp,8
  80cf98:	f800283a 	ret

0080cf9c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  80cf9c:	defffb04 	addi	sp,sp,-20
  80cfa0:	df000415 	stw	fp,16(sp)
  80cfa4:	df000404 	addi	fp,sp,16
  80cfa8:	e13ffd15 	stw	r4,-12(fp)
  80cfac:	e17ffe15 	stw	r5,-8(fp)
  80cfb0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  80cfb4:	e03ffc15 	stw	zero,-16(fp)
  80cfb8:	00000f06 	br	80cff8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  80cfbc:	e0bffd17 	ldw	r2,-12(fp)
  80cfc0:	10800a17 	ldw	r2,40(r2)
  80cfc4:	11000044 	addi	r4,r2,1
  80cfc8:	e0fffc17 	ldw	r3,-16(fp)
  80cfcc:	e0bffe17 	ldw	r2,-8(fp)
  80cfd0:	1885883a 	add	r2,r3,r2
  80cfd4:	10800003 	ldbu	r2,0(r2)
  80cfd8:	10c03fcc 	andi	r3,r2,255
  80cfdc:	18c0201c 	xori	r3,r3,128
  80cfe0:	18ffe004 	addi	r3,r3,-128
  80cfe4:	2005883a 	mov	r2,r4
  80cfe8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  80cfec:	e0bffc17 	ldw	r2,-16(fp)
  80cff0:	10800044 	addi	r2,r2,1
  80cff4:	e0bffc15 	stw	r2,-16(fp)
  80cff8:	e0fffc17 	ldw	r3,-16(fp)
  80cffc:	e0bfff17 	ldw	r2,-4(fp)
  80d000:	18bfee36 	bltu	r3,r2,80cfbc <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  80d004:	e037883a 	mov	sp,fp
  80d008:	df000017 	ldw	fp,0(sp)
  80d00c:	dec00104 	addi	sp,sp,4
  80d010:	f800283a 	ret

0080d014 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  80d014:	defffd04 	addi	sp,sp,-12
  80d018:	df000215 	stw	fp,8(sp)
  80d01c:	df000204 	addi	fp,sp,8
  80d020:	e13ffe15 	stw	r4,-8(fp)
  80d024:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  80d028:	00000d06 	br	80d060 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  80d02c:	e0bffe17 	ldw	r2,-8(fp)
  80d030:	10800a17 	ldw	r2,40(r2)
  80d034:	11000044 	addi	r4,r2,1
  80d038:	e0bfff17 	ldw	r2,-4(fp)
  80d03c:	10800003 	ldbu	r2,0(r2)
  80d040:	10c03fcc 	andi	r3,r2,255
  80d044:	18c0201c 	xori	r3,r3,128
  80d048:	18ffe004 	addi	r3,r3,-128
  80d04c:	2005883a 	mov	r2,r4
  80d050:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80d054:	e0bfff17 	ldw	r2,-4(fp)
  80d058:	10800044 	addi	r2,r2,1
  80d05c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  80d060:	e0bfff17 	ldw	r2,-4(fp)
  80d064:	10800003 	ldbu	r2,0(r2)
  80d068:	10803fcc 	andi	r2,r2,255
  80d06c:	1080201c 	xori	r2,r2,128
  80d070:	10bfe004 	addi	r2,r2,-128
  80d074:	1004c03a 	cmpne	r2,r2,zero
  80d078:	103fec1e 	bne	r2,zero,80d02c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  80d07c:	e037883a 	mov	sp,fp
  80d080:	df000017 	ldw	fp,0(sp)
  80d084:	dec00104 	addi	sp,sp,4
  80d088:	f800283a 	ret

0080d08c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  80d08c:	defffb04 	addi	sp,sp,-20
  80d090:	dfc00415 	stw	ra,16(sp)
  80d094:	df000315 	stw	fp,12(sp)
  80d098:	df000304 	addi	fp,sp,12
  80d09c:	e13ffd15 	stw	r4,-12(fp)
  80d0a0:	e17ffe15 	stw	r5,-8(fp)
  80d0a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  80d0a8:	e0bffd17 	ldw	r2,-12(fp)
  80d0ac:	10800017 	ldw	r2,0(r2)
  80d0b0:	1009883a 	mov	r4,r2
  80d0b4:	e1bfff17 	ldw	r6,-4(fp)
  80d0b8:	e17ffe17 	ldw	r5,-8(fp)
  80d0bc:	080cf9c0 	call	80cf9c <alt_up_character_lcd_write>
	return 0;
  80d0c0:	0005883a 	mov	r2,zero
}
  80d0c4:	e037883a 	mov	sp,fp
  80d0c8:	dfc00117 	ldw	ra,4(sp)
  80d0cc:	df000017 	ldw	fp,0(sp)
  80d0d0:	dec00204 	addi	sp,sp,8
  80d0d4:	f800283a 	ret

0080d0d8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  80d0d8:	defff904 	addi	sp,sp,-28
  80d0dc:	dfc00615 	stw	ra,24(sp)
  80d0e0:	df000515 	stw	fp,20(sp)
  80d0e4:	df000504 	addi	fp,sp,20
  80d0e8:	e13ffc15 	stw	r4,-16(fp)
  80d0ec:	e17ffd15 	stw	r5,-12(fp)
  80d0f0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  80d0f4:	e0bffd17 	ldw	r2,-12(fp)
  80d0f8:	10800a28 	cmpgeui	r2,r2,40
  80d0fc:	1000031e 	bne	r2,zero,80d10c <alt_up_character_lcd_set_cursor_pos+0x34>
  80d100:	e0bffe17 	ldw	r2,-8(fp)
  80d104:	108000b0 	cmpltui	r2,r2,2
  80d108:	1000031e 	bne	r2,zero,80d118 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  80d10c:	00bfffc4 	movi	r2,-1
  80d110:	e0bfff15 	stw	r2,-4(fp)
  80d114:	00000806 	br	80d138 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80d118:	e13ffd17 	ldw	r4,-12(fp)
  80d11c:	e17ffe17 	ldw	r5,-8(fp)
  80d120:	080ce780 	call	80ce78 <get_DDRAM_addr>
  80d124:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  80d128:	e17ffb03 	ldbu	r5,-20(fp)
  80d12c:	e13ffc17 	ldw	r4,-16(fp)
  80d130:	080cef40 	call	80cef4 <alt_up_character_lcd_send_cmd>
	return 0;
  80d134:	e03fff15 	stw	zero,-4(fp)
  80d138:	e0bfff17 	ldw	r2,-4(fp)
}
  80d13c:	e037883a 	mov	sp,fp
  80d140:	dfc00117 	ldw	ra,4(sp)
  80d144:	df000017 	ldw	fp,0(sp)
  80d148:	dec00204 	addi	sp,sp,8
  80d14c:	f800283a 	ret

0080d150 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80d150:	defff904 	addi	sp,sp,-28
  80d154:	dfc00615 	stw	ra,24(sp)
  80d158:	df000515 	stw	fp,20(sp)
  80d15c:	df000504 	addi	fp,sp,20
  80d160:	e13ffc15 	stw	r4,-16(fp)
  80d164:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80d168:	e0bffd17 	ldw	r2,-12(fp)
  80d16c:	1005003a 	cmpeq	r2,r2,zero
  80d170:	10001e1e 	bne	r2,zero,80d1ec <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  80d174:	e0bffd17 	ldw	r2,-12(fp)
  80d178:	10800050 	cmplti	r2,r2,1
  80d17c:	1000031e 	bne	r2,zero,80d18c <alt_up_character_lcd_shift_cursor+0x3c>
  80d180:	00800504 	movi	r2,20
  80d184:	e0bfff05 	stb	r2,-4(fp)
  80d188:	00000206 	br	80d194 <alt_up_character_lcd_shift_cursor+0x44>
  80d18c:	00c00404 	movi	r3,16
  80d190:	e0ffff05 	stb	r3,-4(fp)
  80d194:	e0bfff03 	ldbu	r2,-4(fp)
  80d198:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80d19c:	e0fffd17 	ldw	r3,-12(fp)
  80d1a0:	e0fffe15 	stw	r3,-8(fp)
  80d1a4:	e0fffe17 	ldw	r3,-8(fp)
  80d1a8:	1804403a 	cmpge	r2,r3,zero
  80d1ac:	1000031e 	bne	r2,zero,80d1bc <alt_up_character_lcd_shift_cursor+0x6c>
  80d1b0:	e0bffe17 	ldw	r2,-8(fp)
  80d1b4:	0085c83a 	sub	r2,zero,r2
  80d1b8:	e0bffe15 	stw	r2,-8(fp)
  80d1bc:	e0fffe17 	ldw	r3,-8(fp)
  80d1c0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80d1c4:	00000306 	br	80d1d4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80d1c8:	e17ffb43 	ldbu	r5,-19(fp)
  80d1cc:	e13ffc17 	ldw	r4,-16(fp)
  80d1d0:	080cef40 	call	80cef4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80d1d4:	e0bffb03 	ldbu	r2,-20(fp)
  80d1d8:	10bfffc4 	addi	r2,r2,-1
  80d1dc:	e0bffb05 	stb	r2,-20(fp)
  80d1e0:	e0bffb03 	ldbu	r2,-20(fp)
  80d1e4:	10803fd8 	cmpnei	r2,r2,255
  80d1e8:	103ff71e 	bne	r2,zero,80d1c8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80d1ec:	e037883a 	mov	sp,fp
  80d1f0:	dfc00117 	ldw	ra,4(sp)
  80d1f4:	df000017 	ldw	fp,0(sp)
  80d1f8:	dec00204 	addi	sp,sp,8
  80d1fc:	f800283a 	ret

0080d200 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80d200:	defff904 	addi	sp,sp,-28
  80d204:	dfc00615 	stw	ra,24(sp)
  80d208:	df000515 	stw	fp,20(sp)
  80d20c:	df000504 	addi	fp,sp,20
  80d210:	e13ffc15 	stw	r4,-16(fp)
  80d214:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80d218:	e0bffd17 	ldw	r2,-12(fp)
  80d21c:	1005003a 	cmpeq	r2,r2,zero
  80d220:	10001e1e 	bne	r2,zero,80d29c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  80d224:	e0bffd17 	ldw	r2,-12(fp)
  80d228:	10800050 	cmplti	r2,r2,1
  80d22c:	1000031e 	bne	r2,zero,80d23c <alt_up_character_lcd_shift_display+0x3c>
  80d230:	00800704 	movi	r2,28
  80d234:	e0bfff05 	stb	r2,-4(fp)
  80d238:	00000206 	br	80d244 <alt_up_character_lcd_shift_display+0x44>
  80d23c:	00c00604 	movi	r3,24
  80d240:	e0ffff05 	stb	r3,-4(fp)
  80d244:	e0bfff03 	ldbu	r2,-4(fp)
  80d248:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80d24c:	e0fffd17 	ldw	r3,-12(fp)
  80d250:	e0fffe15 	stw	r3,-8(fp)
  80d254:	e0fffe17 	ldw	r3,-8(fp)
  80d258:	1804403a 	cmpge	r2,r3,zero
  80d25c:	1000031e 	bne	r2,zero,80d26c <alt_up_character_lcd_shift_display+0x6c>
  80d260:	e0bffe17 	ldw	r2,-8(fp)
  80d264:	0085c83a 	sub	r2,zero,r2
  80d268:	e0bffe15 	stw	r2,-8(fp)
  80d26c:	e0fffe17 	ldw	r3,-8(fp)
  80d270:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80d274:	00000306 	br	80d284 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80d278:	e17ffb43 	ldbu	r5,-19(fp)
  80d27c:	e13ffc17 	ldw	r4,-16(fp)
  80d280:	080cef40 	call	80cef4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80d284:	e0bffb03 	ldbu	r2,-20(fp)
  80d288:	10bfffc4 	addi	r2,r2,-1
  80d28c:	e0bffb05 	stb	r2,-20(fp)
  80d290:	e0bffb03 	ldbu	r2,-20(fp)
  80d294:	10803fd8 	cmpnei	r2,r2,255
  80d298:	103ff71e 	bne	r2,zero,80d278 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80d29c:	e037883a 	mov	sp,fp
  80d2a0:	dfc00117 	ldw	ra,4(sp)
  80d2a4:	df000017 	ldw	fp,0(sp)
  80d2a8:	dec00204 	addi	sp,sp,8
  80d2ac:	f800283a 	ret

0080d2b0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  80d2b0:	defff904 	addi	sp,sp,-28
  80d2b4:	dfc00615 	stw	ra,24(sp)
  80d2b8:	df000515 	stw	fp,20(sp)
  80d2bc:	df000504 	addi	fp,sp,20
  80d2c0:	e13ffc15 	stw	r4,-16(fp)
  80d2c4:	e17ffd15 	stw	r5,-12(fp)
  80d2c8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  80d2cc:	e0bffd17 	ldw	r2,-12(fp)
  80d2d0:	10800a28 	cmpgeui	r2,r2,40
  80d2d4:	1000031e 	bne	r2,zero,80d2e4 <alt_up_character_lcd_erase_pos+0x34>
  80d2d8:	e0bffe17 	ldw	r2,-8(fp)
  80d2dc:	108000b0 	cmpltui	r2,r2,2
  80d2e0:	1000031e 	bne	r2,zero,80d2f0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  80d2e4:	00bfffc4 	movi	r2,-1
  80d2e8:	e0bfff15 	stw	r2,-4(fp)
  80d2ec:	00000e06 	br	80d328 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80d2f0:	e13ffd17 	ldw	r4,-12(fp)
  80d2f4:	e17ffe17 	ldw	r5,-8(fp)
  80d2f8:	080ce780 	call	80ce78 <get_DDRAM_addr>
  80d2fc:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  80d300:	e17ffb03 	ldbu	r5,-20(fp)
  80d304:	e13ffc17 	ldw	r4,-16(fp)
  80d308:	080cef40 	call	80cef4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  80d30c:	e0bffc17 	ldw	r2,-16(fp)
  80d310:	10800a17 	ldw	r2,40(r2)
  80d314:	10800044 	addi	r2,r2,1
  80d318:	1007883a 	mov	r3,r2
  80d31c:	00800084 	movi	r2,2
  80d320:	18800025 	stbio	r2,0(r3)
	return 0;
  80d324:	e03fff15 	stw	zero,-4(fp)
  80d328:	e0bfff17 	ldw	r2,-4(fp)
}
  80d32c:	e037883a 	mov	sp,fp
  80d330:	dfc00117 	ldw	ra,4(sp)
  80d334:	df000017 	ldw	fp,0(sp)
  80d338:	dec00204 	addi	sp,sp,8
  80d33c:	f800283a 	ret

0080d340 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  80d340:	defffd04 	addi	sp,sp,-12
  80d344:	dfc00215 	stw	ra,8(sp)
  80d348:	df000115 	stw	fp,4(sp)
  80d34c:	df000104 	addi	fp,sp,4
  80d350:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  80d354:	e13fff17 	ldw	r4,-4(fp)
  80d358:	01400304 	movi	r5,12
  80d35c:	080cef40 	call	80cef4 <alt_up_character_lcd_send_cmd>
}
  80d360:	e037883a 	mov	sp,fp
  80d364:	dfc00117 	ldw	ra,4(sp)
  80d368:	df000017 	ldw	fp,0(sp)
  80d36c:	dec00204 	addi	sp,sp,8
  80d370:	f800283a 	ret

0080d374 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  80d374:	defffd04 	addi	sp,sp,-12
  80d378:	dfc00215 	stw	ra,8(sp)
  80d37c:	df000115 	stw	fp,4(sp)
  80d380:	df000104 	addi	fp,sp,4
  80d384:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  80d388:	e13fff17 	ldw	r4,-4(fp)
  80d38c:	014003c4 	movi	r5,15
  80d390:	080cef40 	call	80cef4 <alt_up_character_lcd_send_cmd>
}
  80d394:	e037883a 	mov	sp,fp
  80d398:	dfc00117 	ldw	ra,4(sp)
  80d39c:	df000017 	ldw	fp,0(sp)
  80d3a0:	dec00204 	addi	sp,sp,8
  80d3a4:	f800283a 	ret

0080d3a8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  80d3a8:	defffc04 	addi	sp,sp,-16
  80d3ac:	dfc00315 	stw	ra,12(sp)
  80d3b0:	df000215 	stw	fp,8(sp)
  80d3b4:	df000204 	addi	fp,sp,8
  80d3b8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  80d3bc:	e0bfff17 	ldw	r2,-4(fp)
  80d3c0:	10800217 	ldw	r2,8(r2)
  80d3c4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  80d3c8:	00000c06 	br	80d3fc <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  80d3cc:	e13ffe17 	ldw	r4,-8(fp)
  80d3d0:	01402074 	movhi	r5,129
  80d3d4:	2952b604 	addi	r5,r5,19160
  80d3d8:	08086e80 	call	8086e8 <strcmp>
  80d3dc:	1004c03a 	cmpne	r2,r2,zero
  80d3e0:	1000031e 	bne	r2,zero,80d3f0 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  80d3e4:	e0bffe17 	ldw	r2,-8(fp)
  80d3e8:	10000005 	stb	zero,0(r2)
			break;
  80d3ec:	00000a06 	br	80d418 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  80d3f0:	e0bffe17 	ldw	r2,-8(fp)
  80d3f4:	10800044 	addi	r2,r2,1
  80d3f8:	e0bffe15 	stw	r2,-8(fp)
  80d3fc:	e0bffe17 	ldw	r2,-8(fp)
  80d400:	10800003 	ldbu	r2,0(r2)
  80d404:	10803fcc 	andi	r2,r2,255
  80d408:	1080201c 	xori	r2,r2,128
  80d40c:	10bfe004 	addi	r2,r2,-128
  80d410:	1004c03a 	cmpne	r2,r2,zero
  80d414:	103fed1e 	bne	r2,zero,80d3cc <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  80d418:	e037883a 	mov	sp,fp
  80d41c:	dfc00117 	ldw	ra,4(sp)
  80d420:	df000017 	ldw	fp,0(sp)
  80d424:	dec00204 	addi	sp,sp,8
  80d428:	f800283a 	ret

0080d42c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  80d42c:	defffc04 	addi	sp,sp,-16
  80d430:	dfc00315 	stw	ra,12(sp)
  80d434:	df000215 	stw	fp,8(sp)
  80d438:	df000204 	addi	fp,sp,8
  80d43c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  80d440:	e13fff17 	ldw	r4,-4(fp)
  80d444:	01402074 	movhi	r5,129
  80d448:	2959b504 	addi	r5,r5,26324
  80d44c:	081341c0 	call	81341c <alt_find_dev>
  80d450:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80d454:	e0bffe17 	ldw	r2,-8(fp)
}
  80d458:	e037883a 	mov	sp,fp
  80d45c:	dfc00117 	ldw	ra,4(sp)
  80d460:	df000017 	ldw	fp,0(sp)
  80d464:	dec00204 	addi	sp,sp,8
  80d468:	f800283a 	ret

0080d46c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  80d46c:	defff904 	addi	sp,sp,-28
  80d470:	df000615 	stw	fp,24(sp)
  80d474:	df000604 	addi	fp,sp,24
  80d478:	e13ffb15 	stw	r4,-20(fp)
  80d47c:	e1bffd15 	stw	r6,-12(fp)
  80d480:	e1fffe15 	stw	r7,-8(fp)
  80d484:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  80d488:	e0bffb17 	ldw	r2,-20(fp)
  80d48c:	10c00c17 	ldw	r3,48(r2)
  80d490:	e0bffd17 	ldw	r2,-12(fp)
  80d494:	10c0042e 	bgeu	r2,r3,80d4a8 <alt_up_char_buffer_draw+0x3c>
  80d498:	e0bffb17 	ldw	r2,-20(fp)
  80d49c:	10c00d17 	ldw	r3,52(r2)
  80d4a0:	e0bffe17 	ldw	r2,-8(fp)
  80d4a4:	10c00336 	bltu	r2,r3,80d4b4 <alt_up_char_buffer_draw+0x48>
		return -1;
  80d4a8:	00bfffc4 	movi	r2,-1
  80d4ac:	e0bfff15 	stw	r2,-4(fp)
  80d4b0:	00001d06 	br	80d528 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  80d4b4:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  80d4b8:	e0bffb17 	ldw	r2,-20(fp)
  80d4bc:	10c00f17 	ldw	r3,60(r2)
  80d4c0:	e0bffd17 	ldw	r2,-12(fp)
  80d4c4:	1886703a 	and	r3,r3,r2
  80d4c8:	e0bffb17 	ldw	r2,-20(fp)
  80d4cc:	10800e17 	ldw	r2,56(r2)
  80d4d0:	1886983a 	sll	r3,r3,r2
  80d4d4:	e0bffa17 	ldw	r2,-24(fp)
  80d4d8:	10c4b03a 	or	r2,r2,r3
  80d4dc:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  80d4e0:	e0bffb17 	ldw	r2,-20(fp)
  80d4e4:	10c01117 	ldw	r3,68(r2)
  80d4e8:	e0bffe17 	ldw	r2,-8(fp)
  80d4ec:	1886703a 	and	r3,r3,r2
  80d4f0:	e0bffb17 	ldw	r2,-20(fp)
  80d4f4:	10801017 	ldw	r2,64(r2)
  80d4f8:	1886983a 	sll	r3,r3,r2
  80d4fc:	e0bffa17 	ldw	r2,-24(fp)
  80d500:	10c4b03a 	or	r2,r2,r3
  80d504:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  80d508:	e0bffb17 	ldw	r2,-20(fp)
  80d50c:	10800b17 	ldw	r2,44(r2)
  80d510:	1007883a 	mov	r3,r2
  80d514:	e0bffa17 	ldw	r2,-24(fp)
  80d518:	1885883a 	add	r2,r3,r2
  80d51c:	e0fffc03 	ldbu	r3,-16(fp)
  80d520:	10c00025 	stbio	r3,0(r2)

	return 0;
  80d524:	e03fff15 	stw	zero,-4(fp)
  80d528:	e0bfff17 	ldw	r2,-4(fp)
}
  80d52c:	e037883a 	mov	sp,fp
  80d530:	df000017 	ldw	fp,0(sp)
  80d534:	dec00104 	addi	sp,sp,4
  80d538:	f800283a 	ret

0080d53c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  80d53c:	defff904 	addi	sp,sp,-28
  80d540:	df000615 	stw	fp,24(sp)
  80d544:	df000604 	addi	fp,sp,24
  80d548:	e13ffb15 	stw	r4,-20(fp)
  80d54c:	e17ffc15 	stw	r5,-16(fp)
  80d550:	e1bffd15 	stw	r6,-12(fp)
  80d554:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  80d558:	e0bffb17 	ldw	r2,-20(fp)
  80d55c:	10c00c17 	ldw	r3,48(r2)
  80d560:	e0bffd17 	ldw	r2,-12(fp)
  80d564:	10c0042e 	bgeu	r2,r3,80d578 <alt_up_char_buffer_string+0x3c>
  80d568:	e0bffb17 	ldw	r2,-20(fp)
  80d56c:	10c00d17 	ldw	r3,52(r2)
  80d570:	e0bffe17 	ldw	r2,-8(fp)
  80d574:	10c00336 	bltu	r2,r3,80d584 <alt_up_char_buffer_string+0x48>
		return -1;
  80d578:	00bfffc4 	movi	r2,-1
  80d57c:	e0bfff15 	stw	r2,-4(fp)
  80d580:	00002e06 	br	80d63c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  80d584:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  80d588:	e0bffb17 	ldw	r2,-20(fp)
  80d58c:	10801017 	ldw	r2,64(r2)
  80d590:	1007883a 	mov	r3,r2
  80d594:	e0bffe17 	ldw	r2,-8(fp)
  80d598:	10c6983a 	sll	r3,r2,r3
  80d59c:	e0bffd17 	ldw	r2,-12(fp)
  80d5a0:	1885883a 	add	r2,r3,r2
  80d5a4:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  80d5a8:	00001c06 	br	80d61c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  80d5ac:	e0bffb17 	ldw	r2,-20(fp)
  80d5b0:	10800b17 	ldw	r2,44(r2)
  80d5b4:	1007883a 	mov	r3,r2
  80d5b8:	e0bffa17 	ldw	r2,-24(fp)
  80d5bc:	1889883a 	add	r4,r3,r2
  80d5c0:	e0bffc17 	ldw	r2,-16(fp)
  80d5c4:	10800003 	ldbu	r2,0(r2)
  80d5c8:	10c03fcc 	andi	r3,r2,255
  80d5cc:	18c0201c 	xori	r3,r3,128
  80d5d0:	18ffe004 	addi	r3,r3,-128
  80d5d4:	2005883a 	mov	r2,r4
  80d5d8:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80d5dc:	e0bffc17 	ldw	r2,-16(fp)
  80d5e0:	10800044 	addi	r2,r2,1
  80d5e4:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  80d5e8:	e0bffd17 	ldw	r2,-12(fp)
  80d5ec:	10800044 	addi	r2,r2,1
  80d5f0:	e0bffd15 	stw	r2,-12(fp)
  80d5f4:	e0bffb17 	ldw	r2,-20(fp)
  80d5f8:	10c00c17 	ldw	r3,48(r2)
  80d5fc:	e0bffd17 	ldw	r2,-12(fp)
  80d600:	10c00336 	bltu	r2,r3,80d610 <alt_up_char_buffer_string+0xd4>
			return -1;
  80d604:	00bfffc4 	movi	r2,-1
  80d608:	e0bfff15 	stw	r2,-4(fp)
  80d60c:	00000b06 	br	80d63c <alt_up_char_buffer_string+0x100>
		++offset;
  80d610:	e0bffa17 	ldw	r2,-24(fp)
  80d614:	10800044 	addi	r2,r2,1
  80d618:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  80d61c:	e0bffc17 	ldw	r2,-16(fp)
  80d620:	10800003 	ldbu	r2,0(r2)
  80d624:	10803fcc 	andi	r2,r2,255
  80d628:	1080201c 	xori	r2,r2,128
  80d62c:	10bfe004 	addi	r2,r2,-128
  80d630:	1004c03a 	cmpne	r2,r2,zero
  80d634:	103fdd1e 	bne	r2,zero,80d5ac <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  80d638:	e03fff15 	stw	zero,-4(fp)
  80d63c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d640:	e037883a 	mov	sp,fp
  80d644:	df000017 	ldw	fp,0(sp)
  80d648:	dec00104 	addi	sp,sp,4
  80d64c:	f800283a 	ret

0080d650 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  80d650:	defffe04 	addi	sp,sp,-8
  80d654:	df000115 	stw	fp,4(sp)
  80d658:	df000104 	addi	fp,sp,4
  80d65c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  80d660:	e0bfff17 	ldw	r2,-4(fp)
  80d664:	10800a17 	ldw	r2,40(r2)
  80d668:	10800084 	addi	r2,r2,2
  80d66c:	1007883a 	mov	r3,r2
  80d670:	00800044 	movi	r2,1
  80d674:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  80d678:	e0bfff17 	ldw	r2,-4(fp)
  80d67c:	10800a17 	ldw	r2,40(r2)
  80d680:	10800084 	addi	r2,r2,2
  80d684:	10800023 	ldbuio	r2,0(r2)
  80d688:	1080004c 	andi	r2,r2,1
  80d68c:	10803fcc 	andi	r2,r2,255
  80d690:	1004c03a 	cmpne	r2,r2,zero
  80d694:	103ff81e 	bne	r2,zero,80d678 <alt_up_char_buffer_clear+0x28>
	return 0;
  80d698:	0005883a 	mov	r2,zero
}
  80d69c:	e037883a 	mov	sp,fp
  80d6a0:	df000017 	ldw	fp,0(sp)
  80d6a4:	dec00104 	addi	sp,sp,4
  80d6a8:	f800283a 	ret

0080d6ac <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  80d6ac:	defffc04 	addi	sp,sp,-16
  80d6b0:	dfc00315 	stw	ra,12(sp)
  80d6b4:	df000215 	stw	fp,8(sp)
  80d6b8:	df000204 	addi	fp,sp,8
  80d6bc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  80d6c0:	e13fff17 	ldw	r4,-4(fp)
  80d6c4:	01402074 	movhi	r5,129
  80d6c8:	2959b504 	addi	r5,r5,26324
  80d6cc:	081341c0 	call	81341c <alt_find_dev>
  80d6d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80d6d4:	e0bffe17 	ldw	r2,-8(fp)
}
  80d6d8:	e037883a 	mov	sp,fp
  80d6dc:	dfc00117 	ldw	ra,4(sp)
  80d6e0:	df000017 	ldw	fp,0(sp)
  80d6e4:	dec00204 	addi	sp,sp,8
  80d6e8:	f800283a 	ret

0080d6ec <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  80d6ec:	defff804 	addi	sp,sp,-32
  80d6f0:	dfc00715 	stw	ra,28(sp)
  80d6f4:	df000615 	stw	fp,24(sp)
  80d6f8:	df000604 	addi	fp,sp,24
  80d6fc:	e13ffb15 	stw	r4,-20(fp)
  80d700:	e17ffc15 	stw	r5,-16(fp)
  80d704:	e1bffd15 	stw	r6,-12(fp)
  80d708:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  80d70c:	e0bffb17 	ldw	r2,-20(fp)
  80d710:	10c00f17 	ldw	r3,60(r2)
  80d714:	e0bffd17 	ldw	r2,-12(fp)
  80d718:	10c0042e 	bgeu	r2,r3,80d72c <alt_up_pixel_buffer_dma_draw+0x40>
  80d71c:	e0bffb17 	ldw	r2,-20(fp)
  80d720:	10c01017 	ldw	r3,64(r2)
  80d724:	e0bffe17 	ldw	r2,-8(fp)
  80d728:	10c00336 	bltu	r2,r3,80d738 <alt_up_pixel_buffer_dma_draw+0x4c>
		return -1;
  80d72c:	00bfffc4 	movi	r2,-1
  80d730:	e0bfff15 	stw	r2,-4(fp)
  80d734:	00005206 	br	80d880 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
  80d738:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80d73c:	e0bffb17 	ldw	r2,-20(fp)
  80d740:	10800d17 	ldw	r2,52(r2)
  80d744:	1004c03a 	cmpne	r2,r2,zero
  80d748:	1000151e 	bne	r2,zero,80d7a0 <alt_up_pixel_buffer_dma_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d74c:	e0bffb17 	ldw	r2,-20(fp)
  80d750:	10c01217 	ldw	r3,72(r2)
  80d754:	e0bffd17 	ldw	r2,-12(fp)
  80d758:	1886703a 	and	r3,r3,r2
  80d75c:	e0bffb17 	ldw	r2,-20(fp)
  80d760:	10801117 	ldw	r2,68(r2)
  80d764:	1886983a 	sll	r3,r3,r2
  80d768:	e0bffa17 	ldw	r2,-24(fp)
  80d76c:	10c4b03a 	or	r2,r2,r3
  80d770:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  80d774:	e0bffb17 	ldw	r2,-20(fp)
  80d778:	10c01417 	ldw	r3,80(r2)
  80d77c:	e0bffe17 	ldw	r2,-8(fp)
  80d780:	1886703a 	and	r3,r3,r2
  80d784:	e0bffb17 	ldw	r2,-20(fp)
  80d788:	10801317 	ldw	r2,76(r2)
  80d78c:	1886983a 	sll	r3,r3,r2
  80d790:	e0bffa17 	ldw	r2,-24(fp)
  80d794:	10c4b03a 	or	r2,r2,r3
  80d798:	e0bffa15 	stw	r2,-24(fp)
  80d79c:	00001806 	br	80d800 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  80d7a0:	e0bffb17 	ldw	r2,-20(fp)
  80d7a4:	10c01217 	ldw	r3,72(r2)
  80d7a8:	e0bffd17 	ldw	r2,-12(fp)
  80d7ac:	1886703a 	and	r3,r3,r2
  80d7b0:	e0bffb17 	ldw	r2,-20(fp)
  80d7b4:	10801117 	ldw	r2,68(r2)
  80d7b8:	1886983a 	sll	r3,r3,r2
  80d7bc:	e0bffa17 	ldw	r2,-24(fp)
  80d7c0:	10c5883a 	add	r2,r2,r3
  80d7c4:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  80d7c8:	e0bffb17 	ldw	r2,-20(fp)
  80d7cc:	10c01417 	ldw	r3,80(r2)
  80d7d0:	e0bffe17 	ldw	r2,-8(fp)
  80d7d4:	1888703a 	and	r4,r3,r2
  80d7d8:	e0bffb17 	ldw	r2,-20(fp)
  80d7dc:	11400f17 	ldw	r5,60(r2)
  80d7e0:	08017b40 	call	8017b4 <__mulsi3>
  80d7e4:	1007883a 	mov	r3,r2
  80d7e8:	e0bffb17 	ldw	r2,-20(fp)
  80d7ec:	10801117 	ldw	r2,68(r2)
  80d7f0:	1886983a 	sll	r3,r3,r2
  80d7f4:	e0bffa17 	ldw	r2,-24(fp)
  80d7f8:	10c5883a 	add	r2,r2,r3
  80d7fc:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80d800:	e0bffb17 	ldw	r2,-20(fp)
  80d804:	10800e17 	ldw	r2,56(r2)
  80d808:	10800058 	cmpnei	r2,r2,1
  80d80c:	1000081e 	bne	r2,zero,80d830 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d810:	e0bffb17 	ldw	r2,-20(fp)
  80d814:	10800c17 	ldw	r2,48(r2)
  80d818:	1007883a 	mov	r3,r2
  80d81c:	e0bffa17 	ldw	r2,-24(fp)
  80d820:	1885883a 	add	r2,r3,r2
  80d824:	e0fffc17 	ldw	r3,-16(fp)
  80d828:	10c00025 	stbio	r3,0(r2)
  80d82c:	00001306 	br	80d87c <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d830:	e0bffb17 	ldw	r2,-20(fp)
  80d834:	10800e17 	ldw	r2,56(r2)
  80d838:	10800098 	cmpnei	r2,r2,2
  80d83c:	1000081e 	bne	r2,zero,80d860 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d840:	e0bffb17 	ldw	r2,-20(fp)
  80d844:	10800c17 	ldw	r2,48(r2)
  80d848:	1007883a 	mov	r3,r2
  80d84c:	e0bffa17 	ldw	r2,-24(fp)
  80d850:	1885883a 	add	r2,r3,r2
  80d854:	e0fffc17 	ldw	r3,-16(fp)
  80d858:	10c0002d 	sthio	r3,0(r2)
  80d85c:	00000706 	br	80d87c <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  80d860:	e0bffb17 	ldw	r2,-20(fp)
  80d864:	10800c17 	ldw	r2,48(r2)
  80d868:	1007883a 	mov	r3,r2
  80d86c:	e0bffa17 	ldw	r2,-24(fp)
  80d870:	1885883a 	add	r2,r3,r2
  80d874:	e0fffc17 	ldw	r3,-16(fp)
  80d878:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  80d87c:	e03fff15 	stw	zero,-4(fp)
  80d880:	e0bfff17 	ldw	r2,-4(fp)
}
  80d884:	e037883a 	mov	sp,fp
  80d888:	dfc00117 	ldw	ra,4(sp)
  80d88c:	df000017 	ldw	fp,0(sp)
  80d890:	dec00204 	addi	sp,sp,8
  80d894:	f800283a 	ret

0080d898 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  80d898:	defffd04 	addi	sp,sp,-12
  80d89c:	df000215 	stw	fp,8(sp)
  80d8a0:	df000204 	addi	fp,sp,8
  80d8a4:	e13ffe15 	stw	r4,-8(fp)
  80d8a8:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  80d8ac:	e0bffe17 	ldw	r2,-8(fp)
  80d8b0:	10800a17 	ldw	r2,40(r2)
  80d8b4:	10800104 	addi	r2,r2,4
  80d8b8:	e0ffff17 	ldw	r3,-4(fp)
  80d8bc:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  80d8c0:	e0bffe17 	ldw	r2,-8(fp)
  80d8c4:	10800a17 	ldw	r2,40(r2)
  80d8c8:	10800104 	addi	r2,r2,4
  80d8cc:	10800037 	ldwio	r2,0(r2)
  80d8d0:	1007883a 	mov	r3,r2
  80d8d4:	e0bffe17 	ldw	r2,-8(fp)
  80d8d8:	10c00c15 	stw	r3,48(r2)
	return 0;
  80d8dc:	0005883a 	mov	r2,zero
}
  80d8e0:	e037883a 	mov	sp,fp
  80d8e4:	df000017 	ldw	fp,0(sp)
  80d8e8:	dec00104 	addi	sp,sp,4
  80d8ec:	f800283a 	ret

0080d8f0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  80d8f0:	defffe04 	addi	sp,sp,-8
  80d8f4:	df000115 	stw	fp,4(sp)
  80d8f8:	df000104 	addi	fp,sp,4
  80d8fc:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  80d900:	e0bfff17 	ldw	r2,-4(fp)
  80d904:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  80d908:	e0bfff17 	ldw	r2,-4(fp)
  80d90c:	10800a17 	ldw	r2,40(r2)
  80d910:	1007883a 	mov	r3,r2
  80d914:	00800044 	movi	r2,1
  80d918:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  80d91c:	e0bfff17 	ldw	r2,-4(fp)
  80d920:	10c00b17 	ldw	r3,44(r2)
  80d924:	e0bfff17 	ldw	r2,-4(fp)
  80d928:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  80d92c:	e0bfff17 	ldw	r2,-4(fp)
  80d930:	11000b15 	stw	r4,44(r2)
	return 0;
  80d934:	0005883a 	mov	r2,zero
}
  80d938:	e037883a 	mov	sp,fp
  80d93c:	df000017 	ldw	fp,0(sp)
  80d940:	dec00104 	addi	sp,sp,4
  80d944:	f800283a 	ret

0080d948 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  80d948:	defffe04 	addi	sp,sp,-8
  80d94c:	df000115 	stw	fp,4(sp)
  80d950:	df000104 	addi	fp,sp,4
  80d954:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  80d958:	e0bfff17 	ldw	r2,-4(fp)
  80d95c:	10800a17 	ldw	r2,40(r2)
  80d960:	10800304 	addi	r2,r2,12
  80d964:	10800037 	ldwio	r2,0(r2)
  80d968:	1080004c 	andi	r2,r2,1
}
  80d96c:	e037883a 	mov	sp,fp
  80d970:	df000017 	ldw	fp,0(sp)
  80d974:	dec00104 	addi	sp,sp,4
  80d978:	f800283a 	ret

0080d97c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  80d97c:	defff504 	addi	sp,sp,-44
  80d980:	dfc00a15 	stw	ra,40(sp)
  80d984:	df000915 	stw	fp,36(sp)
  80d988:	df000904 	addi	fp,sp,36
  80d98c:	e13ff715 	stw	r4,-36(fp)
  80d990:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80d994:	e0bff817 	ldw	r2,-32(fp)
  80d998:	10800058 	cmpnei	r2,r2,1
  80d99c:	1000041e 	bne	r2,zero,80d9b0 <alt_up_pixel_buffer_dma_clear_screen+0x34>
		addr = pixel_buffer->back_buffer_start_address;
  80d9a0:	e0bff717 	ldw	r2,-36(fp)
  80d9a4:	10800c17 	ldw	r2,48(r2)
  80d9a8:	e0bfff15 	stw	r2,-4(fp)
  80d9ac:	00000306 	br	80d9bc <alt_up_pixel_buffer_dma_clear_screen+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
  80d9b0:	e0bff717 	ldw	r2,-36(fp)
  80d9b4:	10800b17 	ldw	r2,44(r2)
  80d9b8:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  80d9bc:	e0bff717 	ldw	r2,-36(fp)
  80d9c0:	10800f17 	ldw	r2,60(r2)
  80d9c4:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80d9c8:	e0bff717 	ldw	r2,-36(fp)
  80d9cc:	10800e17 	ldw	r2,56(r2)
  80d9d0:	10800098 	cmpnei	r2,r2,2
  80d9d4:	1000051e 	bne	r2,zero,80d9ec <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
  80d9d8:	e0fffe17 	ldw	r3,-8(fp)
  80d9dc:	e0fffe17 	ldw	r3,-8(fp)
  80d9e0:	18c5883a 	add	r2,r3,r3
  80d9e4:	e0bffe15 	stw	r2,-8(fp)
  80d9e8:	00000506 	br	80da00 <alt_up_pixel_buffer_dma_clear_screen+0x84>
	} else {
		limit_x = limit_x << 2;
  80d9ec:	e13ffe17 	ldw	r4,-8(fp)
  80d9f0:	e13ffe17 	ldw	r4,-8(fp)
  80d9f4:	2105883a 	add	r2,r4,r4
  80d9f8:	1085883a 	add	r2,r2,r2
  80d9fc:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  80da00:	e0bff717 	ldw	r2,-36(fp)
  80da04:	10801017 	ldw	r2,64(r2)
  80da08:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80da0c:	e0bff717 	ldw	r2,-36(fp)
  80da10:	10800d17 	ldw	r2,52(r2)
  80da14:	1004c03a 	cmpne	r2,r2,zero
  80da18:	10001e1e 	bne	r2,zero,80da94 <alt_up_pixel_buffer_dma_clear_screen+0x118>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80da1c:	e0bff717 	ldw	r2,-36(fp)
  80da20:	10801317 	ldw	r2,76(r2)
  80da24:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  80da28:	e03ffb15 	stw	zero,-20(fp)
  80da2c:	00001506 	br	80da84 <alt_up_pixel_buffer_dma_clear_screen+0x108>
		{
			for (x = 0; x < limit_x; x = x + 4)
  80da30:	e03ffc15 	stw	zero,-16(fp)
  80da34:	00000706 	br	80da54 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
			{
				IOWR_32DIRECT(addr, x, 0);
  80da38:	e0ffff17 	ldw	r3,-4(fp)
  80da3c:	e0bffc17 	ldw	r2,-16(fp)
  80da40:	1885883a 	add	r2,r3,r2
  80da44:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  80da48:	e0bffc17 	ldw	r2,-16(fp)
  80da4c:	10800104 	addi	r2,r2,4
  80da50:	e0bffc15 	stw	r2,-16(fp)
  80da54:	e0fffc17 	ldw	r3,-16(fp)
  80da58:	e13ffe17 	ldw	r4,-8(fp)
  80da5c:	193ff636 	bltu	r3,r4,80da38 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  80da60:	e0fffa17 	ldw	r3,-24(fp)
  80da64:	00800044 	movi	r2,1
  80da68:	10c4983a 	sll	r2,r2,r3
  80da6c:	e0ffff17 	ldw	r3,-4(fp)
  80da70:	1887883a 	add	r3,r3,r2
  80da74:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  80da78:	e13ffb17 	ldw	r4,-20(fp)
  80da7c:	21000044 	addi	r4,r4,1
  80da80:	e13ffb15 	stw	r4,-20(fp)
  80da84:	e0bffb17 	ldw	r2,-20(fp)
  80da88:	e0fffd17 	ldw	r3,-12(fp)
  80da8c:	10ffe836 	bltu	r2,r3,80da30 <alt_up_pixel_buffer_dma_clear_screen+0xb4>
  80da90:	00001006 	br	80dad4 <alt_up_pixel_buffer_dma_clear_screen+0x158>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  80da94:	e13ffd17 	ldw	r4,-12(fp)
  80da98:	e17ffe17 	ldw	r5,-8(fp)
  80da9c:	08017b40 	call	8017b4 <__mulsi3>
  80daa0:	e0bffd15 	stw	r2,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  80daa4:	e03ff915 	stw	zero,-28(fp)
  80daa8:	00000706 	br	80dac8 <alt_up_pixel_buffer_dma_clear_screen+0x14c>
		{
			IOWR_32DIRECT(addr, x, 0);
  80daac:	e0ffff17 	ldw	r3,-4(fp)
  80dab0:	e0bff917 	ldw	r2,-28(fp)
  80dab4:	1885883a 	add	r2,r3,r2
  80dab8:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  80dabc:	e13ff917 	ldw	r4,-28(fp)
  80dac0:	21000104 	addi	r4,r4,4
  80dac4:	e13ff915 	stw	r4,-28(fp)
  80dac8:	e0bff917 	ldw	r2,-28(fp)
  80dacc:	e0fffd17 	ldw	r3,-12(fp)
  80dad0:	10fff636 	bltu	r2,r3,80daac <alt_up_pixel_buffer_dma_clear_screen+0x130>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  80dad4:	e037883a 	mov	sp,fp
  80dad8:	dfc00117 	ldw	ra,4(sp)
  80dadc:	df000017 	ldw	fp,0(sp)
  80dae0:	dec00204 	addi	sp,sp,8
  80dae4:	f800283a 	ret

0080dae8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  80dae8:	deffec04 	addi	sp,sp,-80
  80daec:	dfc01315 	stw	ra,76(sp)
  80daf0:	df001215 	stw	fp,72(sp)
  80daf4:	df001204 	addi	fp,sp,72
  80daf8:	e13fee15 	stw	r4,-72(fp)
  80dafc:	e17fef15 	stw	r5,-68(fp)
  80db00:	e1bff015 	stw	r6,-64(fp)
  80db04:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80db08:	e0bfee17 	ldw	r2,-72(fp)
  80db0c:	10800f17 	ldw	r2,60(r2)
  80db10:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80db14:	e0bfee17 	ldw	r2,-72(fp)
  80db18:	10801017 	ldw	r2,64(r2)
  80db1c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80db20:	e0bfef17 	ldw	r2,-68(fp)
  80db24:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  80db28:	e0fff117 	ldw	r3,-60(fp)
  80db2c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  80db30:	e13ff017 	ldw	r4,-64(fp)
  80db34:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  80db38:	e0800217 	ldw	r2,8(fp)
  80db3c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  80db40:	e0c00317 	ldw	r3,12(fp)
  80db44:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80db48:	e13ffa17 	ldw	r4,-24(fp)
  80db4c:	e0bffb17 	ldw	r2,-20(fp)
  80db50:	2080062e 	bgeu	r4,r2,80db6c <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = l_x;
  80db54:	e0fffb17 	ldw	r3,-20(fp)
  80db58:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  80db5c:	e13ffa17 	ldw	r4,-24(fp)
  80db60:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  80db64:	e0bffc17 	ldw	r2,-16(fp)
  80db68:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  80db6c:	e0fff817 	ldw	r3,-32(fp)
  80db70:	e13ff917 	ldw	r4,-28(fp)
  80db74:	1900062e 	bgeu	r3,r4,80db90 <alt_up_pixel_buffer_dma_draw_box+0xa8>
	{
		temp = t_y;
  80db78:	e0bff917 	ldw	r2,-28(fp)
  80db7c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  80db80:	e0fff817 	ldw	r3,-32(fp)
  80db84:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  80db88:	e13ffc17 	ldw	r4,-16(fp)
  80db8c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  80db90:	e0bffb17 	ldw	r2,-20(fp)
  80db94:	e0fffe17 	ldw	r3,-8(fp)
  80db98:	10c10d2e 	bgeu	r2,r3,80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
  80db9c:	e13ff917 	ldw	r4,-28(fp)
  80dba0:	e0bffd17 	ldw	r2,-12(fp)
  80dba4:	20800136 	bltu	r4,r2,80dbac <alt_up_pixel_buffer_dma_draw_box+0xc4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80dba8:	00010906 	br	80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80dbac:	e0fffa17 	ldw	r3,-24(fp)
  80dbb0:	e13ffe17 	ldw	r4,-8(fp)
  80dbb4:	19000336 	bltu	r3,r4,80dbc4 <alt_up_pixel_buffer_dma_draw_box+0xdc>
	{
		r_x = limit_x - 1;
  80dbb8:	e0bffe17 	ldw	r2,-8(fp)
  80dbbc:	10bfffc4 	addi	r2,r2,-1
  80dbc0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80dbc4:	e0fff817 	ldw	r3,-32(fp)
  80dbc8:	e13ffd17 	ldw	r4,-12(fp)
  80dbcc:	19000336 	bltu	r3,r4,80dbdc <alt_up_pixel_buffer_dma_draw_box+0xf4>
	{
		b_y = limit_y - 1;
  80dbd0:	e0bffd17 	ldw	r2,-12(fp)
  80dbd4:	10bfffc4 	addi	r2,r2,-1
  80dbd8:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80dbdc:	e0800417 	ldw	r2,16(fp)
  80dbe0:	10800058 	cmpnei	r2,r2,1
  80dbe4:	1000041e 	bne	r2,zero,80dbf8 <alt_up_pixel_buffer_dma_draw_box+0x110>
		addr = pixel_buffer->back_buffer_start_address;
  80dbe8:	e0bfee17 	ldw	r2,-72(fp)
  80dbec:	10800c17 	ldw	r2,48(r2)
  80dbf0:	e0bfff15 	stw	r2,-4(fp)
  80dbf4:	00000306 	br	80dc04 <alt_up_pixel_buffer_dma_draw_box+0x11c>
	else
		addr = pixel_buffer->buffer_start_address;
  80dbf8:	e0bfee17 	ldw	r2,-72(fp)
  80dbfc:	10800b17 	ldw	r2,44(r2)
  80dc00:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80dc04:	e0bfee17 	ldw	r2,-72(fp)
  80dc08:	10800d17 	ldw	r2,52(r2)
  80dc0c:	1004c03a 	cmpne	r2,r2,zero
  80dc10:	1000721e 	bne	r2,zero,80dddc <alt_up_pixel_buffer_dma_draw_box+0x2f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80dc14:	e0bfee17 	ldw	r2,-72(fp)
  80dc18:	10801317 	ldw	r2,76(r2)
  80dc1c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  80dc20:	e0bff417 	ldw	r2,-48(fp)
  80dc24:	e0fff917 	ldw	r3,-28(fp)
  80dc28:	1884983a 	sll	r2,r3,r2
  80dc2c:	e13fff17 	ldw	r4,-4(fp)
  80dc30:	2089883a 	add	r4,r4,r2
  80dc34:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80dc38:	e0bfee17 	ldw	r2,-72(fp)
  80dc3c:	10800e17 	ldw	r2,56(r2)
  80dc40:	10800058 	cmpnei	r2,r2,1
  80dc44:	10001e1e 	bne	r2,zero,80dcc0 <alt_up_pixel_buffer_dma_draw_box+0x1d8>
			for (y = t_y; y <= b_y; y++)
  80dc48:	e0bff917 	ldw	r2,-28(fp)
  80dc4c:	e0bff515 	stw	r2,-44(fp)
  80dc50:	00001706 	br	80dcb0 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			{
				for (x = l_x; x <= r_x; x++)
  80dc54:	e0fffb17 	ldw	r3,-20(fp)
  80dc58:	e0fff615 	stw	r3,-40(fp)
  80dc5c:	00000806 	br	80dc80 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80dc60:	e0ffff17 	ldw	r3,-4(fp)
  80dc64:	e0bff617 	ldw	r2,-40(fp)
  80dc68:	1885883a 	add	r2,r3,r2
  80dc6c:	e0fff717 	ldw	r3,-36(fp)
  80dc70:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dc74:	e13ff617 	ldw	r4,-40(fp)
  80dc78:	21000044 	addi	r4,r4,1
  80dc7c:	e13ff615 	stw	r4,-40(fp)
  80dc80:	e0bffa17 	ldw	r2,-24(fp)
  80dc84:	e0fff617 	ldw	r3,-40(fp)
  80dc88:	10fff52e 	bgeu	r2,r3,80dc60 <alt_up_pixel_buffer_dma_draw_box+0x178>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  80dc8c:	e0fff417 	ldw	r3,-48(fp)
  80dc90:	00800044 	movi	r2,1
  80dc94:	10c4983a 	sll	r2,r2,r3
  80dc98:	e13fff17 	ldw	r4,-4(fp)
  80dc9c:	2089883a 	add	r4,r4,r2
  80dca0:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80dca4:	e0bff517 	ldw	r2,-44(fp)
  80dca8:	10800044 	addi	r2,r2,1
  80dcac:	e0bff515 	stw	r2,-44(fp)
  80dcb0:	e0fff817 	ldw	r3,-32(fp)
  80dcb4:	e13ff517 	ldw	r4,-44(fp)
  80dcb8:	193fe62e 	bgeu	r3,r4,80dc54 <alt_up_pixel_buffer_dma_draw_box+0x16c>
  80dcbc:	0000c406 	br	80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80dcc0:	e0bfee17 	ldw	r2,-72(fp)
  80dcc4:	10800e17 	ldw	r2,56(r2)
  80dcc8:	10800098 	cmpnei	r2,r2,2
  80dccc:	1000211e 	bne	r2,zero,80dd54 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			for (y = t_y; y <= b_y; y++)
  80dcd0:	e0bff917 	ldw	r2,-28(fp)
  80dcd4:	e0bff515 	stw	r2,-44(fp)
  80dcd8:	00001a06 	br	80dd44 <alt_up_pixel_buffer_dma_draw_box+0x25c>
			{
				for (x = l_x; x <= r_x; x++)
  80dcdc:	e0fffb17 	ldw	r3,-20(fp)
  80dce0:	e0fff615 	stw	r3,-40(fp)
  80dce4:	00000b06 	br	80dd14 <alt_up_pixel_buffer_dma_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80dce8:	e13ff617 	ldw	r4,-40(fp)
  80dcec:	e13ff617 	ldw	r4,-40(fp)
  80dcf0:	2105883a 	add	r2,r4,r4
  80dcf4:	1007883a 	mov	r3,r2
  80dcf8:	e0bfff17 	ldw	r2,-4(fp)
  80dcfc:	1885883a 	add	r2,r3,r2
  80dd00:	e0fff717 	ldw	r3,-36(fp)
  80dd04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dd08:	e0bff617 	ldw	r2,-40(fp)
  80dd0c:	10800044 	addi	r2,r2,1
  80dd10:	e0bff615 	stw	r2,-40(fp)
  80dd14:	e0fffa17 	ldw	r3,-24(fp)
  80dd18:	e13ff617 	ldw	r4,-40(fp)
  80dd1c:	193ff22e 	bgeu	r3,r4,80dce8 <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  80dd20:	e0fff417 	ldw	r3,-48(fp)
  80dd24:	00800044 	movi	r2,1
  80dd28:	10c4983a 	sll	r2,r2,r3
  80dd2c:	e0ffff17 	ldw	r3,-4(fp)
  80dd30:	1887883a 	add	r3,r3,r2
  80dd34:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80dd38:	e13ff517 	ldw	r4,-44(fp)
  80dd3c:	21000044 	addi	r4,r4,1
  80dd40:	e13ff515 	stw	r4,-44(fp)
  80dd44:	e0bff817 	ldw	r2,-32(fp)
  80dd48:	e0fff517 	ldw	r3,-44(fp)
  80dd4c:	10ffe32e 	bgeu	r2,r3,80dcdc <alt_up_pixel_buffer_dma_draw_box+0x1f4>
  80dd50:	00009f06 	br	80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80dd54:	e13ff917 	ldw	r4,-28(fp)
  80dd58:	e13ff515 	stw	r4,-44(fp)
  80dd5c:	00001b06 	br	80ddcc <alt_up_pixel_buffer_dma_draw_box+0x2e4>
			{
				for (x = l_x; x <= r_x; x++)
  80dd60:	e0bffb17 	ldw	r2,-20(fp)
  80dd64:	e0bff615 	stw	r2,-40(fp)
  80dd68:	00000c06 	br	80dd9c <alt_up_pixel_buffer_dma_draw_box+0x2b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80dd6c:	e0fff617 	ldw	r3,-40(fp)
  80dd70:	e0fff617 	ldw	r3,-40(fp)
  80dd74:	18c5883a 	add	r2,r3,r3
  80dd78:	1085883a 	add	r2,r2,r2
  80dd7c:	1007883a 	mov	r3,r2
  80dd80:	e0bfff17 	ldw	r2,-4(fp)
  80dd84:	1885883a 	add	r2,r3,r2
  80dd88:	e0fff717 	ldw	r3,-36(fp)
  80dd8c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dd90:	e13ff617 	ldw	r4,-40(fp)
  80dd94:	21000044 	addi	r4,r4,1
  80dd98:	e13ff615 	stw	r4,-40(fp)
  80dd9c:	e0bffa17 	ldw	r2,-24(fp)
  80dda0:	e0fff617 	ldw	r3,-40(fp)
  80dda4:	10fff12e 	bgeu	r2,r3,80dd6c <alt_up_pixel_buffer_dma_draw_box+0x284>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  80dda8:	e0fff417 	ldw	r3,-48(fp)
  80ddac:	00800044 	movi	r2,1
  80ddb0:	10c4983a 	sll	r2,r2,r3
  80ddb4:	e13fff17 	ldw	r4,-4(fp)
  80ddb8:	2089883a 	add	r4,r4,r2
  80ddbc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80ddc0:	e0bff517 	ldw	r2,-44(fp)
  80ddc4:	10800044 	addi	r2,r2,1
  80ddc8:	e0bff515 	stw	r2,-44(fp)
  80ddcc:	e0fff817 	ldw	r3,-32(fp)
  80ddd0:	e13ff517 	ldw	r4,-44(fp)
  80ddd4:	193fe22e 	bgeu	r3,r4,80dd60 <alt_up_pixel_buffer_dma_draw_box+0x278>
  80ddd8:	00007d06 	br	80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80dddc:	e0bfee17 	ldw	r2,-72(fp)
  80dde0:	10800e17 	ldw	r2,56(r2)
  80dde4:	10800058 	cmpnei	r2,r2,1
  80dde8:	1000221e 	bne	r2,zero,80de74 <alt_up_pixel_buffer_dma_draw_box+0x38c>
			addr = addr + t_y * limit_x;
  80ddec:	e13ff917 	ldw	r4,-28(fp)
  80ddf0:	e17ffe17 	ldw	r5,-8(fp)
  80ddf4:	08017b40 	call	8017b4 <__mulsi3>
  80ddf8:	e0ffff17 	ldw	r3,-4(fp)
  80ddfc:	1887883a 	add	r3,r3,r2
  80de00:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80de04:	e13ff917 	ldw	r4,-28(fp)
  80de08:	e13ff215 	stw	r4,-56(fp)
  80de0c:	00001506 	br	80de64 <alt_up_pixel_buffer_dma_draw_box+0x37c>
			{
				for (x = l_x; x <= r_x; x++)
  80de10:	e0bffb17 	ldw	r2,-20(fp)
  80de14:	e0bff315 	stw	r2,-52(fp)
  80de18:	00000806 	br	80de3c <alt_up_pixel_buffer_dma_draw_box+0x354>
				{
					IOWR_8DIRECT(addr, x, local_color);
  80de1c:	e0ffff17 	ldw	r3,-4(fp)
  80de20:	e0bff317 	ldw	r2,-52(fp)
  80de24:	1885883a 	add	r2,r3,r2
  80de28:	e0fff717 	ldw	r3,-36(fp)
  80de2c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80de30:	e0fff317 	ldw	r3,-52(fp)
  80de34:	18c00044 	addi	r3,r3,1
  80de38:	e0fff315 	stw	r3,-52(fp)
  80de3c:	e13ffa17 	ldw	r4,-24(fp)
  80de40:	e0bff317 	ldw	r2,-52(fp)
  80de44:	20bff52e 	bgeu	r4,r2,80de1c <alt_up_pixel_buffer_dma_draw_box+0x334>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  80de48:	e0ffff17 	ldw	r3,-4(fp)
  80de4c:	e13ffe17 	ldw	r4,-8(fp)
  80de50:	1907883a 	add	r3,r3,r4
  80de54:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80de58:	e0bff217 	ldw	r2,-56(fp)
  80de5c:	10800044 	addi	r2,r2,1
  80de60:	e0bff215 	stw	r2,-56(fp)
  80de64:	e0fff817 	ldw	r3,-32(fp)
  80de68:	e13ff217 	ldw	r4,-56(fp)
  80de6c:	193fe82e 	bgeu	r3,r4,80de10 <alt_up_pixel_buffer_dma_draw_box+0x328>
  80de70:	00005706 	br	80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80de74:	e0bfee17 	ldw	r2,-72(fp)
  80de78:	10800e17 	ldw	r2,56(r2)
  80de7c:	10800098 	cmpnei	r2,r2,2
  80de80:	1000291e 	bne	r2,zero,80df28 <alt_up_pixel_buffer_dma_draw_box+0x440>
			limit_x = limit_x << 1;
  80de84:	e0fffe17 	ldw	r3,-8(fp)
  80de88:	e0fffe17 	ldw	r3,-8(fp)
  80de8c:	18c5883a 	add	r2,r3,r3
  80de90:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80de94:	e13ff917 	ldw	r4,-28(fp)
  80de98:	e17ffe17 	ldw	r5,-8(fp)
  80de9c:	08017b40 	call	8017b4 <__mulsi3>
  80dea0:	e13fff17 	ldw	r4,-4(fp)
  80dea4:	2089883a 	add	r4,r4,r2
  80dea8:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80deac:	e0bff917 	ldw	r2,-28(fp)
  80deb0:	e0bff215 	stw	r2,-56(fp)
  80deb4:	00001806 	br	80df18 <alt_up_pixel_buffer_dma_draw_box+0x430>
			{
				for (x = l_x; x <= r_x; x++)
  80deb8:	e0fffb17 	ldw	r3,-20(fp)
  80debc:	e0fff315 	stw	r3,-52(fp)
  80dec0:	00000b06 	br	80def0 <alt_up_pixel_buffer_dma_draw_box+0x408>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  80dec4:	e13ff317 	ldw	r4,-52(fp)
  80dec8:	e13ff317 	ldw	r4,-52(fp)
  80decc:	2105883a 	add	r2,r4,r4
  80ded0:	1007883a 	mov	r3,r2
  80ded4:	e0bfff17 	ldw	r2,-4(fp)
  80ded8:	1885883a 	add	r2,r3,r2
  80dedc:	e0fff717 	ldw	r3,-36(fp)
  80dee0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80dee4:	e0bff317 	ldw	r2,-52(fp)
  80dee8:	10800044 	addi	r2,r2,1
  80deec:	e0bff315 	stw	r2,-52(fp)
  80def0:	e0fffa17 	ldw	r3,-24(fp)
  80def4:	e13ff317 	ldw	r4,-52(fp)
  80def8:	193ff22e 	bgeu	r3,r4,80dec4 <alt_up_pixel_buffer_dma_draw_box+0x3dc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  80defc:	e0bfff17 	ldw	r2,-4(fp)
  80df00:	e0fffe17 	ldw	r3,-8(fp)
  80df04:	10c5883a 	add	r2,r2,r3
  80df08:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80df0c:	e13ff217 	ldw	r4,-56(fp)
  80df10:	21000044 	addi	r4,r4,1
  80df14:	e13ff215 	stw	r4,-56(fp)
  80df18:	e0bff817 	ldw	r2,-32(fp)
  80df1c:	e0fff217 	ldw	r3,-56(fp)
  80df20:	10ffe52e 	bgeu	r2,r3,80deb8 <alt_up_pixel_buffer_dma_draw_box+0x3d0>
  80df24:	00002a06 	br	80dfd0 <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80df28:	e13ffe17 	ldw	r4,-8(fp)
  80df2c:	e13ffe17 	ldw	r4,-8(fp)
  80df30:	2105883a 	add	r2,r4,r4
  80df34:	1085883a 	add	r2,r2,r2
  80df38:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80df3c:	e13ff917 	ldw	r4,-28(fp)
  80df40:	e17ffe17 	ldw	r5,-8(fp)
  80df44:	08017b40 	call	8017b4 <__mulsi3>
  80df48:	e0ffff17 	ldw	r3,-4(fp)
  80df4c:	1887883a 	add	r3,r3,r2
  80df50:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80df54:	e13ff917 	ldw	r4,-28(fp)
  80df58:	e13ff215 	stw	r4,-56(fp)
  80df5c:	00001906 	br	80dfc4 <alt_up_pixel_buffer_dma_draw_box+0x4dc>
			{
				for (x = l_x; x <= r_x; x++)
  80df60:	e0bffb17 	ldw	r2,-20(fp)
  80df64:	e0bff315 	stw	r2,-52(fp)
  80df68:	00000c06 	br	80df9c <alt_up_pixel_buffer_dma_draw_box+0x4b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  80df6c:	e0fff317 	ldw	r3,-52(fp)
  80df70:	e0fff317 	ldw	r3,-52(fp)
  80df74:	18c5883a 	add	r2,r3,r3
  80df78:	1085883a 	add	r2,r2,r2
  80df7c:	1007883a 	mov	r3,r2
  80df80:	e0bfff17 	ldw	r2,-4(fp)
  80df84:	1885883a 	add	r2,r3,r2
  80df88:	e0fff717 	ldw	r3,-36(fp)
  80df8c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  80df90:	e13ff317 	ldw	r4,-52(fp)
  80df94:	21000044 	addi	r4,r4,1
  80df98:	e13ff315 	stw	r4,-52(fp)
  80df9c:	e0bffa17 	ldw	r2,-24(fp)
  80dfa0:	e0fff317 	ldw	r3,-52(fp)
  80dfa4:	10fff12e 	bgeu	r2,r3,80df6c <alt_up_pixel_buffer_dma_draw_box+0x484>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  80dfa8:	e13fff17 	ldw	r4,-4(fp)
  80dfac:	e0bffe17 	ldw	r2,-8(fp)
  80dfb0:	2089883a 	add	r4,r4,r2
  80dfb4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80dfb8:	e0fff217 	ldw	r3,-56(fp)
  80dfbc:	18c00044 	addi	r3,r3,1
  80dfc0:	e0fff215 	stw	r3,-56(fp)
  80dfc4:	e13ff817 	ldw	r4,-32(fp)
  80dfc8:	e0bff217 	ldw	r2,-56(fp)
  80dfcc:	20bfe42e 	bgeu	r4,r2,80df60 <alt_up_pixel_buffer_dma_draw_box+0x478>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  80dfd0:	e037883a 	mov	sp,fp
  80dfd4:	dfc00117 	ldw	ra,4(sp)
  80dfd8:	df000017 	ldw	fp,0(sp)
  80dfdc:	dec00204 	addi	sp,sp,8
  80dfe0:	f800283a 	ret

0080dfe4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  80dfe4:	defff104 	addi	sp,sp,-60
  80dfe8:	dfc00e15 	stw	ra,56(sp)
  80dfec:	df000d15 	stw	fp,52(sp)
  80dff0:	df000d04 	addi	fp,sp,52
  80dff4:	e13ff315 	stw	r4,-52(fp)
  80dff8:	e17ff415 	stw	r5,-48(fp)
  80dffc:	e1bff515 	stw	r6,-44(fp)
  80e000:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80e004:	e0bff317 	ldw	r2,-52(fp)
  80e008:	10800f17 	ldw	r2,60(r2)
  80e00c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80e010:	e0bff317 	ldw	r2,-52(fp)
  80e014:	10801017 	ldw	r2,64(r2)
  80e018:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  80e01c:	e0bff417 	ldw	r2,-48(fp)
  80e020:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  80e024:	e0fff517 	ldw	r3,-44(fp)
  80e028:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  80e02c:	e13ff617 	ldw	r4,-40(fp)
  80e030:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80e034:	e0800217 	ldw	r2,8(fp)
  80e038:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  80e03c:	e0fffb17 	ldw	r3,-20(fp)
  80e040:	e13ffc17 	ldw	r4,-16(fp)
  80e044:	1900042e 	bgeu	r3,r4,80e058 <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		temp = l_x;
  80e048:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  80e04c:	e0fffb17 	ldw	r3,-20(fp)
  80e050:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  80e054:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  80e058:	e13ffc17 	ldw	r4,-16(fp)
  80e05c:	e0bffe17 	ldw	r2,-8(fp)
  80e060:	2080b12e 	bgeu	r4,r2,80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
  80e064:	e13ffa17 	ldw	r4,-24(fp)
  80e068:	e0fffd17 	ldw	r3,-12(fp)
  80e06c:	20c00136 	bltu	r4,r3,80e074 <alt_up_pixel_buffer_dma_draw_hline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80e070:	0000ad06 	br	80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  80e074:	e0bffb17 	ldw	r2,-20(fp)
  80e078:	e0fffe17 	ldw	r3,-8(fp)
  80e07c:	10c00336 	bltu	r2,r3,80e08c <alt_up_pixel_buffer_dma_draw_hline+0xa8>
	{
		r_x = limit_x - 1;
  80e080:	e13ffe17 	ldw	r4,-8(fp)
  80e084:	213fffc4 	addi	r4,r4,-1
  80e088:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80e08c:	e0800317 	ldw	r2,12(fp)
  80e090:	10800058 	cmpnei	r2,r2,1
  80e094:	1000041e 	bne	r2,zero,80e0a8 <alt_up_pixel_buffer_dma_draw_hline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
  80e098:	e0bff317 	ldw	r2,-52(fp)
  80e09c:	10800c17 	ldw	r2,48(r2)
  80e0a0:	e0bfff15 	stw	r2,-4(fp)
  80e0a4:	00000306 	br	80e0b4 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
  80e0a8:	e0bff317 	ldw	r2,-52(fp)
  80e0ac:	10800b17 	ldw	r2,44(r2)
  80e0b0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80e0b4:	e0bff317 	ldw	r2,-52(fp)
  80e0b8:	10800d17 	ldw	r2,52(r2)
  80e0bc:	1004c03a 	cmpne	r2,r2,zero
  80e0c0:	1000431e 	bne	r2,zero,80e1d0 <alt_up_pixel_buffer_dma_draw_hline+0x1ec>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80e0c4:	e0bff317 	ldw	r2,-52(fp)
  80e0c8:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  80e0cc:	e0fffa17 	ldw	r3,-24(fp)
  80e0d0:	1884983a 	sll	r2,r3,r2
  80e0d4:	e13fff17 	ldw	r4,-4(fp)
  80e0d8:	2089883a 	add	r4,r4,r2
  80e0dc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80e0e0:	e0bff317 	ldw	r2,-52(fp)
  80e0e4:	10800e17 	ldw	r2,56(r2)
  80e0e8:	10800058 	cmpnei	r2,r2,1
  80e0ec:	10000f1e 	bne	r2,zero,80e12c <alt_up_pixel_buffer_dma_draw_hline+0x148>
			for (x = l_x; x <= r_x; x++)
  80e0f0:	e0bffc17 	ldw	r2,-16(fp)
  80e0f4:	e0bff815 	stw	r2,-32(fp)
  80e0f8:	00000806 	br	80e11c <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80e0fc:	e0ffff17 	ldw	r3,-4(fp)
  80e100:	e0bff817 	ldw	r2,-32(fp)
  80e104:	1885883a 	add	r2,r3,r2
  80e108:	e0fff917 	ldw	r3,-28(fp)
  80e10c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80e110:	e0fff817 	ldw	r3,-32(fp)
  80e114:	18c00044 	addi	r3,r3,1
  80e118:	e0fff815 	stw	r3,-32(fp)
  80e11c:	e13ffb17 	ldw	r4,-20(fp)
  80e120:	e0bff817 	ldw	r2,-32(fp)
  80e124:	20bff52e 	bgeu	r4,r2,80e0fc <alt_up_pixel_buffer_dma_draw_hline+0x118>
  80e128:	00007f06 	br	80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80e12c:	e0bff317 	ldw	r2,-52(fp)
  80e130:	10800e17 	ldw	r2,56(r2)
  80e134:	10800098 	cmpnei	r2,r2,2
  80e138:	1000121e 	bne	r2,zero,80e184 <alt_up_pixel_buffer_dma_draw_hline+0x1a0>
			for (x = l_x; x <= r_x; x++)
  80e13c:	e0fffc17 	ldw	r3,-16(fp)
  80e140:	e0fff815 	stw	r3,-32(fp)
  80e144:	00000b06 	br	80e174 <alt_up_pixel_buffer_dma_draw_hline+0x190>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80e148:	e13ff817 	ldw	r4,-32(fp)
  80e14c:	e13ff817 	ldw	r4,-32(fp)
  80e150:	2105883a 	add	r2,r4,r4
  80e154:	1007883a 	mov	r3,r2
  80e158:	e0bfff17 	ldw	r2,-4(fp)
  80e15c:	1885883a 	add	r2,r3,r2
  80e160:	e0fff917 	ldw	r3,-28(fp)
  80e164:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  80e168:	e0bff817 	ldw	r2,-32(fp)
  80e16c:	10800044 	addi	r2,r2,1
  80e170:	e0bff815 	stw	r2,-32(fp)
  80e174:	e0fffb17 	ldw	r3,-20(fp)
  80e178:	e13ff817 	ldw	r4,-32(fp)
  80e17c:	193ff22e 	bgeu	r3,r4,80e148 <alt_up_pixel_buffer_dma_draw_hline+0x164>
  80e180:	00006906 	br	80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80e184:	e0bffc17 	ldw	r2,-16(fp)
  80e188:	e0bff815 	stw	r2,-32(fp)
  80e18c:	00000c06 	br	80e1c0 <alt_up_pixel_buffer_dma_draw_hline+0x1dc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80e190:	e0fff817 	ldw	r3,-32(fp)
  80e194:	e0fff817 	ldw	r3,-32(fp)
  80e198:	18c5883a 	add	r2,r3,r3
  80e19c:	1085883a 	add	r2,r2,r2
  80e1a0:	1007883a 	mov	r3,r2
  80e1a4:	e0bfff17 	ldw	r2,-4(fp)
  80e1a8:	1885883a 	add	r2,r3,r2
  80e1ac:	e0fff917 	ldw	r3,-28(fp)
  80e1b0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  80e1b4:	e13ff817 	ldw	r4,-32(fp)
  80e1b8:	21000044 	addi	r4,r4,1
  80e1bc:	e13ff815 	stw	r4,-32(fp)
  80e1c0:	e0bffb17 	ldw	r2,-20(fp)
  80e1c4:	e0fff817 	ldw	r3,-32(fp)
  80e1c8:	10fff12e 	bgeu	r2,r3,80e190 <alt_up_pixel_buffer_dma_draw_hline+0x1ac>
  80e1cc:	00005606 	br	80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80e1d0:	e0bff317 	ldw	r2,-52(fp)
  80e1d4:	10800e17 	ldw	r2,56(r2)
  80e1d8:	10800058 	cmpnei	r2,r2,1
  80e1dc:	1000151e 	bne	r2,zero,80e234 <alt_up_pixel_buffer_dma_draw_hline+0x250>
			addr = addr + line_y * limit_x;
  80e1e0:	e13ffa17 	ldw	r4,-24(fp)
  80e1e4:	e17ffe17 	ldw	r5,-8(fp)
  80e1e8:	08017b40 	call	8017b4 <__mulsi3>
  80e1ec:	e13fff17 	ldw	r4,-4(fp)
  80e1f0:	2089883a 	add	r4,r4,r2
  80e1f4:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80e1f8:	e0bffc17 	ldw	r2,-16(fp)
  80e1fc:	e0bff715 	stw	r2,-36(fp)
  80e200:	00000806 	br	80e224 <alt_up_pixel_buffer_dma_draw_hline+0x240>
			{
				IOWR_8DIRECT(addr, x, local_color);
  80e204:	e0ffff17 	ldw	r3,-4(fp)
  80e208:	e0bff717 	ldw	r2,-36(fp)
  80e20c:	1885883a 	add	r2,r3,r2
  80e210:	e0fff917 	ldw	r3,-28(fp)
  80e214:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80e218:	e0fff717 	ldw	r3,-36(fp)
  80e21c:	18c00044 	addi	r3,r3,1
  80e220:	e0fff715 	stw	r3,-36(fp)
  80e224:	e13ffb17 	ldw	r4,-20(fp)
  80e228:	e0bff717 	ldw	r2,-36(fp)
  80e22c:	20bff52e 	bgeu	r4,r2,80e204 <alt_up_pixel_buffer_dma_draw_hline+0x220>
  80e230:	00003d06 	br	80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80e234:	e0bff317 	ldw	r2,-52(fp)
  80e238:	10800e17 	ldw	r2,56(r2)
  80e23c:	10800098 	cmpnei	r2,r2,2
  80e240:	10001c1e 	bne	r2,zero,80e2b4 <alt_up_pixel_buffer_dma_draw_hline+0x2d0>
			limit_x = limit_x << 1;
  80e244:	e0fffe17 	ldw	r3,-8(fp)
  80e248:	e0fffe17 	ldw	r3,-8(fp)
  80e24c:	18c5883a 	add	r2,r3,r3
  80e250:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80e254:	e13ffa17 	ldw	r4,-24(fp)
  80e258:	e17ffe17 	ldw	r5,-8(fp)
  80e25c:	08017b40 	call	8017b4 <__mulsi3>
  80e260:	e13fff17 	ldw	r4,-4(fp)
  80e264:	2089883a 	add	r4,r4,r2
  80e268:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80e26c:	e0bffc17 	ldw	r2,-16(fp)
  80e270:	e0bff715 	stw	r2,-36(fp)
  80e274:	00000b06 	br	80e2a4 <alt_up_pixel_buffer_dma_draw_hline+0x2c0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  80e278:	e0fff717 	ldw	r3,-36(fp)
  80e27c:	e0fff717 	ldw	r3,-36(fp)
  80e280:	18c5883a 	add	r2,r3,r3
  80e284:	1007883a 	mov	r3,r2
  80e288:	e0bfff17 	ldw	r2,-4(fp)
  80e28c:	1885883a 	add	r2,r3,r2
  80e290:	e0fff917 	ldw	r3,-28(fp)
  80e294:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80e298:	e13ff717 	ldw	r4,-36(fp)
  80e29c:	21000044 	addi	r4,r4,1
  80e2a0:	e13ff715 	stw	r4,-36(fp)
  80e2a4:	e0bffb17 	ldw	r2,-20(fp)
  80e2a8:	e0fff717 	ldw	r3,-36(fp)
  80e2ac:	10fff22e 	bgeu	r2,r3,80e278 <alt_up_pixel_buffer_dma_draw_hline+0x294>
  80e2b0:	00001d06 	br	80e328 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80e2b4:	e13ffe17 	ldw	r4,-8(fp)
  80e2b8:	e13ffe17 	ldw	r4,-8(fp)
  80e2bc:	2105883a 	add	r2,r4,r4
  80e2c0:	1085883a 	add	r2,r2,r2
  80e2c4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  80e2c8:	e13ffa17 	ldw	r4,-24(fp)
  80e2cc:	e17ffe17 	ldw	r5,-8(fp)
  80e2d0:	08017b40 	call	8017b4 <__mulsi3>
  80e2d4:	e0ffff17 	ldw	r3,-4(fp)
  80e2d8:	1887883a 	add	r3,r3,r2
  80e2dc:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  80e2e0:	e13ffc17 	ldw	r4,-16(fp)
  80e2e4:	e13ff715 	stw	r4,-36(fp)
  80e2e8:	00000c06 	br	80e31c <alt_up_pixel_buffer_dma_draw_hline+0x338>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  80e2ec:	e0fff717 	ldw	r3,-36(fp)
  80e2f0:	e0fff717 	ldw	r3,-36(fp)
  80e2f4:	18c5883a 	add	r2,r3,r3
  80e2f8:	1085883a 	add	r2,r2,r2
  80e2fc:	1007883a 	mov	r3,r2
  80e300:	e0bfff17 	ldw	r2,-4(fp)
  80e304:	1885883a 	add	r2,r3,r2
  80e308:	e0fff917 	ldw	r3,-28(fp)
  80e30c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  80e310:	e13ff717 	ldw	r4,-36(fp)
  80e314:	21000044 	addi	r4,r4,1
  80e318:	e13ff715 	stw	r4,-36(fp)
  80e31c:	e0bffb17 	ldw	r2,-20(fp)
  80e320:	e0fff717 	ldw	r3,-36(fp)
  80e324:	10fff12e 	bgeu	r2,r3,80e2ec <alt_up_pixel_buffer_dma_draw_hline+0x308>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  80e328:	e037883a 	mov	sp,fp
  80e32c:	dfc00117 	ldw	ra,4(sp)
  80e330:	df000017 	ldw	fp,0(sp)
  80e334:	dec00204 	addi	sp,sp,8
  80e338:	f800283a 	ret

0080e33c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  80e33c:	defff004 	addi	sp,sp,-64
  80e340:	dfc00f15 	stw	ra,60(sp)
  80e344:	df000e15 	stw	fp,56(sp)
  80e348:	df000e04 	addi	fp,sp,56
  80e34c:	e13ff215 	stw	r4,-56(fp)
  80e350:	e17ff315 	stw	r5,-52(fp)
  80e354:	e1bff415 	stw	r6,-48(fp)
  80e358:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  80e35c:	e0bff217 	ldw	r2,-56(fp)
  80e360:	10800f17 	ldw	r2,60(r2)
  80e364:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  80e368:	e0bff217 	ldw	r2,-56(fp)
  80e36c:	10801017 	ldw	r2,64(r2)
  80e370:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  80e374:	e0bff317 	ldw	r2,-52(fp)
  80e378:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  80e37c:	e0fff417 	ldw	r3,-48(fp)
  80e380:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  80e384:	e13ff517 	ldw	r4,-44(fp)
  80e388:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  80e38c:	e0800217 	ldw	r2,8(fp)
  80e390:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  80e394:	e0fffa17 	ldw	r3,-24(fp)
  80e398:	e13ffb17 	ldw	r4,-20(fp)
  80e39c:	1900042e 	bgeu	r3,r4,80e3b0 <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		temp = t_y;
  80e3a0:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  80e3a4:	e0fffa17 	ldw	r3,-24(fp)
  80e3a8:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  80e3ac:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  80e3b0:	e13ffc17 	ldw	r4,-16(fp)
  80e3b4:	e0bffe17 	ldw	r2,-8(fp)
  80e3b8:	2080d12e 	bgeu	r4,r2,80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
  80e3bc:	e0fffb17 	ldw	r3,-20(fp)
  80e3c0:	e13ffd17 	ldw	r4,-12(fp)
  80e3c4:	19000136 	bltu	r3,r4,80e3cc <alt_up_pixel_buffer_dma_draw_vline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  80e3c8:	0000cd06 	br	80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  80e3cc:	e0bffa17 	ldw	r2,-24(fp)
  80e3d0:	e0fffd17 	ldw	r3,-12(fp)
  80e3d4:	10c00336 	bltu	r2,r3,80e3e4 <alt_up_pixel_buffer_dma_draw_vline+0xa8>
	{
		b_y = limit_y - 1;
  80e3d8:	e13ffd17 	ldw	r4,-12(fp)
  80e3dc:	213fffc4 	addi	r4,r4,-1
  80e3e0:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  80e3e4:	e0800317 	ldw	r2,12(fp)
  80e3e8:	10800058 	cmpnei	r2,r2,1
  80e3ec:	1000041e 	bne	r2,zero,80e400 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
  80e3f0:	e0bff217 	ldw	r2,-56(fp)
  80e3f4:	10800c17 	ldw	r2,48(r2)
  80e3f8:	e0bfff15 	stw	r2,-4(fp)
  80e3fc:	00000306 	br	80e40c <alt_up_pixel_buffer_dma_draw_vline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
  80e400:	e0bff217 	ldw	r2,-56(fp)
  80e404:	10800b17 	ldw	r2,44(r2)
  80e408:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  80e40c:	e0bff217 	ldw	r2,-56(fp)
  80e410:	10800d17 	ldw	r2,52(r2)
  80e414:	1004c03a 	cmpne	r2,r2,zero
  80e418:	1000571e 	bne	r2,zero,80e578 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  80e41c:	e0bff217 	ldw	r2,-56(fp)
  80e420:	10801317 	ldw	r2,76(r2)
  80e424:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  80e428:	e0bff717 	ldw	r2,-36(fp)
  80e42c:	e0fffb17 	ldw	r3,-20(fp)
  80e430:	1884983a 	sll	r2,r3,r2
  80e434:	e13fff17 	ldw	r4,-4(fp)
  80e438:	2089883a 	add	r4,r4,r2
  80e43c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80e440:	e0bff217 	ldw	r2,-56(fp)
  80e444:	10800e17 	ldw	r2,56(r2)
  80e448:	10800058 	cmpnei	r2,r2,1
  80e44c:	1000151e 	bne	r2,zero,80e4a4 <alt_up_pixel_buffer_dma_draw_vline+0x168>
			for (y = t_y; y <= b_y; y++)
  80e450:	e0bffb17 	ldw	r2,-20(fp)
  80e454:	e0bff815 	stw	r2,-32(fp)
  80e458:	00000e06 	br	80e494 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80e45c:	e0ffff17 	ldw	r3,-4(fp)
  80e460:	e0bffc17 	ldw	r2,-16(fp)
  80e464:	1885883a 	add	r2,r3,r2
  80e468:	e0fff917 	ldw	r3,-28(fp)
  80e46c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80e470:	e0fff717 	ldw	r3,-36(fp)
  80e474:	00800044 	movi	r2,1
  80e478:	10c4983a 	sll	r2,r2,r3
  80e47c:	e0ffff17 	ldw	r3,-4(fp)
  80e480:	1887883a 	add	r3,r3,r2
  80e484:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80e488:	e13ff817 	ldw	r4,-32(fp)
  80e48c:	21000044 	addi	r4,r4,1
  80e490:	e13ff815 	stw	r4,-32(fp)
  80e494:	e0bffa17 	ldw	r2,-24(fp)
  80e498:	e0fff817 	ldw	r3,-32(fp)
  80e49c:	10ffef2e 	bgeu	r2,r3,80e45c <alt_up_pixel_buffer_dma_draw_vline+0x120>
  80e4a0:	00009706 	br	80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80e4a4:	e0bff217 	ldw	r2,-56(fp)
  80e4a8:	10800e17 	ldw	r2,56(r2)
  80e4ac:	10800098 	cmpnei	r2,r2,2
  80e4b0:	1000181e 	bne	r2,zero,80e514 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			for (y = t_y; y <= b_y; y++)
  80e4b4:	e13ffb17 	ldw	r4,-20(fp)
  80e4b8:	e13ff815 	stw	r4,-32(fp)
  80e4bc:	00001106 	br	80e504 <alt_up_pixel_buffer_dma_draw_vline+0x1c8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80e4c0:	e0fffc17 	ldw	r3,-16(fp)
  80e4c4:	e0fffc17 	ldw	r3,-16(fp)
  80e4c8:	18c5883a 	add	r2,r3,r3
  80e4cc:	1007883a 	mov	r3,r2
  80e4d0:	e0bfff17 	ldw	r2,-4(fp)
  80e4d4:	1885883a 	add	r2,r3,r2
  80e4d8:	e0fff917 	ldw	r3,-28(fp)
  80e4dc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80e4e0:	e0fff717 	ldw	r3,-36(fp)
  80e4e4:	00800044 	movi	r2,1
  80e4e8:	10c4983a 	sll	r2,r2,r3
  80e4ec:	e13fff17 	ldw	r4,-4(fp)
  80e4f0:	2089883a 	add	r4,r4,r2
  80e4f4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  80e4f8:	e0bff817 	ldw	r2,-32(fp)
  80e4fc:	10800044 	addi	r2,r2,1
  80e500:	e0bff815 	stw	r2,-32(fp)
  80e504:	e0fffa17 	ldw	r3,-24(fp)
  80e508:	e13ff817 	ldw	r4,-32(fp)
  80e50c:	193fec2e 	bgeu	r3,r4,80e4c0 <alt_up_pixel_buffer_dma_draw_vline+0x184>
  80e510:	00007b06 	br	80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80e514:	e0bffb17 	ldw	r2,-20(fp)
  80e518:	e0bff815 	stw	r2,-32(fp)
  80e51c:	00001206 	br	80e568 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80e520:	e0fffc17 	ldw	r3,-16(fp)
  80e524:	e0fffc17 	ldw	r3,-16(fp)
  80e528:	18c5883a 	add	r2,r3,r3
  80e52c:	1085883a 	add	r2,r2,r2
  80e530:	1007883a 	mov	r3,r2
  80e534:	e0bfff17 	ldw	r2,-4(fp)
  80e538:	1885883a 	add	r2,r3,r2
  80e53c:	e0fff917 	ldw	r3,-28(fp)
  80e540:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  80e544:	e0fff717 	ldw	r3,-36(fp)
  80e548:	00800044 	movi	r2,1
  80e54c:	10c4983a 	sll	r2,r2,r3
  80e550:	e13fff17 	ldw	r4,-4(fp)
  80e554:	2089883a 	add	r4,r4,r2
  80e558:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  80e55c:	e0bff817 	ldw	r2,-32(fp)
  80e560:	10800044 	addi	r2,r2,1
  80e564:	e0bff815 	stw	r2,-32(fp)
  80e568:	e0fffa17 	ldw	r3,-24(fp)
  80e56c:	e13ff817 	ldw	r4,-32(fp)
  80e570:	193feb2e 	bgeu	r3,r4,80e520 <alt_up_pixel_buffer_dma_draw_vline+0x1e4>
  80e574:	00006206 	br	80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  80e578:	e0bff217 	ldw	r2,-56(fp)
  80e57c:	10800e17 	ldw	r2,56(r2)
  80e580:	10800058 	cmpnei	r2,r2,1
  80e584:	1000191e 	bne	r2,zero,80e5ec <alt_up_pixel_buffer_dma_draw_vline+0x2b0>
			addr = addr + t_y * limit_x;
  80e588:	e13ffb17 	ldw	r4,-20(fp)
  80e58c:	e17ffe17 	ldw	r5,-8(fp)
  80e590:	08017b40 	call	8017b4 <__mulsi3>
  80e594:	e0ffff17 	ldw	r3,-4(fp)
  80e598:	1887883a 	add	r3,r3,r2
  80e59c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e5a0:	e13ffb17 	ldw	r4,-20(fp)
  80e5a4:	e13ff615 	stw	r4,-40(fp)
  80e5a8:	00000c06 	br	80e5dc <alt_up_pixel_buffer_dma_draw_vline+0x2a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  80e5ac:	e0ffff17 	ldw	r3,-4(fp)
  80e5b0:	e0bffc17 	ldw	r2,-16(fp)
  80e5b4:	1885883a 	add	r2,r3,r2
  80e5b8:	e0fff917 	ldw	r3,-28(fp)
  80e5bc:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  80e5c0:	e0bfff17 	ldw	r2,-4(fp)
  80e5c4:	e0fffe17 	ldw	r3,-8(fp)
  80e5c8:	10c5883a 	add	r2,r2,r3
  80e5cc:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e5d0:	e13ff617 	ldw	r4,-40(fp)
  80e5d4:	21000044 	addi	r4,r4,1
  80e5d8:	e13ff615 	stw	r4,-40(fp)
  80e5dc:	e0bffa17 	ldw	r2,-24(fp)
  80e5e0:	e0fff617 	ldw	r3,-40(fp)
  80e5e4:	10fff12e 	bgeu	r2,r3,80e5ac <alt_up_pixel_buffer_dma_draw_vline+0x270>
  80e5e8:	00004506 	br	80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  80e5ec:	e0bff217 	ldw	r2,-56(fp)
  80e5f0:	10800e17 	ldw	r2,56(r2)
  80e5f4:	10800098 	cmpnei	r2,r2,2
  80e5f8:	1000201e 	bne	r2,zero,80e67c <alt_up_pixel_buffer_dma_draw_vline+0x340>
			limit_x = limit_x << 1;
  80e5fc:	e13ffe17 	ldw	r4,-8(fp)
  80e600:	e13ffe17 	ldw	r4,-8(fp)
  80e604:	2105883a 	add	r2,r4,r4
  80e608:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80e60c:	e13ffb17 	ldw	r4,-20(fp)
  80e610:	e17ffe17 	ldw	r5,-8(fp)
  80e614:	08017b40 	call	8017b4 <__mulsi3>
  80e618:	e0ffff17 	ldw	r3,-4(fp)
  80e61c:	1887883a 	add	r3,r3,r2
  80e620:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e624:	e13ffb17 	ldw	r4,-20(fp)
  80e628:	e13ff615 	stw	r4,-40(fp)
  80e62c:	00000f06 	br	80e66c <alt_up_pixel_buffer_dma_draw_vline+0x330>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  80e630:	e0fffc17 	ldw	r3,-16(fp)
  80e634:	e0fffc17 	ldw	r3,-16(fp)
  80e638:	18c5883a 	add	r2,r3,r3
  80e63c:	1007883a 	mov	r3,r2
  80e640:	e0bfff17 	ldw	r2,-4(fp)
  80e644:	1885883a 	add	r2,r3,r2
  80e648:	e0fff917 	ldw	r3,-28(fp)
  80e64c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  80e650:	e13fff17 	ldw	r4,-4(fp)
  80e654:	e0bffe17 	ldw	r2,-8(fp)
  80e658:	2089883a 	add	r4,r4,r2
  80e65c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e660:	e0fff617 	ldw	r3,-40(fp)
  80e664:	18c00044 	addi	r3,r3,1
  80e668:	e0fff615 	stw	r3,-40(fp)
  80e66c:	e13ffa17 	ldw	r4,-24(fp)
  80e670:	e0bff617 	ldw	r2,-40(fp)
  80e674:	20bfee2e 	bgeu	r4,r2,80e630 <alt_up_pixel_buffer_dma_draw_vline+0x2f4>
  80e678:	00002106 	br	80e700 <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  80e67c:	e0fffe17 	ldw	r3,-8(fp)
  80e680:	e0fffe17 	ldw	r3,-8(fp)
  80e684:	18c5883a 	add	r2,r3,r3
  80e688:	1085883a 	add	r2,r2,r2
  80e68c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  80e690:	e13ffb17 	ldw	r4,-20(fp)
  80e694:	e17ffe17 	ldw	r5,-8(fp)
  80e698:	08017b40 	call	8017b4 <__mulsi3>
  80e69c:	e13fff17 	ldw	r4,-4(fp)
  80e6a0:	2089883a 	add	r4,r4,r2
  80e6a4:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  80e6a8:	e0bffb17 	ldw	r2,-20(fp)
  80e6ac:	e0bff615 	stw	r2,-40(fp)
  80e6b0:	00001006 	br	80e6f4 <alt_up_pixel_buffer_dma_draw_vline+0x3b8>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  80e6b4:	e0fffc17 	ldw	r3,-16(fp)
  80e6b8:	e0fffc17 	ldw	r3,-16(fp)
  80e6bc:	18c5883a 	add	r2,r3,r3
  80e6c0:	1085883a 	add	r2,r2,r2
  80e6c4:	1007883a 	mov	r3,r2
  80e6c8:	e0bfff17 	ldw	r2,-4(fp)
  80e6cc:	1885883a 	add	r2,r3,r2
  80e6d0:	e0fff917 	ldw	r3,-28(fp)
  80e6d4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  80e6d8:	e13fff17 	ldw	r4,-4(fp)
  80e6dc:	e0bffe17 	ldw	r2,-8(fp)
  80e6e0:	2089883a 	add	r4,r4,r2
  80e6e4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  80e6e8:	e0fff617 	ldw	r3,-40(fp)
  80e6ec:	18c00044 	addi	r3,r3,1
  80e6f0:	e0fff615 	stw	r3,-40(fp)
  80e6f4:	e13ffa17 	ldw	r4,-24(fp)
  80e6f8:	e0bff617 	ldw	r2,-40(fp)
  80e6fc:	20bfed2e 	bgeu	r4,r2,80e6b4 <alt_up_pixel_buffer_dma_draw_vline+0x378>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  80e700:	e037883a 	mov	sp,fp
  80e704:	dfc00117 	ldw	ra,4(sp)
  80e708:	df000017 	ldw	fp,0(sp)
  80e70c:	dec00204 	addi	sp,sp,8
  80e710:	f800283a 	ret

0080e714 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  80e714:	defff804 	addi	sp,sp,-32
  80e718:	dfc00715 	stw	ra,28(sp)
  80e71c:	df000615 	stw	fp,24(sp)
  80e720:	df000604 	addi	fp,sp,24
  80e724:	e13ffc15 	stw	r4,-16(fp)
  80e728:	e17ffd15 	stw	r5,-12(fp)
  80e72c:	e1bffe15 	stw	r6,-8(fp)
  80e730:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  80e734:	e0800317 	ldw	r2,12(fp)
  80e738:	d8800015 	stw	r2,0(sp)
  80e73c:	e0800417 	ldw	r2,16(fp)
  80e740:	d8800115 	stw	r2,4(sp)
  80e744:	e13ffc17 	ldw	r4,-16(fp)
  80e748:	e17ffd17 	ldw	r5,-12(fp)
  80e74c:	e1bfff17 	ldw	r6,-4(fp)
  80e750:	e1fffe17 	ldw	r7,-8(fp)
  80e754:	080dfe40 	call	80dfe4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  80e758:	e0800317 	ldw	r2,12(fp)
  80e75c:	d8800015 	stw	r2,0(sp)
  80e760:	e0800417 	ldw	r2,16(fp)
  80e764:	d8800115 	stw	r2,4(sp)
  80e768:	e13ffc17 	ldw	r4,-16(fp)
  80e76c:	e17ffd17 	ldw	r5,-12(fp)
  80e770:	e1bfff17 	ldw	r6,-4(fp)
  80e774:	e1c00217 	ldw	r7,8(fp)
  80e778:	080dfe40 	call	80dfe4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  80e77c:	e0800317 	ldw	r2,12(fp)
  80e780:	d8800015 	stw	r2,0(sp)
  80e784:	e0800417 	ldw	r2,16(fp)
  80e788:	d8800115 	stw	r2,4(sp)
  80e78c:	e13ffc17 	ldw	r4,-16(fp)
  80e790:	e17ffd17 	ldw	r5,-12(fp)
  80e794:	e1bffe17 	ldw	r6,-8(fp)
  80e798:	e1c00217 	ldw	r7,8(fp)
  80e79c:	080e33c0 	call	80e33c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  80e7a0:	e0800317 	ldw	r2,12(fp)
  80e7a4:	d8800015 	stw	r2,0(sp)
  80e7a8:	e0800417 	ldw	r2,16(fp)
  80e7ac:	d8800115 	stw	r2,4(sp)
  80e7b0:	e13ffc17 	ldw	r4,-16(fp)
  80e7b4:	e17fff17 	ldw	r5,-4(fp)
  80e7b8:	e1bffe17 	ldw	r6,-8(fp)
  80e7bc:	e1c00217 	ldw	r7,8(fp)
  80e7c0:	080e33c0 	call	80e33c <alt_up_pixel_buffer_dma_draw_vline>
}
  80e7c4:	e037883a 	mov	sp,fp
  80e7c8:	dfc00117 	ldw	ra,4(sp)
  80e7cc:	df000017 	ldw	fp,0(sp)
  80e7d0:	dec00204 	addi	sp,sp,8
  80e7d4:	f800283a 	ret

0080e7d8 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  80e7d8:	defffa04 	addi	sp,sp,-24
  80e7dc:	dfc00515 	stw	ra,20(sp)
  80e7e0:	df000415 	stw	fp,16(sp)
  80e7e4:	df000404 	addi	fp,sp,16
  80e7e8:	e13ffc15 	stw	r4,-16(fp)
  80e7ec:	e17ffd15 	stw	r5,-12(fp)
  80e7f0:	e1bffe15 	stw	r6,-8(fp)
  80e7f4:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  80e7f8:	e0c00317 	ldw	r3,12(fp)
  80e7fc:	1804c03a 	cmpne	r2,r3,zero
  80e800:	10000b1e 	bne	r2,zero,80e830 <helper_plot_pixel+0x58>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  80e804:	e13ffd17 	ldw	r4,-12(fp)
  80e808:	e17fff17 	ldw	r5,-4(fp)
  80e80c:	08017b40 	call	8017b4 <__mulsi3>
  80e810:	e0fffe17 	ldw	r3,-8(fp)
  80e814:	10c5883a 	add	r2,r2,r3
  80e818:	1007883a 	mov	r3,r2
  80e81c:	e0bffc17 	ldw	r2,-16(fp)
  80e820:	1885883a 	add	r2,r3,r2
  80e824:	e0c00217 	ldw	r3,8(fp)
  80e828:	10c00025 	stbio	r3,0(r2)
  80e82c:	00001b06 	br	80e89c <helper_plot_pixel+0xc4>
	else if (mode == 1)
  80e830:	e0c00317 	ldw	r3,12(fp)
  80e834:	18800058 	cmpnei	r2,r3,1
  80e838:	10000c1e 	bne	r2,zero,80e86c <helper_plot_pixel+0x94>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  80e83c:	e13ffd17 	ldw	r4,-12(fp)
  80e840:	e17fff17 	ldw	r5,-4(fp)
  80e844:	08017b40 	call	8017b4 <__mulsi3>
  80e848:	e0fffe17 	ldw	r3,-8(fp)
  80e84c:	10c5883a 	add	r2,r2,r3
  80e850:	1085883a 	add	r2,r2,r2
  80e854:	1007883a 	mov	r3,r2
  80e858:	e0bffc17 	ldw	r2,-16(fp)
  80e85c:	1885883a 	add	r2,r3,r2
  80e860:	e0c00217 	ldw	r3,8(fp)
  80e864:	10c0002d 	sthio	r3,0(r2)
  80e868:	00000c06 	br	80e89c <helper_plot_pixel+0xc4>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  80e86c:	e13ffd17 	ldw	r4,-12(fp)
  80e870:	e17fff17 	ldw	r5,-4(fp)
  80e874:	08017b40 	call	8017b4 <__mulsi3>
  80e878:	e0fffe17 	ldw	r3,-8(fp)
  80e87c:	10c5883a 	add	r2,r2,r3
  80e880:	1085883a 	add	r2,r2,r2
  80e884:	1085883a 	add	r2,r2,r2
  80e888:	1007883a 	mov	r3,r2
  80e88c:	e0bffc17 	ldw	r2,-16(fp)
  80e890:	1885883a 	add	r2,r3,r2
  80e894:	e0c00217 	ldw	r3,8(fp)
  80e898:	10c00035 	stwio	r3,0(r2)
}
  80e89c:	e037883a 	mov	sp,fp
  80e8a0:	dfc00117 	ldw	ra,4(sp)
  80e8a4:	df000017 	ldw	fp,0(sp)
  80e8a8:	dec00204 	addi	sp,sp,8
  80e8ac:	f800283a 	ret

0080e8b0 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  80e8b0:	deffe404 	addi	sp,sp,-112
  80e8b4:	dfc01b15 	stw	ra,108(sp)
  80e8b8:	df001a15 	stw	fp,104(sp)
  80e8bc:	df001a04 	addi	fp,sp,104
  80e8c0:	e13fe815 	stw	r4,-96(fp)
  80e8c4:	e17fe915 	stw	r5,-92(fp)
  80e8c8:	e1bfea15 	stw	r6,-88(fp)
  80e8cc:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  80e8d0:	e0bfe917 	ldw	r2,-92(fp)
  80e8d4:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  80e8d8:	e0ffea17 	ldw	r3,-88(fp)
  80e8dc:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  80e8e0:	e13feb17 	ldw	r4,-84(fp)
  80e8e4:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  80e8e8:	e0800217 	ldw	r2,8(fp)
  80e8ec:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  80e8f0:	e0fff717 	ldw	r3,-36(fp)
  80e8f4:	e13ff917 	ldw	r4,-28(fp)
  80e8f8:	1905c83a 	sub	r2,r3,r4
  80e8fc:	e0bfff15 	stw	r2,-4(fp)
  80e900:	e0ffff17 	ldw	r3,-4(fp)
  80e904:	1804403a 	cmpge	r2,r3,zero
  80e908:	1000031e 	bne	r2,zero,80e918 <alt_up_pixel_buffer_dma_draw_line+0x68>
  80e90c:	e13fff17 	ldw	r4,-4(fp)
  80e910:	0109c83a 	sub	r4,zero,r4
  80e914:	e13fff15 	stw	r4,-4(fp)
  80e918:	e0fff817 	ldw	r3,-32(fp)
  80e91c:	e13ffa17 	ldw	r4,-24(fp)
  80e920:	1905c83a 	sub	r2,r3,r4
  80e924:	e0bffe15 	stw	r2,-8(fp)
  80e928:	e0fffe17 	ldw	r3,-8(fp)
  80e92c:	1804403a 	cmpge	r2,r3,zero
  80e930:	1000031e 	bne	r2,zero,80e940 <alt_up_pixel_buffer_dma_draw_line+0x90>
  80e934:	e13ffe17 	ldw	r4,-8(fp)
  80e938:	0109c83a 	sub	r4,zero,r4
  80e93c:	e13ffe15 	stw	r4,-8(fp)
  80e940:	e0fffe17 	ldw	r3,-8(fp)
  80e944:	e13fff17 	ldw	r4,-4(fp)
  80e948:	1904803a 	cmplt	r2,r3,r4
  80e94c:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  80e950:	e0bfe817 	ldw	r2,-96(fp)
  80e954:	10800e17 	ldw	r2,56(r2)
  80e958:	10800060 	cmpeqi	r2,r2,1
  80e95c:	10000c1e 	bne	r2,zero,80e990 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  80e960:	e0bfe817 	ldw	r2,-96(fp)
  80e964:	10800e17 	ldw	r2,56(r2)
  80e968:	10800098 	cmpnei	r2,r2,2
  80e96c:	1000031e 	bne	r2,zero,80e97c <alt_up_pixel_buffer_dma_draw_line+0xcc>
  80e970:	00800044 	movi	r2,1
  80e974:	e0bffc15 	stw	r2,-16(fp)
  80e978:	00000206 	br	80e984 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  80e97c:	00c00084 	movi	r3,2
  80e980:	e0fffc15 	stw	r3,-16(fp)
  80e984:	e13ffc17 	ldw	r4,-16(fp)
  80e988:	e13ffd15 	stw	r4,-12(fp)
  80e98c:	00000106 	br	80e994 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  80e990:	e03ffd15 	stw	zero,-12(fp)
  80e994:	e0bffd17 	ldw	r2,-12(fp)
  80e998:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  80e99c:	e0c00317 	ldw	r3,12(fp)
  80e9a0:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  80e9a4:	e0bfe817 	ldw	r2,-96(fp)
  80e9a8:	10800d17 	ldw	r2,52(r2)
  80e9ac:	1004c03a 	cmpne	r2,r2,zero
  80e9b0:	1000091e 	bne	r2,zero,80e9d8 <alt_up_pixel_buffer_dma_draw_line+0x128>
  80e9b4:	e0bfe817 	ldw	r2,-96(fp)
  80e9b8:	10c01317 	ldw	r3,76(r2)
  80e9bc:	e0bfef17 	ldw	r2,-68(fp)
  80e9c0:	1885c83a 	sub	r2,r3,r2
  80e9c4:	1007883a 	mov	r3,r2
  80e9c8:	00800044 	movi	r2,1
  80e9cc:	10c4983a 	sll	r2,r2,r3
  80e9d0:	e0bffb15 	stw	r2,-20(fp)
  80e9d4:	00000306 	br	80e9e4 <alt_up_pixel_buffer_dma_draw_line+0x134>
  80e9d8:	e0bfe817 	ldw	r2,-96(fp)
  80e9dc:	10800f17 	ldw	r2,60(r2)
  80e9e0:	e0bffb15 	stw	r2,-20(fp)
  80e9e4:	e13ffb17 	ldw	r4,-20(fp)
  80e9e8:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  80e9ec:	e0800417 	ldw	r2,16(fp)
  80e9f0:	10800058 	cmpnei	r2,r2,1
  80e9f4:	1000041e 	bne	r2,zero,80ea08 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  80e9f8:	e0bfe817 	ldw	r2,-96(fp)
  80e9fc:	10800c17 	ldw	r2,48(r2)
  80ea00:	e0bfed15 	stw	r2,-76(fp)
  80ea04:	00000306 	br	80ea14 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  80ea08:	e0bfe817 	ldw	r2,-96(fp)
  80ea0c:	10800b17 	ldw	r2,44(r2)
  80ea10:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  80ea14:	e0fff603 	ldbu	r3,-40(fp)
  80ea18:	18803fcc 	andi	r2,r3,255
  80ea1c:	1080201c 	xori	r2,r2,128
  80ea20:	10bfe004 	addi	r2,r2,-128
  80ea24:	10800050 	cmplti	r2,r2,1
  80ea28:	10000c1e 	bne	r2,zero,80ea5c <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  80ea2c:	e13ffa17 	ldw	r4,-24(fp)
  80ea30:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  80ea34:	e0bff917 	ldw	r2,-28(fp)
  80ea38:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  80ea3c:	e0fff317 	ldw	r3,-52(fp)
  80ea40:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  80ea44:	e13ff817 	ldw	r4,-32(fp)
  80ea48:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  80ea4c:	e0bff717 	ldw	r2,-36(fp)
  80ea50:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  80ea54:	e0fff317 	ldw	r3,-52(fp)
  80ea58:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  80ea5c:	e13ff817 	ldw	r4,-32(fp)
  80ea60:	e0bffa17 	ldw	r2,-24(fp)
  80ea64:	20800c0e 	bge	r4,r2,80ea98 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  80ea68:	e0fffa17 	ldw	r3,-24(fp)
  80ea6c:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  80ea70:	e13ff817 	ldw	r4,-32(fp)
  80ea74:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  80ea78:	e0bff317 	ldw	r2,-52(fp)
  80ea7c:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  80ea80:	e0fff917 	ldw	r3,-28(fp)
  80ea84:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  80ea88:	e13ff717 	ldw	r4,-36(fp)
  80ea8c:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  80ea90:	e0bff317 	ldw	r2,-52(fp)
  80ea94:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  80ea98:	e0fff817 	ldw	r3,-32(fp)
  80ea9c:	e13ffa17 	ldw	r4,-24(fp)
  80eaa0:	1907c83a 	sub	r3,r3,r4
  80eaa4:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  80eaa8:	e0fff717 	ldw	r3,-36(fp)
  80eaac:	e13ff917 	ldw	r4,-28(fp)
  80eab0:	1905c83a 	sub	r2,r3,r4
  80eab4:	e0bff415 	stw	r2,-48(fp)
  80eab8:	e0fff417 	ldw	r3,-48(fp)
  80eabc:	1804403a 	cmpge	r2,r3,zero
  80eac0:	1000031e 	bne	r2,zero,80ead0 <alt_up_pixel_buffer_dma_draw_line+0x220>
  80eac4:	e13ff417 	ldw	r4,-48(fp)
  80eac8:	0109c83a 	sub	r4,zero,r4
  80eacc:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  80ead0:	e0fff517 	ldw	r3,-44(fp)
  80ead4:	1804d7fa 	srli	r2,r3,31
  80ead8:	e13ff517 	ldw	r4,-44(fp)
  80eadc:	1105883a 	add	r2,r2,r4
  80eae0:	1005d07a 	srai	r2,r2,1
  80eae4:	0085c83a 	sub	r2,zero,r2
  80eae8:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  80eaec:	e0bff917 	ldw	r2,-28(fp)
  80eaf0:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  80eaf4:	e0fff917 	ldw	r3,-28(fp)
  80eaf8:	e13ff717 	ldw	r4,-36(fp)
  80eafc:	1900030e 	bge	r3,r4,80eb0c <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  80eb00:	00800044 	movi	r2,1
  80eb04:	e0bff215 	stw	r2,-56(fp)
  80eb08:	00000206 	br	80eb14 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  80eb0c:	00ffffc4 	movi	r3,-1
  80eb10:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  80eb14:	e13ff603 	ldbu	r4,-40(fp)
  80eb18:	20803fcc 	andi	r2,r4,255
  80eb1c:	1080201c 	xori	r2,r2,128
  80eb20:	10bfe004 	addi	r2,r2,-128
  80eb24:	10800058 	cmpnei	r2,r2,1
  80eb28:	1000221e 	bne	r2,zero,80ebb4 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  80eb2c:	e0bffa17 	ldw	r2,-24(fp)
  80eb30:	e0bff115 	stw	r2,-60(fp)
  80eb34:	00001b06 	br	80eba4 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  80eb38:	e0ffee17 	ldw	r3,-72(fp)
  80eb3c:	d8c00015 	stw	r3,0(sp)
  80eb40:	e13fef17 	ldw	r4,-68(fp)
  80eb44:	d9000115 	stw	r4,4(sp)
  80eb48:	e13fed17 	ldw	r4,-76(fp)
  80eb4c:	e17fec17 	ldw	r5,-80(fp)
  80eb50:	e1bff017 	ldw	r6,-64(fp)
  80eb54:	e1fff117 	ldw	r7,-60(fp)
  80eb58:	080e7d80 	call	80e7d8 <helper_plot_pixel>
			error = error + deltay;
  80eb5c:	e0bff317 	ldw	r2,-52(fp)
  80eb60:	e0fff417 	ldw	r3,-48(fp)
  80eb64:	10c5883a 	add	r2,r2,r3
  80eb68:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  80eb6c:	e13ff317 	ldw	r4,-52(fp)
  80eb70:	20800050 	cmplti	r2,r4,1
  80eb74:	1000081e 	bne	r2,zero,80eb98 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  80eb78:	e0bff017 	ldw	r2,-64(fp)
  80eb7c:	e0fff217 	ldw	r3,-56(fp)
  80eb80:	10c5883a 	add	r2,r2,r3
  80eb84:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  80eb88:	e13ff317 	ldw	r4,-52(fp)
  80eb8c:	e0bff517 	ldw	r2,-44(fp)
  80eb90:	2089c83a 	sub	r4,r4,r2
  80eb94:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  80eb98:	e0fff117 	ldw	r3,-60(fp)
  80eb9c:	18c00044 	addi	r3,r3,1
  80eba0:	e0fff115 	stw	r3,-60(fp)
  80eba4:	e13ff817 	ldw	r4,-32(fp)
  80eba8:	e0bff117 	ldw	r2,-60(fp)
  80ebac:	20bfe20e 	bge	r4,r2,80eb38 <alt_up_pixel_buffer_dma_draw_line+0x288>
  80ebb0:	00002106 	br	80ec38 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80ebb4:	e0fffa17 	ldw	r3,-24(fp)
  80ebb8:	e0fff115 	stw	r3,-60(fp)
  80ebbc:	00001b06 	br	80ec2c <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  80ebc0:	e13fee17 	ldw	r4,-72(fp)
  80ebc4:	d9000015 	stw	r4,0(sp)
  80ebc8:	e0bfef17 	ldw	r2,-68(fp)
  80ebcc:	d8800115 	stw	r2,4(sp)
  80ebd0:	e13fed17 	ldw	r4,-76(fp)
  80ebd4:	e17fec17 	ldw	r5,-80(fp)
  80ebd8:	e1bff117 	ldw	r6,-60(fp)
  80ebdc:	e1fff017 	ldw	r7,-64(fp)
  80ebe0:	080e7d80 	call	80e7d8 <helper_plot_pixel>
			error = error + deltay;
  80ebe4:	e0fff317 	ldw	r3,-52(fp)
  80ebe8:	e13ff417 	ldw	r4,-48(fp)
  80ebec:	1907883a 	add	r3,r3,r4
  80ebf0:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  80ebf4:	e0fff317 	ldw	r3,-52(fp)
  80ebf8:	18800050 	cmplti	r2,r3,1
  80ebfc:	1000081e 	bne	r2,zero,80ec20 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  80ec00:	e13ff017 	ldw	r4,-64(fp)
  80ec04:	e0bff217 	ldw	r2,-56(fp)
  80ec08:	2089883a 	add	r4,r4,r2
  80ec0c:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  80ec10:	e0fff317 	ldw	r3,-52(fp)
  80ec14:	e13ff517 	ldw	r4,-44(fp)
  80ec18:	1907c83a 	sub	r3,r3,r4
  80ec1c:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  80ec20:	e0bff117 	ldw	r2,-60(fp)
  80ec24:	10800044 	addi	r2,r2,1
  80ec28:	e0bff115 	stw	r2,-60(fp)
  80ec2c:	e0fff817 	ldw	r3,-32(fp)
  80ec30:	e13ff117 	ldw	r4,-60(fp)
  80ec34:	193fe20e 	bge	r3,r4,80ebc0 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  80ec38:	e037883a 	mov	sp,fp
  80ec3c:	dfc00117 	ldw	ra,4(sp)
  80ec40:	df000017 	ldw	fp,0(sp)
  80ec44:	dec00204 	addi	sp,sp,8
  80ec48:	f800283a 	ret

0080ec4c <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  80ec4c:	defffa04 	addi	sp,sp,-24
  80ec50:	dfc00515 	stw	ra,20(sp)
  80ec54:	df000415 	stw	fp,16(sp)
  80ec58:	df000404 	addi	fp,sp,16
  80ec5c:	e13ffe15 	stw	r4,-8(fp)
  80ec60:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  80ec64:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  80ec68:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  80ec6c:	1005003a 	cmpeq	r2,r2,zero
  80ec70:	1000221e 	bne	r2,zero,80ecfc <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  80ec74:	00803fc4 	movi	r2,255
  80ec78:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80ec7c:	d0a72d17 	ldw	r2,-25420(gp)
  80ec80:	1009883a 	mov	r4,r2
  80ec84:	e0fffe17 	ldw	r3,-8(fp)
  80ec88:	e0bfff17 	ldw	r2,-4(fp)
  80ec8c:	1885883a 	add	r2,r3,r2
  80ec90:	1006927a 	slli	r3,r2,9
  80ec94:	2005883a 	mov	r2,r4
  80ec98:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80ec9c:	d0a72c17 	ldw	r2,-25424(gp)
  80eca0:	1007883a 	mov	r3,r2
  80eca4:	00800604 	movi	r2,24
  80eca8:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80ecac:	d0a72917 	ldw	r2,-25436(gp)
  80ecb0:	1080002b 	ldhuio	r2,0(r2)
  80ecb4:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  80ecb8:	e0bffc0b 	ldhu	r2,-16(fp)
  80ecbc:	10bfffcc 	andi	r2,r2,65535
  80ecc0:	1080010c 	andi	r2,r2,4
  80ecc4:	1004c03a 	cmpne	r2,r2,zero
  80ecc8:	103ff81e 	bne	r2,zero,80ecac <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  80eccc:	e0bffc0b 	ldhu	r2,-16(fp)
  80ecd0:	10bfffcc 	andi	r2,r2,65535
  80ecd4:	1080040c 	andi	r2,r2,16
  80ecd8:	1004c03a 	cmpne	r2,r2,zero
  80ecdc:	1000071e 	bne	r2,zero,80ecfc <Write_Sector_Data+0xb0>
			result = true;
  80ece0:	00800044 	movi	r2,1
  80ece4:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  80ece8:	d0273215 	stw	zero,-25400(gp)
			current_sector_index = sector_index + partition_offset;
  80ecec:	e0fffe17 	ldw	r3,-8(fp)
  80ecf0:	e0bfff17 	ldw	r2,-4(fp)
  80ecf4:	1885883a 	add	r2,r3,r2
  80ecf8:	d0a73315 	stw	r2,-25396(gp)
		}
	}
	return result;
  80ecfc:	e0bffd17 	ldw	r2,-12(fp)
}
  80ed00:	e037883a 	mov	sp,fp
  80ed04:	dfc00117 	ldw	ra,4(sp)
  80ed08:	df000017 	ldw	fp,0(sp)
  80ed0c:	dec00204 	addi	sp,sp,8
  80ed10:	f800283a 	ret

0080ed14 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  80ed14:	defffd04 	addi	sp,sp,-12
  80ed18:	dfc00215 	stw	ra,8(sp)
  80ed1c:	df000115 	stw	fp,4(sp)
  80ed20:	df000104 	addi	fp,sp,4
	bool result = true;
  80ed24:	00800044 	movi	r2,1
  80ed28:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  80ed2c:	d0a73217 	ldw	r2,-25400(gp)
  80ed30:	1005003a 	cmpeq	r2,r2,zero
  80ed34:	1000051e 	bne	r2,zero,80ed4c <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  80ed38:	d0a73317 	ldw	r2,-25396(gp)
  80ed3c:	1009883a 	mov	r4,r2
  80ed40:	000b883a 	mov	r5,zero
  80ed44:	080ec4c0 	call	80ec4c <Write_Sector_Data>
  80ed48:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  80ed4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed50:	e037883a 	mov	sp,fp
  80ed54:	dfc00117 	ldw	ra,4(sp)
  80ed58:	df000017 	ldw	fp,0(sp)
  80ed5c:	dec00204 	addi	sp,sp,8
  80ed60:	f800283a 	ret

0080ed64 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  80ed64:	defff904 	addi	sp,sp,-28
  80ed68:	dfc00615 	stw	ra,24(sp)
  80ed6c:	df000515 	stw	fp,20(sp)
  80ed70:	df000504 	addi	fp,sp,20
  80ed74:	e13ffd15 	stw	r4,-12(fp)
  80ed78:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  80ed7c:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  80ed80:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  80ed84:	1005003a 	cmpeq	r2,r2,zero
  80ed88:	10002d1e 	bne	r2,zero,80ee40 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  80ed8c:	00803fc4 	movi	r2,255
  80ed90:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  80ed94:	d0a73217 	ldw	r2,-25400(gp)
  80ed98:	1005003a 	cmpeq	r2,r2,zero
  80ed9c:	1000081e 	bne	r2,zero,80edc0 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  80eda0:	d0a73317 	ldw	r2,-25396(gp)
  80eda4:	1009883a 	mov	r4,r2
  80eda8:	000b883a 	mov	r5,zero
  80edac:	080ec4c0 	call	80ec4c <Write_Sector_Data>
  80edb0:	1004c03a 	cmpne	r2,r2,zero
  80edb4:	1000021e 	bne	r2,zero,80edc0 <Read_Sector_Data+0x5c>
				return false;
  80edb8:	e03fff15 	stw	zero,-4(fp)
  80edbc:	00002206 	br	80ee48 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80edc0:	d0a72d17 	ldw	r2,-25420(gp)
  80edc4:	1009883a 	mov	r4,r2
  80edc8:	e0fffd17 	ldw	r3,-12(fp)
  80edcc:	e0bffe17 	ldw	r2,-8(fp)
  80edd0:	1885883a 	add	r2,r3,r2
  80edd4:	1006927a 	slli	r3,r2,9
  80edd8:	2005883a 	mov	r2,r4
  80eddc:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  80ede0:	d0a72c17 	ldw	r2,-25424(gp)
  80ede4:	1007883a 	mov	r3,r2
  80ede8:	00800444 	movi	r2,17
  80edec:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80edf0:	d0a72917 	ldw	r2,-25436(gp)
  80edf4:	1080002b 	ldhuio	r2,0(r2)
  80edf8:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  80edfc:	e0bffb0b 	ldhu	r2,-20(fp)
  80ee00:	10bfffcc 	andi	r2,r2,65535
  80ee04:	1080010c 	andi	r2,r2,4
  80ee08:	1004c03a 	cmpne	r2,r2,zero
  80ee0c:	103ff81e 	bne	r2,zero,80edf0 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  80ee10:	e0bffb0b 	ldhu	r2,-20(fp)
  80ee14:	10bfffcc 	andi	r2,r2,65535
  80ee18:	1080040c 	andi	r2,r2,16
  80ee1c:	1004c03a 	cmpne	r2,r2,zero
  80ee20:	1000071e 	bne	r2,zero,80ee40 <Read_Sector_Data+0xdc>
			result = true;
  80ee24:	00800044 	movi	r2,1
  80ee28:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  80ee2c:	d0273215 	stw	zero,-25400(gp)
			current_sector_index = sector_index + partition_offset;
  80ee30:	e0fffd17 	ldw	r3,-12(fp)
  80ee34:	e0bffe17 	ldw	r2,-8(fp)
  80ee38:	1885883a 	add	r2,r3,r2
  80ee3c:	d0a73315 	stw	r2,-25396(gp)
		}
	}
	return result;
  80ee40:	e0bffc17 	ldw	r2,-16(fp)
  80ee44:	e0bfff15 	stw	r2,-4(fp)
  80ee48:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee4c:	e037883a 	mov	sp,fp
  80ee50:	dfc00117 	ldw	ra,4(sp)
  80ee54:	df000017 	ldw	fp,0(sp)
  80ee58:	dec00204 	addi	sp,sp,8
  80ee5c:	f800283a 	ret

0080ee60 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80ee60:	defffa04 	addi	sp,sp,-24
  80ee64:	dfc00515 	stw	ra,20(sp)
  80ee68:	df000415 	stw	fp,16(sp)
  80ee6c:	df000404 	addi	fp,sp,16
  80ee70:	e13ffd15 	stw	r4,-12(fp)
  80ee74:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  80ee78:	e0bffd17 	ldw	r2,-12(fp)
  80ee7c:	1006d23a 	srli	r3,r2,8
  80ee80:	d0a72f17 	ldw	r2,-25412(gp)
  80ee84:	1885883a 	add	r2,r3,r2
  80ee88:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  80ee8c:	00802174 	movhi	r2,133
  80ee90:	1081f104 	addi	r2,r2,1988
  80ee94:	10c01117 	ldw	r3,68(r2)
  80ee98:	e0bffc17 	ldw	r2,-16(fp)
  80ee9c:	10c5883a 	add	r2,r2,r3
  80eea0:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  80eea4:	d0e73317 	ldw	r3,-25396(gp)
  80eea8:	e0bffc17 	ldw	r2,-16(fp)
  80eeac:	10c00726 	beq	r2,r3,80eecc <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  80eeb0:	e13ffc17 	ldw	r4,-16(fp)
  80eeb4:	000b883a 	mov	r5,zero
  80eeb8:	080ed640 	call	80ed64 <Read_Sector_Data>
  80eebc:	1004c03a 	cmpne	r2,r2,zero
  80eec0:	1000021e 	bne	r2,zero,80eecc <get_cluster_flag+0x6c>
			return false;
  80eec4:	e03fff15 	stw	zero,-4(fp)
  80eec8:	00000d06 	br	80ef00 <get_cluster_flag+0xa0>
		}
	}
	*flag
  80eecc:	d0a73117 	ldw	r2,-25404(gp)
  80eed0:	10800a17 	ldw	r2,40(r2)
  80eed4:	1007883a 	mov	r3,r2
  80eed8:	e0bffd17 	ldw	r2,-12(fp)
  80eedc:	10803fcc 	andi	r2,r2,255
  80eee0:	1085883a 	add	r2,r2,r2
  80eee4:	1885883a 	add	r2,r3,r2
  80eee8:	1080002b 	ldhuio	r2,0(r2)
  80eeec:	1007883a 	mov	r3,r2
  80eef0:	e0bffe17 	ldw	r2,-8(fp)
  80eef4:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  80eef8:	00800044 	movi	r2,1
  80eefc:	e0bfff15 	stw	r2,-4(fp)
  80ef00:	e0bfff17 	ldw	r2,-4(fp)
}
  80ef04:	e037883a 	mov	sp,fp
  80ef08:	dfc00117 	ldw	ra,4(sp)
  80ef0c:	df000017 	ldw	fp,0(sp)
  80ef10:	dec00204 	addi	sp,sp,8
  80ef14:	f800283a 	ret

0080ef18 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  80ef18:	defff904 	addi	sp,sp,-28
  80ef1c:	dfc00615 	stw	ra,24(sp)
  80ef20:	df000515 	stw	fp,20(sp)
  80ef24:	df000504 	addi	fp,sp,20
  80ef28:	e13ffc15 	stw	r4,-16(fp)
  80ef2c:	e1bffe15 	stw	r6,-8(fp)
  80ef30:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  80ef34:	e0bffc17 	ldw	r2,-16(fp)
  80ef38:	1006d23a 	srli	r3,r2,8
  80ef3c:	d0a72f17 	ldw	r2,-25412(gp)
  80ef40:	1885883a 	add	r2,r3,r2
  80ef44:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  80ef48:	e0bffe17 	ldw	r2,-8(fp)
  80ef4c:	1005003a 	cmpeq	r2,r2,zero
  80ef50:	1000071e 	bne	r2,zero,80ef70 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  80ef54:	00802174 	movhi	r2,133
  80ef58:	1081f104 	addi	r2,r2,1988
  80ef5c:	10c01117 	ldw	r3,68(r2)
  80ef60:	e0bffb17 	ldw	r2,-20(fp)
  80ef64:	10c5883a 	add	r2,r2,r3
  80ef68:	e0bffb15 	stw	r2,-20(fp)
  80ef6c:	00000606 	br	80ef88 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  80ef70:	00802174 	movhi	r2,133
  80ef74:	1081f104 	addi	r2,r2,1988
  80ef78:	10c01217 	ldw	r3,72(r2)
  80ef7c:	e0bffb17 	ldw	r2,-20(fp)
  80ef80:	10c5883a 	add	r2,r2,r3
  80ef84:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  80ef88:	d0e73317 	ldw	r3,-25396(gp)
  80ef8c:	e0bffb17 	ldw	r2,-20(fp)
  80ef90:	10c00726 	beq	r2,r3,80efb0 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  80ef94:	e13ffb17 	ldw	r4,-20(fp)
  80ef98:	000b883a 	mov	r5,zero
  80ef9c:	080ed640 	call	80ed64 <Read_Sector_Data>
  80efa0:	1004c03a 	cmpne	r2,r2,zero
  80efa4:	1000021e 	bne	r2,zero,80efb0 <mark_cluster+0x98>
			return false;
  80efa8:	e03fff15 	stw	zero,-4(fp)
  80efac:	00000d06 	br	80efe4 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  80efb0:	d0a73117 	ldw	r2,-25404(gp)
  80efb4:	10800a17 	ldw	r2,40(r2)
  80efb8:	1007883a 	mov	r3,r2
  80efbc:	e0bffc17 	ldw	r2,-16(fp)
  80efc0:	10803fcc 	andi	r2,r2,255
  80efc4:	1085883a 	add	r2,r2,r2
  80efc8:	1885883a 	add	r2,r3,r2
  80efcc:	e0fffd0f 	ldh	r3,-12(fp)
  80efd0:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  80efd4:	00800044 	movi	r2,1
  80efd8:	d0a73215 	stw	r2,-25400(gp)
	return true;
  80efdc:	00800044 	movi	r2,1
  80efe0:	e0bfff15 	stw	r2,-4(fp)
  80efe4:	e0bfff17 	ldw	r2,-4(fp)
}
  80efe8:	e037883a 	mov	sp,fp
  80efec:	dfc00117 	ldw	ra,4(sp)
  80eff0:	df000017 	ldw	fp,0(sp)
  80eff4:	dec00204 	addi	sp,sp,8
  80eff8:	f800283a 	ret

0080effc <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  80effc:	defff704 	addi	sp,sp,-36
  80f000:	dfc00815 	stw	ra,32(sp)
  80f004:	df000715 	stw	fp,28(sp)
  80f008:	df000704 	addi	fp,sp,28
	bool result = false;
  80f00c:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  80f010:	0009883a 	mov	r4,zero
  80f014:	000b883a 	mov	r5,zero
  80f018:	08131940 	call	813194 <Read_Sector_Data_Attempt_CRC>
  80f01c:	1005003a 	cmpeq	r2,r2,zero
  80f020:	10005c1e 	bne	r2,zero,80f194 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  80f024:	d0a73117 	ldw	r2,-25404(gp)
  80f028:	10800a17 	ldw	r2,40(r2)
  80f02c:	10807f84 	addi	r2,r2,510
  80f030:	1080002b 	ldhuio	r2,0(r2)
  80f034:	10bfffcc 	andi	r2,r2,65535
  80f038:	10a0001c 	xori	r2,r2,32768
  80f03c:	10a00004 	addi	r2,r2,-32768
  80f040:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  80f044:	e0bffd17 	ldw	r2,-12(fp)
  80f048:	10ffffcc 	andi	r3,r2,65535
  80f04c:	00aa9554 	movui	r2,43605
  80f050:	1880501e 	bne	r3,r2,80f194 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  80f054:	e03ffe15 	stw	zero,-8(fp)
  80f058:	00004b06 	br	80f188 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  80f05c:	e0bffe17 	ldw	r2,-8(fp)
  80f060:	1004913a 	slli	r2,r2,4
  80f064:	10806f84 	addi	r2,r2,446
  80f068:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  80f06c:	d0a73117 	ldw	r2,-25404(gp)
  80f070:	10800a17 	ldw	r2,40(r2)
  80f074:	1007883a 	mov	r3,r2
  80f078:	e0bffa17 	ldw	r2,-24(fp)
  80f07c:	1885883a 	add	r2,r3,r2
  80f080:	10800104 	addi	r2,r2,4
  80f084:	10800023 	ldbuio	r2,0(r2)
  80f088:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  80f08c:	e0bff907 	ldb	r2,-28(fp)
  80f090:	10800060 	cmpeqi	r2,r2,1
  80f094:	1000091e 	bne	r2,zero,80f0bc <Check_for_Master_Boot_Record+0xc0>
  80f098:	e0bff907 	ldb	r2,-28(fp)
  80f09c:	10800120 	cmpeqi	r2,r2,4
  80f0a0:	1000061e 	bne	r2,zero,80f0bc <Check_for_Master_Boot_Record+0xc0>
  80f0a4:	e0bff907 	ldb	r2,-28(fp)
  80f0a8:	108001a0 	cmpeqi	r2,r2,6
  80f0ac:	1000031e 	bne	r2,zero,80f0bc <Check_for_Master_Boot_Record+0xc0>
  80f0b0:	e0bff907 	ldb	r2,-28(fp)
  80f0b4:	10800398 	cmpnei	r2,r2,14
  80f0b8:	1000301e 	bne	r2,zero,80f17c <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  80f0bc:	d0a73117 	ldw	r2,-25404(gp)
  80f0c0:	10800a17 	ldw	r2,40(r2)
  80f0c4:	1007883a 	mov	r3,r2
  80f0c8:	e0bffa17 	ldw	r2,-24(fp)
  80f0cc:	1885883a 	add	r2,r3,r2
  80f0d0:	10800284 	addi	r2,r2,10
  80f0d4:	1080002b 	ldhuio	r2,0(r2)
  80f0d8:	10bfffcc 	andi	r2,r2,65535
  80f0dc:	1008943a 	slli	r4,r2,16
  80f0e0:	d0a73117 	ldw	r2,-25404(gp)
  80f0e4:	10800a17 	ldw	r2,40(r2)
  80f0e8:	1007883a 	mov	r3,r2
  80f0ec:	e0bffa17 	ldw	r2,-24(fp)
  80f0f0:	1885883a 	add	r2,r3,r2
  80f0f4:	10800204 	addi	r2,r2,8
  80f0f8:	1080002b 	ldhuio	r2,0(r2)
  80f0fc:	10bfffcc 	andi	r2,r2,65535
  80f100:	2084b03a 	or	r2,r4,r2
  80f104:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  80f108:	d0a73117 	ldw	r2,-25404(gp)
  80f10c:	10800a17 	ldw	r2,40(r2)
  80f110:	1007883a 	mov	r3,r2
  80f114:	e0bffa17 	ldw	r2,-24(fp)
  80f118:	1885883a 	add	r2,r3,r2
  80f11c:	10800384 	addi	r2,r2,14
  80f120:	1080002b 	ldhuio	r2,0(r2)
  80f124:	10bfffcc 	andi	r2,r2,65535
  80f128:	1008943a 	slli	r4,r2,16
  80f12c:	d0a73117 	ldw	r2,-25404(gp)
  80f130:	10800a17 	ldw	r2,40(r2)
  80f134:	1007883a 	mov	r3,r2
  80f138:	e0bffa17 	ldw	r2,-24(fp)
  80f13c:	1885883a 	add	r2,r3,r2
  80f140:	10800304 	addi	r2,r2,12
  80f144:	1080002b 	ldhuio	r2,0(r2)
  80f148:	10bfffcc 	andi	r2,r2,65535
  80f14c:	2084b03a 	or	r2,r4,r2
  80f150:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  80f154:	e0bffb17 	ldw	r2,-20(fp)
  80f158:	10800050 	cmplti	r2,r2,1
  80f15c:	1000071e 	bne	r2,zero,80f17c <Check_for_Master_Boot_Record+0x180>
						result = true;
  80f160:	00800044 	movi	r2,1
  80f164:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  80f168:	e0bffb17 	ldw	r2,-20(fp)
  80f16c:	d0a73015 	stw	r2,-25408(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  80f170:	e0bffc17 	ldw	r2,-16(fp)
  80f174:	d0a72f15 	stw	r2,-25412(gp)
						break;
  80f178:	00000606 	br	80f194 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  80f17c:	e0bffe17 	ldw	r2,-8(fp)
  80f180:	10800044 	addi	r2,r2,1
  80f184:	e0bffe15 	stw	r2,-8(fp)
  80f188:	e0bffe17 	ldw	r2,-8(fp)
  80f18c:	10800110 	cmplti	r2,r2,4
  80f190:	103fb21e 	bne	r2,zero,80f05c <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  80f194:	e0bfff17 	ldw	r2,-4(fp)
}
  80f198:	e037883a 	mov	sp,fp
  80f19c:	dfc00117 	ldw	ra,4(sp)
  80f1a0:	df000017 	ldw	fp,0(sp)
  80f1a4:	dec00204 	addi	sp,sp,8
  80f1a8:	f800283a 	ret

0080f1ac <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  80f1ac:	defff804 	addi	sp,sp,-32
  80f1b0:	dfc00715 	stw	ra,28(sp)
  80f1b4:	df000615 	stw	fp,24(sp)
  80f1b8:	df000604 	addi	fp,sp,24
  80f1bc:	e13ffc15 	stw	r4,-16(fp)
  80f1c0:	e17ffd15 	stw	r5,-12(fp)
  80f1c4:	e1bffe15 	stw	r6,-8(fp)
  80f1c8:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  80f1cc:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  80f1d0:	e0bffc17 	ldw	r2,-16(fp)
  80f1d4:	108007cc 	andi	r2,r2,31
  80f1d8:	1004c03a 	cmpne	r2,r2,zero
  80f1dc:	10008e1e 	bne	r2,zero,80f418 <Read_File_Record_At_Offset+0x26c>
  80f1e0:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  80f1e4:	1005003a 	cmpeq	r2,r2,zero
  80f1e8:	10008b1e 	bne	r2,zero,80f418 <Read_File_Record_At_Offset+0x26c>
  80f1ec:	d0a72817 	ldw	r2,-25440(gp)
  80f1f0:	1005003a 	cmpeq	r2,r2,zero
  80f1f4:	1000881e 	bne	r2,zero,80f418 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  80f1f8:	e03ffa15 	stw	zero,-24(fp)
  80f1fc:	00001006 	br	80f240 <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  80f200:	e17ffa17 	ldw	r5,-24(fp)
  80f204:	d0a73117 	ldw	r2,-25404(gp)
  80f208:	10800a17 	ldw	r2,40(r2)
  80f20c:	1009883a 	mov	r4,r2
  80f210:	e0fffc17 	ldw	r3,-16(fp)
  80f214:	e0bffa17 	ldw	r2,-24(fp)
  80f218:	1885883a 	add	r2,r3,r2
  80f21c:	2085883a 	add	r2,r4,r2
  80f220:	10800023 	ldbuio	r2,0(r2)
  80f224:	1007883a 	mov	r3,r2
  80f228:	e0bffd17 	ldw	r2,-12(fp)
  80f22c:	1145883a 	add	r2,r2,r5
  80f230:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  80f234:	e0bffa17 	ldw	r2,-24(fp)
  80f238:	10800044 	addi	r2,r2,1
  80f23c:	e0bffa15 	stw	r2,-24(fp)
  80f240:	e0bffa17 	ldw	r2,-24(fp)
  80f244:	10800210 	cmplti	r2,r2,8
  80f248:	103fed1e 	bne	r2,zero,80f200 <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  80f24c:	e03ffa15 	stw	zero,-24(fp)
  80f250:	00001206 	br	80f29c <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  80f254:	e17ffa17 	ldw	r5,-24(fp)
  80f258:	d0a73117 	ldw	r2,-25404(gp)
  80f25c:	10800a17 	ldw	r2,40(r2)
  80f260:	1009883a 	mov	r4,r2
  80f264:	e0fffc17 	ldw	r3,-16(fp)
  80f268:	e0bffa17 	ldw	r2,-24(fp)
  80f26c:	1885883a 	add	r2,r3,r2
  80f270:	2085883a 	add	r2,r4,r2
  80f274:	10800204 	addi	r2,r2,8
  80f278:	10800023 	ldbuio	r2,0(r2)
  80f27c:	1007883a 	mov	r3,r2
  80f280:	e0bffd17 	ldw	r2,-12(fp)
  80f284:	2885883a 	add	r2,r5,r2
  80f288:	10800204 	addi	r2,r2,8
  80f28c:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  80f290:	e0bffa17 	ldw	r2,-24(fp)
  80f294:	10800044 	addi	r2,r2,1
  80f298:	e0bffa15 	stw	r2,-24(fp)
  80f29c:	e0bffa17 	ldw	r2,-24(fp)
  80f2a0:	108000d0 	cmplti	r2,r2,3
  80f2a4:	103feb1e 	bne	r2,zero,80f254 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  80f2a8:	d0a73117 	ldw	r2,-25404(gp)
  80f2ac:	10800a17 	ldw	r2,40(r2)
  80f2b0:	1007883a 	mov	r3,r2
  80f2b4:	e0bffc17 	ldw	r2,-16(fp)
  80f2b8:	1885883a 	add	r2,r3,r2
  80f2bc:	108002c4 	addi	r2,r2,11
  80f2c0:	10800023 	ldbuio	r2,0(r2)
  80f2c4:	1007883a 	mov	r3,r2
  80f2c8:	e0bffd17 	ldw	r2,-12(fp)
  80f2cc:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  80f2d0:	d0a73117 	ldw	r2,-25404(gp)
  80f2d4:	10800a17 	ldw	r2,40(r2)
  80f2d8:	1007883a 	mov	r3,r2
  80f2dc:	e0bffc17 	ldw	r2,-16(fp)
  80f2e0:	1885883a 	add	r2,r3,r2
  80f2e4:	10800384 	addi	r2,r2,14
  80f2e8:	1080002b 	ldhuio	r2,0(r2)
  80f2ec:	1007883a 	mov	r3,r2
  80f2f0:	e0bffd17 	ldw	r2,-12(fp)
  80f2f4:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  80f2f8:	d0a73117 	ldw	r2,-25404(gp)
  80f2fc:	10800a17 	ldw	r2,40(r2)
  80f300:	1007883a 	mov	r3,r2
  80f304:	e0bffc17 	ldw	r2,-16(fp)
  80f308:	1885883a 	add	r2,r3,r2
  80f30c:	10800404 	addi	r2,r2,16
  80f310:	1080002b 	ldhuio	r2,0(r2)
  80f314:	1007883a 	mov	r3,r2
  80f318:	e0bffd17 	ldw	r2,-12(fp)
  80f31c:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  80f320:	d0a73117 	ldw	r2,-25404(gp)
  80f324:	10800a17 	ldw	r2,40(r2)
  80f328:	1007883a 	mov	r3,r2
  80f32c:	e0bffc17 	ldw	r2,-16(fp)
  80f330:	1885883a 	add	r2,r3,r2
  80f334:	10800484 	addi	r2,r2,18
  80f338:	1080002b 	ldhuio	r2,0(r2)
  80f33c:	1007883a 	mov	r3,r2
  80f340:	e0bffd17 	ldw	r2,-12(fp)
  80f344:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  80f348:	d0a73117 	ldw	r2,-25404(gp)
  80f34c:	10800a17 	ldw	r2,40(r2)
  80f350:	1007883a 	mov	r3,r2
  80f354:	e0bffc17 	ldw	r2,-16(fp)
  80f358:	1885883a 	add	r2,r3,r2
  80f35c:	10800584 	addi	r2,r2,22
  80f360:	1080002b 	ldhuio	r2,0(r2)
  80f364:	1007883a 	mov	r3,r2
  80f368:	e0bffd17 	ldw	r2,-12(fp)
  80f36c:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  80f370:	d0a73117 	ldw	r2,-25404(gp)
  80f374:	10800a17 	ldw	r2,40(r2)
  80f378:	1007883a 	mov	r3,r2
  80f37c:	e0bffc17 	ldw	r2,-16(fp)
  80f380:	1885883a 	add	r2,r3,r2
  80f384:	10800604 	addi	r2,r2,24
  80f388:	1080002b 	ldhuio	r2,0(r2)
  80f38c:	1007883a 	mov	r3,r2
  80f390:	e0bffd17 	ldw	r2,-12(fp)
  80f394:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  80f398:	d0a73117 	ldw	r2,-25404(gp)
  80f39c:	10800a17 	ldw	r2,40(r2)
  80f3a0:	1007883a 	mov	r3,r2
  80f3a4:	e0bffc17 	ldw	r2,-16(fp)
  80f3a8:	1885883a 	add	r2,r3,r2
  80f3ac:	10800684 	addi	r2,r2,26
  80f3b0:	1080002b 	ldhuio	r2,0(r2)
  80f3b4:	1007883a 	mov	r3,r2
  80f3b8:	e0bffd17 	ldw	r2,-12(fp)
  80f3bc:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  80f3c0:	d0a73117 	ldw	r2,-25404(gp)
  80f3c4:	10800a17 	ldw	r2,40(r2)
  80f3c8:	1007883a 	mov	r3,r2
  80f3cc:	e0bffc17 	ldw	r2,-16(fp)
  80f3d0:	1885883a 	add	r2,r3,r2
  80f3d4:	10800704 	addi	r2,r2,28
  80f3d8:	10800037 	ldwio	r2,0(r2)
  80f3dc:	1007883a 	mov	r3,r2
  80f3e0:	e0bffd17 	ldw	r2,-12(fp)
  80f3e4:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  80f3e8:	e0fffd17 	ldw	r3,-12(fp)
  80f3ec:	e0bffe17 	ldw	r2,-8(fp)
  80f3f0:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  80f3f4:	e0fffd17 	ldw	r3,-12(fp)
  80f3f8:	e0bfff17 	ldw	r2,-4(fp)
  80f3fc:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  80f400:	e0bffc17 	ldw	r2,-16(fp)
  80f404:	1007883a 	mov	r3,r2
  80f408:	e0bffd17 	ldw	r2,-12(fp)
  80f40c:	10c00c0d 	sth	r3,48(r2)
		result = true;
  80f410:	00800044 	movi	r2,1
  80f414:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  80f418:	e0bffb17 	ldw	r2,-20(fp)
}
  80f41c:	e037883a 	mov	sp,fp
  80f420:	dfc00117 	ldw	ra,4(sp)
  80f424:	df000017 	ldw	fp,0(sp)
  80f428:	dec00204 	addi	sp,sp,8
  80f42c:	f800283a 	ret

0080f430 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  80f430:	defff904 	addi	sp,sp,-28
  80f434:	dfc00615 	stw	ra,24(sp)
  80f438:	df000515 	stw	fp,20(sp)
  80f43c:	df000504 	addi	fp,sp,20
  80f440:	e13ffe15 	stw	r4,-8(fp)
  80f444:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  80f448:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  80f44c:	e0bffe17 	ldw	r2,-8(fp)
  80f450:	108007cc 	andi	r2,r2,31
  80f454:	1004c03a 	cmpne	r2,r2,zero
  80f458:	10009d1e 	bne	r2,zero,80f6d0 <Write_File_Record_At_Offset+0x2a0>
  80f45c:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  80f460:	1005003a 	cmpeq	r2,r2,zero
  80f464:	10009a1e 	bne	r2,zero,80f6d0 <Write_File_Record_At_Offset+0x2a0>
  80f468:	d0a72817 	ldw	r2,-25440(gp)
  80f46c:	1005003a 	cmpeq	r2,r2,zero
  80f470:	1000971e 	bne	r2,zero,80f6d0 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  80f474:	e03ffc15 	stw	zero,-16(fp)
  80f478:	00001e06 	br	80f4f4 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  80f47c:	e0bffc17 	ldw	r2,-16(fp)
  80f480:	10c00044 	addi	r3,r2,1
  80f484:	e0bfff17 	ldw	r2,-4(fp)
  80f488:	10c5883a 	add	r2,r2,r3
  80f48c:	10800003 	ldbu	r2,0(r2)
  80f490:	10803fcc 	andi	r2,r2,255
  80f494:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  80f498:	e0bffb0f 	ldh	r2,-20(fp)
  80f49c:	1004923a 	slli	r2,r2,8
  80f4a0:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  80f4a4:	e0fffc17 	ldw	r3,-16(fp)
  80f4a8:	e0bfff17 	ldw	r2,-4(fp)
  80f4ac:	10c5883a 	add	r2,r2,r3
  80f4b0:	10800003 	ldbu	r2,0(r2)
  80f4b4:	10c03fcc 	andi	r3,r2,255
  80f4b8:	e0bffb0b 	ldhu	r2,-20(fp)
  80f4bc:	10c4b03a 	or	r2,r2,r3
  80f4c0:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80f4c4:	d0a73117 	ldw	r2,-25404(gp)
  80f4c8:	10800a17 	ldw	r2,40(r2)
  80f4cc:	1009883a 	mov	r4,r2
  80f4d0:	e0fffe17 	ldw	r3,-8(fp)
  80f4d4:	e0bffc17 	ldw	r2,-16(fp)
  80f4d8:	1885883a 	add	r2,r3,r2
  80f4dc:	2085883a 	add	r2,r4,r2
  80f4e0:	e0fffb0f 	ldh	r3,-20(fp)
  80f4e4:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  80f4e8:	e0bffc17 	ldw	r2,-16(fp)
  80f4ec:	10800084 	addi	r2,r2,2
  80f4f0:	e0bffc15 	stw	r2,-16(fp)
  80f4f4:	e0bffc17 	ldw	r2,-16(fp)
  80f4f8:	10800210 	cmplti	r2,r2,8
  80f4fc:	103fdf1e 	bne	r2,zero,80f47c <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  80f500:	e03ffc15 	stw	zero,-16(fp)
  80f504:	00001306 	br	80f554 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  80f508:	d0a73117 	ldw	r2,-25404(gp)
  80f50c:	10800a17 	ldw	r2,40(r2)
  80f510:	1009883a 	mov	r4,r2
  80f514:	e0fffe17 	ldw	r3,-8(fp)
  80f518:	e0bffc17 	ldw	r2,-16(fp)
  80f51c:	1885883a 	add	r2,r3,r2
  80f520:	2085883a 	add	r2,r4,r2
  80f524:	11000204 	addi	r4,r2,8
  80f528:	e0fffc17 	ldw	r3,-16(fp)
  80f52c:	e0bfff17 	ldw	r2,-4(fp)
  80f530:	1885883a 	add	r2,r3,r2
  80f534:	10800204 	addi	r2,r2,8
  80f538:	10800003 	ldbu	r2,0(r2)
  80f53c:	10c03fcc 	andi	r3,r2,255
  80f540:	2005883a 	mov	r2,r4
  80f544:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  80f548:	e0bffc17 	ldw	r2,-16(fp)
  80f54c:	10800044 	addi	r2,r2,1
  80f550:	e0bffc15 	stw	r2,-16(fp)
  80f554:	e0bffc17 	ldw	r2,-16(fp)
  80f558:	108000d0 	cmplti	r2,r2,3
  80f55c:	103fea1e 	bne	r2,zero,80f508 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  80f560:	d0a73117 	ldw	r2,-25404(gp)
  80f564:	10800a17 	ldw	r2,40(r2)
  80f568:	1007883a 	mov	r3,r2
  80f56c:	e0bffe17 	ldw	r2,-8(fp)
  80f570:	1885883a 	add	r2,r3,r2
  80f574:	110002c4 	addi	r4,r2,11
  80f578:	e0bfff17 	ldw	r2,-4(fp)
  80f57c:	108002c3 	ldbu	r2,11(r2)
  80f580:	10c03fcc 	andi	r3,r2,255
  80f584:	2005883a 	mov	r2,r4
  80f588:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  80f58c:	d0a73117 	ldw	r2,-25404(gp)
  80f590:	10800a17 	ldw	r2,40(r2)
  80f594:	1007883a 	mov	r3,r2
  80f598:	e0bffe17 	ldw	r2,-8(fp)
  80f59c:	1885883a 	add	r2,r3,r2
  80f5a0:	11000384 	addi	r4,r2,14
  80f5a4:	e0bfff17 	ldw	r2,-4(fp)
  80f5a8:	1080030b 	ldhu	r2,12(r2)
  80f5ac:	10ffffcc 	andi	r3,r2,65535
  80f5b0:	2005883a 	mov	r2,r4
  80f5b4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  80f5b8:	d0a73117 	ldw	r2,-25404(gp)
  80f5bc:	10800a17 	ldw	r2,40(r2)
  80f5c0:	1007883a 	mov	r3,r2
  80f5c4:	e0bffe17 	ldw	r2,-8(fp)
  80f5c8:	1885883a 	add	r2,r3,r2
  80f5cc:	11000404 	addi	r4,r2,16
  80f5d0:	e0bfff17 	ldw	r2,-4(fp)
  80f5d4:	1080038b 	ldhu	r2,14(r2)
  80f5d8:	10ffffcc 	andi	r3,r2,65535
  80f5dc:	2005883a 	mov	r2,r4
  80f5e0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  80f5e4:	d0a73117 	ldw	r2,-25404(gp)
  80f5e8:	10800a17 	ldw	r2,40(r2)
  80f5ec:	1007883a 	mov	r3,r2
  80f5f0:	e0bffe17 	ldw	r2,-8(fp)
  80f5f4:	1885883a 	add	r2,r3,r2
  80f5f8:	11000484 	addi	r4,r2,18
  80f5fc:	e0bfff17 	ldw	r2,-4(fp)
  80f600:	1080040b 	ldhu	r2,16(r2)
  80f604:	10ffffcc 	andi	r3,r2,65535
  80f608:	2005883a 	mov	r2,r4
  80f60c:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  80f610:	d0a73117 	ldw	r2,-25404(gp)
  80f614:	10800a17 	ldw	r2,40(r2)
  80f618:	1007883a 	mov	r3,r2
  80f61c:	e0bffe17 	ldw	r2,-8(fp)
  80f620:	1885883a 	add	r2,r3,r2
  80f624:	11000584 	addi	r4,r2,22
  80f628:	e0bfff17 	ldw	r2,-4(fp)
  80f62c:	1080048b 	ldhu	r2,18(r2)
  80f630:	10ffffcc 	andi	r3,r2,65535
  80f634:	2005883a 	mov	r2,r4
  80f638:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  80f63c:	d0a73117 	ldw	r2,-25404(gp)
  80f640:	10800a17 	ldw	r2,40(r2)
  80f644:	1007883a 	mov	r3,r2
  80f648:	e0bffe17 	ldw	r2,-8(fp)
  80f64c:	1885883a 	add	r2,r3,r2
  80f650:	11000604 	addi	r4,r2,24
  80f654:	e0bfff17 	ldw	r2,-4(fp)
  80f658:	1080050b 	ldhu	r2,20(r2)
  80f65c:	10ffffcc 	andi	r3,r2,65535
  80f660:	2005883a 	mov	r2,r4
  80f664:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  80f668:	d0a73117 	ldw	r2,-25404(gp)
  80f66c:	10800a17 	ldw	r2,40(r2)
  80f670:	1007883a 	mov	r3,r2
  80f674:	e0bffe17 	ldw	r2,-8(fp)
  80f678:	1885883a 	add	r2,r3,r2
  80f67c:	11000684 	addi	r4,r2,26
  80f680:	e0bfff17 	ldw	r2,-4(fp)
  80f684:	1080058b 	ldhu	r2,22(r2)
  80f688:	10ffffcc 	andi	r3,r2,65535
  80f68c:	2005883a 	mov	r2,r4
  80f690:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  80f694:	d0a73117 	ldw	r2,-25404(gp)
  80f698:	10800a17 	ldw	r2,40(r2)
  80f69c:	1007883a 	mov	r3,r2
  80f6a0:	e0bffe17 	ldw	r2,-8(fp)
  80f6a4:	1885883a 	add	r2,r3,r2
  80f6a8:	11000704 	addi	r4,r2,28
  80f6ac:	e0bfff17 	ldw	r2,-4(fp)
  80f6b0:	10800617 	ldw	r2,24(r2)
  80f6b4:	1007883a 	mov	r3,r2
  80f6b8:	2005883a 	mov	r2,r4
  80f6bc:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  80f6c0:	00800044 	movi	r2,1
  80f6c4:	d0a73215 	stw	r2,-25400(gp)
		result = true;
  80f6c8:	00800044 	movi	r2,1
  80f6cc:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  80f6d0:	e0bffd17 	ldw	r2,-12(fp)
}
  80f6d4:	e037883a 	mov	sp,fp
  80f6d8:	dfc00117 	ldw	ra,4(sp)
  80f6dc:	df000017 	ldw	fp,0(sp)
  80f6e0:	dec00204 	addi	sp,sp,8
  80f6e4:	f800283a 	ret

0080f6e8 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  80f6e8:	defff804 	addi	sp,sp,-32
  80f6ec:	dfc00715 	stw	ra,28(sp)
  80f6f0:	df000615 	stw	fp,24(sp)
  80f6f4:	dc000515 	stw	r16,20(sp)
  80f6f8:	df000504 	addi	fp,sp,20
  80f6fc:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  80f700:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  80f704:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  80f708:	0009883a 	mov	r4,zero
  80f70c:	e17fff17 	ldw	r5,-4(fp)
  80f710:	08131940 	call	813194 <Read_Sector_Data_Attempt_CRC>
  80f714:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80f718:	d0a73117 	ldw	r2,-25404(gp)
  80f71c:	10800a17 	ldw	r2,40(r2)
  80f720:	10807f84 	addi	r2,r2,510
  80f724:	1080002b 	ldhuio	r2,0(r2)
  80f728:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  80f72c:	e0bffc0f 	ldh	r2,-16(fp)
  80f730:	10ffffcc 	andi	r3,r2,65535
  80f734:	00aa9554 	movui	r2,43605
  80f738:	1881751e 	bne	r3,r2,80fd10 <Check_for_DOS_FAT+0x628>
  80f73c:	e0bffe17 	ldw	r2,-8(fp)
  80f740:	1005003a 	cmpeq	r2,r2,zero
  80f744:	1001721e 	bne	r2,zero,80fd10 <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  80f748:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  80f74c:	d0a73117 	ldw	r2,-25404(gp)
  80f750:	10800a17 	ldw	r2,40(r2)
  80f754:	10800023 	ldbuio	r2,0(r2)
  80f758:	1007883a 	mov	r3,r2
  80f75c:	00802174 	movhi	r2,133
  80f760:	1081f104 	addi	r2,r2,1988
  80f764:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  80f768:	d0a73117 	ldw	r2,-25404(gp)
  80f76c:	10800a17 	ldw	r2,40(r2)
  80f770:	10800044 	addi	r2,r2,1
  80f774:	10800023 	ldbuio	r2,0(r2)
  80f778:	1007883a 	mov	r3,r2
  80f77c:	00802174 	movhi	r2,133
  80f780:	1081f104 	addi	r2,r2,1988
  80f784:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  80f788:	d0a73117 	ldw	r2,-25404(gp)
  80f78c:	10800a17 	ldw	r2,40(r2)
  80f790:	10800084 	addi	r2,r2,2
  80f794:	10800023 	ldbuio	r2,0(r2)
  80f798:	1007883a 	mov	r3,r2
  80f79c:	00802174 	movhi	r2,133
  80f7a0:	1081f104 	addi	r2,r2,1988
  80f7a4:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  80f7a8:	e03ffd15 	stw	zero,-12(fp)
  80f7ac:	00001006 	br	80f7f0 <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  80f7b0:	e13ffd17 	ldw	r4,-12(fp)
  80f7b4:	d0a73117 	ldw	r2,-25404(gp)
  80f7b8:	10800a17 	ldw	r2,40(r2)
  80f7bc:	1007883a 	mov	r3,r2
  80f7c0:	e0bffd17 	ldw	r2,-12(fp)
  80f7c4:	1885883a 	add	r2,r3,r2
  80f7c8:	108000c4 	addi	r2,r2,3
  80f7cc:	10800023 	ldbuio	r2,0(r2)
  80f7d0:	1007883a 	mov	r3,r2
  80f7d4:	00802174 	movhi	r2,133
  80f7d8:	1081f104 	addi	r2,r2,1988
  80f7dc:	1105883a 	add	r2,r2,r4
  80f7e0:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  80f7e4:	e0bffd17 	ldw	r2,-12(fp)
  80f7e8:	10800044 	addi	r2,r2,1
  80f7ec:	e0bffd15 	stw	r2,-12(fp)
  80f7f0:	e0bffd17 	ldw	r2,-12(fp)
  80f7f4:	10800210 	cmplti	r2,r2,8
  80f7f8:	103fed1e 	bne	r2,zero,80f7b0 <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  80f7fc:	d0a73117 	ldw	r2,-25404(gp)
  80f800:	10800a17 	ldw	r2,40(r2)
  80f804:	10800304 	addi	r2,r2,12
  80f808:	10800023 	ldbuio	r2,0(r2)
  80f80c:	10803fcc 	andi	r2,r2,255
  80f810:	1004923a 	slli	r2,r2,8
  80f814:	1007883a 	mov	r3,r2
  80f818:	d0a73117 	ldw	r2,-25404(gp)
  80f81c:	10800a17 	ldw	r2,40(r2)
  80f820:	108002c4 	addi	r2,r2,11
  80f824:	10800023 	ldbuio	r2,0(r2)
  80f828:	10803fcc 	andi	r2,r2,255
  80f82c:	1080201c 	xori	r2,r2,128
  80f830:	10bfe004 	addi	r2,r2,-128
  80f834:	1884b03a 	or	r2,r3,r2
  80f838:	1007883a 	mov	r3,r2
  80f83c:	00802174 	movhi	r2,133
  80f840:	1081f104 	addi	r2,r2,1988
  80f844:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  80f848:	d0a73117 	ldw	r2,-25404(gp)
  80f84c:	10800a17 	ldw	r2,40(r2)
  80f850:	10800344 	addi	r2,r2,13
  80f854:	10800023 	ldbuio	r2,0(r2)
  80f858:	1007883a 	mov	r3,r2
  80f85c:	00802174 	movhi	r2,133
  80f860:	1081f104 	addi	r2,r2,1988
  80f864:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  80f868:	d0a73117 	ldw	r2,-25404(gp)
  80f86c:	10800a17 	ldw	r2,40(r2)
  80f870:	10800384 	addi	r2,r2,14
  80f874:	1080002b 	ldhuio	r2,0(r2)
  80f878:	1007883a 	mov	r3,r2
  80f87c:	00802174 	movhi	r2,133
  80f880:	1081f104 	addi	r2,r2,1988
  80f884:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  80f888:	d0a73117 	ldw	r2,-25404(gp)
  80f88c:	10800a17 	ldw	r2,40(r2)
  80f890:	10800404 	addi	r2,r2,16
  80f894:	10800023 	ldbuio	r2,0(r2)
  80f898:	1007883a 	mov	r3,r2
  80f89c:	00802174 	movhi	r2,133
  80f8a0:	1081f104 	addi	r2,r2,1988
  80f8a4:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  80f8a8:	d0a73117 	ldw	r2,-25404(gp)
  80f8ac:	10800a17 	ldw	r2,40(r2)
  80f8b0:	10800484 	addi	r2,r2,18
  80f8b4:	10800023 	ldbuio	r2,0(r2)
  80f8b8:	10803fcc 	andi	r2,r2,255
  80f8bc:	1004923a 	slli	r2,r2,8
  80f8c0:	1007883a 	mov	r3,r2
  80f8c4:	d0a73117 	ldw	r2,-25404(gp)
  80f8c8:	10800a17 	ldw	r2,40(r2)
  80f8cc:	10800444 	addi	r2,r2,17
  80f8d0:	10800023 	ldbuio	r2,0(r2)
  80f8d4:	10803fcc 	andi	r2,r2,255
  80f8d8:	1884b03a 	or	r2,r3,r2
  80f8dc:	1007883a 	mov	r3,r2
  80f8e0:	00802174 	movhi	r2,133
  80f8e4:	1081f104 	addi	r2,r2,1988
  80f8e8:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  80f8ec:	d0a73117 	ldw	r2,-25404(gp)
  80f8f0:	10800a17 	ldw	r2,40(r2)
  80f8f4:	10800504 	addi	r2,r2,20
  80f8f8:	10800023 	ldbuio	r2,0(r2)
  80f8fc:	10803fcc 	andi	r2,r2,255
  80f900:	1004923a 	slli	r2,r2,8
  80f904:	1007883a 	mov	r3,r2
  80f908:	d0a73117 	ldw	r2,-25404(gp)
  80f90c:	10800a17 	ldw	r2,40(r2)
  80f910:	108004c4 	addi	r2,r2,19
  80f914:	10800023 	ldbuio	r2,0(r2)
  80f918:	10803fcc 	andi	r2,r2,255
  80f91c:	1884b03a 	or	r2,r3,r2
  80f920:	1007883a 	mov	r3,r2
  80f924:	00802174 	movhi	r2,133
  80f928:	1081f104 	addi	r2,r2,1988
  80f92c:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  80f930:	d0a73117 	ldw	r2,-25404(gp)
  80f934:	10800a17 	ldw	r2,40(r2)
  80f938:	10800544 	addi	r2,r2,21
  80f93c:	10800023 	ldbuio	r2,0(r2)
  80f940:	1007883a 	mov	r3,r2
  80f944:	00802174 	movhi	r2,133
  80f948:	1081f104 	addi	r2,r2,1988
  80f94c:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  80f950:	d0a73117 	ldw	r2,-25404(gp)
  80f954:	10800a17 	ldw	r2,40(r2)
  80f958:	10800584 	addi	r2,r2,22
  80f95c:	1080002b 	ldhuio	r2,0(r2)
  80f960:	1007883a 	mov	r3,r2
  80f964:	00802174 	movhi	r2,133
  80f968:	1081f104 	addi	r2,r2,1988
  80f96c:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  80f970:	d0a73117 	ldw	r2,-25404(gp)
  80f974:	10800a17 	ldw	r2,40(r2)
  80f978:	10800604 	addi	r2,r2,24
  80f97c:	1080002b 	ldhuio	r2,0(r2)
  80f980:	1007883a 	mov	r3,r2
  80f984:	00802174 	movhi	r2,133
  80f988:	1081f104 	addi	r2,r2,1988
  80f98c:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  80f990:	d0a73117 	ldw	r2,-25404(gp)
  80f994:	10800a17 	ldw	r2,40(r2)
  80f998:	10800684 	addi	r2,r2,26
  80f99c:	1080002b 	ldhuio	r2,0(r2)
  80f9a0:	1007883a 	mov	r3,r2
  80f9a4:	00802174 	movhi	r2,133
  80f9a8:	1081f104 	addi	r2,r2,1988
  80f9ac:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  80f9b0:	d0a73117 	ldw	r2,-25404(gp)
  80f9b4:	10800a17 	ldw	r2,40(r2)
  80f9b8:	10800704 	addi	r2,r2,28
  80f9bc:	10800037 	ldwio	r2,0(r2)
  80f9c0:	1007883a 	mov	r3,r2
  80f9c4:	00802174 	movhi	r2,133
  80f9c8:	1081f104 	addi	r2,r2,1988
  80f9cc:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  80f9d0:	d0a73117 	ldw	r2,-25404(gp)
  80f9d4:	10800a17 	ldw	r2,40(r2)
  80f9d8:	10800804 	addi	r2,r2,32
  80f9dc:	10800037 	ldwio	r2,0(r2)
  80f9e0:	1007883a 	mov	r3,r2
  80f9e4:	00802174 	movhi	r2,133
  80f9e8:	1081f104 	addi	r2,r2,1988
  80f9ec:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  80f9f0:	d0a73117 	ldw	r2,-25404(gp)
  80f9f4:	10800a17 	ldw	r2,40(r2)
  80f9f8:	10800904 	addi	r2,r2,36
  80f9fc:	10800023 	ldbuio	r2,0(r2)
  80fa00:	1007883a 	mov	r3,r2
  80fa04:	00802174 	movhi	r2,133
  80fa08:	1081f104 	addi	r2,r2,1988
  80fa0c:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  80fa10:	d0a73117 	ldw	r2,-25404(gp)
  80fa14:	10800a17 	ldw	r2,40(r2)
  80fa18:	10800944 	addi	r2,r2,37
  80fa1c:	10800023 	ldbuio	r2,0(r2)
  80fa20:	1007883a 	mov	r3,r2
  80fa24:	00802174 	movhi	r2,133
  80fa28:	1081f104 	addi	r2,r2,1988
  80fa2c:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  80fa30:	d0a73117 	ldw	r2,-25404(gp)
  80fa34:	10800a17 	ldw	r2,40(r2)
  80fa38:	10800984 	addi	r2,r2,38
  80fa3c:	10800023 	ldbuio	r2,0(r2)
  80fa40:	1007883a 	mov	r3,r2
  80fa44:	00802174 	movhi	r2,133
  80fa48:	1081f104 	addi	r2,r2,1988
  80fa4c:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  80fa50:	00802174 	movhi	r2,133
  80fa54:	1081f104 	addi	r2,r2,1988
  80fa58:	1080040b 	ldhu	r2,16(r2)
  80fa5c:	10ffffcc 	andi	r3,r2,65535
  80fa60:	00802174 	movhi	r2,133
  80fa64:	1081f104 	addi	r2,r2,1988
  80fa68:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  80fa6c:	00802174 	movhi	r2,133
  80fa70:	1081f104 	addi	r2,r2,1988
  80fa74:	10c01117 	ldw	r3,68(r2)
  80fa78:	00802174 	movhi	r2,133
  80fa7c:	1081f104 	addi	r2,r2,1988
  80fa80:	1080068b 	ldhu	r2,26(r2)
  80fa84:	10bfffcc 	andi	r2,r2,65535
  80fa88:	1887883a 	add	r3,r3,r2
  80fa8c:	00802174 	movhi	r2,133
  80fa90:	1081f104 	addi	r2,r2,1988
  80fa94:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  80fa98:	00802174 	movhi	r2,133
  80fa9c:	1081f104 	addi	r2,r2,1988
  80faa0:	10c01217 	ldw	r3,72(r2)
  80faa4:	00802174 	movhi	r2,133
  80faa8:	1081f104 	addi	r2,r2,1988
  80faac:	1080068b 	ldhu	r2,26(r2)
  80fab0:	10bfffcc 	andi	r2,r2,65535
  80fab4:	1887883a 	add	r3,r3,r2
  80fab8:	00802174 	movhi	r2,133
  80fabc:	1081f104 	addi	r2,r2,1988
  80fac0:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  80fac4:	00802174 	movhi	r2,133
  80fac8:	1081f104 	addi	r2,r2,1988
  80facc:	14001317 	ldw	r16,76(r2)
  80fad0:	00802174 	movhi	r2,133
  80fad4:	1081f104 	addi	r2,r2,1988
  80fad8:	1080050b 	ldhu	r2,20(r2)
  80fadc:	10bfffcc 	andi	r2,r2,65535
  80fae0:	1008917a 	slli	r4,r2,5
  80fae4:	00802174 	movhi	r2,133
  80fae8:	1081f104 	addi	r2,r2,1988
  80faec:	1080030b 	ldhu	r2,12(r2)
  80faf0:	117fffcc 	andi	r5,r2,65535
  80faf4:	08016e40 	call	8016e4 <__divsi3>
  80faf8:	8087883a 	add	r3,r16,r2
  80fafc:	00802174 	movhi	r2,133
  80fb00:	1081f104 	addi	r2,r2,1988
  80fb04:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  80fb08:	00802174 	movhi	r2,133
  80fb0c:	1081f104 	addi	r2,r2,1988
  80fb10:	1080058b 	ldhu	r2,22(r2)
  80fb14:	10bfffcc 	andi	r2,r2,65535
  80fb18:	1005003a 	cmpeq	r2,r2,zero
  80fb1c:	10000b1e 	bne	r2,zero,80fb4c <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  80fb20:	00802174 	movhi	r2,133
  80fb24:	1081f104 	addi	r2,r2,1988
  80fb28:	1080058b 	ldhu	r2,22(r2)
  80fb2c:	113fffcc 	andi	r4,r2,65535
  80fb30:	00802174 	movhi	r2,133
  80fb34:	1081f104 	addi	r2,r2,1988
  80fb38:	10800383 	ldbu	r2,14(r2)
  80fb3c:	11403fcc 	andi	r5,r2,255
  80fb40:	08016e40 	call	8016e4 <__divsi3>
  80fb44:	e0bffb15 	stw	r2,-20(fp)
  80fb48:	00000906 	br	80fb70 <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  80fb4c:	00802174 	movhi	r2,133
  80fb50:	1081f104 	addi	r2,r2,1988
  80fb54:	11000917 	ldw	r4,36(r2)
  80fb58:	00802174 	movhi	r2,133
  80fb5c:	1081f104 	addi	r2,r2,1988
  80fb60:	10800383 	ldbu	r2,14(r2)
  80fb64:	11403fcc 	andi	r5,r2,255
  80fb68:	08017a40 	call	8017a4 <__udivsi3>
  80fb6c:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  80fb70:	e0bffb17 	ldw	r2,-20(fp)
  80fb74:	1083fdc8 	cmpgei	r2,r2,4087
  80fb78:	1000051e 	bne	r2,zero,80fb90 <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  80fb7c:	00c02174 	movhi	r3,133
  80fb80:	18c1f104 	addi	r3,r3,1988
  80fb84:	00800304 	movi	r2,12
  80fb88:	18801085 	stb	r2,66(r3)
  80fb8c:	00000c06 	br	80fbc0 <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  80fb90:	e0fffb17 	ldw	r3,-20(fp)
  80fb94:	00bffb54 	movui	r2,65517
  80fb98:	10c00516 	blt	r2,r3,80fbb0 <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  80fb9c:	00c02174 	movhi	r3,133
  80fba0:	18c1f104 	addi	r3,r3,1988
  80fba4:	00800404 	movi	r2,16
  80fba8:	18801085 	stb	r2,66(r3)
  80fbac:	00000406 	br	80fbc0 <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  80fbb0:	00c02174 	movhi	r3,133
  80fbb4:	18c1f104 	addi	r3,r3,1988
  80fbb8:	00800804 	movi	r2,32
  80fbbc:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  80fbc0:	e03ffd15 	stw	zero,-12(fp)
  80fbc4:	00001106 	br	80fc0c <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  80fbc8:	e13ffd17 	ldw	r4,-12(fp)
  80fbcc:	d0a73117 	ldw	r2,-25404(gp)
  80fbd0:	10800a17 	ldw	r2,40(r2)
  80fbd4:	1007883a 	mov	r3,r2
  80fbd8:	e0bffd17 	ldw	r2,-12(fp)
  80fbdc:	1885883a 	add	r2,r3,r2
  80fbe0:	108009c4 	addi	r2,r2,39
  80fbe4:	10800023 	ldbuio	r2,0(r2)
  80fbe8:	1007883a 	mov	r3,r2
  80fbec:	00802174 	movhi	r2,133
  80fbf0:	1081f104 	addi	r2,r2,1988
  80fbf4:	2085883a 	add	r2,r4,r2
  80fbf8:	10800a04 	addi	r2,r2,40
  80fbfc:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  80fc00:	e0bffd17 	ldw	r2,-12(fp)
  80fc04:	10800044 	addi	r2,r2,1
  80fc08:	e0bffd15 	stw	r2,-12(fp)
  80fc0c:	e0bffd17 	ldw	r2,-12(fp)
  80fc10:	10800110 	cmplti	r2,r2,4
  80fc14:	103fec1e 	bne	r2,zero,80fbc8 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  80fc18:	e03ffd15 	stw	zero,-12(fp)
  80fc1c:	00001106 	br	80fc64 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  80fc20:	e13ffd17 	ldw	r4,-12(fp)
  80fc24:	d0a73117 	ldw	r2,-25404(gp)
  80fc28:	10800a17 	ldw	r2,40(r2)
  80fc2c:	1007883a 	mov	r3,r2
  80fc30:	e0bffd17 	ldw	r2,-12(fp)
  80fc34:	1885883a 	add	r2,r3,r2
  80fc38:	10800ac4 	addi	r2,r2,43
  80fc3c:	10800023 	ldbuio	r2,0(r2)
  80fc40:	1007883a 	mov	r3,r2
  80fc44:	00802174 	movhi	r2,133
  80fc48:	1081f104 	addi	r2,r2,1988
  80fc4c:	2085883a 	add	r2,r4,r2
  80fc50:	10800b04 	addi	r2,r2,44
  80fc54:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  80fc58:	e0bffd17 	ldw	r2,-12(fp)
  80fc5c:	10800044 	addi	r2,r2,1
  80fc60:	e0bffd15 	stw	r2,-12(fp)
  80fc64:	e0bffd17 	ldw	r2,-12(fp)
  80fc68:	108002d0 	cmplti	r2,r2,11
  80fc6c:	103fec1e 	bne	r2,zero,80fc20 <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  80fc70:	e03ffd15 	stw	zero,-12(fp)
  80fc74:	00001106 	br	80fcbc <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  80fc78:	e13ffd17 	ldw	r4,-12(fp)
  80fc7c:	d0a73117 	ldw	r2,-25404(gp)
  80fc80:	10800a17 	ldw	r2,40(r2)
  80fc84:	1007883a 	mov	r3,r2
  80fc88:	e0bffd17 	ldw	r2,-12(fp)
  80fc8c:	1885883a 	add	r2,r3,r2
  80fc90:	10800d84 	addi	r2,r2,54
  80fc94:	10800023 	ldbuio	r2,0(r2)
  80fc98:	1007883a 	mov	r3,r2
  80fc9c:	00802174 	movhi	r2,133
  80fca0:	1081f104 	addi	r2,r2,1988
  80fca4:	2085883a 	add	r2,r4,r2
  80fca8:	10800e04 	addi	r2,r2,56
  80fcac:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  80fcb0:	e0bffd17 	ldw	r2,-12(fp)
  80fcb4:	10800044 	addi	r2,r2,1
  80fcb8:	e0bffd15 	stw	r2,-12(fp)
  80fcbc:	e0bffd17 	ldw	r2,-12(fp)
  80fcc0:	10800210 	cmplti	r2,r2,8
  80fcc4:	103fec1e 	bne	r2,zero,80fc78 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  80fcc8:	e03ffd15 	stw	zero,-12(fp)
  80fccc:	00000a06 	br	80fcf8 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  80fcd0:	e0bffd17 	ldw	r2,-12(fp)
  80fcd4:	00c02174 	movhi	r3,133
  80fcd8:	18c20604 	addi	r3,r3,2072
  80fcdc:	100491ba 	slli	r2,r2,6
  80fce0:	10c5883a 	add	r2,r2,r3
  80fce4:	10800f04 	addi	r2,r2,60
  80fce8:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  80fcec:	e0bffd17 	ldw	r2,-12(fp)
  80fcf0:	10800044 	addi	r2,r2,1
  80fcf4:	e0bffd15 	stw	r2,-12(fp)
  80fcf8:	e0bffd17 	ldw	r2,-12(fp)
  80fcfc:	10800510 	cmplti	r2,r2,20
  80fd00:	103ff31e 	bne	r2,zero,80fcd0 <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  80fd04:	00800044 	movi	r2,1
  80fd08:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  80fd0c:	00000106 	br	80fd14 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  80fd10:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  80fd14:	e0bffe17 	ldw	r2,-8(fp)
}
  80fd18:	e037883a 	mov	sp,fp
  80fd1c:	dfc00217 	ldw	ra,8(sp)
  80fd20:	df000117 	ldw	fp,4(sp)
  80fd24:	dc000017 	ldw	r16,0(sp)
  80fd28:	dec00304 	addi	sp,sp,12
  80fd2c:	f800283a 	ret

0080fd30 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  80fd30:	defffc04 	addi	sp,sp,-16
  80fd34:	dfc00315 	stw	ra,12(sp)
  80fd38:	df000215 	stw	fp,8(sp)
  80fd3c:	df000204 	addi	fp,sp,8
	bool result = false;
  80fd40:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  80fd44:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  80fd48:	1005003a 	cmpeq	r2,r2,zero
  80fd4c:	1000331e 	bne	r2,zero,80fe1c <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  80fd50:	0009883a 	mov	r4,zero
  80fd54:	000b883a 	mov	r5,zero
  80fd58:	08131940 	call	813194 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  80fd5c:	d0a72b17 	ldw	r2,-25428(gp)
  80fd60:	1080000b 	ldhu	r2,0(r2)
  80fd64:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  80fd68:	d0272f15 	stw	zero,-25412(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  80fd6c:	d0273015 	stw	zero,-25408(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  80fd70:	e0bffe0f 	ldh	r2,-8(fp)
  80fd74:	1004803a 	cmplt	r2,r2,zero
  80fd78:	1000281e 	bne	r2,zero,80fe1c <Look_for_FAT16+0xec>
  80fd7c:	e0bffe0b 	ldhu	r2,-8(fp)
  80fd80:	10bfffcc 	andi	r2,r2,65535
  80fd84:	1083000c 	andi	r2,r2,3072
  80fd88:	10830020 	cmpeqi	r2,r2,3072
  80fd8c:	1000231e 	bne	r2,zero,80fe1c <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  80fd90:	e0bffe0b 	ldhu	r2,-8(fp)
  80fd94:	10bfffcc 	andi	r2,r2,65535
  80fd98:	1083000c 	andi	r2,r2,3072
  80fd9c:	10810018 	cmpnei	r2,r2,1024
  80fda0:	1000031e 	bne	r2,zero,80fdb0 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80fda4:	0009883a 	mov	r4,zero
  80fda8:	080f6e80 	call	80f6e8 <Check_for_DOS_FAT>
  80fdac:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  80fdb0:	e0bffe0b 	ldhu	r2,-8(fp)
  80fdb4:	10bfffcc 	andi	r2,r2,65535
  80fdb8:	1083000c 	andi	r2,r2,3072
  80fdbc:	1004c03a 	cmpne	r2,r2,zero
  80fdc0:	1000061e 	bne	r2,zero,80fddc <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  80fdc4:	080effc0 	call	80effc <Check_for_Master_Boot_Record>
  80fdc8:	1005003a 	cmpeq	r2,r2,zero
  80fdcc:	1000031e 	bne	r2,zero,80fddc <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  80fdd0:	d1272f17 	ldw	r4,-25412(gp)
  80fdd4:	080f6e80 	call	80f6e8 <Check_for_DOS_FAT>
  80fdd8:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  80fddc:	e0bfff17 	ldw	r2,-4(fp)
  80fde0:	10800058 	cmpnei	r2,r2,1
  80fde4:	10000d1e 	bne	r2,zero,80fe1c <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  80fde8:	00802174 	movhi	r2,133
  80fdec:	1081f104 	addi	r2,r2,1988
  80fdf0:	10801083 	ldbu	r2,66(r2)
  80fdf4:	10803fcc 	andi	r2,r2,255
  80fdf8:	10800420 	cmpeqi	r2,r2,16
  80fdfc:	1000021e 	bne	r2,zero,80fe08 <Look_for_FAT16+0xd8>
					result = false;
  80fe00:	e03fff15 	stw	zero,-4(fp)
  80fe04:	00000506 	br	80fe1c <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  80fe08:	00802174 	movhi	r2,133
  80fe0c:	1081f104 	addi	r2,r2,1988
  80fe10:	1080058b 	ldhu	r2,22(r2)
  80fe14:	10bfffcc 	andi	r2,r2,65535
  80fe18:	d0a73015 	stw	r2,-25408(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  80fe1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80fe20:	e037883a 	mov	sp,fp
  80fe24:	dfc00117 	ldw	ra,4(sp)
  80fe28:	df000017 	ldw	fp,0(sp)
  80fe2c:	dec00204 	addi	sp,sp,8
  80fe30:	f800283a 	ret

0080fe34 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  80fe34:	defffb04 	addi	sp,sp,-20
  80fe38:	dfc00415 	stw	ra,16(sp)
  80fe3c:	df000315 	stw	fp,12(sp)
  80fe40:	df000304 	addi	fp,sp,12
  80fe44:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  80fe48:	e13fff17 	ldw	r4,-4(fp)
  80fe4c:	08020f00 	call	8020f0 <strlen>
  80fe50:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  80fe54:	e03ffe15 	stw	zero,-8(fp)
  80fe58:	00002206 	br	80fee4 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  80fe5c:	e0bffe17 	ldw	r2,-8(fp)
  80fe60:	1007883a 	mov	r3,r2
  80fe64:	e0bfff17 	ldw	r2,-4(fp)
  80fe68:	1885883a 	add	r2,r3,r2
  80fe6c:	10800003 	ldbu	r2,0(r2)
  80fe70:	10803fcc 	andi	r2,r2,255
  80fe74:	1080201c 	xori	r2,r2,128
  80fe78:	10bfe004 	addi	r2,r2,-128
  80fe7c:	10801850 	cmplti	r2,r2,97
  80fe80:	1000151e 	bne	r2,zero,80fed8 <filename_to_upper_case+0xa4>
  80fe84:	e0bffe17 	ldw	r2,-8(fp)
  80fe88:	1007883a 	mov	r3,r2
  80fe8c:	e0bfff17 	ldw	r2,-4(fp)
  80fe90:	1885883a 	add	r2,r3,r2
  80fe94:	10800003 	ldbu	r2,0(r2)
  80fe98:	10803fcc 	andi	r2,r2,255
  80fe9c:	1080201c 	xori	r2,r2,128
  80fea0:	10bfe004 	addi	r2,r2,-128
  80fea4:	10801ec8 	cmpgei	r2,r2,123
  80fea8:	10000b1e 	bne	r2,zero,80fed8 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  80feac:	e0bffe17 	ldw	r2,-8(fp)
  80feb0:	1007883a 	mov	r3,r2
  80feb4:	e0bfff17 	ldw	r2,-4(fp)
  80feb8:	1889883a 	add	r4,r3,r2
  80febc:	e0bffe17 	ldw	r2,-8(fp)
  80fec0:	1007883a 	mov	r3,r2
  80fec4:	e0bfff17 	ldw	r2,-4(fp)
  80fec8:	1885883a 	add	r2,r3,r2
  80fecc:	10800003 	ldbu	r2,0(r2)
  80fed0:	10bff804 	addi	r2,r2,-32
  80fed4:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  80fed8:	e0bffe17 	ldw	r2,-8(fp)
  80fedc:	10800044 	addi	r2,r2,1
  80fee0:	e0bffe15 	stw	r2,-8(fp)
  80fee4:	e0fffe17 	ldw	r3,-8(fp)
  80fee8:	e0bffd17 	ldw	r2,-12(fp)
  80feec:	18bfdb16 	blt	r3,r2,80fe5c <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  80fef0:	e037883a 	mov	sp,fp
  80fef4:	dfc00117 	ldw	ra,4(sp)
  80fef8:	df000017 	ldw	fp,0(sp)
  80fefc:	dec00204 	addi	sp,sp,8
  80ff00:	f800283a 	ret

0080ff04 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  80ff04:	defff804 	addi	sp,sp,-32
  80ff08:	dfc00715 	stw	ra,28(sp)
  80ff0c:	df000615 	stw	fp,24(sp)
  80ff10:	df000604 	addi	fp,sp,24
  80ff14:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  80ff18:	e13fff17 	ldw	r4,-4(fp)
  80ff1c:	08020f00 	call	8020f0 <strlen>
  80ff20:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  80ff24:	00bfffc4 	movi	r2,-1
  80ff28:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  80ff2c:	00bfffc4 	movi	r2,-1
  80ff30:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  80ff34:	00800044 	movi	r2,1
  80ff38:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  80ff3c:	e03ffd15 	stw	zero,-12(fp)
  80ff40:	00007606 	br	81011c <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  80ff44:	e0bffd17 	ldw	r2,-12(fp)
  80ff48:	1007883a 	mov	r3,r2
  80ff4c:	e0bfff17 	ldw	r2,-4(fp)
  80ff50:	1885883a 	add	r2,r3,r2
  80ff54:	10800003 	ldbu	r2,0(r2)
  80ff58:	10803fcc 	andi	r2,r2,255
  80ff5c:	1080201c 	xori	r2,r2,128
  80ff60:	10bfe004 	addi	r2,r2,-128
  80ff64:	10800820 	cmpeqi	r2,r2,32
  80ff68:	1000431e 	bne	r2,zero,810078 <check_file_name_for_FAT16_compliance+0x174>
  80ff6c:	e0bffd17 	ldw	r2,-12(fp)
  80ff70:	10ffffc4 	addi	r3,r2,-1
  80ff74:	e0bffc17 	ldw	r2,-16(fp)
  80ff78:	1880141e 	bne	r3,r2,80ffcc <check_file_name_for_FAT16_compliance+0xc8>
  80ff7c:	e0bffd17 	ldw	r2,-12(fp)
  80ff80:	1007883a 	mov	r3,r2
  80ff84:	e0bfff17 	ldw	r2,-4(fp)
  80ff88:	1885883a 	add	r2,r3,r2
  80ff8c:	10800003 	ldbu	r2,0(r2)
  80ff90:	10803fcc 	andi	r2,r2,255
  80ff94:	1080201c 	xori	r2,r2,128
  80ff98:	10bfe004 	addi	r2,r2,-128
  80ff9c:	10801720 	cmpeqi	r2,r2,92
  80ffa0:	1000351e 	bne	r2,zero,810078 <check_file_name_for_FAT16_compliance+0x174>
  80ffa4:	e0bffd17 	ldw	r2,-12(fp)
  80ffa8:	1007883a 	mov	r3,r2
  80ffac:	e0bfff17 	ldw	r2,-4(fp)
  80ffb0:	1885883a 	add	r2,r3,r2
  80ffb4:	10800003 	ldbu	r2,0(r2)
  80ffb8:	10803fcc 	andi	r2,r2,255
  80ffbc:	1080201c 	xori	r2,r2,128
  80ffc0:	10bfe004 	addi	r2,r2,-128
  80ffc4:	10800be0 	cmpeqi	r2,r2,47
  80ffc8:	10002b1e 	bne	r2,zero,810078 <check_file_name_for_FAT16_compliance+0x174>
  80ffcc:	e0fffd17 	ldw	r3,-12(fp)
  80ffd0:	e0bffb17 	ldw	r2,-20(fp)
  80ffd4:	1885c83a 	sub	r2,r3,r2
  80ffd8:	10800258 	cmpnei	r2,r2,9
  80ffdc:	10000a1e 	bne	r2,zero,810008 <check_file_name_for_FAT16_compliance+0x104>
  80ffe0:	e0bffd17 	ldw	r2,-12(fp)
  80ffe4:	1007883a 	mov	r3,r2
  80ffe8:	e0bfff17 	ldw	r2,-4(fp)
  80ffec:	1885883a 	add	r2,r3,r2
  80fff0:	10800003 	ldbu	r2,0(r2)
  80fff4:	10803fcc 	andi	r2,r2,255
  80fff8:	1080201c 	xori	r2,r2,128
  80fffc:	10bfe004 	addi	r2,r2,-128
  810000:	10800b98 	cmpnei	r2,r2,46
  810004:	10001c1e 	bne	r2,zero,810078 <check_file_name_for_FAT16_compliance+0x174>
  810008:	e0fffc17 	ldw	r3,-16(fp)
  81000c:	e0bffb17 	ldw	r2,-20(fp)
  810010:	18801b26 	beq	r3,r2,810080 <check_file_name_for_FAT16_compliance+0x17c>
  810014:	e0fffd17 	ldw	r3,-12(fp)
  810018:	e0bffb17 	ldw	r2,-20(fp)
  81001c:	1885c83a 	sub	r2,r3,r2
  810020:	10800110 	cmplti	r2,r2,4
  810024:	1000161e 	bne	r2,zero,810080 <check_file_name_for_FAT16_compliance+0x17c>
  810028:	e0bffd17 	ldw	r2,-12(fp)
  81002c:	1007883a 	mov	r3,r2
  810030:	e0bfff17 	ldw	r2,-4(fp)
  810034:	1885883a 	add	r2,r3,r2
  810038:	10800003 	ldbu	r2,0(r2)
  81003c:	10803fcc 	andi	r2,r2,255
  810040:	1080201c 	xori	r2,r2,128
  810044:	10bfe004 	addi	r2,r2,-128
  810048:	10801720 	cmpeqi	r2,r2,92
  81004c:	10000c1e 	bne	r2,zero,810080 <check_file_name_for_FAT16_compliance+0x17c>
  810050:	e0bffd17 	ldw	r2,-12(fp)
  810054:	1007883a 	mov	r3,r2
  810058:	e0bfff17 	ldw	r2,-4(fp)
  81005c:	1885883a 	add	r2,r3,r2
  810060:	10800003 	ldbu	r2,0(r2)
  810064:	10803fcc 	andi	r2,r2,255
  810068:	1080201c 	xori	r2,r2,128
  81006c:	10bfe004 	addi	r2,r2,-128
  810070:	10800be0 	cmpeqi	r2,r2,47
  810074:	1000021e 	bne	r2,zero,810080 <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  810078:	e03ffa15 	stw	zero,-24(fp)
			break;
  81007c:	00002a06 	br	810128 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  810080:	e0bffd17 	ldw	r2,-12(fp)
  810084:	1007883a 	mov	r3,r2
  810088:	e0bfff17 	ldw	r2,-4(fp)
  81008c:	1885883a 	add	r2,r3,r2
  810090:	10800003 	ldbu	r2,0(r2)
  810094:	10803fcc 	andi	r2,r2,255
  810098:	1080201c 	xori	r2,r2,128
  81009c:	10bfe004 	addi	r2,r2,-128
  8100a0:	10801720 	cmpeqi	r2,r2,92
  8100a4:	10000a1e 	bne	r2,zero,8100d0 <check_file_name_for_FAT16_compliance+0x1cc>
  8100a8:	e0bffd17 	ldw	r2,-12(fp)
  8100ac:	1007883a 	mov	r3,r2
  8100b0:	e0bfff17 	ldw	r2,-4(fp)
  8100b4:	1885883a 	add	r2,r3,r2
  8100b8:	10800003 	ldbu	r2,0(r2)
  8100bc:	10803fcc 	andi	r2,r2,255
  8100c0:	1080201c 	xori	r2,r2,128
  8100c4:	10bfe004 	addi	r2,r2,-128
  8100c8:	10800bd8 	cmpnei	r2,r2,47
  8100cc:	1000041e 	bne	r2,zero,8100e0 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  8100d0:	e0bffd17 	ldw	r2,-12(fp)
  8100d4:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  8100d8:	e0bffd17 	ldw	r2,-12(fp)
  8100dc:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  8100e0:	e0bffd17 	ldw	r2,-12(fp)
  8100e4:	1007883a 	mov	r3,r2
  8100e8:	e0bfff17 	ldw	r2,-4(fp)
  8100ec:	1885883a 	add	r2,r3,r2
  8100f0:	10800003 	ldbu	r2,0(r2)
  8100f4:	10803fcc 	andi	r2,r2,255
  8100f8:	1080201c 	xori	r2,r2,128
  8100fc:	10bfe004 	addi	r2,r2,-128
  810100:	10800b98 	cmpnei	r2,r2,46
  810104:	1000021e 	bne	r2,zero,810110 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  810108:	e0bffd17 	ldw	r2,-12(fp)
  81010c:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  810110:	e0bffd17 	ldw	r2,-12(fp)
  810114:	10800044 	addi	r2,r2,1
  810118:	e0bffd15 	stw	r2,-12(fp)
  81011c:	e0fffd17 	ldw	r3,-12(fp)
  810120:	e0bffe17 	ldw	r2,-8(fp)
  810124:	18bf8716 	blt	r3,r2,80ff44 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  810128:	e0fffe17 	ldw	r3,-8(fp)
  81012c:	e0bfff17 	ldw	r2,-4(fp)
  810130:	1885883a 	add	r2,r3,r2
  810134:	10bfffc4 	addi	r2,r2,-1
  810138:	10800003 	ldbu	r2,0(r2)
  81013c:	10803fcc 	andi	r2,r2,255
  810140:	1080201c 	xori	r2,r2,128
  810144:	10bfe004 	addi	r2,r2,-128
  810148:	10801720 	cmpeqi	r2,r2,92
  81014c:	10000a1e 	bne	r2,zero,810178 <check_file_name_for_FAT16_compliance+0x274>
  810150:	e0fffe17 	ldw	r3,-8(fp)
  810154:	e0bfff17 	ldw	r2,-4(fp)
  810158:	1885883a 	add	r2,r3,r2
  81015c:	10bfffc4 	addi	r2,r2,-1
  810160:	10800003 	ldbu	r2,0(r2)
  810164:	10803fcc 	andi	r2,r2,255
  810168:	1080201c 	xori	r2,r2,128
  81016c:	10bfe004 	addi	r2,r2,-128
  810170:	10800bd8 	cmpnei	r2,r2,47
  810174:	1000011e 	bne	r2,zero,81017c <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  810178:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  81017c:	e0bffa17 	ldw	r2,-24(fp)
}
  810180:	e037883a 	mov	sp,fp
  810184:	dfc00117 	ldw	ra,4(sp)
  810188:	df000017 	ldw	fp,0(sp)
  81018c:	dec00204 	addi	sp,sp,8
  810190:	f800283a 	ret

00810194 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  810194:	defffb04 	addi	sp,sp,-20
  810198:	dfc00415 	stw	ra,16(sp)
  81019c:	df000315 	stw	fp,12(sp)
  8101a0:	df000304 	addi	fp,sp,12
  8101a4:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  8101a8:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  8101ac:	e13fff17 	ldw	r4,-4(fp)
  8101b0:	08020f00 	call	8020f0 <strlen>
  8101b4:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  8101b8:	e03ffe15 	stw	zero,-8(fp)
  8101bc:	00001706 	br	81021c <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  8101c0:	e0bffe17 	ldw	r2,-8(fp)
  8101c4:	1007883a 	mov	r3,r2
  8101c8:	e0bfff17 	ldw	r2,-4(fp)
  8101cc:	1885883a 	add	r2,r3,r2
  8101d0:	10800003 	ldbu	r2,0(r2)
  8101d4:	10803fcc 	andi	r2,r2,255
  8101d8:	1080201c 	xori	r2,r2,128
  8101dc:	10bfe004 	addi	r2,r2,-128
  8101e0:	10801720 	cmpeqi	r2,r2,92
  8101e4:	1000101e 	bne	r2,zero,810228 <get_dir_divider_location+0x94>
  8101e8:	e0bffe17 	ldw	r2,-8(fp)
  8101ec:	1007883a 	mov	r3,r2
  8101f0:	e0bfff17 	ldw	r2,-4(fp)
  8101f4:	1885883a 	add	r2,r3,r2
  8101f8:	10800003 	ldbu	r2,0(r2)
  8101fc:	10803fcc 	andi	r2,r2,255
  810200:	1080201c 	xori	r2,r2,128
  810204:	10bfe004 	addi	r2,r2,-128
  810208:	10800be0 	cmpeqi	r2,r2,47
  81020c:	1000061e 	bne	r2,zero,810228 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  810210:	e0bffe17 	ldw	r2,-8(fp)
  810214:	10800044 	addi	r2,r2,1
  810218:	e0bffe15 	stw	r2,-8(fp)
  81021c:	e0fffe17 	ldw	r3,-8(fp)
  810220:	e0bffd17 	ldw	r2,-12(fp)
  810224:	18bfe616 	blt	r3,r2,8101c0 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  810228:	e0fffe17 	ldw	r3,-8(fp)
  81022c:	e0bffd17 	ldw	r2,-12(fp)
  810230:	1880021e 	bne	r3,r2,81023c <get_dir_divider_location+0xa8>
		index = -1;
  810234:	00bfffc4 	movi	r2,-1
  810238:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  81023c:	e0bffe17 	ldw	r2,-8(fp)
}
  810240:	e037883a 	mov	sp,fp
  810244:	dfc00117 	ldw	ra,4(sp)
  810248:	df000017 	ldw	fp,0(sp)
  81024c:	dec00204 	addi	sp,sp,8
  810250:	f800283a 	ret

00810254 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  810254:	defff604 	addi	sp,sp,-40
  810258:	df000915 	stw	fp,36(sp)
  81025c:	df000904 	addi	fp,sp,36
  810260:	e13ff915 	stw	r4,-28(fp)
  810264:	e17ffa15 	stw	r5,-24(fp)
  810268:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  81026c:	00800044 	movi	r2,1
  810270:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  810274:	e03ff715 	stw	zero,-36(fp)
  810278:	00005006 	br	8103bc <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  81027c:	e0fff717 	ldw	r3,-36(fp)
  810280:	e0bff917 	ldw	r2,-28(fp)
  810284:	10c5883a 	add	r2,r2,r3
  810288:	10800003 	ldbu	r2,0(r2)
  81028c:	10803fcc 	andi	r2,r2,255
  810290:	10801870 	cmpltui	r2,r2,97
  810294:	1000111e 	bne	r2,zero,8102dc <match_file_record_to_name_ext+0x88>
  810298:	e0fff717 	ldw	r3,-36(fp)
  81029c:	e0bff917 	ldw	r2,-28(fp)
  8102a0:	10c5883a 	add	r2,r2,r3
  8102a4:	10800003 	ldbu	r2,0(r2)
  8102a8:	10803fcc 	andi	r2,r2,255
  8102ac:	10801ee8 	cmpgeui	r2,r2,123
  8102b0:	10000a1e 	bne	r2,zero,8102dc <match_file_record_to_name_ext+0x88>
  8102b4:	e0fff717 	ldw	r3,-36(fp)
  8102b8:	e0bff917 	ldw	r2,-28(fp)
  8102bc:	10c5883a 	add	r2,r2,r3
  8102c0:	10800003 	ldbu	r2,0(r2)
  8102c4:	10bff804 	addi	r2,r2,-32
  8102c8:	10803fcc 	andi	r2,r2,255
  8102cc:	1080201c 	xori	r2,r2,128
  8102d0:	10bfe004 	addi	r2,r2,-128
  8102d4:	e0bfff15 	stw	r2,-4(fp)
  8102d8:	00000806 	br	8102fc <match_file_record_to_name_ext+0xa8>
  8102dc:	e0fff717 	ldw	r3,-36(fp)
  8102e0:	e0bff917 	ldw	r2,-28(fp)
  8102e4:	10c5883a 	add	r2,r2,r3
  8102e8:	10800003 	ldbu	r2,0(r2)
  8102ec:	10803fcc 	andi	r2,r2,255
  8102f0:	1080201c 	xori	r2,r2,128
  8102f4:	10bfe004 	addi	r2,r2,-128
  8102f8:	e0bfff15 	stw	r2,-4(fp)
  8102fc:	e0bff717 	ldw	r2,-36(fp)
  810300:	1007883a 	mov	r3,r2
  810304:	e0bffa17 	ldw	r2,-24(fp)
  810308:	1885883a 	add	r2,r3,r2
  81030c:	10800003 	ldbu	r2,0(r2)
  810310:	10803fcc 	andi	r2,r2,255
  810314:	1080201c 	xori	r2,r2,128
  810318:	10bfe004 	addi	r2,r2,-128
  81031c:	10801850 	cmplti	r2,r2,97
  810320:	1000151e 	bne	r2,zero,810378 <match_file_record_to_name_ext+0x124>
  810324:	e0bff717 	ldw	r2,-36(fp)
  810328:	1007883a 	mov	r3,r2
  81032c:	e0bffa17 	ldw	r2,-24(fp)
  810330:	1885883a 	add	r2,r3,r2
  810334:	10800003 	ldbu	r2,0(r2)
  810338:	10803fcc 	andi	r2,r2,255
  81033c:	1080201c 	xori	r2,r2,128
  810340:	10bfe004 	addi	r2,r2,-128
  810344:	10801ec8 	cmpgei	r2,r2,123
  810348:	10000b1e 	bne	r2,zero,810378 <match_file_record_to_name_ext+0x124>
  81034c:	e0bff717 	ldw	r2,-36(fp)
  810350:	1007883a 	mov	r3,r2
  810354:	e0bffa17 	ldw	r2,-24(fp)
  810358:	1885883a 	add	r2,r3,r2
  81035c:	10800003 	ldbu	r2,0(r2)
  810360:	10bff804 	addi	r2,r2,-32
  810364:	10803fcc 	andi	r2,r2,255
  810368:	1080201c 	xori	r2,r2,128
  81036c:	10bfe004 	addi	r2,r2,-128
  810370:	e0bffe15 	stw	r2,-8(fp)
  810374:	00000906 	br	81039c <match_file_record_to_name_ext+0x148>
  810378:	e0bff717 	ldw	r2,-36(fp)
  81037c:	1007883a 	mov	r3,r2
  810380:	e0bffa17 	ldw	r2,-24(fp)
  810384:	1885883a 	add	r2,r3,r2
  810388:	10800003 	ldbu	r2,0(r2)
  81038c:	10803fcc 	andi	r2,r2,255
  810390:	1080201c 	xori	r2,r2,128
  810394:	10bfe004 	addi	r2,r2,-128
  810398:	e0bffe15 	stw	r2,-8(fp)
  81039c:	e0bfff17 	ldw	r2,-4(fp)
  8103a0:	e0fffe17 	ldw	r3,-8(fp)
  8103a4:	10c00226 	beq	r2,r3,8103b0 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  8103a8:	e03ff815 	stw	zero,-32(fp)
			break;
  8103ac:	00000606 	br	8103c8 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  8103b0:	e0bff717 	ldw	r2,-36(fp)
  8103b4:	10800044 	addi	r2,r2,1
  8103b8:	e0bff715 	stw	r2,-36(fp)
  8103bc:	e0bff717 	ldw	r2,-36(fp)
  8103c0:	10800210 	cmplti	r2,r2,8
  8103c4:	103fad1e 	bne	r2,zero,81027c <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  8103c8:	e03ff715 	stw	zero,-36(fp)
  8103cc:	00005406 	br	810520 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  8103d0:	e0fff717 	ldw	r3,-36(fp)
  8103d4:	e0bff917 	ldw	r2,-28(fp)
  8103d8:	1885883a 	add	r2,r3,r2
  8103dc:	10800204 	addi	r2,r2,8
  8103e0:	10800003 	ldbu	r2,0(r2)
  8103e4:	10803fcc 	andi	r2,r2,255
  8103e8:	10801870 	cmpltui	r2,r2,97
  8103ec:	1000131e 	bne	r2,zero,81043c <match_file_record_to_name_ext+0x1e8>
  8103f0:	e0fff717 	ldw	r3,-36(fp)
  8103f4:	e0bff917 	ldw	r2,-28(fp)
  8103f8:	1885883a 	add	r2,r3,r2
  8103fc:	10800204 	addi	r2,r2,8
  810400:	10800003 	ldbu	r2,0(r2)
  810404:	10803fcc 	andi	r2,r2,255
  810408:	10801ee8 	cmpgeui	r2,r2,123
  81040c:	10000b1e 	bne	r2,zero,81043c <match_file_record_to_name_ext+0x1e8>
  810410:	e0fff717 	ldw	r3,-36(fp)
  810414:	e0bff917 	ldw	r2,-28(fp)
  810418:	1885883a 	add	r2,r3,r2
  81041c:	10800204 	addi	r2,r2,8
  810420:	10800003 	ldbu	r2,0(r2)
  810424:	10bff804 	addi	r2,r2,-32
  810428:	10803fcc 	andi	r2,r2,255
  81042c:	1080201c 	xori	r2,r2,128
  810430:	10bfe004 	addi	r2,r2,-128
  810434:	e0bffd15 	stw	r2,-12(fp)
  810438:	00000906 	br	810460 <match_file_record_to_name_ext+0x20c>
  81043c:	e0fff717 	ldw	r3,-36(fp)
  810440:	e0bff917 	ldw	r2,-28(fp)
  810444:	1885883a 	add	r2,r3,r2
  810448:	10800204 	addi	r2,r2,8
  81044c:	10800003 	ldbu	r2,0(r2)
  810450:	10803fcc 	andi	r2,r2,255
  810454:	1080201c 	xori	r2,r2,128
  810458:	10bfe004 	addi	r2,r2,-128
  81045c:	e0bffd15 	stw	r2,-12(fp)
  810460:	e0bff717 	ldw	r2,-36(fp)
  810464:	1007883a 	mov	r3,r2
  810468:	e0bffb17 	ldw	r2,-20(fp)
  81046c:	1885883a 	add	r2,r3,r2
  810470:	10800003 	ldbu	r2,0(r2)
  810474:	10803fcc 	andi	r2,r2,255
  810478:	1080201c 	xori	r2,r2,128
  81047c:	10bfe004 	addi	r2,r2,-128
  810480:	10801850 	cmplti	r2,r2,97
  810484:	1000151e 	bne	r2,zero,8104dc <match_file_record_to_name_ext+0x288>
  810488:	e0bff717 	ldw	r2,-36(fp)
  81048c:	1007883a 	mov	r3,r2
  810490:	e0bffb17 	ldw	r2,-20(fp)
  810494:	1885883a 	add	r2,r3,r2
  810498:	10800003 	ldbu	r2,0(r2)
  81049c:	10803fcc 	andi	r2,r2,255
  8104a0:	1080201c 	xori	r2,r2,128
  8104a4:	10bfe004 	addi	r2,r2,-128
  8104a8:	10801ec8 	cmpgei	r2,r2,123
  8104ac:	10000b1e 	bne	r2,zero,8104dc <match_file_record_to_name_ext+0x288>
  8104b0:	e0bff717 	ldw	r2,-36(fp)
  8104b4:	1007883a 	mov	r3,r2
  8104b8:	e0bffb17 	ldw	r2,-20(fp)
  8104bc:	1885883a 	add	r2,r3,r2
  8104c0:	10800003 	ldbu	r2,0(r2)
  8104c4:	10bff804 	addi	r2,r2,-32
  8104c8:	10803fcc 	andi	r2,r2,255
  8104cc:	1080201c 	xori	r2,r2,128
  8104d0:	10bfe004 	addi	r2,r2,-128
  8104d4:	e0bffc15 	stw	r2,-16(fp)
  8104d8:	00000906 	br	810500 <match_file_record_to_name_ext+0x2ac>
  8104dc:	e0bff717 	ldw	r2,-36(fp)
  8104e0:	1007883a 	mov	r3,r2
  8104e4:	e0bffb17 	ldw	r2,-20(fp)
  8104e8:	1885883a 	add	r2,r3,r2
  8104ec:	10800003 	ldbu	r2,0(r2)
  8104f0:	10803fcc 	andi	r2,r2,255
  8104f4:	1080201c 	xori	r2,r2,128
  8104f8:	10bfe004 	addi	r2,r2,-128
  8104fc:	e0bffc15 	stw	r2,-16(fp)
  810500:	e0bffd17 	ldw	r2,-12(fp)
  810504:	e0fffc17 	ldw	r3,-16(fp)
  810508:	10c00226 	beq	r2,r3,810514 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  81050c:	e03ff815 	stw	zero,-32(fp)
			break;
  810510:	00000606 	br	81052c <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  810514:	e0bff717 	ldw	r2,-36(fp)
  810518:	10800044 	addi	r2,r2,1
  81051c:	e0bff715 	stw	r2,-36(fp)
  810520:	e0bff717 	ldw	r2,-36(fp)
  810524:	108000d0 	cmplti	r2,r2,3
  810528:	103fa91e 	bne	r2,zero,8103d0 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  81052c:	e0bff817 	ldw	r2,-32(fp)
}
  810530:	e037883a 	mov	sp,fp
  810534:	df000017 	ldw	fp,0(sp)
  810538:	dec00104 	addi	sp,sp,4
  81053c:	f800283a 	ret

00810540 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  810540:	deffe604 	addi	sp,sp,-104
  810544:	dfc01915 	stw	ra,100(sp)
  810548:	df001815 	stw	fp,96(sp)
  81054c:	df001804 	addi	fp,sp,96
  810550:	e13ffc15 	stw	r4,-16(fp)
  810554:	e17ffd15 	stw	r5,-12(fp)
  810558:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  81055c:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  810560:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  810564:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  810568:	e13ffc17 	ldw	r4,-16(fp)
  81056c:	08101940 	call	810194 <get_dir_divider_location>
  810570:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  810574:	00012206 	br	810a00 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810578:	00800804 	movi	r2,32
  81057c:	e0bff805 	stb	r2,-32(fp)
  810580:	00800804 	movi	r2,32
  810584:	e0bff845 	stb	r2,-31(fp)
  810588:	00800804 	movi	r2,32
  81058c:	e0bff885 	stb	r2,-30(fp)
  810590:	00800804 	movi	r2,32
  810594:	e0bff8c5 	stb	r2,-29(fp)
  810598:	00800804 	movi	r2,32
  81059c:	e0bff905 	stb	r2,-28(fp)
  8105a0:	00800804 	movi	r2,32
  8105a4:	e0bff945 	stb	r2,-27(fp)
  8105a8:	00800804 	movi	r2,32
  8105ac:	e0bff985 	stb	r2,-26(fp)
  8105b0:	00800804 	movi	r2,32
  8105b4:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  8105b8:	00800804 	movi	r2,32
  8105bc:	e0bffa05 	stb	r2,-24(fp)
  8105c0:	00800804 	movi	r2,32
  8105c4:	e0bffa45 	stb	r2,-23(fp)
  8105c8:	00800804 	movi	r2,32
  8105cc:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  8105d0:	00bfffc4 	movi	r2,-1
  8105d4:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  8105d8:	e0bff617 	ldw	r2,-40(fp)
  8105dc:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  8105e0:	e03ff415 	stw	zero,-48(fp)
  8105e4:	00002e06 	br	8106a0 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  8105e8:	e0fff417 	ldw	r3,-48(fp)
  8105ec:	e0bff317 	ldw	r2,-52(fp)
  8105f0:	1885883a 	add	r2,r3,r2
  8105f4:	1007883a 	mov	r3,r2
  8105f8:	e0bffc17 	ldw	r2,-16(fp)
  8105fc:	1885883a 	add	r2,r3,r2
  810600:	10800003 	ldbu	r2,0(r2)
  810604:	10803fcc 	andi	r2,r2,255
  810608:	1080201c 	xori	r2,r2,128
  81060c:	10bfe004 	addi	r2,r2,-128
  810610:	10800b98 	cmpnei	r2,r2,46
  810614:	1000031e 	bne	r2,zero,810624 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  810618:	e0bff417 	ldw	r2,-48(fp)
  81061c:	e0bff215 	stw	r2,-56(fp)
  810620:	00001c06 	br	810694 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  810624:	e0bff217 	ldw	r2,-56(fp)
  810628:	1004403a 	cmpge	r2,r2,zero
  81062c:	10000c1e 	bne	r2,zero,810660 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  810630:	e13ff417 	ldw	r4,-48(fp)
  810634:	e0fff417 	ldw	r3,-48(fp)
  810638:	e0bff317 	ldw	r2,-52(fp)
  81063c:	1885883a 	add	r2,r3,r2
  810640:	1007883a 	mov	r3,r2
  810644:	e0bffc17 	ldw	r2,-16(fp)
  810648:	1885883a 	add	r2,r3,r2
  81064c:	10c00003 	ldbu	r3,0(r2)
  810650:	e0bff804 	addi	r2,fp,-32
  810654:	1105883a 	add	r2,r2,r4
  810658:	10c00005 	stb	r3,0(r2)
  81065c:	00000d06 	br	810694 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  810660:	e0fff417 	ldw	r3,-48(fp)
  810664:	e0bff217 	ldw	r2,-56(fp)
  810668:	1889c83a 	sub	r4,r3,r2
  81066c:	e0fff417 	ldw	r3,-48(fp)
  810670:	e0bff317 	ldw	r2,-52(fp)
  810674:	1885883a 	add	r2,r3,r2
  810678:	1007883a 	mov	r3,r2
  81067c:	e0bffc17 	ldw	r2,-16(fp)
  810680:	1885883a 	add	r2,r3,r2
  810684:	10c00003 	ldbu	r3,0(r2)
  810688:	e0bffa04 	addi	r2,fp,-24
  81068c:	1105883a 	add	r2,r2,r4
  810690:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  810694:	e0bff417 	ldw	r2,-48(fp)
  810698:	10800044 	addi	r2,r2,1
  81069c:	e0bff415 	stw	r2,-48(fp)
  8106a0:	e0fff417 	ldw	r3,-48(fp)
  8106a4:	e0bff517 	ldw	r2,-44(fp)
  8106a8:	18bfcf16 	blt	r3,r2,8105e8 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  8106ac:	e0bff617 	ldw	r2,-40(fp)
  8106b0:	1004c03a 	cmpne	r2,r2,zero
  8106b4:	1000551e 	bne	r2,zero,81080c <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  8106b8:	00802174 	movhi	r2,133
  8106bc:	1081f104 	addi	r2,r2,1988
  8106c0:	1080050b 	ldhu	r2,20(r2)
  8106c4:	10bfffcc 	andi	r2,r2,65535
  8106c8:	1008917a 	slli	r4,r2,5
  8106cc:	00802174 	movhi	r2,133
  8106d0:	1081f104 	addi	r2,r2,1988
  8106d4:	1080030b 	ldhu	r2,12(r2)
  8106d8:	117fffcc 	andi	r5,r2,65535
  8106dc:	08016e40 	call	8016e4 <__divsi3>
  8106e0:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8106e4:	e03fef15 	stw	zero,-68(fp)
  8106e8:	00003806 	br	8107cc <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  8106ec:	00802174 	movhi	r2,133
  8106f0:	1081f104 	addi	r2,r2,1988
  8106f4:	10c01317 	ldw	r3,76(r2)
  8106f8:	e0bfef17 	ldw	r2,-68(fp)
  8106fc:	1885883a 	add	r2,r3,r2
  810700:	1009883a 	mov	r4,r2
  810704:	d1672f17 	ldw	r5,-25412(gp)
  810708:	080ed640 	call	80ed64 <Read_Sector_Data>
  81070c:	1005003a 	cmpeq	r2,r2,zero
  810710:	1000311e 	bne	r2,zero,8107d8 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  810714:	e03fee15 	stw	zero,-72(fp)
  810718:	00002306 	br	8107a8 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  81071c:	e0bfee17 	ldw	r2,-72(fp)
  810720:	1008917a 	slli	r4,r2,5
  810724:	e1ffef17 	ldw	r7,-68(fp)
  810728:	e17ffe17 	ldw	r5,-8(fp)
  81072c:	000d883a 	mov	r6,zero
  810730:	080f1ac0 	call	80f1ac <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  810734:	e0bffe17 	ldw	r2,-8(fp)
  810738:	10800003 	ldbu	r2,0(r2)
  81073c:	10803fcc 	andi	r2,r2,255
  810740:	10803960 	cmpeqi	r2,r2,229
  810744:	1000151e 	bne	r2,zero,81079c <get_home_directory_cluster_for_file+0x25c>
  810748:	e0bffe17 	ldw	r2,-8(fp)
  81074c:	10800003 	ldbu	r2,0(r2)
  810750:	10803fcc 	andi	r2,r2,255
  810754:	1005003a 	cmpeq	r2,r2,zero
  810758:	1000101e 	bne	r2,zero,81079c <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  81075c:	e17ff804 	addi	r5,fp,-32
  810760:	e1bffa04 	addi	r6,fp,-24
  810764:	e13ffe17 	ldw	r4,-8(fp)
  810768:	08102540 	call	810254 <match_file_record_to_name_ext>
  81076c:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  810770:	e0bfed17 	ldw	r2,-76(fp)
  810774:	1005003a 	cmpeq	r2,r2,zero
  810778:	1000081e 	bne	r2,zero,81079c <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  81077c:	e0bffe17 	ldw	r2,-8(fp)
  810780:	1080058b 	ldhu	r2,22(r2)
  810784:	10bfffcc 	andi	r2,r2,65535
  810788:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  81078c:	e0fffe17 	ldw	r3,-8(fp)
  810790:	00800044 	movi	r2,1
  810794:	18800a15 	stw	r2,40(r3)
								break;
  810798:	00000606 	br	8107b4 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  81079c:	e0bfee17 	ldw	r2,-72(fp)
  8107a0:	10800044 	addi	r2,r2,1
  8107a4:	e0bfee15 	stw	r2,-72(fp)
  8107a8:	e0bfee17 	ldw	r2,-72(fp)
  8107ac:	10800410 	cmplti	r2,r2,16
  8107b0:	103fda1e 	bne	r2,zero,81071c <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  8107b4:	e0fff117 	ldw	r3,-60(fp)
  8107b8:	e0bff617 	ldw	r2,-40(fp)
  8107bc:	1880061e 	bne	r3,r2,8107d8 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8107c0:	e0bfef17 	ldw	r2,-68(fp)
  8107c4:	10800044 	addi	r2,r2,1
  8107c8:	e0bfef15 	stw	r2,-68(fp)
  8107cc:	e0ffef17 	ldw	r3,-68(fp)
  8107d0:	e0bff017 	ldw	r2,-64(fp)
  8107d4:	18bfc516 	blt	r3,r2,8106ec <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  8107d8:	e0fff117 	ldw	r3,-60(fp)
  8107dc:	e0bff617 	ldw	r2,-40(fp)
  8107e0:	18800826 	beq	r3,r2,810804 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  8107e4:	e0bff117 	ldw	r2,-60(fp)
  8107e8:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  8107ec:	e0fff317 	ldw	r3,-52(fp)
  8107f0:	e0bff517 	ldw	r2,-44(fp)
  8107f4:	1885883a 	add	r2,r3,r2
  8107f8:	10800044 	addi	r2,r2,1
  8107fc:	e0bff315 	stw	r2,-52(fp)
  810800:	00007406 	br	8109d4 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  810804:	e03fff15 	stw	zero,-4(fp)
  810808:	00008c06 	br	810a3c <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  81080c:	e0bff617 	ldw	r2,-40(fp)
  810810:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  810814:	e0bfec17 	ldw	r2,-80(fp)
  810818:	113fff84 	addi	r4,r2,-2
  81081c:	00802174 	movhi	r2,133
  810820:	1081f104 	addi	r2,r2,1988
  810824:	10800383 	ldbu	r2,14(r2)
  810828:	11403fcc 	andi	r5,r2,255
  81082c:	08017b40 	call	8017b4 <__mulsi3>
  810830:	1007883a 	mov	r3,r2
  810834:	00802174 	movhi	r2,133
  810838:	1081f104 	addi	r2,r2,1988
  81083c:	10801417 	ldw	r2,80(r2)
  810840:	1885883a 	add	r2,r3,r2
  810844:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  810848:	e03fea15 	stw	zero,-88(fp)
  81084c:	00003206 	br	810918 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  810850:	e0ffea17 	ldw	r3,-88(fp)
  810854:	e0bfeb17 	ldw	r2,-84(fp)
  810858:	1889883a 	add	r4,r3,r2
  81085c:	d1672f17 	ldw	r5,-25412(gp)
  810860:	080ed640 	call	80ed64 <Read_Sector_Data>
  810864:	1005003a 	cmpeq	r2,r2,zero
  810868:	1000311e 	bne	r2,zero,810930 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  81086c:	e03fe915 	stw	zero,-92(fp)
  810870:	00002006 	br	8108f4 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  810874:	e0bfe917 	ldw	r2,-92(fp)
  810878:	1008917a 	slli	r4,r2,5
  81087c:	e1bfec17 	ldw	r6,-80(fp)
  810880:	e1ffea17 	ldw	r7,-88(fp)
  810884:	e17ffe17 	ldw	r5,-8(fp)
  810888:	080f1ac0 	call	80f1ac <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  81088c:	e0bffe17 	ldw	r2,-8(fp)
  810890:	10800003 	ldbu	r2,0(r2)
  810894:	10803fcc 	andi	r2,r2,255
  810898:	10803960 	cmpeqi	r2,r2,229
  81089c:	1000121e 	bne	r2,zero,8108e8 <get_home_directory_cluster_for_file+0x3a8>
  8108a0:	e0bffe17 	ldw	r2,-8(fp)
  8108a4:	10800003 	ldbu	r2,0(r2)
  8108a8:	10803fcc 	andi	r2,r2,255
  8108ac:	1005003a 	cmpeq	r2,r2,zero
  8108b0:	10000d1e 	bne	r2,zero,8108e8 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  8108b4:	e17ff804 	addi	r5,fp,-32
  8108b8:	e1bffa04 	addi	r6,fp,-24
  8108bc:	e13ffe17 	ldw	r4,-8(fp)
  8108c0:	08102540 	call	810254 <match_file_record_to_name_ext>
  8108c4:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  8108c8:	e0bfe817 	ldw	r2,-96(fp)
  8108cc:	1005003a 	cmpeq	r2,r2,zero
  8108d0:	1000051e 	bne	r2,zero,8108e8 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  8108d4:	e0bffe17 	ldw	r2,-8(fp)
  8108d8:	1080058b 	ldhu	r2,22(r2)
  8108dc:	10bfffcc 	andi	r2,r2,65535
  8108e0:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  8108e4:	00000606 	br	810900 <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  8108e8:	e0bfe917 	ldw	r2,-92(fp)
  8108ec:	10800044 	addi	r2,r2,1
  8108f0:	e0bfe915 	stw	r2,-92(fp)
  8108f4:	e0bfe917 	ldw	r2,-92(fp)
  8108f8:	10800410 	cmplti	r2,r2,16
  8108fc:	103fdd1e 	bne	r2,zero,810874 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  810900:	e0fff117 	ldw	r3,-60(fp)
  810904:	e0bff617 	ldw	r2,-40(fp)
  810908:	1880091e 	bne	r3,r2,810930 <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  81090c:	e0bfea17 	ldw	r2,-88(fp)
  810910:	10800044 	addi	r2,r2,1
  810914:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  810918:	00802174 	movhi	r2,133
  81091c:	1081f104 	addi	r2,r2,1988
  810920:	10800383 	ldbu	r2,14(r2)
  810924:	10c03fcc 	andi	r3,r2,255
  810928:	e0bfea17 	ldw	r2,-88(fp)
  81092c:	10ffc816 	blt	r2,r3,810850 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  810930:	e0fff117 	ldw	r3,-60(fp)
  810934:	e0bff617 	ldw	r2,-40(fp)
  810938:	1880131e 	bne	r3,r2,810988 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  81093c:	e13ff117 	ldw	r4,-60(fp)
  810940:	e17ffb04 	addi	r5,fp,-20
  810944:	080ee600 	call	80ee60 <get_cluster_flag>
  810948:	1005003a 	cmpeq	r2,r2,zero
  81094c:	10000c1e 	bne	r2,zero,810980 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  810950:	e0bffb0b 	ldhu	r2,-20(fp)
  810954:	10bfffcc 	andi	r2,r2,65535
  810958:	10fffe0c 	andi	r3,r2,65528
  81095c:	00bffe14 	movui	r2,65528
  810960:	1880021e 	bne	r3,r2,81096c <get_home_directory_cluster_for_file+0x42c>
							return false;
  810964:	e03fff15 	stw	zero,-4(fp)
  810968:	00003406 	br	810a3c <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  81096c:	e0bffb0b 	ldhu	r2,-20(fp)
  810970:	10bfffcc 	andi	r2,r2,65535
  810974:	10bffe0c 	andi	r2,r2,65528
  810978:	e0bff115 	stw	r2,-60(fp)
  81097c:	00000206 	br	810988 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  810980:	e03fff15 	stw	zero,-4(fp)
  810984:	00002d06 	br	810a3c <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  810988:	e0ffec17 	ldw	r3,-80(fp)
  81098c:	00bffdd4 	movui	r2,65527
  810990:	10c00316 	blt	r2,r3,8109a0 <get_home_directory_cluster_for_file+0x460>
  810994:	e0fff117 	ldw	r3,-60(fp)
  810998:	e0bff617 	ldw	r2,-40(fp)
  81099c:	18bf9d26 	beq	r3,r2,810814 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  8109a0:	e0fff117 	ldw	r3,-60(fp)
  8109a4:	e0bff617 	ldw	r2,-40(fp)
  8109a8:	18800826 	beq	r3,r2,8109cc <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  8109ac:	e0bff117 	ldw	r2,-60(fp)
  8109b0:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  8109b4:	e0fff317 	ldw	r3,-52(fp)
  8109b8:	e0bff517 	ldw	r2,-44(fp)
  8109bc:	1885883a 	add	r2,r3,r2
  8109c0:	10800044 	addi	r2,r2,1
  8109c4:	e0bff315 	stw	r2,-52(fp)
  8109c8:	00000206 	br	8109d4 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  8109cc:	e03fff15 	stw	zero,-4(fp)
  8109d0:	00001a06 	br	810a3c <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  8109d4:	e0bff317 	ldw	r2,-52(fp)
  8109d8:	1007883a 	mov	r3,r2
  8109dc:	e0bffc17 	ldw	r2,-16(fp)
  8109e0:	1889883a 	add	r4,r3,r2
  8109e4:	08101940 	call	810194 <get_dir_divider_location>
  8109e8:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  8109ec:	e0bff517 	ldw	r2,-44(fp)
  8109f0:	1004403a 	cmpge	r2,r2,zero
  8109f4:	1000021e 	bne	r2,zero,810a00 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  8109f8:	00800044 	movi	r2,1
  8109fc:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  810a00:	e0bff517 	ldw	r2,-44(fp)
  810a04:	10800048 	cmpgei	r2,r2,1
  810a08:	103edb1e 	bne	r2,zero,810578 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  810a0c:	e0fffd17 	ldw	r3,-12(fp)
  810a10:	e0bff617 	ldw	r2,-40(fp)
  810a14:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  810a18:	e0bff617 	ldw	r2,-40(fp)
  810a1c:	1004c03a 	cmpne	r2,r2,zero
  810a20:	1000041e 	bne	r2,zero,810a34 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  810a24:	e0bffe17 	ldw	r2,-8(fp)
  810a28:	10000a15 	stw	zero,40(r2)
		result = true;
  810a2c:	00800044 	movi	r2,1
  810a30:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  810a34:	e0bff717 	ldw	r2,-36(fp)
  810a38:	e0bfff15 	stw	r2,-4(fp)
  810a3c:	e0bfff17 	ldw	r2,-4(fp)
}
  810a40:	e037883a 	mov	sp,fp
  810a44:	dfc00117 	ldw	ra,4(sp)
  810a48:	df000017 	ldw	fp,0(sp)
  810a4c:	dec00204 	addi	sp,sp,8
  810a50:	f800283a 	ret

00810a54 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  810a54:	deffe704 	addi	sp,sp,-100
  810a58:	dfc01815 	stw	ra,96(sp)
  810a5c:	df001715 	stw	fp,92(sp)
  810a60:	df001704 	addi	fp,sp,92
  810a64:	e13ffc15 	stw	r4,-16(fp)
  810a68:	e17ffd15 	stw	r5,-12(fp)
  810a6c:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  810a70:	e13ffd17 	ldw	r4,-12(fp)
  810a74:	08101940 	call	810194 <get_dir_divider_location>
  810a78:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  810a7c:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  810a80:	00800804 	movi	r2,32
  810a84:	e0bff805 	stb	r2,-32(fp)
  810a88:	00800804 	movi	r2,32
  810a8c:	e0bff845 	stb	r2,-31(fp)
  810a90:	00800804 	movi	r2,32
  810a94:	e0bff885 	stb	r2,-30(fp)
  810a98:	00800804 	movi	r2,32
  810a9c:	e0bff8c5 	stb	r2,-29(fp)
  810aa0:	00800804 	movi	r2,32
  810aa4:	e0bff905 	stb	r2,-28(fp)
  810aa8:	00800804 	movi	r2,32
  810aac:	e0bff945 	stb	r2,-27(fp)
  810ab0:	00800804 	movi	r2,32
  810ab4:	e0bff985 	stb	r2,-26(fp)
  810ab8:	00800804 	movi	r2,32
  810abc:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  810ac0:	00800804 	movi	r2,32
  810ac4:	e0bffa05 	stb	r2,-24(fp)
  810ac8:	00800804 	movi	r2,32
  810acc:	e0bffa45 	stb	r2,-23(fp)
  810ad0:	00800804 	movi	r2,32
  810ad4:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  810ad8:	00bfffc4 	movi	r2,-1
  810adc:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  810ae0:	e0bffc17 	ldw	r2,-16(fp)
  810ae4:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  810ae8:	e13ffd17 	ldw	r4,-12(fp)
  810aec:	08020f00 	call	8020f0 <strlen>
  810af0:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  810af4:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  810af8:	00000b06 	br	810b28 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  810afc:	e0fff617 	ldw	r3,-40(fp)
  810b00:	e0bff717 	ldw	r2,-36(fp)
  810b04:	1885883a 	add	r2,r3,r2
  810b08:	10800044 	addi	r2,r2,1
  810b0c:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  810b10:	e0bff617 	ldw	r2,-40(fp)
  810b14:	1007883a 	mov	r3,r2
  810b18:	e0bffd17 	ldw	r2,-12(fp)
  810b1c:	1889883a 	add	r4,r3,r2
  810b20:	08101940 	call	810194 <get_dir_divider_location>
  810b24:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  810b28:	e0bff717 	ldw	r2,-36(fp)
  810b2c:	10800048 	cmpgei	r2,r2,1
  810b30:	103ff21e 	bne	r2,zero,810afc <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  810b34:	e0bff617 	ldw	r2,-40(fp)
  810b38:	e0bff315 	stw	r2,-52(fp)
  810b3c:	00002b06 	br	810bec <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  810b40:	e0bff317 	ldw	r2,-52(fp)
  810b44:	1007883a 	mov	r3,r2
  810b48:	e0bffd17 	ldw	r2,-12(fp)
  810b4c:	1885883a 	add	r2,r3,r2
  810b50:	10800003 	ldbu	r2,0(r2)
  810b54:	10803fcc 	andi	r2,r2,255
  810b58:	1080201c 	xori	r2,r2,128
  810b5c:	10bfe004 	addi	r2,r2,-128
  810b60:	10800b98 	cmpnei	r2,r2,46
  810b64:	1000031e 	bne	r2,zero,810b74 <find_file_in_directory+0x120>
			ext_index = index;
  810b68:	e0bff317 	ldw	r2,-52(fp)
  810b6c:	e0bff515 	stw	r2,-44(fp)
  810b70:	00001b06 	br	810be0 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  810b74:	e0bff517 	ldw	r2,-44(fp)
  810b78:	1004403a 	cmpge	r2,r2,zero
  810b7c:	10000c1e 	bne	r2,zero,810bb0 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  810b80:	e0fff317 	ldw	r3,-52(fp)
  810b84:	e0bff617 	ldw	r2,-40(fp)
  810b88:	1889c83a 	sub	r4,r3,r2
  810b8c:	e0bff317 	ldw	r2,-52(fp)
  810b90:	1007883a 	mov	r3,r2
  810b94:	e0bffd17 	ldw	r2,-12(fp)
  810b98:	1885883a 	add	r2,r3,r2
  810b9c:	10c00003 	ldbu	r3,0(r2)
  810ba0:	e0bff804 	addi	r2,fp,-32
  810ba4:	1105883a 	add	r2,r2,r4
  810ba8:	10c00005 	stb	r3,0(r2)
  810bac:	00000c06 	br	810be0 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  810bb0:	e0fff317 	ldw	r3,-52(fp)
  810bb4:	e0bff517 	ldw	r2,-44(fp)
  810bb8:	1885c83a 	sub	r2,r3,r2
  810bbc:	113fffc4 	addi	r4,r2,-1
  810bc0:	e0bff317 	ldw	r2,-52(fp)
  810bc4:	1007883a 	mov	r3,r2
  810bc8:	e0bffd17 	ldw	r2,-12(fp)
  810bcc:	1885883a 	add	r2,r3,r2
  810bd0:	10c00003 	ldbu	r3,0(r2)
  810bd4:	e0bffa04 	addi	r2,fp,-24
  810bd8:	1105883a 	add	r2,r2,r4
  810bdc:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  810be0:	e0bff317 	ldw	r2,-52(fp)
  810be4:	10800044 	addi	r2,r2,1
  810be8:	e0bff315 	stw	r2,-52(fp)
  810bec:	e0fff317 	ldw	r3,-52(fp)
  810bf0:	e0bff217 	ldw	r2,-56(fp)
  810bf4:	18bfd216 	blt	r3,r2,810b40 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  810bf8:	e0bffc17 	ldw	r2,-16(fp)
  810bfc:	1004c03a 	cmpne	r2,r2,zero
  810c00:	1000441e 	bne	r2,zero,810d14 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  810c04:	00802174 	movhi	r2,133
  810c08:	1081f104 	addi	r2,r2,1988
  810c0c:	1080050b 	ldhu	r2,20(r2)
  810c10:	10bfffcc 	andi	r2,r2,65535
  810c14:	1008917a 	slli	r4,r2,5
  810c18:	00802174 	movhi	r2,133
  810c1c:	1081f104 	addi	r2,r2,1988
  810c20:	1080030b 	ldhu	r2,12(r2)
  810c24:	117fffcc 	andi	r5,r2,65535
  810c28:	08016e40 	call	8016e4 <__divsi3>
  810c2c:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  810c30:	e03fef15 	stw	zero,-68(fp)
  810c34:	00003306 	br	810d04 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  810c38:	00802174 	movhi	r2,133
  810c3c:	1081f104 	addi	r2,r2,1988
  810c40:	10c01317 	ldw	r3,76(r2)
  810c44:	e0bfef17 	ldw	r2,-68(fp)
  810c48:	1885883a 	add	r2,r3,r2
  810c4c:	1009883a 	mov	r4,r2
  810c50:	d1672f17 	ldw	r5,-25412(gp)
  810c54:	080ed640 	call	80ed64 <Read_Sector_Data>
  810c58:	1005003a 	cmpeq	r2,r2,zero
  810c5c:	10008e1e 	bne	r2,zero,810e98 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  810c60:	e03fee15 	stw	zero,-72(fp)
  810c64:	00001e06 	br	810ce0 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  810c68:	e0bfee17 	ldw	r2,-72(fp)
  810c6c:	1008917a 	slli	r4,r2,5
  810c70:	e1ffef17 	ldw	r7,-68(fp)
  810c74:	e17ffe17 	ldw	r5,-8(fp)
  810c78:	000d883a 	mov	r6,zero
  810c7c:	080f1ac0 	call	80f1ac <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  810c80:	e0bffe17 	ldw	r2,-8(fp)
  810c84:	10800003 	ldbu	r2,0(r2)
  810c88:	10803fcc 	andi	r2,r2,255
  810c8c:	10803960 	cmpeqi	r2,r2,229
  810c90:	1000101e 	bne	r2,zero,810cd4 <find_file_in_directory+0x280>
  810c94:	e0bffe17 	ldw	r2,-8(fp)
  810c98:	10800003 	ldbu	r2,0(r2)
  810c9c:	10803fcc 	andi	r2,r2,255
  810ca0:	1005003a 	cmpeq	r2,r2,zero
  810ca4:	10000b1e 	bne	r2,zero,810cd4 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  810ca8:	e17ff804 	addi	r5,fp,-32
  810cac:	e1bffa04 	addi	r6,fp,-24
  810cb0:	e13ffe17 	ldw	r4,-8(fp)
  810cb4:	08102540 	call	810254 <match_file_record_to_name_ext>
  810cb8:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  810cbc:	e0bfed17 	ldw	r2,-76(fp)
  810cc0:	1005003a 	cmpeq	r2,r2,zero
  810cc4:	1000031e 	bne	r2,zero,810cd4 <find_file_in_directory+0x280>
							result = true;
  810cc8:	00800044 	movi	r2,1
  810ccc:	e0bff115 	stw	r2,-60(fp)
							break;
  810cd0:	00000606 	br	810cec <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  810cd4:	e0bfee17 	ldw	r2,-72(fp)
  810cd8:	10800044 	addi	r2,r2,1
  810cdc:	e0bfee15 	stw	r2,-72(fp)
  810ce0:	e0bfee17 	ldw	r2,-72(fp)
  810ce4:	10800410 	cmplti	r2,r2,16
  810ce8:	103fdf1e 	bne	r2,zero,810c68 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  810cec:	e0bff117 	ldw	r2,-60(fp)
  810cf0:	1004c03a 	cmpne	r2,r2,zero
  810cf4:	1000681e 	bne	r2,zero,810e98 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  810cf8:	e0bfef17 	ldw	r2,-68(fp)
  810cfc:	10800044 	addi	r2,r2,1
  810d00:	e0bfef15 	stw	r2,-68(fp)
  810d04:	e0ffef17 	ldw	r3,-68(fp)
  810d08:	e0bff017 	ldw	r2,-64(fp)
  810d0c:	18bfca16 	blt	r3,r2,810c38 <find_file_in_directory+0x1e4>
  810d10:	00006106 	br	810e98 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  810d14:	e0bff417 	ldw	r2,-48(fp)
  810d18:	113fff84 	addi	r4,r2,-2
  810d1c:	00802174 	movhi	r2,133
  810d20:	1081f104 	addi	r2,r2,1988
  810d24:	10800383 	ldbu	r2,14(r2)
  810d28:	11403fcc 	andi	r5,r2,255
  810d2c:	08017b40 	call	8017b4 <__mulsi3>
  810d30:	1007883a 	mov	r3,r2
  810d34:	00802174 	movhi	r2,133
  810d38:	1081f104 	addi	r2,r2,1988
  810d3c:	10801417 	ldw	r2,80(r2)
  810d40:	1885883a 	add	r2,r3,r2
  810d44:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  810d48:	e03feb15 	stw	zero,-84(fp)
  810d4c:	00003006 	br	810e10 <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  810d50:	e0ffeb17 	ldw	r3,-84(fp)
  810d54:	e0bfec17 	ldw	r2,-80(fp)
  810d58:	1889883a 	add	r4,r3,r2
  810d5c:	d1672f17 	ldw	r5,-25412(gp)
  810d60:	080ed640 	call	80ed64 <Read_Sector_Data>
  810d64:	1005003a 	cmpeq	r2,r2,zero
  810d68:	10002f1e 	bne	r2,zero,810e28 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  810d6c:	e03fea15 	stw	zero,-88(fp)
  810d70:	00001e06 	br	810dec <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  810d74:	e0bfea17 	ldw	r2,-88(fp)
  810d78:	1008917a 	slli	r4,r2,5
  810d7c:	e1bff417 	ldw	r6,-48(fp)
  810d80:	e1ffeb17 	ldw	r7,-84(fp)
  810d84:	e17ffe17 	ldw	r5,-8(fp)
  810d88:	080f1ac0 	call	80f1ac <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  810d8c:	e0bffe17 	ldw	r2,-8(fp)
  810d90:	10800003 	ldbu	r2,0(r2)
  810d94:	10803fcc 	andi	r2,r2,255
  810d98:	10803960 	cmpeqi	r2,r2,229
  810d9c:	1000101e 	bne	r2,zero,810de0 <find_file_in_directory+0x38c>
  810da0:	e0bffe17 	ldw	r2,-8(fp)
  810da4:	10800003 	ldbu	r2,0(r2)
  810da8:	10803fcc 	andi	r2,r2,255
  810dac:	1005003a 	cmpeq	r2,r2,zero
  810db0:	10000b1e 	bne	r2,zero,810de0 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  810db4:	e17ff804 	addi	r5,fp,-32
  810db8:	e1bffa04 	addi	r6,fp,-24
  810dbc:	e13ffe17 	ldw	r4,-8(fp)
  810dc0:	08102540 	call	810254 <match_file_record_to_name_ext>
  810dc4:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  810dc8:	e0bfe917 	ldw	r2,-92(fp)
  810dcc:	1005003a 	cmpeq	r2,r2,zero
  810dd0:	1000031e 	bne	r2,zero,810de0 <find_file_in_directory+0x38c>
								result = true;
  810dd4:	00800044 	movi	r2,1
  810dd8:	e0bff115 	stw	r2,-60(fp)
								break;
  810ddc:	00000606 	br	810df8 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  810de0:	e0bfea17 	ldw	r2,-88(fp)
  810de4:	10800044 	addi	r2,r2,1
  810de8:	e0bfea15 	stw	r2,-88(fp)
  810dec:	e0bfea17 	ldw	r2,-88(fp)
  810df0:	10800410 	cmplti	r2,r2,16
  810df4:	103fdf1e 	bne	r2,zero,810d74 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  810df8:	e0bff117 	ldw	r2,-60(fp)
  810dfc:	1004c03a 	cmpne	r2,r2,zero
  810e00:	1000091e 	bne	r2,zero,810e28 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  810e04:	e0bfeb17 	ldw	r2,-84(fp)
  810e08:	10800044 	addi	r2,r2,1
  810e0c:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  810e10:	00802174 	movhi	r2,133
  810e14:	1081f104 	addi	r2,r2,1988
  810e18:	10800383 	ldbu	r2,14(r2)
  810e1c:	10c03fcc 	andi	r3,r2,255
  810e20:	e0bfeb17 	ldw	r2,-84(fp)
  810e24:	10ffca16 	blt	r2,r3,810d50 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  810e28:	e0bff117 	ldw	r2,-60(fp)
  810e2c:	1004c03a 	cmpne	r2,r2,zero
  810e30:	1000131e 	bne	r2,zero,810e80 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  810e34:	e13ff417 	ldw	r4,-48(fp)
  810e38:	e17ffb04 	addi	r5,fp,-20
  810e3c:	080ee600 	call	80ee60 <get_cluster_flag>
  810e40:	1005003a 	cmpeq	r2,r2,zero
  810e44:	10000c1e 	bne	r2,zero,810e78 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  810e48:	e0bffb0b 	ldhu	r2,-20(fp)
  810e4c:	10bfffcc 	andi	r2,r2,65535
  810e50:	10fffe0c 	andi	r3,r2,65528
  810e54:	00bffe14 	movui	r2,65528
  810e58:	1880021e 	bne	r3,r2,810e64 <find_file_in_directory+0x410>
						return false;
  810e5c:	e03fff15 	stw	zero,-4(fp)
  810e60:	00000f06 	br	810ea0 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  810e64:	e0bffb0b 	ldhu	r2,-20(fp)
  810e68:	10bfffcc 	andi	r2,r2,65535
  810e6c:	10bffe0c 	andi	r2,r2,65528
  810e70:	e0bff415 	stw	r2,-48(fp)
  810e74:	00000206 	br	810e80 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  810e78:	e03fff15 	stw	zero,-4(fp)
  810e7c:	00000806 	br	810ea0 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  810e80:	e0fff417 	ldw	r3,-48(fp)
  810e84:	00bffdd4 	movui	r2,65527
  810e88:	10c00316 	blt	r2,r3,810e98 <find_file_in_directory+0x444>
  810e8c:	e0bff117 	ldw	r2,-60(fp)
  810e90:	1005003a 	cmpeq	r2,r2,zero
  810e94:	103f9f1e 	bne	r2,zero,810d14 <find_file_in_directory+0x2c0>
	}

	return result;
  810e98:	e0bff117 	ldw	r2,-60(fp)
  810e9c:	e0bfff15 	stw	r2,-4(fp)
  810ea0:	e0bfff17 	ldw	r2,-4(fp)
}
  810ea4:	e037883a 	mov	sp,fp
  810ea8:	dfc00117 	ldw	ra,4(sp)
  810eac:	df000017 	ldw	fp,0(sp)
  810eb0:	dec00204 	addi	sp,sp,8
  810eb4:	f800283a 	ret

00810eb8 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  810eb8:	defff504 	addi	sp,sp,-44
  810ebc:	dfc00a15 	stw	ra,40(sp)
  810ec0:	df000915 	stw	fp,36(sp)
  810ec4:	df000904 	addi	fp,sp,36
  810ec8:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  810ecc:	00802174 	movhi	r2,133
  810ed0:	1081f104 	addi	r2,r2,1988
  810ed4:	10801117 	ldw	r2,68(r2)
  810ed8:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  810edc:	00800084 	movi	r2,2
  810ee0:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  810ee4:	00bfffc4 	movi	r2,-1
  810ee8:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  810eec:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  810ef0:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  810ef4:	00802174 	movhi	r2,133
  810ef8:	1081f104 	addi	r2,r2,1988
  810efc:	10801417 	ldw	r2,80(r2)
  810f00:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  810f04:	00802174 	movhi	r2,133
  810f08:	1081f104 	addi	r2,r2,1988
  810f0c:	1080058b 	ldhu	r2,22(r2)
  810f10:	10bfffcc 	andi	r2,r2,65535
  810f14:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  810f18:	00802174 	movhi	r2,133
  810f1c:	1081f104 	addi	r2,r2,1988
  810f20:	10800917 	ldw	r2,36(r2)
  810f24:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  810f28:	e0fff817 	ldw	r3,-32(fp)
  810f2c:	e0bff717 	ldw	r2,-36(fp)
  810f30:	10c00b2e 	bgeu	r2,r3,810f60 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  810f34:	e0fff817 	ldw	r3,-32(fp)
  810f38:	e0bff917 	ldw	r2,-28(fp)
  810f3c:	1889c83a 	sub	r4,r3,r2
  810f40:	00802174 	movhi	r2,133
  810f44:	1081f104 	addi	r2,r2,1988
  810f48:	10800383 	ldbu	r2,14(r2)
  810f4c:	11403fcc 	andi	r5,r2,255
  810f50:	08017a40 	call	8017a4 <__udivsi3>
  810f54:	10800044 	addi	r2,r2,1
  810f58:	e0bffa15 	stw	r2,-24(fp)
  810f5c:	00002906 	br	811004 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  810f60:	e0fff717 	ldw	r3,-36(fp)
  810f64:	e0bff917 	ldw	r2,-28(fp)
  810f68:	1889c83a 	sub	r4,r3,r2
  810f6c:	00802174 	movhi	r2,133
  810f70:	1081f104 	addi	r2,r2,1988
  810f74:	10800383 	ldbu	r2,14(r2)
  810f78:	11403fcc 	andi	r5,r2,255
  810f7c:	08017a40 	call	8017a4 <__udivsi3>
  810f80:	10800044 	addi	r2,r2,1
  810f84:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  810f88:	00001e06 	br	811004 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  810f8c:	e13ffe17 	ldw	r4,-8(fp)
  810f90:	d1672f17 	ldw	r5,-25412(gp)
  810f94:	080ed640 	call	80ed64 <Read_Sector_Data>
  810f98:	1005003a 	cmpeq	r2,r2,zero
  810f9c:	1000131e 	bne	r2,zero,810fec <find_first_empty_cluster+0x134>
			do {
				cluster
  810fa0:	d0a73117 	ldw	r2,-25404(gp)
  810fa4:	10800a17 	ldw	r2,40(r2)
  810fa8:	1007883a 	mov	r3,r2
  810fac:	e0bffd17 	ldw	r2,-12(fp)
  810fb0:	10803fcc 	andi	r2,r2,255
  810fb4:	1085883a 	add	r2,r2,r2
  810fb8:	1885883a 	add	r2,r3,r2
  810fbc:	1080002b 	ldhuio	r2,0(r2)
  810fc0:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  810fc4:	e0bffc0f 	ldh	r2,-16(fp)
  810fc8:	1005003a 	cmpeq	r2,r2,zero
  810fcc:	1000071e 	bne	r2,zero,810fec <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  810fd0:	e0bffd17 	ldw	r2,-12(fp)
  810fd4:	10800044 	addi	r2,r2,1
  810fd8:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  810fdc:	e0bffd17 	ldw	r2,-12(fp)
  810fe0:	10803fcc 	andi	r2,r2,255
  810fe4:	1004c03a 	cmpne	r2,r2,zero
  810fe8:	103fed1e 	bne	r2,zero,810fa0 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  810fec:	e0bffc0f 	ldh	r2,-16(fp)
  810ff0:	1005003a 	cmpeq	r2,r2,zero
  810ff4:	1000081e 	bne	r2,zero,811018 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  810ff8:	e0bffe17 	ldw	r2,-8(fp)
  810ffc:	10800044 	addi	r2,r2,1
  811000:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  811004:	00802174 	movhi	r2,133
  811008:	1081f104 	addi	r2,r2,1988
  81100c:	10c01217 	ldw	r3,72(r2)
  811010:	e0bffe17 	ldw	r2,-8(fp)
  811014:	18bfdd1e 	bne	r3,r2,810f8c <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  811018:	e0bffc0f 	ldh	r2,-16(fp)
  81101c:	1004c03a 	cmpne	r2,r2,zero
  811020:	1000081e 	bne	r2,zero,811044 <find_first_empty_cluster+0x18c>
  811024:	e0fffc0f 	ldh	r3,-16(fp)
  811028:	e0bffa17 	ldw	r2,-24(fp)
  81102c:	10c00536 	bltu	r2,r3,811044 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  811030:	e0bfff17 	ldw	r2,-4(fp)
  811034:	e0fffd17 	ldw	r3,-12(fp)
  811038:	10c00015 	stw	r3,0(r2)
		result = true;
  81103c:	00800044 	movi	r2,1
  811040:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  811044:	e0bffb17 	ldw	r2,-20(fp)
}
  811048:	e037883a 	mov	sp,fp
  81104c:	dfc00117 	ldw	ra,4(sp)
  811050:	df000017 	ldw	fp,0(sp)
  811054:	dec00204 	addi	sp,sp,8
  811058:	f800283a 	ret

0081105c <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  81105c:	defff404 	addi	sp,sp,-48
  811060:	dfc00b15 	stw	ra,44(sp)
  811064:	df000a15 	stw	fp,40(sp)
  811068:	df000a04 	addi	fp,sp,40
  81106c:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  811070:	00bfffc4 	movi	r2,-1
  811074:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  811078:	e0bffe17 	ldw	r2,-8(fp)
  81107c:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  811080:	e0bffa17 	ldw	r2,-24(fp)
  811084:	113fff84 	addi	r4,r2,-2
  811088:	00802174 	movhi	r2,133
  81108c:	1081f104 	addi	r2,r2,1988
  811090:	10800383 	ldbu	r2,14(r2)
  811094:	11403fcc 	andi	r5,r2,255
  811098:	08017b40 	call	8017b4 <__mulsi3>
  81109c:	1007883a 	mov	r3,r2
  8110a0:	00802174 	movhi	r2,133
  8110a4:	1081f104 	addi	r2,r2,1988
  8110a8:	10801417 	ldw	r2,80(r2)
  8110ac:	1885883a 	add	r2,r3,r2
  8110b0:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  8110b4:	e03ff815 	stw	zero,-32(fp)
  8110b8:	00002c06 	br	81116c <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  8110bc:	e0fff817 	ldw	r3,-32(fp)
  8110c0:	e0bff917 	ldw	r2,-28(fp)
  8110c4:	1889883a 	add	r4,r3,r2
  8110c8:	d1672f17 	ldw	r5,-25412(gp)
  8110cc:	080ed640 	call	80ed64 <Read_Sector_Data>
  8110d0:	1005003a 	cmpeq	r2,r2,zero
  8110d4:	10002b1e 	bne	r2,zero,811184 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8110d8:	e03ff715 	stw	zero,-36(fp)
  8110dc:	00001d06 	br	811154 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  8110e0:	d0a73117 	ldw	r2,-25404(gp)
  8110e4:	10800a17 	ldw	r2,40(r2)
  8110e8:	1007883a 	mov	r3,r2
  8110ec:	e0bff717 	ldw	r2,-36(fp)
  8110f0:	1004917a 	slli	r2,r2,5
  8110f4:	1885883a 	add	r2,r3,r2
  8110f8:	10800023 	ldbuio	r2,0(r2)
  8110fc:	10803fcc 	andi	r2,r2,255
  811100:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  811104:	e0bff60b 	ldhu	r2,-40(fp)
  811108:	10803960 	cmpeqi	r2,r2,229
  81110c:	1000031e 	bne	r2,zero,81111c <find_first_empty_record_in_a_subdirectory+0xc0>
  811110:	e0bff60b 	ldhu	r2,-40(fp)
  811114:	1004c03a 	cmpne	r2,r2,zero
  811118:	10000b1e 	bne	r2,zero,811148 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  81111c:	e0bff817 	ldw	r2,-32(fp)
  811120:	1006913a 	slli	r3,r2,4
  811124:	e0bff717 	ldw	r2,-36(fp)
  811128:	1885883a 	add	r2,r3,r2
  81112c:	1006943a 	slli	r3,r2,16
  811130:	e0bffa17 	ldw	r2,-24(fp)
  811134:	1884b03a 	or	r2,r3,r2
  811138:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  81113c:	e0bffb17 	ldw	r2,-20(fp)
  811140:	e0bfff15 	stw	r2,-4(fp)
  811144:	00005206 	br	811290 <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  811148:	e0bff717 	ldw	r2,-36(fp)
  81114c:	10800044 	addi	r2,r2,1
  811150:	e0bff715 	stw	r2,-36(fp)
  811154:	e0bff717 	ldw	r2,-36(fp)
  811158:	10800410 	cmplti	r2,r2,16
  81115c:	103fe01e 	bne	r2,zero,8110e0 <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  811160:	e0bff817 	ldw	r2,-32(fp)
  811164:	10800044 	addi	r2,r2,1
  811168:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  81116c:	00802174 	movhi	r2,133
  811170:	1081f104 	addi	r2,r2,1988
  811174:	10800383 	ldbu	r2,14(r2)
  811178:	10c03fcc 	andi	r3,r2,255
  81117c:	e0bff817 	ldw	r2,-32(fp)
  811180:	10ffce16 	blt	r2,r3,8110bc <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  811184:	e0bffb17 	ldw	r2,-20(fp)
  811188:	1004403a 	cmpge	r2,r2,zero
  81118c:	1000381e 	bne	r2,zero,811270 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  811190:	e13ffa17 	ldw	r4,-24(fp)
  811194:	e17ffc04 	addi	r5,fp,-16
  811198:	080ee600 	call	80ee60 <get_cluster_flag>
  81119c:	1005003a 	cmpeq	r2,r2,zero
  8111a0:	1000311e 	bne	r2,zero,811268 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  8111a4:	e0bffc0b 	ldhu	r2,-16(fp)
  8111a8:	10bfffcc 	andi	r2,r2,65535
  8111ac:	10fffe0c 	andi	r3,r2,65528
  8111b0:	00bffe14 	movui	r2,65528
  8111b4:	18802e1e 	bne	r3,r2,811270 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  8111b8:	e13ffd04 	addi	r4,fp,-12
  8111bc:	0810eb80 	call	810eb8 <find_first_empty_cluster>
  8111c0:	1005003a 	cmpeq	r2,r2,zero
  8111c4:	1000231e 	bne	r2,zero,811254 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  8111c8:	e13ffa17 	ldw	r4,-24(fp)
  8111cc:	e0bffd17 	ldw	r2,-12(fp)
  8111d0:	117fffcc 	andi	r5,r2,65535
  8111d4:	2960001c 	xori	r5,r5,32768
  8111d8:	29600004 	addi	r5,r5,-32768
  8111dc:	01800044 	movi	r6,1
  8111e0:	080ef180 	call	80ef18 <mark_cluster>
  8111e4:	1005003a 	cmpeq	r2,r2,zero
  8111e8:	10001a1e 	bne	r2,zero,811254 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8111ec:	e0bffd17 	ldw	r2,-12(fp)
  8111f0:	1009883a 	mov	r4,r2
  8111f4:	017fffc4 	movi	r5,-1
  8111f8:	01800044 	movi	r6,1
  8111fc:	080ef180 	call	80ef18 <mark_cluster>
  811200:	1005003a 	cmpeq	r2,r2,zero
  811204:	1000131e 	bne	r2,zero,811254 <find_first_empty_record_in_a_subdirectory+0x1f8>
  811208:	e13ffa17 	ldw	r4,-24(fp)
  81120c:	e0bffd17 	ldw	r2,-12(fp)
  811210:	117fffcc 	andi	r5,r2,65535
  811214:	2960001c 	xori	r5,r5,32768
  811218:	29600004 	addi	r5,r5,-32768
  81121c:	000d883a 	mov	r6,zero
  811220:	080ef180 	call	80ef18 <mark_cluster>
  811224:	1005003a 	cmpeq	r2,r2,zero
  811228:	10000a1e 	bne	r2,zero,811254 <find_first_empty_record_in_a_subdirectory+0x1f8>
  81122c:	e0bffd17 	ldw	r2,-12(fp)
  811230:	1009883a 	mov	r4,r2
  811234:	017fffc4 	movi	r5,-1
  811238:	000d883a 	mov	r6,zero
  81123c:	080ef180 	call	80ef18 <mark_cluster>
  811240:	1005003a 	cmpeq	r2,r2,zero
  811244:	1000031e 	bne	r2,zero,811254 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  811248:	080ed140 	call	80ed14 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  81124c:	e0bffd17 	ldw	r2,-12(fp)
  811250:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  811254:	e0bffc0b 	ldhu	r2,-16(fp)
  811258:	10bfffcc 	andi	r2,r2,65535
  81125c:	10bffe0c 	andi	r2,r2,65528
  811260:	e0bffa15 	stw	r2,-24(fp)
  811264:	00000206 	br	811270 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  811268:	00bfffc4 	movi	r2,-1
  81126c:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  811270:	e0fffa17 	ldw	r3,-24(fp)
  811274:	00bffdd4 	movui	r2,65527
  811278:	10c00316 	blt	r2,r3,811288 <find_first_empty_record_in_a_subdirectory+0x22c>
  81127c:	e0bffb17 	ldw	r2,-20(fp)
  811280:	10bfffe0 	cmpeqi	r2,r2,-1
  811284:	103f7e1e 	bne	r2,zero,811080 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  811288:	e0bffb17 	ldw	r2,-20(fp)
  81128c:	e0bfff15 	stw	r2,-4(fp)
  811290:	e0bfff17 	ldw	r2,-4(fp)
}
  811294:	e037883a 	mov	sp,fp
  811298:	dfc00117 	ldw	ra,4(sp)
  81129c:	df000017 	ldw	fp,0(sp)
  8112a0:	dec00204 	addi	sp,sp,8
  8112a4:	f800283a 	ret

008112a8 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  8112a8:	defff804 	addi	sp,sp,-32
  8112ac:	dfc00715 	stw	ra,28(sp)
  8112b0:	df000615 	stw	fp,24(sp)
  8112b4:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  8112b8:	00802174 	movhi	r2,133
  8112bc:	1081f104 	addi	r2,r2,1988
  8112c0:	1080050b 	ldhu	r2,20(r2)
  8112c4:	10bfffcc 	andi	r2,r2,65535
  8112c8:	1008917a 	slli	r4,r2,5
  8112cc:	00802174 	movhi	r2,133
  8112d0:	1081f104 	addi	r2,r2,1988
  8112d4:	1080030b 	ldhu	r2,12(r2)
  8112d8:	117fffcc 	andi	r5,r2,65535
  8112dc:	08016e40 	call	8016e4 <__divsi3>
  8112e0:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  8112e4:	00bfffc4 	movi	r2,-1
  8112e8:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  8112ec:	e03ffd15 	stw	zero,-12(fp)
  8112f0:	00002d06 	br	8113a8 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  8112f4:	00802174 	movhi	r2,133
  8112f8:	1081f104 	addi	r2,r2,1988
  8112fc:	10c01317 	ldw	r3,76(r2)
  811300:	e0bffd17 	ldw	r2,-12(fp)
  811304:	1885883a 	add	r2,r3,r2
  811308:	1009883a 	mov	r4,r2
  81130c:	d1672f17 	ldw	r5,-25412(gp)
  811310:	080ed640 	call	80ed64 <Read_Sector_Data>
  811314:	1005003a 	cmpeq	r2,r2,zero
  811318:	1000261e 	bne	r2,zero,8113b4 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  81131c:	e03ffb15 	stw	zero,-20(fp)
  811320:	00001b06 	br	811390 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  811324:	d0a73117 	ldw	r2,-25404(gp)
  811328:	10800a17 	ldw	r2,40(r2)
  81132c:	1007883a 	mov	r3,r2
  811330:	e0bffb17 	ldw	r2,-20(fp)
  811334:	1004917a 	slli	r2,r2,5
  811338:	1885883a 	add	r2,r3,r2
  81133c:	10800023 	ldbuio	r2,0(r2)
  811340:	10803fcc 	andi	r2,r2,255
  811344:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  811348:	e0bffa0b 	ldhu	r2,-24(fp)
  81134c:	10803960 	cmpeqi	r2,r2,229
  811350:	1000031e 	bne	r2,zero,811360 <find_first_empty_record_in_root_directory+0xb8>
  811354:	e0bffa0b 	ldhu	r2,-24(fp)
  811358:	1004c03a 	cmpne	r2,r2,zero
  81135c:	1000091e 	bne	r2,zero,811384 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  811360:	e0bffd17 	ldw	r2,-12(fp)
  811364:	1006913a 	slli	r3,r2,4
  811368:	e0bffb17 	ldw	r2,-20(fp)
  81136c:	1885883a 	add	r2,r3,r2
  811370:	1004943a 	slli	r2,r2,16
  811374:	e0bffc15 	stw	r2,-16(fp)
					return result;
  811378:	e0bffc17 	ldw	r2,-16(fp)
  81137c:	e0bfff15 	stw	r2,-4(fp)
  811380:	00000e06 	br	8113bc <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  811384:	e0bffb17 	ldw	r2,-20(fp)
  811388:	10800044 	addi	r2,r2,1
  81138c:	e0bffb15 	stw	r2,-20(fp)
  811390:	e0bffb17 	ldw	r2,-20(fp)
  811394:	10800410 	cmplti	r2,r2,16
  811398:	103fe21e 	bne	r2,zero,811324 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  81139c:	e0bffd17 	ldw	r2,-12(fp)
  8113a0:	10800044 	addi	r2,r2,1
  8113a4:	e0bffd15 	stw	r2,-12(fp)
  8113a8:	e0fffd17 	ldw	r3,-12(fp)
  8113ac:	e0bffe17 	ldw	r2,-8(fp)
  8113b0:	18bfd016 	blt	r3,r2,8112f4 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  8113b4:	e0bffc17 	ldw	r2,-16(fp)
  8113b8:	e0bfff15 	stw	r2,-4(fp)
  8113bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8113c0:	e037883a 	mov	sp,fp
  8113c4:	dfc00117 	ldw	ra,4(sp)
  8113c8:	df000017 	ldw	fp,0(sp)
  8113cc:	dec00204 	addi	sp,sp,8
  8113d0:	f800283a 	ret

008113d4 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  8113d4:	defffa04 	addi	sp,sp,-24
  8113d8:	df000515 	stw	fp,20(sp)
  8113dc:	df000504 	addi	fp,sp,20
  8113e0:	e13ffd15 	stw	r4,-12(fp)
  8113e4:	e17ffe15 	stw	r5,-8(fp)
  8113e8:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  8113ec:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  8113f0:	e03ffc15 	stw	zero,-16(fp)
  8113f4:	00002b06 	br	8114a4 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  8113f8:	e0bffb17 	ldw	r2,-20(fp)
  8113fc:	1007883a 	mov	r3,r2
  811400:	e0bffd17 	ldw	r2,-12(fp)
  811404:	1885883a 	add	r2,r3,r2
  811408:	10800003 	ldbu	r2,0(r2)
  81140c:	10803fcc 	andi	r2,r2,255
  811410:	1080201c 	xori	r2,r2,128
  811414:	10bfe004 	addi	r2,r2,-128
  811418:	10800ba0 	cmpeqi	r2,r2,46
  81141c:	1000181e 	bne	r2,zero,811480 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  811420:	e0bffc17 	ldw	r2,-16(fp)
  811424:	1007883a 	mov	r3,r2
  811428:	e0bffe17 	ldw	r2,-8(fp)
  81142c:	1889883a 	add	r4,r3,r2
  811430:	e0bffb17 	ldw	r2,-20(fp)
  811434:	1007883a 	mov	r3,r2
  811438:	e0bffd17 	ldw	r2,-12(fp)
  81143c:	1885883a 	add	r2,r3,r2
  811440:	10800003 	ldbu	r2,0(r2)
  811444:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  811448:	e0bffb17 	ldw	r2,-20(fp)
  81144c:	1007883a 	mov	r3,r2
  811450:	e0bffd17 	ldw	r2,-12(fp)
  811454:	1885883a 	add	r2,r3,r2
  811458:	10800003 	ldbu	r2,0(r2)
  81145c:	10803fcc 	andi	r2,r2,255
  811460:	1080201c 	xori	r2,r2,128
  811464:	10bfe004 	addi	r2,r2,-128
  811468:	1005003a 	cmpeq	r2,r2,zero
  81146c:	10000a1e 	bne	r2,zero,811498 <convert_filename_to_name_extension+0xc4>
				local++;
  811470:	e0bffb17 	ldw	r2,-20(fp)
  811474:	10800044 	addi	r2,r2,1
  811478:	e0bffb15 	stw	r2,-20(fp)
  81147c:	00000606 	br	811498 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  811480:	e0bffc17 	ldw	r2,-16(fp)
  811484:	1007883a 	mov	r3,r2
  811488:	e0bffe17 	ldw	r2,-8(fp)
  81148c:	1887883a 	add	r3,r3,r2
  811490:	00800804 	movi	r2,32
  811494:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  811498:	e0bffc17 	ldw	r2,-16(fp)
  81149c:	10800044 	addi	r2,r2,1
  8114a0:	e0bffc15 	stw	r2,-16(fp)
  8114a4:	e0bffc17 	ldw	r2,-16(fp)
  8114a8:	10800210 	cmplti	r2,r2,8
  8114ac:	103fd21e 	bne	r2,zero,8113f8 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  8114b0:	e0bffb17 	ldw	r2,-20(fp)
  8114b4:	1007883a 	mov	r3,r2
  8114b8:	e0bffd17 	ldw	r2,-12(fp)
  8114bc:	1885883a 	add	r2,r3,r2
  8114c0:	10800003 	ldbu	r2,0(r2)
  8114c4:	10803fcc 	andi	r2,r2,255
  8114c8:	1080201c 	xori	r2,r2,128
  8114cc:	10bfe004 	addi	r2,r2,-128
  8114d0:	10800b98 	cmpnei	r2,r2,46
  8114d4:	1000031e 	bne	r2,zero,8114e4 <convert_filename_to_name_extension+0x110>
		local++;
  8114d8:	e0bffb17 	ldw	r2,-20(fp)
  8114dc:	10800044 	addi	r2,r2,1
  8114e0:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  8114e4:	e03ffc15 	stw	zero,-16(fp)
  8114e8:	00002106 	br	811570 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  8114ec:	e0bffb17 	ldw	r2,-20(fp)
  8114f0:	1007883a 	mov	r3,r2
  8114f4:	e0bffd17 	ldw	r2,-12(fp)
  8114f8:	1885883a 	add	r2,r3,r2
  8114fc:	10800003 	ldbu	r2,0(r2)
  811500:	10803fcc 	andi	r2,r2,255
  811504:	1080201c 	xori	r2,r2,128
  811508:	10bfe004 	addi	r2,r2,-128
  81150c:	1005003a 	cmpeq	r2,r2,zero
  811510:	10000e1e 	bne	r2,zero,81154c <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  811514:	e0bffc17 	ldw	r2,-16(fp)
  811518:	1007883a 	mov	r3,r2
  81151c:	e0bfff17 	ldw	r2,-4(fp)
  811520:	1889883a 	add	r4,r3,r2
  811524:	e0bffb17 	ldw	r2,-20(fp)
  811528:	1007883a 	mov	r3,r2
  81152c:	e0bffd17 	ldw	r2,-12(fp)
  811530:	1885883a 	add	r2,r3,r2
  811534:	10800003 	ldbu	r2,0(r2)
  811538:	20800005 	stb	r2,0(r4)
			local++;
  81153c:	e0bffb17 	ldw	r2,-20(fp)
  811540:	10800044 	addi	r2,r2,1
  811544:	e0bffb15 	stw	r2,-20(fp)
  811548:	00000606 	br	811564 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  81154c:	e0bffc17 	ldw	r2,-16(fp)
  811550:	1007883a 	mov	r3,r2
  811554:	e0bfff17 	ldw	r2,-4(fp)
  811558:	1887883a 	add	r3,r3,r2
  81155c:	00800804 	movi	r2,32
  811560:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  811564:	e0bffc17 	ldw	r2,-16(fp)
  811568:	10800044 	addi	r2,r2,1
  81156c:	e0bffc15 	stw	r2,-16(fp)
  811570:	e0bffc17 	ldw	r2,-16(fp)
  811574:	108000d0 	cmplti	r2,r2,3
  811578:	103fdc1e 	bne	r2,zero,8114ec <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  81157c:	e037883a 	mov	sp,fp
  811580:	df000017 	ldw	fp,0(sp)
  811584:	dec00104 	addi	sp,sp,4
  811588:	f800283a 	ret

0081158c <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  81158c:	defff204 	addi	sp,sp,-56
  811590:	dfc00d15 	stw	ra,52(sp)
  811594:	df000c15 	stw	fp,48(sp)
  811598:	dc000b15 	stw	r16,44(sp)
  81159c:	df000b04 	addi	fp,sp,44
  8115a0:	e13ffb15 	stw	r4,-20(fp)
  8115a4:	e17ffc15 	stw	r5,-16(fp)
  8115a8:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  8115ac:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  8115b0:	e13ffa04 	addi	r4,fp,-24
  8115b4:	0810eb80 	call	810eb8 <find_first_empty_cluster>
  8115b8:	1005003a 	cmpeq	r2,r2,zero
  8115bc:	1000a31e 	bne	r2,zero,81184c <create_file+0x2c0>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  8115c0:	e0bffd17 	ldw	r2,-12(fp)
  8115c4:	10800a17 	ldw	r2,40(r2)
  8115c8:	1004c03a 	cmpne	r2,r2,zero
  8115cc:	1000031e 	bne	r2,zero,8115dc <create_file+0x50>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  8115d0:	08112a80 	call	8112a8 <find_first_empty_record_in_root_directory>
  8115d4:	e0bff815 	stw	r2,-32(fp)
  8115d8:	00000506 	br	8115f0 <create_file+0x64>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  8115dc:	e0bffd17 	ldw	r2,-12(fp)
  8115e0:	1080058b 	ldhu	r2,22(r2)
  8115e4:	113fffcc 	andi	r4,r2,65535
  8115e8:	081105c0 	call	81105c <find_first_empty_record_in_a_subdirectory>
  8115ec:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  8115f0:	e0bff817 	ldw	r2,-32(fp)
  8115f4:	1004803a 	cmplt	r2,r2,zero
  8115f8:	1000941e 	bne	r2,zero,81184c <create_file+0x2c0>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  8115fc:	e13ffb17 	ldw	r4,-20(fp)
  811600:	08101940 	call	810194 <get_dir_divider_location>
  811604:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  811608:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  81160c:	00000b06 	br	81163c <create_file+0xb0>
				last_dir_separator = last_dir_separator + location + 1;
  811610:	e0fff517 	ldw	r3,-44(fp)
  811614:	e0bff617 	ldw	r2,-40(fp)
  811618:	1885883a 	add	r2,r3,r2
  81161c:	10800044 	addi	r2,r2,1
  811620:	e0bff515 	stw	r2,-44(fp)
				location
  811624:	e0bff517 	ldw	r2,-44(fp)
  811628:	1007883a 	mov	r3,r2
  81162c:	e0bffb17 	ldw	r2,-20(fp)
  811630:	1889883a 	add	r4,r3,r2
  811634:	08101940 	call	810194 <get_dir_divider_location>
  811638:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  81163c:	e0bff617 	ldw	r2,-40(fp)
  811640:	10800048 	cmpgei	r2,r2,1
  811644:	103ff21e 	bne	r2,zero,811610 <create_file+0x84>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  811648:	e0bff517 	ldw	r2,-44(fp)
  81164c:	1007883a 	mov	r3,r2
  811650:	e0bffb17 	ldw	r2,-20(fp)
  811654:	1889883a 	add	r4,r3,r2
  811658:	e0bffc17 	ldw	r2,-16(fp)
  81165c:	100b883a 	mov	r5,r2
  811660:	e0bffc17 	ldw	r2,-16(fp)
  811664:	10800204 	addi	r2,r2,8
  811668:	100d883a 	mov	r6,r2
  81166c:	08113d40 	call	8113d4 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  811670:	e0bffc17 	ldw	r2,-16(fp)
  811674:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  811678:	e0bffc17 	ldw	r2,-16(fp)
  81167c:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  811680:	e0bffc17 	ldw	r2,-16(fp)
  811684:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  811688:	e0bffc17 	ldw	r2,-16(fp)
  81168c:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  811690:	e0bffc17 	ldw	r2,-16(fp)
  811694:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  811698:	e0bffc17 	ldw	r2,-16(fp)
  81169c:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  8116a0:	e0bffa17 	ldw	r2,-24(fp)
  8116a4:	1007883a 	mov	r3,r2
  8116a8:	e0bffc17 	ldw	r2,-16(fp)
  8116ac:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  8116b0:	e0bffc17 	ldw	r2,-16(fp)
  8116b4:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  8116b8:	e0fffa17 	ldw	r3,-24(fp)
  8116bc:	e0bffc17 	ldw	r2,-16(fp)
  8116c0:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  8116c4:	e0bffc17 	ldw	r2,-16(fp)
  8116c8:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  8116cc:	e0bffc17 	ldw	r2,-16(fp)
  8116d0:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  8116d4:	e0bff817 	ldw	r2,-32(fp)
  8116d8:	10ffffcc 	andi	r3,r2,65535
  8116dc:	e0bffc17 	ldw	r2,-16(fp)
  8116e0:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  8116e4:	e0bff817 	ldw	r2,-32(fp)
  8116e8:	1005d43a 	srai	r2,r2,16
  8116ec:	10bfffcc 	andi	r2,r2,65535
  8116f0:	e0bfff15 	stw	r2,-4(fp)
  8116f4:	e0ffff17 	ldw	r3,-4(fp)
  8116f8:	1804403a 	cmpge	r2,r3,zero
  8116fc:	1000031e 	bne	r2,zero,81170c <create_file+0x180>
  811700:	e0bfff17 	ldw	r2,-4(fp)
  811704:	108003c4 	addi	r2,r2,15
  811708:	e0bfff15 	stw	r2,-4(fp)
  81170c:	e0ffff17 	ldw	r3,-4(fp)
  811710:	1805d13a 	srai	r2,r3,4
  811714:	1007883a 	mov	r3,r2
  811718:	e0bffc17 	ldw	r2,-16(fp)
  81171c:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  811720:	e0bff817 	ldw	r2,-32(fp)
  811724:	1005d43a 	srai	r2,r2,16
  811728:	108003cc 	andi	r2,r2,15
  81172c:	1004917a 	slli	r2,r2,5
  811730:	1007883a 	mov	r3,r2
  811734:	e0bffc17 	ldw	r2,-16(fp)
  811738:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  81173c:	e0bffd17 	ldw	r2,-12(fp)
  811740:	1080058b 	ldhu	r2,22(r2)
  811744:	10ffffcc 	andi	r3,r2,65535
  811748:	e0bffc17 	ldw	r2,-16(fp)
  81174c:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  811750:	e0fffc17 	ldw	r3,-16(fp)
  811754:	00800044 	movi	r2,1
  811758:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  81175c:	e0fffc17 	ldw	r3,-16(fp)
  811760:	00800044 	movi	r2,1
  811764:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  811768:	e0bffc17 	ldw	r2,-16(fp)
  81176c:	10800a17 	ldw	r2,40(r2)
  811770:	1004c03a 	cmpne	r2,r2,zero
  811774:	1000081e 	bne	r2,zero,811798 <create_file+0x20c>
  811778:	00802174 	movhi	r2,133
  81177c:	1081f104 	addi	r2,r2,1988
  811780:	10c01317 	ldw	r3,76(r2)
  811784:	e0bffc17 	ldw	r2,-16(fp)
  811788:	10800b17 	ldw	r2,44(r2)
  81178c:	1887883a 	add	r3,r3,r2
  811790:	e0fffe15 	stw	r3,-8(fp)
  811794:	00001006 	br	8117d8 <create_file+0x24c>
  811798:	00802174 	movhi	r2,133
  81179c:	1081f104 	addi	r2,r2,1988
  8117a0:	14001417 	ldw	r16,80(r2)
  8117a4:	e0bffc17 	ldw	r2,-16(fp)
  8117a8:	10800a17 	ldw	r2,40(r2)
  8117ac:	113fff84 	addi	r4,r2,-2
  8117b0:	00802174 	movhi	r2,133
  8117b4:	1081f104 	addi	r2,r2,1988
  8117b8:	10800383 	ldbu	r2,14(r2)
  8117bc:	11403fcc 	andi	r5,r2,255
  8117c0:	08017b40 	call	8017b4 <__mulsi3>
  8117c4:	8087883a 	add	r3,r16,r2
  8117c8:	e0bffc17 	ldw	r2,-16(fp)
  8117cc:	10800b17 	ldw	r2,44(r2)
  8117d0:	1887883a 	add	r3,r3,r2
  8117d4:	e0fffe15 	stw	r3,-8(fp)
  8117d8:	e0bffe17 	ldw	r2,-8(fp)
  8117dc:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  8117e0:	e13ff717 	ldw	r4,-36(fp)
  8117e4:	d1672f17 	ldw	r5,-25412(gp)
  8117e8:	080ed640 	call	80ed64 <Read_Sector_Data>
  8117ec:	1005003a 	cmpeq	r2,r2,zero
  8117f0:	1000161e 	bne	r2,zero,81184c <create_file+0x2c0>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  8117f4:	e0bffc17 	ldw	r2,-16(fp)
  8117f8:	10800c0b 	ldhu	r2,48(r2)
  8117fc:	113fffcc 	andi	r4,r2,65535
  811800:	2120001c 	xori	r4,r4,32768
  811804:	21200004 	addi	r4,r4,-32768
  811808:	e17ffc17 	ldw	r5,-16(fp)
  81180c:	080f4300 	call	80f430 <Write_File_Record_At_Offset>
  811810:	1005003a 	cmpeq	r2,r2,zero
  811814:	10000d1e 	bne	r2,zero,81184c <create_file+0x2c0>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  811818:	080ed140 	call	80ed14 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  81181c:	e13ffa17 	ldw	r4,-24(fp)
  811820:	017fffc4 	movi	r5,-1
  811824:	01800044 	movi	r6,1
  811828:	080ef180 	call	80ef18 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  81182c:	e13ffa17 	ldw	r4,-24(fp)
  811830:	017fffc4 	movi	r5,-1
  811834:	000d883a 	mov	r6,zero
  811838:	080ef180 	call	80ef18 <mark_cluster>
  81183c:	1005003a 	cmpeq	r2,r2,zero
  811840:	1000021e 	bne	r2,zero,81184c <create_file+0x2c0>
							false)) {
						result = true;
  811844:	00800044 	movi	r2,1
  811848:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  81184c:	e0bff917 	ldw	r2,-28(fp)
}
  811850:	e037883a 	mov	sp,fp
  811854:	dfc00217 	ldw	ra,8(sp)
  811858:	df000117 	ldw	fp,4(sp)
  81185c:	dc000017 	ldw	r16,0(sp)
  811860:	dec00304 	addi	sp,sp,12
  811864:	f800283a 	ret

00811868 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  811868:	defffb04 	addi	sp,sp,-20
  81186c:	df000415 	stw	fp,16(sp)
  811870:	df000404 	addi	fp,sp,16
  811874:	e13ffe15 	stw	r4,-8(fp)
  811878:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  81187c:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  811880:	e03ffd15 	stw	zero,-12(fp)
  811884:	00001606 	br	8118e0 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  811888:	e0fffd17 	ldw	r3,-12(fp)
  81188c:	e0bffe17 	ldw	r2,-8(fp)
  811890:	10c5883a 	add	r2,r2,r3
  811894:	10800003 	ldbu	r2,0(r2)
  811898:	10803fcc 	andi	r2,r2,255
  81189c:	10800820 	cmpeqi	r2,r2,32
  8118a0:	10000c1e 	bne	r2,zero,8118d4 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  8118a4:	e0bffc17 	ldw	r2,-16(fp)
  8118a8:	1007883a 	mov	r3,r2
  8118ac:	e0bfff17 	ldw	r2,-4(fp)
  8118b0:	1889883a 	add	r4,r3,r2
  8118b4:	e0fffd17 	ldw	r3,-12(fp)
  8118b8:	e0bffe17 	ldw	r2,-8(fp)
  8118bc:	10c5883a 	add	r2,r2,r3
  8118c0:	10800003 	ldbu	r2,0(r2)
  8118c4:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  8118c8:	e0bffc17 	ldw	r2,-16(fp)
  8118cc:	10800044 	addi	r2,r2,1
  8118d0:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  8118d4:	e0bffd17 	ldw	r2,-12(fp)
  8118d8:	10800044 	addi	r2,r2,1
  8118dc:	e0bffd15 	stw	r2,-12(fp)
  8118e0:	e0bffd17 	ldw	r2,-12(fp)
  8118e4:	10800210 	cmplti	r2,r2,8
  8118e8:	103fe71e 	bne	r2,zero,811888 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  8118ec:	e0bffe17 	ldw	r2,-8(fp)
  8118f0:	10800203 	ldbu	r2,8(r2)
  8118f4:	10803fcc 	andi	r2,r2,255
  8118f8:	10800820 	cmpeqi	r2,r2,32
  8118fc:	1000261e 	bne	r2,zero,811998 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  811900:	e0bffc17 	ldw	r2,-16(fp)
  811904:	1007883a 	mov	r3,r2
  811908:	e0bfff17 	ldw	r2,-4(fp)
  81190c:	1887883a 	add	r3,r3,r2
  811910:	00800b84 	movi	r2,46
  811914:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  811918:	e0bffc17 	ldw	r2,-16(fp)
  81191c:	10800044 	addi	r2,r2,1
  811920:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  811924:	e03ffd15 	stw	zero,-12(fp)
  811928:	00001806 	br	81198c <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  81192c:	e0fffd17 	ldw	r3,-12(fp)
  811930:	e0bffe17 	ldw	r2,-8(fp)
  811934:	1885883a 	add	r2,r3,r2
  811938:	10800204 	addi	r2,r2,8
  81193c:	10800003 	ldbu	r2,0(r2)
  811940:	10803fcc 	andi	r2,r2,255
  811944:	10800820 	cmpeqi	r2,r2,32
  811948:	10000d1e 	bne	r2,zero,811980 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  81194c:	e0bffc17 	ldw	r2,-16(fp)
  811950:	1007883a 	mov	r3,r2
  811954:	e0bfff17 	ldw	r2,-4(fp)
  811958:	1889883a 	add	r4,r3,r2
  81195c:	e0fffd17 	ldw	r3,-12(fp)
  811960:	e0bffe17 	ldw	r2,-8(fp)
  811964:	1885883a 	add	r2,r3,r2
  811968:	10800204 	addi	r2,r2,8
  81196c:	10800003 	ldbu	r2,0(r2)
  811970:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  811974:	e0bffc17 	ldw	r2,-16(fp)
  811978:	10800044 	addi	r2,r2,1
  81197c:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  811980:	e0bffd17 	ldw	r2,-12(fp)
  811984:	10800044 	addi	r2,r2,1
  811988:	e0bffd15 	stw	r2,-12(fp)
  81198c:	e0bffd17 	ldw	r2,-12(fp)
  811990:	108000d0 	cmplti	r2,r2,3
  811994:	103fe51e 	bne	r2,zero,81192c <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  811998:	e0bffc17 	ldw	r2,-16(fp)
  81199c:	1007883a 	mov	r3,r2
  8119a0:	e0bfff17 	ldw	r2,-4(fp)
  8119a4:	1885883a 	add	r2,r3,r2
  8119a8:	10000005 	stb	zero,0(r2)
}
  8119ac:	e037883a 	mov	sp,fp
  8119b0:	df000017 	ldw	fp,0(sp)
  8119b4:	dec00104 	addi	sp,sp,4
  8119b8:	f800283a 	ret

008119bc <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  8119bc:	defffc04 	addi	sp,sp,-16
  8119c0:	dfc00315 	stw	ra,12(sp)
  8119c4:	df000215 	stw	fp,8(sp)
  8119c8:	df000204 	addi	fp,sp,8
  8119cc:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  8119d0:	e13fff17 	ldw	r4,-4(fp)
  8119d4:	01402074 	movhi	r5,129
  8119d8:	2959b504 	addi	r5,r5,26324
  8119dc:	081341c0 	call	81341c <alt_find_dev>
  8119e0:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  8119e4:	e0bffe17 	ldw	r2,-8(fp)
  8119e8:	1005003a 	cmpeq	r2,r2,zero
  8119ec:	10001e1e 	bne	r2,zero,811a68 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  8119f0:	e0bffe17 	ldw	r2,-8(fp)
  8119f4:	10800a17 	ldw	r2,40(r2)
  8119f8:	10808d04 	addi	r2,r2,564
  8119fc:	d0a72915 	stw	r2,-25436(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  811a00:	e0bffe17 	ldw	r2,-8(fp)
  811a04:	10800a17 	ldw	r2,40(r2)
  811a08:	10808904 	addi	r2,r2,548
  811a0c:	d0a72a15 	stw	r2,-25432(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  811a10:	e0bffe17 	ldw	r2,-8(fp)
  811a14:	10800a17 	ldw	r2,40(r2)
  811a18:	10808404 	addi	r2,r2,528
  811a1c:	d0a72b15 	stw	r2,-25428(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  811a20:	e0bffe17 	ldw	r2,-8(fp)
  811a24:	10800a17 	ldw	r2,40(r2)
  811a28:	10808c04 	addi	r2,r2,560
  811a2c:	d0a72c15 	stw	r2,-25424(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  811a30:	e0bffe17 	ldw	r2,-8(fp)
  811a34:	10800a17 	ldw	r2,40(r2)
  811a38:	10808b04 	addi	r2,r2,556
  811a3c:	d0a72d15 	stw	r2,-25420(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  811a40:	e0bffe17 	ldw	r2,-8(fp)
  811a44:	10800a17 	ldw	r2,40(r2)
  811a48:	d0a72e15 	stw	r2,-25416(gp)
		device_pointer = dev;
  811a4c:	e0bffe17 	ldw	r2,-8(fp)
  811a50:	d0a73115 	stw	r2,-25404(gp)
		initialized = false;
  811a54:	d0272715 	stw	zero,-25444(gp)
		is_sd_card_formated_as_FAT16 = false;
  811a58:	d0272815 	stw	zero,-25440(gp)
		search_data.valid = false;
  811a5c:	00802174 	movhi	r2,133
  811a60:	1081ec04 	addi	r2,r2,1968
  811a64:	10000415 	stw	zero,16(r2)
	}
	return dev;
  811a68:	e0bffe17 	ldw	r2,-8(fp)
}
  811a6c:	e037883a 	mov	sp,fp
  811a70:	dfc00117 	ldw	ra,4(sp)
  811a74:	df000017 	ldw	fp,0(sp)
  811a78:	dec00204 	addi	sp,sp,8
  811a7c:	f800283a 	ret

00811a80 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  811a80:	defffd04 	addi	sp,sp,-12
  811a84:	df000215 	stw	fp,8(sp)
  811a88:	df000204 	addi	fp,sp,8
	bool result = false;
  811a8c:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  811a90:	d0a73117 	ldw	r2,-25404(gp)
  811a94:	1005003a 	cmpeq	r2,r2,zero
  811a98:	1000081e 	bne	r2,zero,811abc <alt_up_sd_card_is_Present+0x3c>
  811a9c:	d0a72917 	ldw	r2,-25436(gp)
  811aa0:	1080002b 	ldhuio	r2,0(r2)
  811aa4:	1080008c 	andi	r2,r2,2
  811aa8:	1005003a 	cmpeq	r2,r2,zero
  811aac:	1000031e 	bne	r2,zero,811abc <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  811ab0:	00800044 	movi	r2,1
  811ab4:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  811ab8:	00001e06 	br	811b34 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  811abc:	d0a72717 	ldw	r2,-25444(gp)
  811ac0:	10800058 	cmpnei	r2,r2,1
  811ac4:	10001b1e 	bne	r2,zero,811b34 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  811ac8:	d0272715 	stw	zero,-25444(gp)
		search_data.valid = false;
  811acc:	00802174 	movhi	r2,133
  811ad0:	1081ec04 	addi	r2,r2,1968
  811ad4:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  811ad8:	d0272815 	stw	zero,-25440(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  811adc:	e03ffe15 	stw	zero,-8(fp)
  811ae0:	00001106 	br	811b28 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  811ae4:	e0bffe17 	ldw	r2,-8(fp)
  811ae8:	00c02174 	movhi	r3,133
  811aec:	18c20604 	addi	r3,r3,2072
  811af0:	100491ba 	slli	r2,r2,6
  811af4:	10c5883a 	add	r2,r2,r3
  811af8:	10800f04 	addi	r2,r2,60
  811afc:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  811b00:	e0bffe17 	ldw	r2,-8(fp)
  811b04:	00c02174 	movhi	r3,133
  811b08:	18c20604 	addi	r3,r3,2072
  811b0c:	100491ba 	slli	r2,r2,6
  811b10:	10c5883a 	add	r2,r2,r3
  811b14:	10800e04 	addi	r2,r2,56
  811b18:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  811b1c:	e0bffe17 	ldw	r2,-8(fp)
  811b20:	10800044 	addi	r2,r2,1
  811b24:	e0bffe15 	stw	r2,-8(fp)
  811b28:	e0bffe17 	ldw	r2,-8(fp)
  811b2c:	10800510 	cmplti	r2,r2,20
  811b30:	103fec1e 	bne	r2,zero,811ae4 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  811b34:	e0bfff17 	ldw	r2,-4(fp)
}
  811b38:	e037883a 	mov	sp,fp
  811b3c:	df000017 	ldw	fp,0(sp)
  811b40:	dec00104 	addi	sp,sp,4
  811b44:	f800283a 	ret

00811b48 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  811b48:	defffd04 	addi	sp,sp,-12
  811b4c:	dfc00215 	stw	ra,8(sp)
  811b50:	df000115 	stw	fp,4(sp)
  811b54:	df000104 	addi	fp,sp,4
	bool result = false;
  811b58:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  811b5c:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  811b60:	1005003a 	cmpeq	r2,r2,zero
  811b64:	10000d1e 	bne	r2,zero,811b9c <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  811b68:	d0a72717 	ldw	r2,-25444(gp)
  811b6c:	1004c03a 	cmpne	r2,r2,zero
  811b70:	1000071e 	bne	r2,zero,811b90 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  811b74:	080fd300 	call	80fd30 <Look_for_FAT16>
  811b78:	d0a72815 	stw	r2,-25440(gp)
			initialized = is_sd_card_formated_as_FAT16;
  811b7c:	d0a72817 	ldw	r2,-25440(gp)
  811b80:	d0a72715 	stw	r2,-25444(gp)
			search_data.valid = false;
  811b84:	00802174 	movhi	r2,133
  811b88:	1081ec04 	addi	r2,r2,1968
  811b8c:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  811b90:	d0a72817 	ldw	r2,-25440(gp)
  811b94:	e0bfff15 	stw	r2,-4(fp)
  811b98:	00000206 	br	811ba4 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  811b9c:	d0272715 	stw	zero,-25444(gp)
		is_sd_card_formated_as_FAT16 = false;
  811ba0:	d0272815 	stw	zero,-25440(gp)
	}

	return result;
  811ba4:	e0bfff17 	ldw	r2,-4(fp)
}
  811ba8:	e037883a 	mov	sp,fp
  811bac:	dfc00117 	ldw	ra,4(sp)
  811bb0:	df000017 	ldw	fp,0(sp)
  811bb4:	dec00204 	addi	sp,sp,8
  811bb8:	f800283a 	ret

00811bbc <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  811bbc:	deffea04 	addi	sp,sp,-88
  811bc0:	dfc01515 	stw	ra,84(sp)
  811bc4:	df001415 	stw	fp,80(sp)
  811bc8:	df001404 	addi	fp,sp,80
  811bcc:	e13ffe15 	stw	r4,-8(fp)
  811bd0:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  811bd4:	00800084 	movi	r2,2
  811bd8:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  811bdc:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  811be0:	1005003a 	cmpeq	r2,r2,zero
  811be4:	1000241e 	bne	r2,zero,811c78 <alt_up_sd_card_find_first+0xbc>
  811be8:	d0a72817 	ldw	r2,-25440(gp)
  811bec:	1005003a 	cmpeq	r2,r2,zero
  811bf0:	1000211e 	bne	r2,zero,811c78 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  811bf4:	e17fed04 	addi	r5,fp,-76
  811bf8:	e1bfee04 	addi	r6,fp,-72
  811bfc:	e13ffe17 	ldw	r4,-8(fp)
  811c00:	08105400 	call	810540 <get_home_directory_cluster_for_file>
  811c04:	1005003a 	cmpeq	r2,r2,zero
  811c08:	1000191e 	bne	r2,zero,811c70 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  811c0c:	e0bfed17 	ldw	r2,-76(fp)
  811c10:	1007883a 	mov	r3,r2
  811c14:	00802174 	movhi	r2,133
  811c18:	1081ec04 	addi	r2,r2,1968
  811c1c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  811c20:	e0bfed17 	ldw	r2,-76(fp)
  811c24:	1007883a 	mov	r3,r2
  811c28:	00802174 	movhi	r2,133
  811c2c:	1081ec04 	addi	r2,r2,1968
  811c30:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  811c34:	00802174 	movhi	r2,133
  811c38:	1081ec04 	addi	r2,r2,1968
  811c3c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  811c40:	00c02174 	movhi	r3,133
  811c44:	18c1ec04 	addi	r3,r3,1968
  811c48:	00bfffc4 	movi	r2,-1
  811c4c:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  811c50:	00c02174 	movhi	r3,133
  811c54:	18c1ec04 	addi	r3,r3,1968
  811c58:	00800044 	movi	r2,1
  811c5c:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  811c60:	e13fff17 	ldw	r4,-4(fp)
  811c64:	0811c900 	call	811c90 <alt_up_sd_card_find_next>
  811c68:	e0bfec0d 	sth	r2,-80(fp)
  811c6c:	00000206 	br	811c78 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  811c70:	00800044 	movi	r2,1
  811c74:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  811c78:	e0bfec0f 	ldh	r2,-80(fp)
}
  811c7c:	e037883a 	mov	sp,fp
  811c80:	dfc00117 	ldw	ra,4(sp)
  811c84:	df000017 	ldw	fp,0(sp)
  811c88:	dec00204 	addi	sp,sp,8
  811c8c:	f800283a 	ret

00811c90 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  811c90:	deffe404 	addi	sp,sp,-112
  811c94:	dfc01b15 	stw	ra,108(sp)
  811c98:	df001a15 	stw	fp,104(sp)
  811c9c:	df001a04 	addi	fp,sp,104
  811ca0:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  811ca4:	00800084 	movi	r2,2
  811ca8:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  811cac:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  811cb0:	1005003a 	cmpeq	r2,r2,zero
  811cb4:	1000da1e 	bne	r2,zero,812020 <alt_up_sd_card_find_next+0x390>
  811cb8:	d0a72817 	ldw	r2,-25440(gp)
  811cbc:	1005003a 	cmpeq	r2,r2,zero
  811cc0:	1000d71e 	bne	r2,zero,812020 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  811cc4:	00802174 	movhi	r2,133
  811cc8:	1081ec04 	addi	r2,r2,1968
  811ccc:	10800417 	ldw	r2,16(r2)
  811cd0:	1005003a 	cmpeq	r2,r2,zero
  811cd4:	1000d01e 	bne	r2,zero,812018 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  811cd8:	00802174 	movhi	r2,133
  811cdc:	1081ec04 	addi	r2,r2,1968
  811ce0:	10800117 	ldw	r2,4(r2)
  811ce4:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  811ce8:	e0bfec17 	ldw	r2,-80(fp)
  811cec:	1004c03a 	cmpne	r2,r2,zero
  811cf0:	1000511e 	bne	r2,zero,811e38 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  811cf4:	00802174 	movhi	r2,133
  811cf8:	1081f104 	addi	r2,r2,1988
  811cfc:	1080050b 	ldhu	r2,20(r2)
  811d00:	10bfffcc 	andi	r2,r2,65535
  811d04:	1008917a 	slli	r4,r2,5
  811d08:	00802174 	movhi	r2,133
  811d0c:	1081f104 	addi	r2,r2,1988
  811d10:	1080030b 	ldhu	r2,12(r2)
  811d14:	117fffcc 	andi	r5,r2,65535
  811d18:	08016e40 	call	8016e4 <__divsi3>
  811d1c:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  811d20:	00802174 	movhi	r2,133
  811d24:	1081ec04 	addi	r2,r2,1968
  811d28:	10800217 	ldw	r2,8(r2)
  811d2c:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  811d30:	00802174 	movhi	r2,133
  811d34:	1081ec04 	addi	r2,r2,1968
  811d38:	1080030b 	ldhu	r2,12(r2)
  811d3c:	10bfffcc 	andi	r2,r2,65535
  811d40:	10a0001c 	xori	r2,r2,32768
  811d44:	10a00004 	addi	r2,r2,-32768
  811d48:	10800044 	addi	r2,r2,1
  811d4c:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  811d50:	00003306 	br	811e20 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  811d54:	00802174 	movhi	r2,133
  811d58:	1081f104 	addi	r2,r2,1988
  811d5c:	10c01317 	ldw	r3,76(r2)
  811d60:	e0bfea17 	ldw	r2,-88(fp)
  811d64:	1885883a 	add	r2,r3,r2
  811d68:	1009883a 	mov	r4,r2
  811d6c:	d1672f17 	ldw	r5,-25412(gp)
  811d70:	080ed640 	call	80ed64 <Read_Sector_Data>
  811d74:	1005003a 	cmpeq	r2,r2,zero
  811d78:	10002c1e 	bne	r2,zero,811e2c <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  811d7c:	00002106 	br	811e04 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  811d80:	e0bfe917 	ldw	r2,-92(fp)
  811d84:	1008917a 	slli	r4,r2,5
  811d88:	e1ffea17 	ldw	r7,-88(fp)
  811d8c:	e17fee04 	addi	r5,fp,-72
  811d90:	000d883a 	mov	r6,zero
  811d94:	080f1ac0 	call	80f1ac <Read_File_Record_At_Offset>
  811d98:	1005003a 	cmpeq	r2,r2,zero
  811d9c:	1000161e 	bne	r2,zero,811df8 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  811da0:	e0bfee03 	ldbu	r2,-72(fp)
  811da4:	10803fcc 	andi	r2,r2,255
  811da8:	1005003a 	cmpeq	r2,r2,zero
  811dac:	1000121e 	bne	r2,zero,811df8 <alt_up_sd_card_find_next+0x168>
  811db0:	e0bfee03 	ldbu	r2,-72(fp)
  811db4:	10803fcc 	andi	r2,r2,255
  811db8:	10803960 	cmpeqi	r2,r2,229
  811dbc:	10000e1e 	bne	r2,zero,811df8 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  811dc0:	e0bfe917 	ldw	r2,-92(fp)
  811dc4:	1007883a 	mov	r3,r2
  811dc8:	00802174 	movhi	r2,133
  811dcc:	1081ec04 	addi	r2,r2,1968
  811dd0:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  811dd4:	e0ffea17 	ldw	r3,-88(fp)
  811dd8:	00802174 	movhi	r2,133
  811ddc:	1081ec04 	addi	r2,r2,1968
  811de0:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  811de4:	e13fee04 	addi	r4,fp,-72
  811de8:	e17ffe17 	ldw	r5,-8(fp)
  811dec:	08118680 	call	811868 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  811df0:	e03fff15 	stw	zero,-4(fp)
  811df4:	00008c06 	br	812028 <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  811df8:	e0bfe917 	ldw	r2,-92(fp)
  811dfc:	10800044 	addi	r2,r2,1
  811e00:	e0bfe915 	stw	r2,-92(fp)
  811e04:	e0bfe917 	ldw	r2,-92(fp)
  811e08:	10800410 	cmplti	r2,r2,16
  811e0c:	103fdc1e 	bne	r2,zero,811d80 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  811e10:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  811e14:	e0bfea17 	ldw	r2,-88(fp)
  811e18:	10800044 	addi	r2,r2,1
  811e1c:	e0bfea15 	stw	r2,-88(fp)
  811e20:	e0ffea17 	ldw	r3,-88(fp)
  811e24:	e0bfeb17 	ldw	r2,-84(fp)
  811e28:	18bfca16 	blt	r3,r2,811d54 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  811e2c:	00bfffc4 	movi	r2,-1
  811e30:	e0bfed0d 	sth	r2,-76(fp)
  811e34:	00007a06 	br	812020 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  811e38:	00802174 	movhi	r2,133
  811e3c:	1081ec04 	addi	r2,r2,1968
  811e40:	1080030b 	ldhu	r2,12(r2)
  811e44:	10bfffcc 	andi	r2,r2,65535
  811e48:	10a0001c 	xori	r2,r2,32768
  811e4c:	10a00004 	addi	r2,r2,-32768
  811e50:	10800044 	addi	r2,r2,1
  811e54:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  811e58:	e0bfec17 	ldw	r2,-80(fp)
  811e5c:	113fff84 	addi	r4,r2,-2
  811e60:	00802174 	movhi	r2,133
  811e64:	1081f104 	addi	r2,r2,1988
  811e68:	10800383 	ldbu	r2,14(r2)
  811e6c:	11403fcc 	andi	r5,r2,255
  811e70:	08017b40 	call	8017b4 <__mulsi3>
  811e74:	1007883a 	mov	r3,r2
  811e78:	00802174 	movhi	r2,133
  811e7c:	1081f104 	addi	r2,r2,1988
  811e80:	10801417 	ldw	r2,80(r2)
  811e84:	1885883a 	add	r2,r3,r2
  811e88:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  811e8c:	00802174 	movhi	r2,133
  811e90:	1081ec04 	addi	r2,r2,1968
  811e94:	10800217 	ldw	r2,8(r2)
  811e98:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  811e9c:	00003406 	br	811f70 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  811ea0:	e0ffe617 	ldw	r3,-104(fp)
  811ea4:	e0bfe717 	ldw	r2,-100(fp)
  811ea8:	1889883a 	add	r4,r3,r2
  811eac:	d1672f17 	ldw	r5,-25412(gp)
  811eb0:	080ed640 	call	80ed64 <Read_Sector_Data>
  811eb4:	1005003a 	cmpeq	r2,r2,zero
  811eb8:	1000331e 	bne	r2,zero,811f88 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  811ebc:	00002506 	br	811f54 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  811ec0:	e0bfe817 	ldw	r2,-96(fp)
  811ec4:	1008917a 	slli	r4,r2,5
  811ec8:	e1bfec17 	ldw	r6,-80(fp)
  811ecc:	e1ffe617 	ldw	r7,-104(fp)
  811ed0:	e17fee04 	addi	r5,fp,-72
  811ed4:	080f1ac0 	call	80f1ac <Read_File_Record_At_Offset>
  811ed8:	1005003a 	cmpeq	r2,r2,zero
  811edc:	10001a1e 	bne	r2,zero,811f48 <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  811ee0:	e0bfee03 	ldbu	r2,-72(fp)
  811ee4:	10803fcc 	andi	r2,r2,255
  811ee8:	1005003a 	cmpeq	r2,r2,zero
  811eec:	1000161e 	bne	r2,zero,811f48 <alt_up_sd_card_find_next+0x2b8>
  811ef0:	e0bfee03 	ldbu	r2,-72(fp)
  811ef4:	10803fcc 	andi	r2,r2,255
  811ef8:	10803960 	cmpeqi	r2,r2,229
  811efc:	1000121e 	bne	r2,zero,811f48 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  811f00:	e0ffec17 	ldw	r3,-80(fp)
  811f04:	00802174 	movhi	r2,133
  811f08:	1081ec04 	addi	r2,r2,1968
  811f0c:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  811f10:	e0bfe817 	ldw	r2,-96(fp)
  811f14:	1007883a 	mov	r3,r2
  811f18:	00802174 	movhi	r2,133
  811f1c:	1081ec04 	addi	r2,r2,1968
  811f20:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  811f24:	e0ffe617 	ldw	r3,-104(fp)
  811f28:	00802174 	movhi	r2,133
  811f2c:	1081ec04 	addi	r2,r2,1968
  811f30:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  811f34:	e13fee04 	addi	r4,fp,-72
  811f38:	e17ffe17 	ldw	r5,-8(fp)
  811f3c:	08118680 	call	811868 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  811f40:	e03fff15 	stw	zero,-4(fp)
  811f44:	00003806 	br	812028 <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  811f48:	e0bfe817 	ldw	r2,-96(fp)
  811f4c:	10800044 	addi	r2,r2,1
  811f50:	e0bfe815 	stw	r2,-96(fp)
  811f54:	e0bfe817 	ldw	r2,-96(fp)
  811f58:	10800410 	cmplti	r2,r2,16
  811f5c:	103fd81e 	bne	r2,zero,811ec0 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  811f60:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  811f64:	e0bfe617 	ldw	r2,-104(fp)
  811f68:	10800044 	addi	r2,r2,1
  811f6c:	e0bfe615 	stw	r2,-104(fp)
  811f70:	00802174 	movhi	r2,133
  811f74:	1081f104 	addi	r2,r2,1988
  811f78:	10800383 	ldbu	r2,14(r2)
  811f7c:	10c03fcc 	andi	r3,r2,255
  811f80:	e0bfe617 	ldw	r2,-104(fp)
  811f84:	10ffc616 	blt	r2,r3,811ea0 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  811f88:	00802174 	movhi	r2,133
  811f8c:	1081f104 	addi	r2,r2,1988
  811f90:	10800383 	ldbu	r2,14(r2)
  811f94:	10c03fcc 	andi	r3,r2,255
  811f98:	e0bfe617 	ldw	r2,-104(fp)
  811f9c:	10c01a16 	blt	r2,r3,812008 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  811fa0:	e13fec17 	ldw	r4,-80(fp)
  811fa4:	e17fed84 	addi	r5,fp,-74
  811fa8:	080ee600 	call	80ee60 <get_cluster_flag>
  811fac:	1005003a 	cmpeq	r2,r2,zero
  811fb0:	1000131e 	bne	r2,zero,812000 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  811fb4:	e0bfed8b 	ldhu	r2,-74(fp)
  811fb8:	10bfffcc 	andi	r2,r2,65535
  811fbc:	10a0001c 	xori	r2,r2,32768
  811fc0:	10a00004 	addi	r2,r2,-32768
  811fc4:	10fffe0c 	andi	r3,r2,65528
  811fc8:	00bffe14 	movui	r2,65528
  811fcc:	1880051e 	bne	r3,r2,811fe4 <alt_up_sd_card_find_next+0x354>
								result = -1;
  811fd0:	00bfffc4 	movi	r2,-1
  811fd4:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  811fd8:	00802174 	movhi	r2,133
  811fdc:	1081ec04 	addi	r2,r2,1968
  811fe0:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  811fe4:	e0bfed8b 	ldhu	r2,-74(fp)
  811fe8:	10bfffcc 	andi	r2,r2,65535
  811fec:	10a0001c 	xori	r2,r2,32768
  811ff0:	10a00004 	addi	r2,r2,-32768
  811ff4:	10bffe0c 	andi	r2,r2,65528
  811ff8:	e0bfec15 	stw	r2,-80(fp)
  811ffc:	00000206 	br	812008 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  812000:	00bfffc4 	movi	r2,-1
  812004:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  812008:	e0ffec17 	ldw	r3,-80(fp)
  81200c:	00bffdd4 	movui	r2,65527
  812010:	10ff910e 	bge	r2,r3,811e58 <alt_up_sd_card_find_next+0x1c8>
  812014:	00000206 	br	812020 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  812018:	008000c4 	movi	r2,3
  81201c:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  812020:	e0bfed0f 	ldh	r2,-76(fp)
  812024:	e0bfff15 	stw	r2,-4(fp)
  812028:	e0bfff17 	ldw	r2,-4(fp)
}
  81202c:	e037883a 	mov	sp,fp
  812030:	dfc00117 	ldw	ra,4(sp)
  812034:	df000017 	ldw	fp,0(sp)
  812038:	dec00204 	addi	sp,sp,8
  81203c:	f800283a 	ret

00812040 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  812040:	deffe804 	addi	sp,sp,-96
  812044:	dfc01715 	stw	ra,92(sp)
  812048:	df001615 	stw	fp,88(sp)
  81204c:	df001604 	addi	fp,sp,88
  812050:	e13ffd15 	stw	r4,-12(fp)
  812054:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  812058:	00bfffc4 	movi	r2,-1
  81205c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  812060:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  812064:	1005003a 	cmpeq	r2,r2,zero
  812068:	1000d71e 	bne	r2,zero,8123c8 <alt_up_sd_card_fopen+0x388>
  81206c:	d0a72817 	ldw	r2,-25440(gp)
  812070:	1005003a 	cmpeq	r2,r2,zero
  812074:	1000d41e 	bne	r2,zero,8123c8 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  812078:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  81207c:	e13ffd17 	ldw	r4,-12(fp)
  812080:	080fe340 	call	80fe34 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  812084:	e13ffd17 	ldw	r4,-12(fp)
  812088:	080ff040 	call	80ff04 <check_file_name_for_FAT16_compliance>
  81208c:	1005003a 	cmpeq	r2,r2,zero
  812090:	1000cd1e 	bne	r2,zero,8123c8 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  812094:	e17fec04 	addi	r5,fp,-80
  812098:	e1bfed04 	addi	r6,fp,-76
  81209c:	e13ffd17 	ldw	r4,-12(fp)
  8120a0:	08105400 	call	810540 <get_home_directory_cluster_for_file>
  8120a4:	1004c03a 	cmpne	r2,r2,zero
  8120a8:	1000031e 	bne	r2,zero,8120b8 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  8120ac:	e0bfeb0f 	ldh	r2,-84(fp)
  8120b0:	e0bfff15 	stw	r2,-4(fp)
  8120b4:	0000c606 	br	8123d0 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  8120b8:	e03fea15 	stw	zero,-88(fp)
  8120bc:	00000f06 	br	8120fc <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  8120c0:	e0bfea17 	ldw	r2,-88(fp)
  8120c4:	00c02174 	movhi	r3,133
  8120c8:	18c20604 	addi	r3,r3,2072
  8120cc:	100491ba 	slli	r2,r2,6
  8120d0:	10c5883a 	add	r2,r2,r3
  8120d4:	10800f04 	addi	r2,r2,60
  8120d8:	10800017 	ldw	r2,0(r2)
  8120dc:	1004c03a 	cmpne	r2,r2,zero
  8120e0:	1000031e 	bne	r2,zero,8120f0 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  8120e4:	e0bfea17 	ldw	r2,-88(fp)
  8120e8:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  8120ec:	00000606 	br	812108 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  8120f0:	e0bfea17 	ldw	r2,-88(fp)
  8120f4:	10800044 	addi	r2,r2,1
  8120f8:	e0bfea15 	stw	r2,-88(fp)
  8120fc:	e0bfea17 	ldw	r2,-88(fp)
  812100:	10800510 	cmplti	r2,r2,20
  812104:	103fee1e 	bne	r2,zero,8120c0 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  812108:	e0bfeb0f 	ldh	r2,-84(fp)
  81210c:	1004803a 	cmplt	r2,r2,zero
  812110:	1000ad1e 	bne	r2,zero,8123c8 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  812114:	e0bfec17 	ldw	r2,-80(fp)
  812118:	1009883a 	mov	r4,r2
  81211c:	e0bfeb0f 	ldh	r2,-84(fp)
  812120:	100491ba 	slli	r2,r2,6
  812124:	1007883a 	mov	r3,r2
  812128:	00802174 	movhi	r2,133
  81212c:	10820604 	addi	r2,r2,2072
  812130:	188d883a 	add	r6,r3,r2
  812134:	e17ffd17 	ldw	r5,-12(fp)
  812138:	0810a540 	call	810a54 <find_file_in_directory>
  81213c:	1005003a 	cmpeq	r2,r2,zero
  812140:	10007d1e 	bne	r2,zero,812338 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  812144:	e0bffe17 	ldw	r2,-8(fp)
  812148:	1005003a 	cmpeq	r2,r2,zero
  81214c:	1000031e 	bne	r2,zero,81215c <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  812150:	00bfffc4 	movi	r2,-1
  812154:	e0bfff15 	stw	r2,-4(fp)
  812158:	00009d06 	br	8123d0 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  81215c:	e17feb0f 	ldh	r5,-84(fp)
  812160:	e0bfeb0f 	ldh	r2,-84(fp)
  812164:	00c02174 	movhi	r3,133
  812168:	18c20604 	addi	r3,r3,2072
  81216c:	100491ba 	slli	r2,r2,6
  812170:	10c5883a 	add	r2,r2,r3
  812174:	10800504 	addi	r2,r2,20
  812178:	1080008b 	ldhu	r2,2(r2)
  81217c:	113fffcc 	andi	r4,r2,65535
  812180:	00c02174 	movhi	r3,133
  812184:	18c20604 	addi	r3,r3,2072
  812188:	280491ba 	slli	r2,r5,6
  81218c:	10c5883a 	add	r2,r2,r3
  812190:	10800704 	addi	r2,r2,28
  812194:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  812198:	e0bfeb0f 	ldh	r2,-84(fp)
  81219c:	00c02174 	movhi	r3,133
  8121a0:	18c20604 	addi	r3,r3,2072
  8121a4:	100491ba 	slli	r2,r2,6
  8121a8:	10c5883a 	add	r2,r2,r3
  8121ac:	10800804 	addi	r2,r2,32
  8121b0:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  8121b4:	e0bfeb0f 	ldh	r2,-84(fp)
  8121b8:	00c02174 	movhi	r3,133
  8121bc:	18c20604 	addi	r3,r3,2072
  8121c0:	100491ba 	slli	r2,r2,6
  8121c4:	10c5883a 	add	r2,r2,r3
  8121c8:	10800904 	addi	r2,r2,36
  8121cc:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  8121d0:	e0bfeb0f 	ldh	r2,-84(fp)
  8121d4:	00c02174 	movhi	r3,133
  8121d8:	18c20604 	addi	r3,r3,2072
  8121dc:	100491ba 	slli	r2,r2,6
  8121e0:	10c5883a 	add	r2,r2,r3
  8121e4:	10c00f04 	addi	r3,r2,60
  8121e8:	00800044 	movi	r2,1
  8121ec:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  8121f0:	e0bfeb0f 	ldh	r2,-84(fp)
  8121f4:	00c02174 	movhi	r3,133
  8121f8:	18c20604 	addi	r3,r3,2072
  8121fc:	100491ba 	slli	r2,r2,6
  812200:	10c5883a 	add	r2,r2,r3
  812204:	10800e04 	addi	r2,r2,56
  812208:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81220c:	e03fea15 	stw	zero,-88(fp)
  812210:	00004506 	br	812328 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  812214:	e0ffeb0f 	ldh	r3,-84(fp)
  812218:	e0bfea17 	ldw	r2,-88(fp)
  81221c:	18803f26 	beq	r3,r2,81231c <alt_up_sd_card_fopen+0x2dc>
  812220:	e0bfea17 	ldw	r2,-88(fp)
  812224:	00c02174 	movhi	r3,133
  812228:	18c20604 	addi	r3,r3,2072
  81222c:	100491ba 	slli	r2,r2,6
  812230:	10c5883a 	add	r2,r2,r3
  812234:	10800f04 	addi	r2,r2,60
  812238:	10800017 	ldw	r2,0(r2)
  81223c:	10800058 	cmpnei	r2,r2,1
  812240:	1000361e 	bne	r2,zero,81231c <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  812244:	e0bfeb0f 	ldh	r2,-84(fp)
  812248:	00c02174 	movhi	r3,133
  81224c:	18c20604 	addi	r3,r3,2072
  812250:	100491ba 	slli	r2,r2,6
  812254:	10c5883a 	add	r2,r2,r3
  812258:	10800a04 	addi	r2,r2,40
  81225c:	11000017 	ldw	r4,0(r2)
  812260:	e0bfea17 	ldw	r2,-88(fp)
  812264:	00c02174 	movhi	r3,133
  812268:	18c20604 	addi	r3,r3,2072
  81226c:	100491ba 	slli	r2,r2,6
  812270:	10c5883a 	add	r2,r2,r3
  812274:	10800a04 	addi	r2,r2,40
  812278:	10800017 	ldw	r2,0(r2)
  81227c:	2080271e 	bne	r4,r2,81231c <alt_up_sd_card_fopen+0x2dc>
  812280:	e0bfeb0f 	ldh	r2,-84(fp)
  812284:	00c02174 	movhi	r3,133
  812288:	18c20604 	addi	r3,r3,2072
  81228c:	100491ba 	slli	r2,r2,6
  812290:	10c5883a 	add	r2,r2,r3
  812294:	10800b04 	addi	r2,r2,44
  812298:	11000017 	ldw	r4,0(r2)
  81229c:	e0bfea17 	ldw	r2,-88(fp)
  8122a0:	00c02174 	movhi	r3,133
  8122a4:	18c20604 	addi	r3,r3,2072
  8122a8:	100491ba 	slli	r2,r2,6
  8122ac:	10c5883a 	add	r2,r2,r3
  8122b0:	10800b04 	addi	r2,r2,44
  8122b4:	10800017 	ldw	r2,0(r2)
  8122b8:	2080181e 	bne	r4,r2,81231c <alt_up_sd_card_fopen+0x2dc>
  8122bc:	e0bfeb0f 	ldh	r2,-84(fp)
  8122c0:	00c02174 	movhi	r3,133
  8122c4:	18c20604 	addi	r3,r3,2072
  8122c8:	100491ba 	slli	r2,r2,6
  8122cc:	10c5883a 	add	r2,r2,r3
  8122d0:	10800c04 	addi	r2,r2,48
  8122d4:	1100000b 	ldhu	r4,0(r2)
  8122d8:	e0bfea17 	ldw	r2,-88(fp)
  8122dc:	00c02174 	movhi	r3,133
  8122e0:	18c20604 	addi	r3,r3,2072
  8122e4:	100491ba 	slli	r2,r2,6
  8122e8:	10c5883a 	add	r2,r2,r3
  8122ec:	10800c04 	addi	r2,r2,48
  8122f0:	1080000b 	ldhu	r2,0(r2)
  8122f4:	20ffffcc 	andi	r3,r4,65535
  8122f8:	18e0001c 	xori	r3,r3,32768
  8122fc:	18e00004 	addi	r3,r3,-32768
  812300:	10bfffcc 	andi	r2,r2,65535
  812304:	10a0001c 	xori	r2,r2,32768
  812308:	10a00004 	addi	r2,r2,-32768
  81230c:	1880031e 	bne	r3,r2,81231c <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  812310:	00bfff84 	movi	r2,-2
  812314:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  812318:	00002b06 	br	8123c8 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  81231c:	e0bfea17 	ldw	r2,-88(fp)
  812320:	10800044 	addi	r2,r2,1
  812324:	e0bfea15 	stw	r2,-88(fp)
  812328:	e0bfea17 	ldw	r2,-88(fp)
  81232c:	10800510 	cmplti	r2,r2,20
  812330:	103fb81e 	bne	r2,zero,812214 <alt_up_sd_card_fopen+0x1d4>
  812334:	00002406 	br	8123c8 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  812338:	e0bffe17 	ldw	r2,-8(fp)
  81233c:	1005003a 	cmpeq	r2,r2,zero
  812340:	10001f1e 	bne	r2,zero,8123c0 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  812344:	e0bfeb0f 	ldh	r2,-84(fp)
  812348:	100491ba 	slli	r2,r2,6
  81234c:	1007883a 	mov	r3,r2
  812350:	00802174 	movhi	r2,133
  812354:	10820604 	addi	r2,r2,2072
  812358:	188b883a 	add	r5,r3,r2
  81235c:	e1bfed04 	addi	r6,fp,-76
  812360:	e13ffd17 	ldw	r4,-12(fp)
  812364:	081158c0 	call	81158c <create_file>
  812368:	1005003a 	cmpeq	r2,r2,zero
  81236c:	1000111e 	bne	r2,zero,8123b4 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  812370:	e0bfeb0f 	ldh	r2,-84(fp)
  812374:	00c02174 	movhi	r3,133
  812378:	18c20604 	addi	r3,r3,2072
  81237c:	100491ba 	slli	r2,r2,6
  812380:	10c5883a 	add	r2,r2,r3
  812384:	10c00f04 	addi	r3,r2,60
  812388:	00800044 	movi	r2,1
  81238c:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  812390:	e0bfeb0f 	ldh	r2,-84(fp)
  812394:	00c02174 	movhi	r3,133
  812398:	18c20604 	addi	r3,r3,2072
  81239c:	100491ba 	slli	r2,r2,6
  8123a0:	10c5883a 	add	r2,r2,r3
  8123a4:	10c00e04 	addi	r3,r2,56
  8123a8:	00800044 	movi	r2,1
  8123ac:	18800015 	stw	r2,0(r3)
  8123b0:	00000506 	br	8123c8 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  8123b4:	00bfffc4 	movi	r2,-1
  8123b8:	e0bfeb0d 	sth	r2,-84(fp)
  8123bc:	00000206 	br	8123c8 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  8123c0:	00bfffc4 	movi	r2,-1
  8123c4:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  8123c8:	e0bfeb0f 	ldh	r2,-84(fp)
  8123cc:	e0bfff15 	stw	r2,-4(fp)
  8123d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8123d4:	e037883a 	mov	sp,fp
  8123d8:	dfc00117 	ldw	ra,4(sp)
  8123dc:	df000017 	ldw	fp,0(sp)
  8123e0:	dec00204 	addi	sp,sp,8
  8123e4:	f800283a 	ret

008123e8 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  8123e8:	defffd04 	addi	sp,sp,-12
  8123ec:	df000215 	stw	fp,8(sp)
  8123f0:	df000204 	addi	fp,sp,8
  8123f4:	e13ffe0d 	sth	r4,-8(fp)
  8123f8:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8123fc:	e0bffe0f 	ldh	r2,-8(fp)
  812400:	1004803a 	cmplt	r2,r2,zero
  812404:	1000181e 	bne	r2,zero,812468 <alt_up_sd_card_set_attributes+0x80>
  812408:	e0bffe0f 	ldh	r2,-8(fp)
  81240c:	10800508 	cmpgei	r2,r2,20
  812410:	1000151e 	bne	r2,zero,812468 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  812414:	e0bffe0f 	ldh	r2,-8(fp)
  812418:	00c02174 	movhi	r3,133
  81241c:	18c20604 	addi	r3,r3,2072
  812420:	100491ba 	slli	r2,r2,6
  812424:	10c5883a 	add	r2,r2,r3
  812428:	10800f04 	addi	r2,r2,60
  81242c:	10800017 	ldw	r2,0(r2)
  812430:	1005003a 	cmpeq	r2,r2,zero
  812434:	10000c1e 	bne	r2,zero,812468 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  812438:	e17ffe0f 	ldh	r5,-8(fp)
  81243c:	e0bfff0b 	ldhu	r2,-4(fp)
  812440:	1007883a 	mov	r3,r2
  812444:	00bfffc4 	movi	r2,-1
  812448:	1884703a 	and	r2,r3,r2
  81244c:	1009883a 	mov	r4,r2
  812450:	00c02174 	movhi	r3,133
  812454:	18c20604 	addi	r3,r3,2072
  812458:	280491ba 	slli	r2,r5,6
  81245c:	10c5883a 	add	r2,r2,r3
  812460:	10800204 	addi	r2,r2,8
  812464:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  812468:	e037883a 	mov	sp,fp
  81246c:	df000017 	ldw	fp,0(sp)
  812470:	dec00104 	addi	sp,sp,4
  812474:	f800283a 	ret

00812478 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  812478:	defffd04 	addi	sp,sp,-12
  81247c:	df000215 	stw	fp,8(sp)
  812480:	df000204 	addi	fp,sp,8
  812484:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  812488:	00bfffc4 	movi	r2,-1
  81248c:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  812490:	e0bfff0f 	ldh	r2,-4(fp)
  812494:	1004803a 	cmplt	r2,r2,zero
  812498:	1000151e 	bne	r2,zero,8124f0 <alt_up_sd_card_get_attributes+0x78>
  81249c:	e0bfff0f 	ldh	r2,-4(fp)
  8124a0:	10800508 	cmpgei	r2,r2,20
  8124a4:	1000121e 	bne	r2,zero,8124f0 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  8124a8:	e0bfff0f 	ldh	r2,-4(fp)
  8124ac:	00c02174 	movhi	r3,133
  8124b0:	18c20604 	addi	r3,r3,2072
  8124b4:	100491ba 	slli	r2,r2,6
  8124b8:	10c5883a 	add	r2,r2,r3
  8124bc:	10800f04 	addi	r2,r2,60
  8124c0:	10800017 	ldw	r2,0(r2)
  8124c4:	1005003a 	cmpeq	r2,r2,zero
  8124c8:	1000091e 	bne	r2,zero,8124f0 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  8124cc:	e0bfff0f 	ldh	r2,-4(fp)
  8124d0:	00c02174 	movhi	r3,133
  8124d4:	18c20604 	addi	r3,r3,2072
  8124d8:	100491ba 	slli	r2,r2,6
  8124dc:	10c5883a 	add	r2,r2,r3
  8124e0:	10800204 	addi	r2,r2,8
  8124e4:	108000c3 	ldbu	r2,3(r2)
  8124e8:	10803fcc 	andi	r2,r2,255
  8124ec:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  8124f0:	e0bffe0f 	ldh	r2,-8(fp)
}
  8124f4:	e037883a 	mov	sp,fp
  8124f8:	df000017 	ldw	fp,0(sp)
  8124fc:	dec00104 	addi	sp,sp,4
  812500:	f800283a 	ret

00812504 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  812504:	defff904 	addi	sp,sp,-28
  812508:	dfc00615 	stw	ra,24(sp)
  81250c:	df000515 	stw	fp,20(sp)
  812510:	dc000415 	stw	r16,16(sp)
  812514:	df000404 	addi	fp,sp,16
  812518:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  81251c:	00bfffc4 	movi	r2,-1
  812520:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  812524:	e0bffe0f 	ldh	r2,-8(fp)
  812528:	1004803a 	cmplt	r2,r2,zero
  81252c:	1000d31e 	bne	r2,zero,81287c <alt_up_sd_card_read+0x378>
  812530:	e0bffe0f 	ldh	r2,-8(fp)
  812534:	10800508 	cmpgei	r2,r2,20
  812538:	1000d01e 	bne	r2,zero,81287c <alt_up_sd_card_read+0x378>
		if (active_files[file_handle].in_use) {
  81253c:	e0bffe0f 	ldh	r2,-8(fp)
  812540:	00c02174 	movhi	r3,133
  812544:	18c20604 	addi	r3,r3,2072
  812548:	100491ba 	slli	r2,r2,6
  81254c:	10c5883a 	add	r2,r2,r3
  812550:	10800f04 	addi	r2,r2,60
  812554:	10800017 	ldw	r2,0(r2)
  812558:	1005003a 	cmpeq	r2,r2,zero
  81255c:	1000c71e 	bne	r2,zero,81287c <alt_up_sd_card_read+0x378>
			if (active_files[file_handle].current_byte_position
  812560:	e0bffe0f 	ldh	r2,-8(fp)
  812564:	00c02174 	movhi	r3,133
  812568:	18c20604 	addi	r3,r3,2072
  81256c:	100491ba 	slli	r2,r2,6
  812570:	10c5883a 	add	r2,r2,r3
  812574:	10800904 	addi	r2,r2,36
  812578:	11000017 	ldw	r4,0(r2)
  81257c:	e0bffe0f 	ldh	r2,-8(fp)
  812580:	00c02174 	movhi	r3,133
  812584:	18c20604 	addi	r3,r3,2072
  812588:	100491ba 	slli	r2,r2,6
  81258c:	10c5883a 	add	r2,r2,r3
  812590:	10800604 	addi	r2,r2,24
  812594:	10800017 	ldw	r2,0(r2)
  812598:	2080b82e 	bgeu	r4,r2,81287c <alt_up_sd_card_read+0x378>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  81259c:	00802174 	movhi	r2,133
  8125a0:	1081f104 	addi	r2,r2,1988
  8125a4:	14001417 	ldw	r16,80(r2)
  8125a8:	e0bffe0f 	ldh	r2,-8(fp)
  8125ac:	00c02174 	movhi	r3,133
  8125b0:	18c20604 	addi	r3,r3,2072
  8125b4:	100491ba 	slli	r2,r2,6
  8125b8:	10c5883a 	add	r2,r2,r3
  8125bc:	10800704 	addi	r2,r2,28
  8125c0:	10800017 	ldw	r2,0(r2)
  8125c4:	113fff84 	addi	r4,r2,-2
  8125c8:	00802174 	movhi	r2,133
  8125cc:	1081f104 	addi	r2,r2,1988
  8125d0:	10800383 	ldbu	r2,14(r2)
  8125d4:	11403fcc 	andi	r5,r2,255
  8125d8:	08017b40 	call	8017b4 <__mulsi3>
  8125dc:	8089883a 	add	r4,r16,r2
  8125e0:	e0bffe0f 	ldh	r2,-8(fp)
  8125e4:	00c02174 	movhi	r3,133
  8125e8:	18c20604 	addi	r3,r3,2072
  8125ec:	100491ba 	slli	r2,r2,6
  8125f0:	10c5883a 	add	r2,r2,r3
  8125f4:	10800804 	addi	r2,r2,32
  8125f8:	10800017 	ldw	r2,0(r2)
  8125fc:	2085883a 	add	r2,r4,r2
  812600:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  812604:	e0bffe0f 	ldh	r2,-8(fp)
  812608:	00c02174 	movhi	r3,133
  81260c:	18c20604 	addi	r3,r3,2072
  812610:	100491ba 	slli	r2,r2,6
  812614:	10c5883a 	add	r2,r2,r3
  812618:	10800904 	addi	r2,r2,36
  81261c:	10800017 	ldw	r2,0(r2)
  812620:	1005003a 	cmpeq	r2,r2,zero
  812624:	10006a1e 	bne	r2,zero,8127d0 <alt_up_sd_card_read+0x2cc>
  812628:	e0bffe0f 	ldh	r2,-8(fp)
  81262c:	00c02174 	movhi	r3,133
  812630:	18c20604 	addi	r3,r3,2072
  812634:	100491ba 	slli	r2,r2,6
  812638:	10c5883a 	add	r2,r2,r3
  81263c:	10800904 	addi	r2,r2,36
  812640:	10800017 	ldw	r2,0(r2)
  812644:	10807fcc 	andi	r2,r2,511
  812648:	1004c03a 	cmpne	r2,r2,zero
  81264c:	1000601e 	bne	r2,zero,8127d0 <alt_up_sd_card_read+0x2cc>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  812650:	e0bffe0f 	ldh	r2,-8(fp)
  812654:	00c02174 	movhi	r3,133
  812658:	18c20604 	addi	r3,r3,2072
  81265c:	100491ba 	slli	r2,r2,6
  812660:	10c5883a 	add	r2,r2,r3
  812664:	10800804 	addi	r2,r2,32
  812668:	10c00017 	ldw	r3,0(r2)
  81266c:	00802174 	movhi	r2,133
  812670:	1081f104 	addi	r2,r2,1988
  812674:	10800383 	ldbu	r2,14(r2)
  812678:	10803fcc 	andi	r2,r2,255
  81267c:	10bfffc4 	addi	r2,r2,-1
  812680:	1880411e 	bne	r3,r2,812788 <alt_up_sd_card_read+0x284>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  812684:	e0bffe0f 	ldh	r2,-8(fp)
  812688:	00c02174 	movhi	r3,133
  81268c:	18c20604 	addi	r3,r3,2072
  812690:	100491ba 	slli	r2,r2,6
  812694:	10c5883a 	add	r2,r2,r3
  812698:	10800704 	addi	r2,r2,28
  81269c:	11000017 	ldw	r4,0(r2)
  8126a0:	e17ffd84 	addi	r5,fp,-10
  8126a4:	080ee600 	call	80ee60 <get_cluster_flag>
  8126a8:	1005003a 	cmpeq	r2,r2,zero
  8126ac:	1000331e 	bne	r2,zero,81277c <alt_up_sd_card_read+0x278>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  8126b0:	e0bffd8b 	ldhu	r2,-10(fp)
  8126b4:	10bfffcc 	andi	r2,r2,65535
  8126b8:	10fffe0c 	andi	r3,r2,65528
  8126bc:	00bffe14 	movui	r2,65528
  8126c0:	1880031e 	bne	r3,r2,8126d0 <alt_up_sd_card_read+0x1cc>
								/* End of file */
								return -1;
  8126c4:	00bfffc4 	movi	r2,-1
  8126c8:	e0bfff15 	stw	r2,-4(fp)
  8126cc:	00006d06 	br	812884 <alt_up_sd_card_read+0x380>
							} else {
								active_files[file_handle].current_cluster_index
  8126d0:	e13ffe0f 	ldh	r4,-8(fp)
  8126d4:	e0bffd8b 	ldhu	r2,-10(fp)
  8126d8:	117fffcc 	andi	r5,r2,65535
  8126dc:	00c02174 	movhi	r3,133
  8126e0:	18c20604 	addi	r3,r3,2072
  8126e4:	200491ba 	slli	r2,r4,6
  8126e8:	10c5883a 	add	r2,r2,r3
  8126ec:	10800704 	addi	r2,r2,28
  8126f0:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  8126f4:	e0bffe0f 	ldh	r2,-8(fp)
  8126f8:	00c02174 	movhi	r3,133
  8126fc:	18c20604 	addi	r3,r3,2072
  812700:	100491ba 	slli	r2,r2,6
  812704:	10c5883a 	add	r2,r2,r3
  812708:	10800804 	addi	r2,r2,32
  81270c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  812710:	00802174 	movhi	r2,133
  812714:	1081f104 	addi	r2,r2,1988
  812718:	14001417 	ldw	r16,80(r2)
  81271c:	e0bffe0f 	ldh	r2,-8(fp)
  812720:	00c02174 	movhi	r3,133
  812724:	18c20604 	addi	r3,r3,2072
  812728:	100491ba 	slli	r2,r2,6
  81272c:	10c5883a 	add	r2,r2,r3
  812730:	10800704 	addi	r2,r2,28
  812734:	10800017 	ldw	r2,0(r2)
  812738:	113fff84 	addi	r4,r2,-2
  81273c:	00802174 	movhi	r2,133
  812740:	1081f104 	addi	r2,r2,1988
  812744:	10800383 	ldbu	r2,14(r2)
  812748:	11403fcc 	andi	r5,r2,255
  81274c:	08017b40 	call	8017b4 <__mulsi3>
  812750:	8089883a 	add	r4,r16,r2
  812754:	e0bffe0f 	ldh	r2,-8(fp)
  812758:	00c02174 	movhi	r3,133
  81275c:	18c20604 	addi	r3,r3,2072
  812760:	100491ba 	slli	r2,r2,6
  812764:	10c5883a 	add	r2,r2,r3
  812768:	10800804 	addi	r2,r2,32
  81276c:	10800017 	ldw	r2,0(r2)
  812770:	2085883a 	add	r2,r4,r2
  812774:	e0bffc15 	stw	r2,-16(fp)
  812778:	00001506 	br	8127d0 <alt_up_sd_card_read+0x2cc>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  81277c:	00bfff84 	movi	r2,-2
  812780:	e0bfff15 	stw	r2,-4(fp)
  812784:	00003f06 	br	812884 <alt_up_sd_card_read+0x380>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  812788:	e17ffe0f 	ldh	r5,-8(fp)
  81278c:	e0bffe0f 	ldh	r2,-8(fp)
  812790:	00c02174 	movhi	r3,133
  812794:	18c20604 	addi	r3,r3,2072
  812798:	100491ba 	slli	r2,r2,6
  81279c:	10c5883a 	add	r2,r2,r3
  8127a0:	10800804 	addi	r2,r2,32
  8127a4:	10800017 	ldw	r2,0(r2)
  8127a8:	11000044 	addi	r4,r2,1
  8127ac:	00c02174 	movhi	r3,133
  8127b0:	18c20604 	addi	r3,r3,2072
  8127b4:	280491ba 	slli	r2,r5,6
  8127b8:	10c5883a 	add	r2,r2,r3
  8127bc:	10800804 	addi	r2,r2,32
  8127c0:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  8127c4:	e0bffc17 	ldw	r2,-16(fp)
  8127c8:	10800044 	addi	r2,r2,1
  8127cc:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  8127d0:	d0e72f17 	ldw	r3,-25412(gp)
  8127d4:	e0bffc17 	ldw	r2,-16(fp)
  8127d8:	1885883a 	add	r2,r3,r2
  8127dc:	1007883a 	mov	r3,r2
  8127e0:	d0a73317 	ldw	r2,-25396(gp)
  8127e4:	18800826 	beq	r3,r2,812808 <alt_up_sd_card_read+0x304>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  8127e8:	d1672f17 	ldw	r5,-25412(gp)
  8127ec:	e13ffc17 	ldw	r4,-16(fp)
  8127f0:	080ed640 	call	80ed64 <Read_Sector_Data>
  8127f4:	1004c03a 	cmpne	r2,r2,zero
  8127f8:	1000031e 	bne	r2,zero,812808 <alt_up_sd_card_read+0x304>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  8127fc:	00bfff84 	movi	r2,-2
  812800:	e0bfff15 	stw	r2,-4(fp)
  812804:	00001f06 	br	812884 <alt_up_sd_card_read+0x380>
					}
				}

				ch
  812808:	e0bffe0f 	ldh	r2,-8(fp)
  81280c:	00c02174 	movhi	r3,133
  812810:	18c20604 	addi	r3,r3,2072
  812814:	100491ba 	slli	r2,r2,6
  812818:	10c5883a 	add	r2,r2,r3
  81281c:	10800904 	addi	r2,r2,36
  812820:	10800017 	ldw	r2,0(r2)
  812824:	10807fcc 	andi	r2,r2,511
  812828:	1007883a 	mov	r3,r2
  81282c:	d0a72e17 	ldw	r2,-25416(gp)
  812830:	1885883a 	add	r2,r3,r2
  812834:	10800023 	ldbuio	r2,0(r2)
  812838:	10803fcc 	andi	r2,r2,255
  81283c:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  812840:	e17ffe0f 	ldh	r5,-8(fp)
  812844:	e0bffe0f 	ldh	r2,-8(fp)
  812848:	00c02174 	movhi	r3,133
  81284c:	18c20604 	addi	r3,r3,2072
  812850:	100491ba 	slli	r2,r2,6
  812854:	10c5883a 	add	r2,r2,r3
  812858:	10800904 	addi	r2,r2,36
  81285c:	10800017 	ldw	r2,0(r2)
  812860:	11000044 	addi	r4,r2,1
  812864:	00c02174 	movhi	r3,133
  812868:	18c20604 	addi	r3,r3,2072
  81286c:	280491ba 	slli	r2,r5,6
  812870:	10c5883a 	add	r2,r2,r3
  812874:	10800904 	addi	r2,r2,36
  812878:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  81287c:	e0bffd0f 	ldh	r2,-12(fp)
  812880:	e0bfff15 	stw	r2,-4(fp)
  812884:	e0bfff17 	ldw	r2,-4(fp)
}
  812888:	e037883a 	mov	sp,fp
  81288c:	dfc00217 	ldw	ra,8(sp)
  812890:	df000117 	ldw	fp,4(sp)
  812894:	dc000017 	ldw	r16,0(sp)
  812898:	dec00304 	addi	sp,sp,12
  81289c:	f800283a 	ret

008128a0 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  8128a0:	defff504 	addi	sp,sp,-44
  8128a4:	dfc00a15 	stw	ra,40(sp)
  8128a8:	df000915 	stw	fp,36(sp)
  8128ac:	dc000815 	stw	r16,32(sp)
  8128b0:	df000804 	addi	fp,sp,32
  8128b4:	e13ffd0d 	sth	r4,-12(fp)
  8128b8:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  8128bc:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8128c0:	e0bffd0f 	ldh	r2,-12(fp)
  8128c4:	1004803a 	cmplt	r2,r2,zero
  8128c8:	1001751e 	bne	r2,zero,812ea0 <alt_up_sd_card_write+0x600>
  8128cc:	e0bffd0f 	ldh	r2,-12(fp)
  8128d0:	10800508 	cmpgei	r2,r2,20
  8128d4:	1001721e 	bne	r2,zero,812ea0 <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  8128d8:	e0bffd0f 	ldh	r2,-12(fp)
  8128dc:	00c02174 	movhi	r3,133
  8128e0:	18c20604 	addi	r3,r3,2072
  8128e4:	100491ba 	slli	r2,r2,6
  8128e8:	10c5883a 	add	r2,r2,r3
  8128ec:	10800f04 	addi	r2,r2,60
  8128f0:	10800017 	ldw	r2,0(r2)
  8128f4:	1005003a 	cmpeq	r2,r2,zero
  8128f8:	1001691e 	bne	r2,zero,812ea0 <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  8128fc:	00802174 	movhi	r2,133
  812900:	1081f104 	addi	r2,r2,1988
  812904:	14001417 	ldw	r16,80(r2)
  812908:	e0bffd0f 	ldh	r2,-12(fp)
  81290c:	00c02174 	movhi	r3,133
  812910:	18c20604 	addi	r3,r3,2072
  812914:	100491ba 	slli	r2,r2,6
  812918:	10c5883a 	add	r2,r2,r3
  81291c:	10800704 	addi	r2,r2,28
  812920:	10800017 	ldw	r2,0(r2)
  812924:	113fff84 	addi	r4,r2,-2
  812928:	00802174 	movhi	r2,133
  81292c:	1081f104 	addi	r2,r2,1988
  812930:	10800383 	ldbu	r2,14(r2)
  812934:	11403fcc 	andi	r5,r2,255
  812938:	08017b40 	call	8017b4 <__mulsi3>
  81293c:	8089883a 	add	r4,r16,r2
  812940:	e0bffd0f 	ldh	r2,-12(fp)
  812944:	00c02174 	movhi	r3,133
  812948:	18c20604 	addi	r3,r3,2072
  81294c:	100491ba 	slli	r2,r2,6
  812950:	10c5883a 	add	r2,r2,r3
  812954:	10800804 	addi	r2,r2,32
  812958:	10800017 	ldw	r2,0(r2)
  81295c:	2085883a 	add	r2,r4,r2
  812960:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  812964:	e0bffd0f 	ldh	r2,-12(fp)
  812968:	00c02174 	movhi	r3,133
  81296c:	18c20604 	addi	r3,r3,2072
  812970:	100491ba 	slli	r2,r2,6
  812974:	10c5883a 	add	r2,r2,r3
  812978:	10800904 	addi	r2,r2,36
  81297c:	11000017 	ldw	r4,0(r2)
  812980:	00802174 	movhi	r2,133
  812984:	1081f104 	addi	r2,r2,1988
  812988:	1080030b 	ldhu	r2,12(r2)
  81298c:	117fffcc 	andi	r5,r2,65535
  812990:	08017ac0 	call	8017ac <__umodsi3>
  812994:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  812998:	e0bffd0f 	ldh	r2,-12(fp)
  81299c:	00c02174 	movhi	r3,133
  8129a0:	18c20604 	addi	r3,r3,2072
  8129a4:	100491ba 	slli	r2,r2,6
  8129a8:	10c5883a 	add	r2,r2,r3
  8129ac:	10800904 	addi	r2,r2,36
  8129b0:	11000017 	ldw	r4,0(r2)
  8129b4:	e0bffd0f 	ldh	r2,-12(fp)
  8129b8:	00c02174 	movhi	r3,133
  8129bc:	18c20604 	addi	r3,r3,2072
  8129c0:	100491ba 	slli	r2,r2,6
  8129c4:	10c5883a 	add	r2,r2,r3
  8129c8:	10800604 	addi	r2,r2,24
  8129cc:	10800017 	ldw	r2,0(r2)
  8129d0:	2080682e 	bgeu	r4,r2,812b74 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  8129d4:	e0bffd0f 	ldh	r2,-12(fp)
  8129d8:	00c02174 	movhi	r3,133
  8129dc:	18c20604 	addi	r3,r3,2072
  8129e0:	100491ba 	slli	r2,r2,6
  8129e4:	10c5883a 	add	r2,r2,r3
  8129e8:	10800904 	addi	r2,r2,36
  8129ec:	10800017 	ldw	r2,0(r2)
  8129f0:	1005003a 	cmpeq	r2,r2,zero
  8129f4:	1000de1e 	bne	r2,zero,812d70 <alt_up_sd_card_write+0x4d0>
  8129f8:	e0bff80f 	ldh	r2,-32(fp)
  8129fc:	1004c03a 	cmpne	r2,r2,zero
  812a00:	1000db1e 	bne	r2,zero,812d70 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  812a04:	e0bffd0f 	ldh	r2,-12(fp)
  812a08:	00c02174 	movhi	r3,133
  812a0c:	18c20604 	addi	r3,r3,2072
  812a10:	100491ba 	slli	r2,r2,6
  812a14:	10c5883a 	add	r2,r2,r3
  812a18:	10800804 	addi	r2,r2,32
  812a1c:	10c00017 	ldw	r3,0(r2)
  812a20:	00802174 	movhi	r2,133
  812a24:	1081f104 	addi	r2,r2,1988
  812a28:	10800383 	ldbu	r2,14(r2)
  812a2c:	10803fcc 	andi	r2,r2,255
  812a30:	10bfffc4 	addi	r2,r2,-1
  812a34:	18803c1e 	bne	r3,r2,812b28 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  812a38:	e0bffd0f 	ldh	r2,-12(fp)
  812a3c:	00c02174 	movhi	r3,133
  812a40:	18c20604 	addi	r3,r3,2072
  812a44:	100491ba 	slli	r2,r2,6
  812a48:	10c5883a 	add	r2,r2,r3
  812a4c:	10800704 	addi	r2,r2,28
  812a50:	11000017 	ldw	r4,0(r2)
  812a54:	e17ffb04 	addi	r5,fp,-20
  812a58:	080ee600 	call	80ee60 <get_cluster_flag>
  812a5c:	1005003a 	cmpeq	r2,r2,zero
  812a60:	10002f1e 	bne	r2,zero,812b20 <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  812a64:	e0bffb0b 	ldhu	r2,-20(fp)
  812a68:	10ffffcc 	andi	r3,r2,65535
  812a6c:	00bffdd4 	movui	r2,65527
  812a70:	10c0bf36 	bltu	r2,r3,812d70 <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  812a74:	e13ffd0f 	ldh	r4,-12(fp)
  812a78:	e0bffb0b 	ldhu	r2,-20(fp)
  812a7c:	117fffcc 	andi	r5,r2,65535
  812a80:	00c02174 	movhi	r3,133
  812a84:	18c20604 	addi	r3,r3,2072
  812a88:	200491ba 	slli	r2,r4,6
  812a8c:	10c5883a 	add	r2,r2,r3
  812a90:	10800704 	addi	r2,r2,28
  812a94:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  812a98:	e0bffd0f 	ldh	r2,-12(fp)
  812a9c:	00c02174 	movhi	r3,133
  812aa0:	18c20604 	addi	r3,r3,2072
  812aa4:	100491ba 	slli	r2,r2,6
  812aa8:	10c5883a 	add	r2,r2,r3
  812aac:	10800804 	addi	r2,r2,32
  812ab0:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  812ab4:	00802174 	movhi	r2,133
  812ab8:	1081f104 	addi	r2,r2,1988
  812abc:	14001417 	ldw	r16,80(r2)
  812ac0:	e0bffd0f 	ldh	r2,-12(fp)
  812ac4:	00c02174 	movhi	r3,133
  812ac8:	18c20604 	addi	r3,r3,2072
  812acc:	100491ba 	slli	r2,r2,6
  812ad0:	10c5883a 	add	r2,r2,r3
  812ad4:	10800704 	addi	r2,r2,28
  812ad8:	10800017 	ldw	r2,0(r2)
  812adc:	113fff84 	addi	r4,r2,-2
  812ae0:	00802174 	movhi	r2,133
  812ae4:	1081f104 	addi	r2,r2,1988
  812ae8:	10800383 	ldbu	r2,14(r2)
  812aec:	11403fcc 	andi	r5,r2,255
  812af0:	08017b40 	call	8017b4 <__mulsi3>
  812af4:	8089883a 	add	r4,r16,r2
  812af8:	e0bffd0f 	ldh	r2,-12(fp)
  812afc:	00c02174 	movhi	r3,133
  812b00:	18c20604 	addi	r3,r3,2072
  812b04:	100491ba 	slli	r2,r2,6
  812b08:	10c5883a 	add	r2,r2,r3
  812b0c:	10800804 	addi	r2,r2,32
  812b10:	10800017 	ldw	r2,0(r2)
  812b14:	2085883a 	add	r2,r4,r2
  812b18:	e0bff915 	stw	r2,-28(fp)
  812b1c:	00009406 	br	812d70 <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  812b20:	e03fff15 	stw	zero,-4(fp)
  812b24:	0000e006 	br	812ea8 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  812b28:	e17ffd0f 	ldh	r5,-12(fp)
  812b2c:	e0bffd0f 	ldh	r2,-12(fp)
  812b30:	00c02174 	movhi	r3,133
  812b34:	18c20604 	addi	r3,r3,2072
  812b38:	100491ba 	slli	r2,r2,6
  812b3c:	10c5883a 	add	r2,r2,r3
  812b40:	10800804 	addi	r2,r2,32
  812b44:	10800017 	ldw	r2,0(r2)
  812b48:	11000044 	addi	r4,r2,1
  812b4c:	00c02174 	movhi	r3,133
  812b50:	18c20604 	addi	r3,r3,2072
  812b54:	280491ba 	slli	r2,r5,6
  812b58:	10c5883a 	add	r2,r2,r3
  812b5c:	10800804 	addi	r2,r2,32
  812b60:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  812b64:	e0bff917 	ldw	r2,-28(fp)
  812b68:	10800044 	addi	r2,r2,1
  812b6c:	e0bff915 	stw	r2,-28(fp)
  812b70:	00007f06 	br	812d70 <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  812b74:	e0bffd0f 	ldh	r2,-12(fp)
  812b78:	00c02174 	movhi	r3,133
  812b7c:	18c20604 	addi	r3,r3,2072
  812b80:	100491ba 	slli	r2,r2,6
  812b84:	10c5883a 	add	r2,r2,r3
  812b88:	10800904 	addi	r2,r2,36
  812b8c:	10800017 	ldw	r2,0(r2)
  812b90:	1005003a 	cmpeq	r2,r2,zero
  812b94:	1000761e 	bne	r2,zero,812d70 <alt_up_sd_card_write+0x4d0>
  812b98:	e0bff80f 	ldh	r2,-32(fp)
  812b9c:	1004c03a 	cmpne	r2,r2,zero
  812ba0:	1000731e 	bne	r2,zero,812d70 <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  812ba4:	e0bffd0f 	ldh	r2,-12(fp)
  812ba8:	00c02174 	movhi	r3,133
  812bac:	18c20604 	addi	r3,r3,2072
  812bb0:	100491ba 	slli	r2,r2,6
  812bb4:	10c5883a 	add	r2,r2,r3
  812bb8:	10800804 	addi	r2,r2,32
  812bbc:	10c00017 	ldw	r3,0(r2)
  812bc0:	00802174 	movhi	r2,133
  812bc4:	1081f104 	addi	r2,r2,1988
  812bc8:	10800383 	ldbu	r2,14(r2)
  812bcc:	10803fcc 	andi	r2,r2,255
  812bd0:	10bfffc4 	addi	r2,r2,-1
  812bd4:	1880381e 	bne	r3,r2,812cb8 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  812bd8:	e13ffc04 	addi	r4,fp,-16
  812bdc:	0810eb80 	call	810eb8 <find_first_empty_cluster>
  812be0:	1005003a 	cmpeq	r2,r2,zero
  812be4:	1000321e 	bne	r2,zero,812cb0 <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  812be8:	e0bffd0f 	ldh	r2,-12(fp)
  812bec:	00c02174 	movhi	r3,133
  812bf0:	18c20604 	addi	r3,r3,2072
  812bf4:	100491ba 	slli	r2,r2,6
  812bf8:	10c5883a 	add	r2,r2,r3
  812bfc:	10800704 	addi	r2,r2,28
  812c00:	11000017 	ldw	r4,0(r2)
  812c04:	e0bffc17 	ldw	r2,-16(fp)
  812c08:	117fffcc 	andi	r5,r2,65535
  812c0c:	2960001c 	xori	r5,r5,32768
  812c10:	29600004 	addi	r5,r5,-32768
  812c14:	01800044 	movi	r6,1
  812c18:	080ef180 	call	80ef18 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  812c1c:	e13ffc17 	ldw	r4,-16(fp)
  812c20:	017fffc4 	movi	r5,-1
  812c24:	01800044 	movi	r6,1
  812c28:	080ef180 	call	80ef18 <mark_cluster>
							mark_cluster(
  812c2c:	e0bffd0f 	ldh	r2,-12(fp)
  812c30:	00c02174 	movhi	r3,133
  812c34:	18c20604 	addi	r3,r3,2072
  812c38:	100491ba 	slli	r2,r2,6
  812c3c:	10c5883a 	add	r2,r2,r3
  812c40:	10800704 	addi	r2,r2,28
  812c44:	11000017 	ldw	r4,0(r2)
  812c48:	e0bffc17 	ldw	r2,-16(fp)
  812c4c:	117fffcc 	andi	r5,r2,65535
  812c50:	2960001c 	xori	r5,r5,32768
  812c54:	29600004 	addi	r5,r5,-32768
  812c58:	000d883a 	mov	r6,zero
  812c5c:	080ef180 	call	80ef18 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  812c60:	e13ffc17 	ldw	r4,-16(fp)
  812c64:	017fffc4 	movi	r5,-1
  812c68:	000d883a 	mov	r6,zero
  812c6c:	080ef180 	call	80ef18 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  812c70:	e0bffd0f 	ldh	r2,-12(fp)
  812c74:	e13ffc17 	ldw	r4,-16(fp)
  812c78:	00c02174 	movhi	r3,133
  812c7c:	18c20604 	addi	r3,r3,2072
  812c80:	100491ba 	slli	r2,r2,6
  812c84:	10c5883a 	add	r2,r2,r3
  812c88:	10800704 	addi	r2,r2,28
  812c8c:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  812c90:	e0bffd0f 	ldh	r2,-12(fp)
  812c94:	00c02174 	movhi	r3,133
  812c98:	18c20604 	addi	r3,r3,2072
  812c9c:	100491ba 	slli	r2,r2,6
  812ca0:	10c5883a 	add	r2,r2,r3
  812ca4:	10800804 	addi	r2,r2,32
  812ca8:	10000015 	stw	zero,0(r2)
  812cac:	00001606 	br	812d08 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  812cb0:	e03fff15 	stw	zero,-4(fp)
  812cb4:	00007c06 	br	812ea8 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  812cb8:	e43ffd0f 	ldh	r16,-12(fp)
  812cbc:	e0bffd0f 	ldh	r2,-12(fp)
  812cc0:	00c02174 	movhi	r3,133
  812cc4:	18c20604 	addi	r3,r3,2072
  812cc8:	100491ba 	slli	r2,r2,6
  812ccc:	10c5883a 	add	r2,r2,r3
  812cd0:	10800904 	addi	r2,r2,36
  812cd4:	11000017 	ldw	r4,0(r2)
  812cd8:	00802174 	movhi	r2,133
  812cdc:	1081f104 	addi	r2,r2,1988
  812ce0:	1080030b 	ldhu	r2,12(r2)
  812ce4:	117fffcc 	andi	r5,r2,65535
  812ce8:	08017a40 	call	8017a4 <__udivsi3>
  812cec:	1009883a 	mov	r4,r2
  812cf0:	00c02174 	movhi	r3,133
  812cf4:	18c20604 	addi	r3,r3,2072
  812cf8:	800491ba 	slli	r2,r16,6
  812cfc:	10c5883a 	add	r2,r2,r3
  812d00:	10800804 	addi	r2,r2,32
  812d04:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  812d08:	00802174 	movhi	r2,133
  812d0c:	1081f104 	addi	r2,r2,1988
  812d10:	14001417 	ldw	r16,80(r2)
  812d14:	e0bffd0f 	ldh	r2,-12(fp)
  812d18:	00c02174 	movhi	r3,133
  812d1c:	18c20604 	addi	r3,r3,2072
  812d20:	100491ba 	slli	r2,r2,6
  812d24:	10c5883a 	add	r2,r2,r3
  812d28:	10800704 	addi	r2,r2,28
  812d2c:	10800017 	ldw	r2,0(r2)
  812d30:	113fff84 	addi	r4,r2,-2
  812d34:	00802174 	movhi	r2,133
  812d38:	1081f104 	addi	r2,r2,1988
  812d3c:	10800383 	ldbu	r2,14(r2)
  812d40:	11403fcc 	andi	r5,r2,255
  812d44:	08017b40 	call	8017b4 <__mulsi3>
  812d48:	8089883a 	add	r4,r16,r2
  812d4c:	e0bffd0f 	ldh	r2,-12(fp)
  812d50:	00c02174 	movhi	r3,133
  812d54:	18c20604 	addi	r3,r3,2072
  812d58:	100491ba 	slli	r2,r2,6
  812d5c:	10c5883a 	add	r2,r2,r3
  812d60:	10800804 	addi	r2,r2,32
  812d64:	10800017 	ldw	r2,0(r2)
  812d68:	2085883a 	add	r2,r4,r2
  812d6c:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  812d70:	d0e72f17 	ldw	r3,-25412(gp)
  812d74:	e0bff917 	ldw	r2,-28(fp)
  812d78:	1885883a 	add	r2,r3,r2
  812d7c:	1007883a 	mov	r3,r2
  812d80:	d0a73317 	ldw	r2,-25396(gp)
  812d84:	18800726 	beq	r3,r2,812da4 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  812d88:	d1672f17 	ldw	r5,-25412(gp)
  812d8c:	e13ff917 	ldw	r4,-28(fp)
  812d90:	080ed640 	call	80ed64 <Read_Sector_Data>
  812d94:	1004c03a 	cmpne	r2,r2,zero
  812d98:	1000021e 	bne	r2,zero,812da4 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  812d9c:	e03fff15 	stw	zero,-4(fp)
  812da0:	00004106 	br	812ea8 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  812da4:	e0bff80f 	ldh	r2,-32(fp)
  812da8:	1007883a 	mov	r3,r2
  812dac:	d0a72e17 	ldw	r2,-25416(gp)
  812db0:	1885883a 	add	r2,r3,r2
  812db4:	e0fffe07 	ldb	r3,-8(fp)
  812db8:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  812dbc:	e17ffd0f 	ldh	r5,-12(fp)
  812dc0:	e0bffd0f 	ldh	r2,-12(fp)
  812dc4:	00c02174 	movhi	r3,133
  812dc8:	18c20604 	addi	r3,r3,2072
  812dcc:	100491ba 	slli	r2,r2,6
  812dd0:	10c5883a 	add	r2,r2,r3
  812dd4:	10800904 	addi	r2,r2,36
  812dd8:	10800017 	ldw	r2,0(r2)
  812ddc:	11000044 	addi	r4,r2,1
  812de0:	00c02174 	movhi	r3,133
  812de4:	18c20604 	addi	r3,r3,2072
  812de8:	280491ba 	slli	r2,r5,6
  812dec:	10c5883a 	add	r2,r2,r3
  812df0:	10800904 	addi	r2,r2,36
  812df4:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  812df8:	e0bffd0f 	ldh	r2,-12(fp)
  812dfc:	00c02174 	movhi	r3,133
  812e00:	18c20604 	addi	r3,r3,2072
  812e04:	100491ba 	slli	r2,r2,6
  812e08:	10c5883a 	add	r2,r2,r3
  812e0c:	10800904 	addi	r2,r2,36
  812e10:	11000017 	ldw	r4,0(r2)
  812e14:	e0bffd0f 	ldh	r2,-12(fp)
  812e18:	00c02174 	movhi	r3,133
  812e1c:	18c20604 	addi	r3,r3,2072
  812e20:	100491ba 	slli	r2,r2,6
  812e24:	10c5883a 	add	r2,r2,r3
  812e28:	10800604 	addi	r2,r2,24
  812e2c:	10800017 	ldw	r2,0(r2)
  812e30:	20801736 	bltu	r4,r2,812e90 <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  812e34:	e17ffd0f 	ldh	r5,-12(fp)
  812e38:	e0bffd0f 	ldh	r2,-12(fp)
  812e3c:	00c02174 	movhi	r3,133
  812e40:	18c20604 	addi	r3,r3,2072
  812e44:	100491ba 	slli	r2,r2,6
  812e48:	10c5883a 	add	r2,r2,r3
  812e4c:	10800604 	addi	r2,r2,24
  812e50:	10800017 	ldw	r2,0(r2)
  812e54:	11000044 	addi	r4,r2,1
  812e58:	00c02174 	movhi	r3,133
  812e5c:	18c20604 	addi	r3,r3,2072
  812e60:	280491ba 	slli	r2,r5,6
  812e64:	10c5883a 	add	r2,r2,r3
  812e68:	10800604 	addi	r2,r2,24
  812e6c:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  812e70:	e0bffd0f 	ldh	r2,-12(fp)
  812e74:	00c02174 	movhi	r3,133
  812e78:	18c20604 	addi	r3,r3,2072
  812e7c:	100491ba 	slli	r2,r2,6
  812e80:	10c5883a 	add	r2,r2,r3
  812e84:	10c00e04 	addi	r3,r2,56
  812e88:	00800044 	movi	r2,1
  812e8c:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  812e90:	00800044 	movi	r2,1
  812e94:	d0a73215 	stw	r2,-25400(gp)
			result = true;
  812e98:	00800044 	movi	r2,1
  812e9c:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  812ea0:	e0bffa17 	ldw	r2,-24(fp)
  812ea4:	e0bfff15 	stw	r2,-4(fp)
  812ea8:	e0bfff17 	ldw	r2,-4(fp)
}
  812eac:	e037883a 	mov	sp,fp
  812eb0:	dfc00217 	ldw	ra,8(sp)
  812eb4:	df000117 	ldw	fp,4(sp)
  812eb8:	dc000017 	ldw	r16,0(sp)
  812ebc:	dec00304 	addi	sp,sp,12
  812ec0:	f800283a 	ret

00812ec4 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  812ec4:	defffa04 	addi	sp,sp,-24
  812ec8:	dfc00515 	stw	ra,20(sp)
  812ecc:	df000415 	stw	fp,16(sp)
  812ed0:	dc000315 	stw	r16,12(sp)
  812ed4:	df000304 	addi	fp,sp,12
  812ed8:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  812edc:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  812ee0:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  812ee4:	1005003a 	cmpeq	r2,r2,zero
  812ee8:	1000641e 	bne	r2,zero,81307c <alt_up_sd_card_fclose+0x1b8>
  812eec:	d0a72817 	ldw	r2,-25440(gp)
  812ef0:	1005003a 	cmpeq	r2,r2,zero
  812ef4:	1000611e 	bne	r2,zero,81307c <alt_up_sd_card_fclose+0x1b8>
		if (active_files[file_handle].in_use) {
  812ef8:	e0bfff0f 	ldh	r2,-4(fp)
  812efc:	00c02174 	movhi	r3,133
  812f00:	18c20604 	addi	r3,r3,2072
  812f04:	100491ba 	slli	r2,r2,6
  812f08:	10c5883a 	add	r2,r2,r3
  812f0c:	10800f04 	addi	r2,r2,60
  812f10:	10800017 	ldw	r2,0(r2)
  812f14:	1005003a 	cmpeq	r2,r2,zero
  812f18:	1000581e 	bne	r2,zero,81307c <alt_up_sd_card_fclose+0x1b8>
			if (active_files[file_handle].modified) {
  812f1c:	e0bfff0f 	ldh	r2,-4(fp)
  812f20:	00c02174 	movhi	r3,133
  812f24:	18c20604 	addi	r3,r3,2072
  812f28:	100491ba 	slli	r2,r2,6
  812f2c:	10c5883a 	add	r2,r2,r3
  812f30:	10800e04 	addi	r2,r2,56
  812f34:	10800017 	ldw	r2,0(r2)
  812f38:	1005003a 	cmpeq	r2,r2,zero
  812f3c:	1000461e 	bne	r2,zero,813058 <alt_up_sd_card_fclose+0x194>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  812f40:	e0bfff0f 	ldh	r2,-4(fp)
  812f44:	00c02174 	movhi	r3,133
  812f48:	18c20604 	addi	r3,r3,2072
  812f4c:	100491ba 	slli	r2,r2,6
  812f50:	10c5883a 	add	r2,r2,r3
  812f54:	10800b04 	addi	r2,r2,44
  812f58:	10800017 	ldw	r2,0(r2)
  812f5c:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  812f60:	e0bfff0f 	ldh	r2,-4(fp)
  812f64:	00c02174 	movhi	r3,133
  812f68:	18c20604 	addi	r3,r3,2072
  812f6c:	100491ba 	slli	r2,r2,6
  812f70:	10c5883a 	add	r2,r2,r3
  812f74:	10800a04 	addi	r2,r2,40
  812f78:	10800017 	ldw	r2,0(r2)
  812f7c:	1004c03a 	cmpne	r2,r2,zero
  812f80:	1000071e 	bne	r2,zero,812fa0 <alt_up_sd_card_fclose+0xdc>
					record_sector = record_sector
  812f84:	00802174 	movhi	r2,133
  812f88:	1081f104 	addi	r2,r2,1988
  812f8c:	10c01317 	ldw	r3,76(r2)
  812f90:	e0bffd17 	ldw	r2,-12(fp)
  812f94:	10c5883a 	add	r2,r2,r3
  812f98:	e0bffd15 	stw	r2,-12(fp)
  812f9c:	00001406 	br	812ff0 <alt_up_sd_card_fclose+0x12c>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  812fa0:	00802174 	movhi	r2,133
  812fa4:	1081f104 	addi	r2,r2,1988
  812fa8:	10c01417 	ldw	r3,80(r2)
  812fac:	e0bffd17 	ldw	r2,-12(fp)
  812fb0:	18a1883a 	add	r16,r3,r2
  812fb4:	e0bfff0f 	ldh	r2,-4(fp)
  812fb8:	00c02174 	movhi	r3,133
  812fbc:	18c20604 	addi	r3,r3,2072
  812fc0:	100491ba 	slli	r2,r2,6
  812fc4:	10c5883a 	add	r2,r2,r3
  812fc8:	10800a04 	addi	r2,r2,40
  812fcc:	10800017 	ldw	r2,0(r2)
  812fd0:	113fff84 	addi	r4,r2,-2
  812fd4:	00802174 	movhi	r2,133
  812fd8:	1081f104 	addi	r2,r2,1988
  812fdc:	10800383 	ldbu	r2,14(r2)
  812fe0:	11403fcc 	andi	r5,r2,255
  812fe4:	08017b40 	call	8017b4 <__mulsi3>
  812fe8:	8085883a 	add	r2,r16,r2
  812fec:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  812ff0:	e13ffd17 	ldw	r4,-12(fp)
  812ff4:	d1672f17 	ldw	r5,-25412(gp)
  812ff8:	080ed640 	call	80ed64 <Read_Sector_Data>
  812ffc:	1005003a 	cmpeq	r2,r2,zero
  813000:	1000151e 	bne	r2,zero,813058 <alt_up_sd_card_fclose+0x194>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  813004:	e0bfff0f 	ldh	r2,-4(fp)
  813008:	00c02174 	movhi	r3,133
  81300c:	18c20604 	addi	r3,r3,2072
  813010:	100491ba 	slli	r2,r2,6
  813014:	10c5883a 	add	r2,r2,r3
  813018:	10800c04 	addi	r2,r2,48
  81301c:	1080000b 	ldhu	r2,0(r2)
  813020:	113fffcc 	andi	r4,r2,65535
  813024:	2120001c 	xori	r4,r4,32768
  813028:	21200004 	addi	r4,r4,-32768
  81302c:	e0bfff0f 	ldh	r2,-4(fp)
  813030:	100491ba 	slli	r2,r2,6
  813034:	1007883a 	mov	r3,r2
  813038:	00802174 	movhi	r2,133
  81303c:	10820604 	addi	r2,r2,2072
  813040:	188b883a 	add	r5,r3,r2
  813044:	080f4300 	call	80f430 <Write_File_Record_At_Offset>
  813048:	1005003a 	cmpeq	r2,r2,zero
  81304c:	1000021e 	bne	r2,zero,813058 <alt_up_sd_card_fclose+0x194>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  813050:	080ed140 	call	80ed14 <Save_Modified_Sector>
  813054:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  813058:	e0bfff0f 	ldh	r2,-4(fp)
  81305c:	00c02174 	movhi	r3,133
  813060:	18c20604 	addi	r3,r3,2072
  813064:	100491ba 	slli	r2,r2,6
  813068:	10c5883a 	add	r2,r2,r3
  81306c:	10800f04 	addi	r2,r2,60
  813070:	10000015 	stw	zero,0(r2)
			result = true;
  813074:	00800044 	movi	r2,1
  813078:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  81307c:	e0bffe17 	ldw	r2,-8(fp)
}
  813080:	e037883a 	mov	sp,fp
  813084:	dfc00217 	ldw	ra,8(sp)
  813088:	df000117 	ldw	fp,4(sp)
  81308c:	dc000017 	ldw	r16,0(sp)
  813090:	dec00304 	addi	sp,sp,12
  813094:	f800283a 	ret

00813098 <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  813098:	defff904 	addi	sp,sp,-28
  81309c:	dfc00615 	stw	ra,24(sp)
  8130a0:	df000515 	stw	fp,20(sp)
  8130a4:	df000504 	addi	fp,sp,20
  8130a8:	e13ffd15 	stw	r4,-12(fp)
  8130ac:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  8130b0:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  8130b4:	0811a800 	call	811a80 <alt_up_sd_card_is_Present>
  8130b8:	1005003a 	cmpeq	r2,r2,zero
  8130bc:	10002d1e 	bne	r2,zero,813174 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  8130c0:	00803fc4 	movi	r2,255
  8130c4:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  8130c8:	d0a73217 	ldw	r2,-25400(gp)
  8130cc:	1005003a 	cmpeq	r2,r2,zero
  8130d0:	1000081e 	bne	r2,zero,8130f4 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  8130d4:	d0a73317 	ldw	r2,-25396(gp)
  8130d8:	1009883a 	mov	r4,r2
  8130dc:	000b883a 	mov	r5,zero
  8130e0:	080ec4c0 	call	80ec4c <Write_Sector_Data>
  8130e4:	1004c03a 	cmpne	r2,r2,zero
  8130e8:	1000021e 	bne	r2,zero,8130f4 <Read_Sector_Data_CRC+0x5c>
				return false;
  8130ec:	e03fff15 	stw	zero,-4(fp)
  8130f0:	00002206 	br	81317c <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  8130f4:	d0a72d17 	ldw	r2,-25420(gp)
  8130f8:	1009883a 	mov	r4,r2
  8130fc:	e0fffd17 	ldw	r3,-12(fp)
  813100:	e0bffe17 	ldw	r2,-8(fp)
  813104:	1885883a 	add	r2,r3,r2
  813108:	1006927a 	slli	r3,r2,9
  81310c:	2005883a 	mov	r2,r4
  813110:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  813114:	d0a72c17 	ldw	r2,-25424(gp)
  813118:	1007883a 	mov	r3,r2
  81311c:	00800444 	movi	r2,17
  813120:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  813124:	d0a72917 	ldw	r2,-25436(gp)
  813128:	1080002b 	ldhuio	r2,0(r2)
  81312c:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  813130:	e0bffb0b 	ldhu	r2,-20(fp)
  813134:	10bfffcc 	andi	r2,r2,65535
  813138:	1080010c 	andi	r2,r2,4
  81313c:	1004c03a 	cmpne	r2,r2,zero
  813140:	103ff81e 	bne	r2,zero,813124 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  813144:	e0bffb0b 	ldhu	r2,-20(fp)
  813148:	10bfffcc 	andi	r2,r2,65535
  81314c:	10800c0c 	andi	r2,r2,48
  813150:	1004c03a 	cmpne	r2,r2,zero
  813154:	1000071e 	bne	r2,zero,813174 <Read_Sector_Data_CRC+0xdc>
			result = true;
  813158:	00800044 	movi	r2,1
  81315c:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  813160:	d0273215 	stw	zero,-25400(gp)
			current_sector_index = sector_index + partition_offset;
  813164:	e0fffd17 	ldw	r3,-12(fp)
  813168:	e0bffe17 	ldw	r2,-8(fp)
  81316c:	1885883a 	add	r2,r3,r2
  813170:	d0a73315 	stw	r2,-25396(gp)
		}
	}
	return result;
  813174:	e0bffc17 	ldw	r2,-16(fp)
  813178:	e0bfff15 	stw	r2,-4(fp)
  81317c:	e0bfff17 	ldw	r2,-4(fp)
}
  813180:	e037883a 	mov	sp,fp
  813184:	dfc00117 	ldw	ra,4(sp)
  813188:	df000017 	ldw	fp,0(sp)
  81318c:	dec00204 	addi	sp,sp,8
  813190:	f800283a 	ret

00813194 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  813194:	defff804 	addi	sp,sp,-32
  813198:	dfc00715 	stw	ra,28(sp)
  81319c:	df000615 	stw	fp,24(sp)
  8131a0:	df000604 	addi	fp,sp,24
  8131a4:	e13ffd15 	stw	r4,-12(fp)
  8131a8:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  8131ac:	00801904 	movi	r2,100
  8131b0:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  8131b4:	e03ffc15 	stw	zero,-16(fp)
  8131b8:	00000d06 	br	8131f0 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  8131bc:	e13ffd17 	ldw	r4,-12(fp)
  8131c0:	e17ffe17 	ldw	r5,-8(fp)
  8131c4:	08130980 	call	813098 <Read_Sector_Data_CRC>
  8131c8:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  8131cc:	e0bffb17 	ldw	r2,-20(fp)
  8131d0:	1005003a 	cmpeq	r2,r2,zero
  8131d4:	1000031e 	bne	r2,zero,8131e4 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  8131d8:	00800044 	movi	r2,1
  8131dc:	e0bfff15 	stw	r2,-4(fp)
  8131e0:	00000a06 	br	81320c <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  8131e4:	e0bffc17 	ldw	r2,-16(fp)
  8131e8:	10800044 	addi	r2,r2,1
  8131ec:	e0bffc15 	stw	r2,-16(fp)
  8131f0:	e0fffc17 	ldw	r3,-16(fp)
  8131f4:	e0bffa17 	ldw	r2,-24(fp)
  8131f8:	18bff016 	blt	r3,r2,8131bc <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  8131fc:	e13ffd17 	ldw	r4,-12(fp)
  813200:	e17ffe17 	ldw	r5,-8(fp)
  813204:	080ed640 	call	80ed64 <Read_Sector_Data>
  813208:	e0bfff15 	stw	r2,-4(fp)
  81320c:	e0bfff17 	ldw	r2,-4(fp)
}
  813210:	e037883a 	mov	sp,fp
  813214:	dfc00117 	ldw	ra,4(sp)
  813218:	df000017 	ldw	fp,0(sp)
  81321c:	dec00204 	addi	sp,sp,8
  813220:	f800283a 	ret

00813224 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813224:	deffff04 	addi	sp,sp,-4
  813228:	df000015 	stw	fp,0(sp)
  81322c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813230:	e037883a 	mov	sp,fp
  813234:	df000017 	ldw	fp,0(sp)
  813238:	dec00104 	addi	sp,sp,4
  81323c:	f800283a 	ret

00813240 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813240:	defff904 	addi	sp,sp,-28
  813244:	dfc00615 	stw	ra,24(sp)
  813248:	df000515 	stw	fp,20(sp)
  81324c:	df000504 	addi	fp,sp,20
  813250:	e13ffd15 	stw	r4,-12(fp)
  813254:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813258:	e0bffd17 	ldw	r2,-12(fp)
  81325c:	1005003a 	cmpeq	r2,r2,zero
  813260:	1000041e 	bne	r2,zero,813274 <alt_dev_llist_insert+0x34>
  813264:	e0bffd17 	ldw	r2,-12(fp)
  813268:	10800217 	ldw	r2,8(r2)
  81326c:	1004c03a 	cmpne	r2,r2,zero
  813270:	1000071e 	bne	r2,zero,813290 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813274:	08132f40 	call	8132f4 <alt_get_errno>
  813278:	1007883a 	mov	r3,r2
  81327c:	00800584 	movi	r2,22
  813280:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813284:	00bffa84 	movi	r2,-22
  813288:	e0bfff15 	stw	r2,-4(fp)
  81328c:	00001306 	br	8132dc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813290:	e0fffd17 	ldw	r3,-12(fp)
  813294:	e0bffe17 	ldw	r2,-8(fp)
  813298:	e0bffb15 	stw	r2,-20(fp)
  81329c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8132a0:	e0fffc17 	ldw	r3,-16(fp)
  8132a4:	e0bffb17 	ldw	r2,-20(fp)
  8132a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8132ac:	e0bffb17 	ldw	r2,-20(fp)
  8132b0:	10c00017 	ldw	r3,0(r2)
  8132b4:	e0bffc17 	ldw	r2,-16(fp)
  8132b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8132bc:	e0bffb17 	ldw	r2,-20(fp)
  8132c0:	10c00017 	ldw	r3,0(r2)
  8132c4:	e0bffc17 	ldw	r2,-16(fp)
  8132c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8132cc:	e0fffb17 	ldw	r3,-20(fp)
  8132d0:	e0bffc17 	ldw	r2,-16(fp)
  8132d4:	18800015 	stw	r2,0(r3)

  return 0;  
  8132d8:	e03fff15 	stw	zero,-4(fp)
  8132dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8132e0:	e037883a 	mov	sp,fp
  8132e4:	dfc00117 	ldw	ra,4(sp)
  8132e8:	df000017 	ldw	fp,0(sp)
  8132ec:	dec00204 	addi	sp,sp,8
  8132f0:	f800283a 	ret

008132f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8132f4:	defffd04 	addi	sp,sp,-12
  8132f8:	dfc00215 	stw	ra,8(sp)
  8132fc:	df000115 	stw	fp,4(sp)
  813300:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813304:	00802074 	movhi	r2,129
  813308:	1099b804 	addi	r2,r2,26336
  81330c:	10800017 	ldw	r2,0(r2)
  813310:	1005003a 	cmpeq	r2,r2,zero
  813314:	1000061e 	bne	r2,zero,813330 <alt_get_errno+0x3c>
  813318:	00802074 	movhi	r2,129
  81331c:	1099b804 	addi	r2,r2,26336
  813320:	10800017 	ldw	r2,0(r2)
  813324:	103ee83a 	callr	r2
  813328:	e0bfff15 	stw	r2,-4(fp)
  81332c:	00000306 	br	81333c <alt_get_errno+0x48>
  813330:	008020b4 	movhi	r2,130
  813334:	10a0c904 	addi	r2,r2,-31964
  813338:	e0bfff15 	stw	r2,-4(fp)
  81333c:	e0bfff17 	ldw	r2,-4(fp)
}
  813340:	e037883a 	mov	sp,fp
  813344:	dfc00117 	ldw	ra,4(sp)
  813348:	df000017 	ldw	fp,0(sp)
  81334c:	dec00204 	addi	sp,sp,8
  813350:	f800283a 	ret

00813354 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813354:	defffd04 	addi	sp,sp,-12
  813358:	dfc00215 	stw	ra,8(sp)
  81335c:	df000115 	stw	fp,4(sp)
  813360:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813364:	00bfff04 	movi	r2,-4
  813368:	00c02074 	movhi	r3,129
  81336c:	18d0be04 	addi	r3,r3,17144
  813370:	1885883a 	add	r2,r3,r2
  813374:	e0bfff15 	stw	r2,-4(fp)
  813378:	00000606 	br	813394 <_do_ctors+0x40>
        (*ctor) (); 
  81337c:	e0bfff17 	ldw	r2,-4(fp)
  813380:	10800017 	ldw	r2,0(r2)
  813384:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813388:	e0bfff17 	ldw	r2,-4(fp)
  81338c:	10bfff04 	addi	r2,r2,-4
  813390:	e0bfff15 	stw	r2,-4(fp)
  813394:	e0ffff17 	ldw	r3,-4(fp)
  813398:	00802074 	movhi	r2,129
  81339c:	1090bd04 	addi	r2,r2,17140
  8133a0:	18bff62e 	bgeu	r3,r2,81337c <_do_ctors+0x28>
        (*ctor) (); 
}
  8133a4:	e037883a 	mov	sp,fp
  8133a8:	dfc00117 	ldw	ra,4(sp)
  8133ac:	df000017 	ldw	fp,0(sp)
  8133b0:	dec00204 	addi	sp,sp,8
  8133b4:	f800283a 	ret

008133b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8133b8:	defffd04 	addi	sp,sp,-12
  8133bc:	dfc00215 	stw	ra,8(sp)
  8133c0:	df000115 	stw	fp,4(sp)
  8133c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8133c8:	00bfff04 	movi	r2,-4
  8133cc:	00c02074 	movhi	r3,129
  8133d0:	18d0be04 	addi	r3,r3,17144
  8133d4:	1885883a 	add	r2,r3,r2
  8133d8:	e0bfff15 	stw	r2,-4(fp)
  8133dc:	00000606 	br	8133f8 <_do_dtors+0x40>
        (*dtor) (); 
  8133e0:	e0bfff17 	ldw	r2,-4(fp)
  8133e4:	10800017 	ldw	r2,0(r2)
  8133e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8133ec:	e0bfff17 	ldw	r2,-4(fp)
  8133f0:	10bfff04 	addi	r2,r2,-4
  8133f4:	e0bfff15 	stw	r2,-4(fp)
  8133f8:	e0ffff17 	ldw	r3,-4(fp)
  8133fc:	00802074 	movhi	r2,129
  813400:	1090be04 	addi	r2,r2,17144
  813404:	18bff62e 	bgeu	r3,r2,8133e0 <_do_dtors+0x28>
        (*dtor) (); 
}
  813408:	e037883a 	mov	sp,fp
  81340c:	dfc00117 	ldw	ra,4(sp)
  813410:	df000017 	ldw	fp,0(sp)
  813414:	dec00204 	addi	sp,sp,8
  813418:	f800283a 	ret

0081341c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81341c:	defff904 	addi	sp,sp,-28
  813420:	dfc00615 	stw	ra,24(sp)
  813424:	df000515 	stw	fp,20(sp)
  813428:	df000504 	addi	fp,sp,20
  81342c:	e13ffd15 	stw	r4,-12(fp)
  813430:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813434:	e0bffe17 	ldw	r2,-8(fp)
  813438:	10800017 	ldw	r2,0(r2)
  81343c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813440:	e13ffd17 	ldw	r4,-12(fp)
  813444:	08020f00 	call	8020f0 <strlen>
  813448:	10800044 	addi	r2,r2,1
  81344c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813450:	00000d06 	br	813488 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813454:	e0bffc17 	ldw	r2,-16(fp)
  813458:	11000217 	ldw	r4,8(r2)
  81345c:	e1bffb17 	ldw	r6,-20(fp)
  813460:	e17ffd17 	ldw	r5,-12(fp)
  813464:	0813ecc0 	call	813ecc <memcmp>
  813468:	1004c03a 	cmpne	r2,r2,zero
  81346c:	1000031e 	bne	r2,zero,81347c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813470:	e0bffc17 	ldw	r2,-16(fp)
  813474:	e0bfff15 	stw	r2,-4(fp)
  813478:	00000706 	br	813498 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  81347c:	e0bffc17 	ldw	r2,-16(fp)
  813480:	10800017 	ldw	r2,0(r2)
  813484:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813488:	e0fffe17 	ldw	r3,-8(fp)
  81348c:	e0bffc17 	ldw	r2,-16(fp)
  813490:	10fff01e 	bne	r2,r3,813454 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813494:	e03fff15 	stw	zero,-4(fp)
  813498:	e0bfff17 	ldw	r2,-4(fp)
}
  81349c:	e037883a 	mov	sp,fp
  8134a0:	dfc00117 	ldw	ra,4(sp)
  8134a4:	df000017 	ldw	fp,0(sp)
  8134a8:	dec00204 	addi	sp,sp,8
  8134ac:	f800283a 	ret

008134b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8134b0:	defffe04 	addi	sp,sp,-8
  8134b4:	dfc00115 	stw	ra,4(sp)
  8134b8:	df000015 	stw	fp,0(sp)
  8134bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8134c0:	0009883a 	mov	r4,zero
  8134c4:	01440004 	movi	r5,4096
  8134c8:	0813df00 	call	813df0 <alt_icache_flush>
#endif
}
  8134cc:	e037883a 	mov	sp,fp
  8134d0:	dfc00117 	ldw	ra,4(sp)
  8134d4:	df000017 	ldw	fp,0(sp)
  8134d8:	dec00204 	addi	sp,sp,8
  8134dc:	f800283a 	ret

008134e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8134e0:	defff904 	addi	sp,sp,-28
  8134e4:	dfc00615 	stw	ra,24(sp)
  8134e8:	df000515 	stw	fp,20(sp)
  8134ec:	df000504 	addi	fp,sp,20
  8134f0:	e13ffc15 	stw	r4,-16(fp)
  8134f4:	e17ffd15 	stw	r5,-12(fp)
  8134f8:	e1bffe15 	stw	r6,-8(fp)
  8134fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  813500:	e0800217 	ldw	r2,8(fp)
  813504:	d8800015 	stw	r2,0(sp)
  813508:	e13ffc17 	ldw	r4,-16(fp)
  81350c:	e17ffd17 	ldw	r5,-12(fp)
  813510:	e1bffe17 	ldw	r6,-8(fp)
  813514:	e1ffff17 	ldw	r7,-4(fp)
  813518:	08136b40 	call	8136b4 <alt_iic_isr_register>
}  
  81351c:	e037883a 	mov	sp,fp
  813520:	dfc00117 	ldw	ra,4(sp)
  813524:	df000017 	ldw	fp,0(sp)
  813528:	dec00204 	addi	sp,sp,8
  81352c:	f800283a 	ret

00813530 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  813530:	defff904 	addi	sp,sp,-28
  813534:	df000615 	stw	fp,24(sp)
  813538:	df000604 	addi	fp,sp,24
  81353c:	e13ffe15 	stw	r4,-8(fp)
  813540:	e17fff15 	stw	r5,-4(fp)
  813544:	e0bfff17 	ldw	r2,-4(fp)
  813548:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81354c:	0005303a 	rdctl	r2,status
  813550:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813554:	e0fffb17 	ldw	r3,-20(fp)
  813558:	00bfff84 	movi	r2,-2
  81355c:	1884703a 	and	r2,r3,r2
  813560:	1001703a 	wrctl	status,r2
  
  return context;
  813564:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813568:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  81356c:	e0fffc17 	ldw	r3,-16(fp)
  813570:	00800044 	movi	r2,1
  813574:	10c4983a 	sll	r2,r2,r3
  813578:	1007883a 	mov	r3,r2
  81357c:	008020b4 	movhi	r2,130
  813580:	10a0e104 	addi	r2,r2,-31868
  813584:	10800017 	ldw	r2,0(r2)
  813588:	1886b03a 	or	r3,r3,r2
  81358c:	008020b4 	movhi	r2,130
  813590:	10a0e104 	addi	r2,r2,-31868
  813594:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813598:	008020b4 	movhi	r2,130
  81359c:	10a0e104 	addi	r2,r2,-31868
  8135a0:	10800017 	ldw	r2,0(r2)
  8135a4:	100170fa 	wrctl	ienable,r2
  8135a8:	e0bffd17 	ldw	r2,-12(fp)
  8135ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8135b0:	e0bffa17 	ldw	r2,-24(fp)
  8135b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8135b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8135bc:	e037883a 	mov	sp,fp
  8135c0:	df000017 	ldw	fp,0(sp)
  8135c4:	dec00104 	addi	sp,sp,4
  8135c8:	f800283a 	ret

008135cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8135cc:	defff904 	addi	sp,sp,-28
  8135d0:	df000615 	stw	fp,24(sp)
  8135d4:	df000604 	addi	fp,sp,24
  8135d8:	e13ffe15 	stw	r4,-8(fp)
  8135dc:	e17fff15 	stw	r5,-4(fp)
  8135e0:	e0bfff17 	ldw	r2,-4(fp)
  8135e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8135e8:	0005303a 	rdctl	r2,status
  8135ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8135f0:	e0fffb17 	ldw	r3,-20(fp)
  8135f4:	00bfff84 	movi	r2,-2
  8135f8:	1884703a 	and	r2,r3,r2
  8135fc:	1001703a 	wrctl	status,r2
  
  return context;
  813600:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813604:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  813608:	e0fffc17 	ldw	r3,-16(fp)
  81360c:	00800044 	movi	r2,1
  813610:	10c4983a 	sll	r2,r2,r3
  813614:	0084303a 	nor	r2,zero,r2
  813618:	1007883a 	mov	r3,r2
  81361c:	008020b4 	movhi	r2,130
  813620:	10a0e104 	addi	r2,r2,-31868
  813624:	10800017 	ldw	r2,0(r2)
  813628:	1886703a 	and	r3,r3,r2
  81362c:	008020b4 	movhi	r2,130
  813630:	10a0e104 	addi	r2,r2,-31868
  813634:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813638:	008020b4 	movhi	r2,130
  81363c:	10a0e104 	addi	r2,r2,-31868
  813640:	10800017 	ldw	r2,0(r2)
  813644:	100170fa 	wrctl	ienable,r2
  813648:	e0bffd17 	ldw	r2,-12(fp)
  81364c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813650:	e0bffa17 	ldw	r2,-24(fp)
  813654:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813658:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  81365c:	e037883a 	mov	sp,fp
  813660:	df000017 	ldw	fp,0(sp)
  813664:	dec00104 	addi	sp,sp,4
  813668:	f800283a 	ret

0081366c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81366c:	defffc04 	addi	sp,sp,-16
  813670:	df000315 	stw	fp,12(sp)
  813674:	df000304 	addi	fp,sp,12
  813678:	e13ffe15 	stw	r4,-8(fp)
  81367c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  813680:	000530fa 	rdctl	r2,ienable
  813684:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  813688:	e0ffff17 	ldw	r3,-4(fp)
  81368c:	00800044 	movi	r2,1
  813690:	10c4983a 	sll	r2,r2,r3
  813694:	1007883a 	mov	r3,r2
  813698:	e0bffd17 	ldw	r2,-12(fp)
  81369c:	1884703a 	and	r2,r3,r2
  8136a0:	1004c03a 	cmpne	r2,r2,zero
}
  8136a4:	e037883a 	mov	sp,fp
  8136a8:	df000017 	ldw	fp,0(sp)
  8136ac:	dec00104 	addi	sp,sp,4
  8136b0:	f800283a 	ret

008136b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8136b4:	defff404 	addi	sp,sp,-48
  8136b8:	dfc00b15 	stw	ra,44(sp)
  8136bc:	df000a15 	stw	fp,40(sp)
  8136c0:	df000a04 	addi	fp,sp,40
  8136c4:	e13ffb15 	stw	r4,-20(fp)
  8136c8:	e17ffc15 	stw	r5,-16(fp)
  8136cc:	e1bffd15 	stw	r6,-12(fp)
  8136d0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  8136d4:	00bffa84 	movi	r2,-22
  8136d8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8136dc:	e0bffc17 	ldw	r2,-16(fp)
  8136e0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8136e4:	e0bff917 	ldw	r2,-28(fp)
  8136e8:	10800808 	cmpgei	r2,r2,32
  8136ec:	1000291e 	bne	r2,zero,813794 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8136f0:	0005303a 	rdctl	r2,status
  8136f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8136f8:	e0fff717 	ldw	r3,-36(fp)
  8136fc:	00bfff84 	movi	r2,-2
  813700:	1884703a 	and	r2,r3,r2
  813704:	1001703a 	wrctl	status,r2
  
  return context;
  813708:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  81370c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  813710:	e0bff917 	ldw	r2,-28(fp)
  813714:	00c02174 	movhi	r3,133
  813718:	18c34604 	addi	r3,r3,3352
  81371c:	100490fa 	slli	r2,r2,3
  813720:	10c7883a 	add	r3,r2,r3
  813724:	e0bffd17 	ldw	r2,-12(fp)
  813728:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  81372c:	e0bff917 	ldw	r2,-28(fp)
  813730:	00c02174 	movhi	r3,133
  813734:	18c34604 	addi	r3,r3,3352
  813738:	100490fa 	slli	r2,r2,3
  81373c:	10c5883a 	add	r2,r2,r3
  813740:	10c00104 	addi	r3,r2,4
  813744:	e0bffe17 	ldw	r2,-8(fp)
  813748:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  81374c:	e0bffd17 	ldw	r2,-12(fp)
  813750:	1005003a 	cmpeq	r2,r2,zero
  813754:	1000051e 	bne	r2,zero,81376c <alt_iic_isr_register+0xb8>
  813758:	e17ff917 	ldw	r5,-28(fp)
  81375c:	e13ffb17 	ldw	r4,-20(fp)
  813760:	08135300 	call	813530 <alt_ic_irq_enable>
  813764:	e0bfff15 	stw	r2,-4(fp)
  813768:	00000406 	br	81377c <alt_iic_isr_register+0xc8>
  81376c:	e17ff917 	ldw	r5,-28(fp)
  813770:	e13ffb17 	ldw	r4,-20(fp)
  813774:	08135cc0 	call	8135cc <alt_ic_irq_disable>
  813778:	e0bfff15 	stw	r2,-4(fp)
  81377c:	e0bfff17 	ldw	r2,-4(fp)
  813780:	e0bffa15 	stw	r2,-24(fp)
  813784:	e0bff817 	ldw	r2,-32(fp)
  813788:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81378c:	e0bff617 	ldw	r2,-40(fp)
  813790:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  813794:	e0bffa17 	ldw	r2,-24(fp)
}
  813798:	e037883a 	mov	sp,fp
  81379c:	dfc00117 	ldw	ra,4(sp)
  8137a0:	df000017 	ldw	fp,0(sp)
  8137a4:	dec00204 	addi	sp,sp,8
  8137a8:	f800283a 	ret

008137ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8137ac:	defff804 	addi	sp,sp,-32
  8137b0:	dfc00715 	stw	ra,28(sp)
  8137b4:	df000615 	stw	fp,24(sp)
  8137b8:	dc000515 	stw	r16,20(sp)
  8137bc:	df000504 	addi	fp,sp,20
  8137c0:	e13ffc15 	stw	r4,-16(fp)
  8137c4:	e17ffd15 	stw	r5,-12(fp)
  8137c8:	e1bffe15 	stw	r6,-8(fp)
  8137cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8137d0:	e13ffd17 	ldw	r4,-12(fp)
  8137d4:	e17ffe17 	ldw	r5,-8(fp)
  8137d8:	e1bfff17 	ldw	r6,-4(fp)
  8137dc:	08139f40 	call	8139f4 <open>
  8137e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8137e4:	e0bffb17 	ldw	r2,-20(fp)
  8137e8:	1004803a 	cmplt	r2,r2,zero
  8137ec:	10001f1e 	bne	r2,zero,81386c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8137f0:	e13ffb17 	ldw	r4,-20(fp)
  8137f4:	04002074 	movhi	r16,129
  8137f8:	8414f804 	addi	r16,r16,21472
  8137fc:	01400304 	movi	r5,12
  813800:	08017b40 	call	8017b4 <__mulsi3>
  813804:	1405883a 	add	r2,r2,r16
  813808:	10c00017 	ldw	r3,0(r2)
  81380c:	e0bffc17 	ldw	r2,-16(fp)
  813810:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813814:	e13ffb17 	ldw	r4,-20(fp)
  813818:	04002074 	movhi	r16,129
  81381c:	8414f804 	addi	r16,r16,21472
  813820:	01400304 	movi	r5,12
  813824:	08017b40 	call	8017b4 <__mulsi3>
  813828:	1405883a 	add	r2,r2,r16
  81382c:	10800104 	addi	r2,r2,4
  813830:	10c00017 	ldw	r3,0(r2)
  813834:	e0bffc17 	ldw	r2,-16(fp)
  813838:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81383c:	e13ffb17 	ldw	r4,-20(fp)
  813840:	04002074 	movhi	r16,129
  813844:	8414f804 	addi	r16,r16,21472
  813848:	01400304 	movi	r5,12
  81384c:	08017b40 	call	8017b4 <__mulsi3>
  813850:	1405883a 	add	r2,r2,r16
  813854:	10800204 	addi	r2,r2,8
  813858:	10c00017 	ldw	r3,0(r2)
  81385c:	e0bffc17 	ldw	r2,-16(fp)
  813860:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  813864:	e13ffb17 	ldw	r4,-20(fp)
  813868:	080baa80 	call	80baa8 <alt_release_fd>
  }
} 
  81386c:	e037883a 	mov	sp,fp
  813870:	dfc00217 	ldw	ra,8(sp)
  813874:	df000117 	ldw	fp,4(sp)
  813878:	dc000017 	ldw	r16,0(sp)
  81387c:	dec00304 	addi	sp,sp,12
  813880:	f800283a 	ret

00813884 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813884:	defffb04 	addi	sp,sp,-20
  813888:	dfc00415 	stw	ra,16(sp)
  81388c:	df000315 	stw	fp,12(sp)
  813890:	df000304 	addi	fp,sp,12
  813894:	e13ffd15 	stw	r4,-12(fp)
  813898:	e17ffe15 	stw	r5,-8(fp)
  81389c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8138a0:	01002074 	movhi	r4,129
  8138a4:	2114fb04 	addi	r4,r4,21484
  8138a8:	e17ffd17 	ldw	r5,-12(fp)
  8138ac:	01800044 	movi	r6,1
  8138b0:	01c07fc4 	movi	r7,511
  8138b4:	08137ac0 	call	8137ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8138b8:	01002074 	movhi	r4,129
  8138bc:	2114f804 	addi	r4,r4,21472
  8138c0:	e17ffe17 	ldw	r5,-8(fp)
  8138c4:	000d883a 	mov	r6,zero
  8138c8:	01c07fc4 	movi	r7,511
  8138cc:	08137ac0 	call	8137ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8138d0:	01002074 	movhi	r4,129
  8138d4:	2114fe04 	addi	r4,r4,21496
  8138d8:	e17fff17 	ldw	r5,-4(fp)
  8138dc:	01800044 	movi	r6,1
  8138e0:	01c07fc4 	movi	r7,511
  8138e4:	08137ac0 	call	8137ac <alt_open_fd>
}  
  8138e8:	e037883a 	mov	sp,fp
  8138ec:	dfc00117 	ldw	ra,4(sp)
  8138f0:	df000017 	ldw	fp,0(sp)
  8138f4:	dec00204 	addi	sp,sp,8
  8138f8:	f800283a 	ret

008138fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8138fc:	defffa04 	addi	sp,sp,-24
  813900:	dfc00515 	stw	ra,20(sp)
  813904:	df000415 	stw	fp,16(sp)
  813908:	dc000315 	stw	r16,12(sp)
  81390c:	df000304 	addi	fp,sp,12
  813910:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  813914:	e0bffe17 	ldw	r2,-8(fp)
  813918:	10800217 	ldw	r2,8(r2)
  81391c:	10d00034 	orhi	r3,r2,16384
  813920:	e0bffe17 	ldw	r2,-8(fp)
  813924:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813928:	e03ffd15 	stw	zero,-12(fp)
  81392c:	00002306 	br	8139bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813930:	e13ffd17 	ldw	r4,-12(fp)
  813934:	04002074 	movhi	r16,129
  813938:	8414f804 	addi	r16,r16,21472
  81393c:	01400304 	movi	r5,12
  813940:	08017b40 	call	8017b4 <__mulsi3>
  813944:	1405883a 	add	r2,r2,r16
  813948:	10c00017 	ldw	r3,0(r2)
  81394c:	e0bffe17 	ldw	r2,-8(fp)
  813950:	10800017 	ldw	r2,0(r2)
  813954:	1880161e 	bne	r3,r2,8139b0 <alt_file_locked+0xb4>
  813958:	e13ffd17 	ldw	r4,-12(fp)
  81395c:	04002074 	movhi	r16,129
  813960:	8414f804 	addi	r16,r16,21472
  813964:	01400304 	movi	r5,12
  813968:	08017b40 	call	8017b4 <__mulsi3>
  81396c:	1405883a 	add	r2,r2,r16
  813970:	10800204 	addi	r2,r2,8
  813974:	10800017 	ldw	r2,0(r2)
  813978:	1004403a 	cmpge	r2,r2,zero
  81397c:	10000c1e 	bne	r2,zero,8139b0 <alt_file_locked+0xb4>
  813980:	e13ffd17 	ldw	r4,-12(fp)
  813984:	01400304 	movi	r5,12
  813988:	08017b40 	call	8017b4 <__mulsi3>
  81398c:	1007883a 	mov	r3,r2
  813990:	00802074 	movhi	r2,129
  813994:	1094f804 	addi	r2,r2,21472
  813998:	1887883a 	add	r3,r3,r2
  81399c:	e0bffe17 	ldw	r2,-8(fp)
  8139a0:	18800326 	beq	r3,r2,8139b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8139a4:	00bffcc4 	movi	r2,-13
  8139a8:	e0bfff15 	stw	r2,-4(fp)
  8139ac:	00000a06 	br	8139d8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8139b0:	e0bffd17 	ldw	r2,-12(fp)
  8139b4:	10800044 	addi	r2,r2,1
  8139b8:	e0bffd15 	stw	r2,-12(fp)
  8139bc:	00802074 	movhi	r2,129
  8139c0:	1099b704 	addi	r2,r2,26332
  8139c4:	10800017 	ldw	r2,0(r2)
  8139c8:	1007883a 	mov	r3,r2
  8139cc:	e0bffd17 	ldw	r2,-12(fp)
  8139d0:	18bfd72e 	bgeu	r3,r2,813930 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8139d4:	e03fff15 	stw	zero,-4(fp)
  8139d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8139dc:	e037883a 	mov	sp,fp
  8139e0:	dfc00217 	ldw	ra,8(sp)
  8139e4:	df000117 	ldw	fp,4(sp)
  8139e8:	dc000017 	ldw	r16,0(sp)
  8139ec:	dec00304 	addi	sp,sp,12
  8139f0:	f800283a 	ret

008139f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8139f4:	defff404 	addi	sp,sp,-48
  8139f8:	dfc00b15 	stw	ra,44(sp)
  8139fc:	df000a15 	stw	fp,40(sp)
  813a00:	df000a04 	addi	fp,sp,40
  813a04:	e13ffb15 	stw	r4,-20(fp)
  813a08:	e17ffc15 	stw	r5,-16(fp)
  813a0c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  813a10:	00bfffc4 	movi	r2,-1
  813a14:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  813a18:	00bffb44 	movi	r2,-19
  813a1c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  813a20:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813a24:	e13ffb17 	ldw	r4,-20(fp)
  813a28:	01402074 	movhi	r5,129
  813a2c:	2959b504 	addi	r5,r5,26324
  813a30:	081341c0 	call	81341c <alt_find_dev>
  813a34:	e0bffa15 	stw	r2,-24(fp)
  813a38:	e0bffa17 	ldw	r2,-24(fp)
  813a3c:	1004c03a 	cmpne	r2,r2,zero
  813a40:	1000051e 	bne	r2,zero,813a58 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  813a44:	e13ffb17 	ldw	r4,-20(fp)
  813a48:	0813c000 	call	813c00 <alt_find_file>
  813a4c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  813a50:	00800044 	movi	r2,1
  813a54:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  813a58:	e0bffa17 	ldw	r2,-24(fp)
  813a5c:	1005003a 	cmpeq	r2,r2,zero
  813a60:	1000311e 	bne	r2,zero,813b28 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  813a64:	e13ffa17 	ldw	r4,-24(fp)
  813a68:	0813d200 	call	813d20 <alt_get_fd>
  813a6c:	e0bff815 	stw	r2,-32(fp)
  813a70:	e0bff817 	ldw	r2,-32(fp)
  813a74:	1004403a 	cmpge	r2,r2,zero
  813a78:	1000031e 	bne	r2,zero,813a88 <open+0x94>
    {
      status = index;
  813a7c:	e0bff817 	ldw	r2,-32(fp)
  813a80:	e0bff715 	stw	r2,-36(fp)
  813a84:	00002a06 	br	813b30 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  813a88:	e13ff817 	ldw	r4,-32(fp)
  813a8c:	01400304 	movi	r5,12
  813a90:	08017b40 	call	8017b4 <__mulsi3>
  813a94:	1007883a 	mov	r3,r2
  813a98:	00802074 	movhi	r2,129
  813a9c:	1094f804 	addi	r2,r2,21472
  813aa0:	1885883a 	add	r2,r3,r2
  813aa4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813aa8:	e0fffc17 	ldw	r3,-16(fp)
  813aac:	00900034 	movhi	r2,16384
  813ab0:	10bfffc4 	addi	r2,r2,-1
  813ab4:	1886703a 	and	r3,r3,r2
  813ab8:	e0bff917 	ldw	r2,-28(fp)
  813abc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813ac0:	e0bff617 	ldw	r2,-40(fp)
  813ac4:	1004c03a 	cmpne	r2,r2,zero
  813ac8:	1000061e 	bne	r2,zero,813ae4 <open+0xf0>
  813acc:	e13ff917 	ldw	r4,-28(fp)
  813ad0:	08138fc0 	call	8138fc <alt_file_locked>
  813ad4:	e0bff715 	stw	r2,-36(fp)
  813ad8:	e0bff717 	ldw	r2,-36(fp)
  813adc:	1004803a 	cmplt	r2,r2,zero
  813ae0:	1000131e 	bne	r2,zero,813b30 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813ae4:	e0bffa17 	ldw	r2,-24(fp)
  813ae8:	10800317 	ldw	r2,12(r2)
  813aec:	1005003a 	cmpeq	r2,r2,zero
  813af0:	1000091e 	bne	r2,zero,813b18 <open+0x124>
  813af4:	e0bffa17 	ldw	r2,-24(fp)
  813af8:	10800317 	ldw	r2,12(r2)
  813afc:	e13ff917 	ldw	r4,-28(fp)
  813b00:	e17ffb17 	ldw	r5,-20(fp)
  813b04:	e1bffc17 	ldw	r6,-16(fp)
  813b08:	e1fffd17 	ldw	r7,-12(fp)
  813b0c:	103ee83a 	callr	r2
  813b10:	e0bfff15 	stw	r2,-4(fp)
  813b14:	00000106 	br	813b1c <open+0x128>
  813b18:	e03fff15 	stw	zero,-4(fp)
  813b1c:	e0bfff17 	ldw	r2,-4(fp)
  813b20:	e0bff715 	stw	r2,-36(fp)
  813b24:	00000206 	br	813b30 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  813b28:	00bffb44 	movi	r2,-19
  813b2c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813b30:	e0bff717 	ldw	r2,-36(fp)
  813b34:	1004403a 	cmpge	r2,r2,zero
  813b38:	1000091e 	bne	r2,zero,813b60 <open+0x16c>
  {
    alt_release_fd (index);  
  813b3c:	e13ff817 	ldw	r4,-32(fp)
  813b40:	080baa80 	call	80baa8 <alt_release_fd>
    ALT_ERRNO = -status;
  813b44:	0813b800 	call	813b80 <alt_get_errno>
  813b48:	e0fff717 	ldw	r3,-36(fp)
  813b4c:	00c7c83a 	sub	r3,zero,r3
  813b50:	10c00015 	stw	r3,0(r2)
    return -1;
  813b54:	00bfffc4 	movi	r2,-1
  813b58:	e0bffe15 	stw	r2,-8(fp)
  813b5c:	00000206 	br	813b68 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  813b60:	e0bff817 	ldw	r2,-32(fp)
  813b64:	e0bffe15 	stw	r2,-8(fp)
  813b68:	e0bffe17 	ldw	r2,-8(fp)
}
  813b6c:	e037883a 	mov	sp,fp
  813b70:	dfc00117 	ldw	ra,4(sp)
  813b74:	df000017 	ldw	fp,0(sp)
  813b78:	dec00204 	addi	sp,sp,8
  813b7c:	f800283a 	ret

00813b80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813b80:	defffd04 	addi	sp,sp,-12
  813b84:	dfc00215 	stw	ra,8(sp)
  813b88:	df000115 	stw	fp,4(sp)
  813b8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813b90:	00802074 	movhi	r2,129
  813b94:	1099b804 	addi	r2,r2,26336
  813b98:	10800017 	ldw	r2,0(r2)
  813b9c:	1005003a 	cmpeq	r2,r2,zero
  813ba0:	1000061e 	bne	r2,zero,813bbc <alt_get_errno+0x3c>
  813ba4:	00802074 	movhi	r2,129
  813ba8:	1099b804 	addi	r2,r2,26336
  813bac:	10800017 	ldw	r2,0(r2)
  813bb0:	103ee83a 	callr	r2
  813bb4:	e0bfff15 	stw	r2,-4(fp)
  813bb8:	00000306 	br	813bc8 <alt_get_errno+0x48>
  813bbc:	008020b4 	movhi	r2,130
  813bc0:	10a0c904 	addi	r2,r2,-31964
  813bc4:	e0bfff15 	stw	r2,-4(fp)
  813bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  813bcc:	e037883a 	mov	sp,fp
  813bd0:	dfc00117 	ldw	ra,4(sp)
  813bd4:	df000017 	ldw	fp,0(sp)
  813bd8:	dec00204 	addi	sp,sp,8
  813bdc:	f800283a 	ret

00813be0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  813be0:	deffff04 	addi	sp,sp,-4
  813be4:	df000015 	stw	fp,0(sp)
  813be8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813bec:	000170fa 	wrctl	ienable,zero
}
  813bf0:	e037883a 	mov	sp,fp
  813bf4:	df000017 	ldw	fp,0(sp)
  813bf8:	dec00104 	addi	sp,sp,4
  813bfc:	f800283a 	ret

00813c00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813c00:	defffa04 	addi	sp,sp,-24
  813c04:	dfc00515 	stw	ra,20(sp)
  813c08:	df000415 	stw	fp,16(sp)
  813c0c:	df000404 	addi	fp,sp,16
  813c10:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813c14:	00802074 	movhi	r2,129
  813c18:	1099b304 	addi	r2,r2,26316
  813c1c:	10800017 	ldw	r2,0(r2)
  813c20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813c24:	00003306 	br	813cf4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813c28:	e0bffd17 	ldw	r2,-12(fp)
  813c2c:	11000217 	ldw	r4,8(r2)
  813c30:	08020f00 	call	8020f0 <strlen>
  813c34:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813c38:	e0bffd17 	ldw	r2,-12(fp)
  813c3c:	10c00217 	ldw	r3,8(r2)
  813c40:	e0bffc17 	ldw	r2,-16(fp)
  813c44:	1885883a 	add	r2,r3,r2
  813c48:	10bfffc4 	addi	r2,r2,-1
  813c4c:	10800003 	ldbu	r2,0(r2)
  813c50:	10803fcc 	andi	r2,r2,255
  813c54:	1080201c 	xori	r2,r2,128
  813c58:	10bfe004 	addi	r2,r2,-128
  813c5c:	10800bd8 	cmpnei	r2,r2,47
  813c60:	1000031e 	bne	r2,zero,813c70 <alt_find_file+0x70>
    {
      len -= 1;
  813c64:	e0bffc17 	ldw	r2,-16(fp)
  813c68:	10bfffc4 	addi	r2,r2,-1
  813c6c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813c70:	e0bffc17 	ldw	r2,-16(fp)
  813c74:	1007883a 	mov	r3,r2
  813c78:	e0bffe17 	ldw	r2,-8(fp)
  813c7c:	1885883a 	add	r2,r3,r2
  813c80:	10800003 	ldbu	r2,0(r2)
  813c84:	10803fcc 	andi	r2,r2,255
  813c88:	1080201c 	xori	r2,r2,128
  813c8c:	10bfe004 	addi	r2,r2,-128
  813c90:	10800be0 	cmpeqi	r2,r2,47
  813c94:	10000a1e 	bne	r2,zero,813cc0 <alt_find_file+0xc0>
  813c98:	e0bffc17 	ldw	r2,-16(fp)
  813c9c:	1007883a 	mov	r3,r2
  813ca0:	e0bffe17 	ldw	r2,-8(fp)
  813ca4:	1885883a 	add	r2,r3,r2
  813ca8:	10800003 	ldbu	r2,0(r2)
  813cac:	10803fcc 	andi	r2,r2,255
  813cb0:	1080201c 	xori	r2,r2,128
  813cb4:	10bfe004 	addi	r2,r2,-128
  813cb8:	1004c03a 	cmpne	r2,r2,zero
  813cbc:	10000a1e 	bne	r2,zero,813ce8 <alt_find_file+0xe8>
  813cc0:	e0bffd17 	ldw	r2,-12(fp)
  813cc4:	11000217 	ldw	r4,8(r2)
  813cc8:	e1bffc17 	ldw	r6,-16(fp)
  813ccc:	e17ffe17 	ldw	r5,-8(fp)
  813cd0:	0813ecc0 	call	813ecc <memcmp>
  813cd4:	1004c03a 	cmpne	r2,r2,zero
  813cd8:	1000031e 	bne	r2,zero,813ce8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813cdc:	e0bffd17 	ldw	r2,-12(fp)
  813ce0:	e0bfff15 	stw	r2,-4(fp)
  813ce4:	00000806 	br	813d08 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813ce8:	e0bffd17 	ldw	r2,-12(fp)
  813cec:	10800017 	ldw	r2,0(r2)
  813cf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813cf4:	00c02074 	movhi	r3,129
  813cf8:	18d9b304 	addi	r3,r3,26316
  813cfc:	e0bffd17 	ldw	r2,-12(fp)
  813d00:	10ffc91e 	bne	r2,r3,813c28 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813d04:	e03fff15 	stw	zero,-4(fp)
  813d08:	e0bfff17 	ldw	r2,-4(fp)
}
  813d0c:	e037883a 	mov	sp,fp
  813d10:	dfc00117 	ldw	ra,4(sp)
  813d14:	df000017 	ldw	fp,0(sp)
  813d18:	dec00204 	addi	sp,sp,8
  813d1c:	f800283a 	ret

00813d20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813d20:	defffa04 	addi	sp,sp,-24
  813d24:	dfc00515 	stw	ra,20(sp)
  813d28:	df000415 	stw	fp,16(sp)
  813d2c:	dc000315 	stw	r16,12(sp)
  813d30:	df000304 	addi	fp,sp,12
  813d34:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813d38:	00bffa04 	movi	r2,-24
  813d3c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813d40:	e03ffe15 	stw	zero,-8(fp)
  813d44:	00002006 	br	813dc8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  813d48:	e13ffe17 	ldw	r4,-8(fp)
  813d4c:	04002074 	movhi	r16,129
  813d50:	8414f804 	addi	r16,r16,21472
  813d54:	01400304 	movi	r5,12
  813d58:	08017b40 	call	8017b4 <__mulsi3>
  813d5c:	1405883a 	add	r2,r2,r16
  813d60:	10800017 	ldw	r2,0(r2)
  813d64:	1004c03a 	cmpne	r2,r2,zero
  813d68:	1000141e 	bne	r2,zero,813dbc <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  813d6c:	e13ffe17 	ldw	r4,-8(fp)
  813d70:	04002074 	movhi	r16,129
  813d74:	8414f804 	addi	r16,r16,21472
  813d78:	01400304 	movi	r5,12
  813d7c:	08017b40 	call	8017b4 <__mulsi3>
  813d80:	1407883a 	add	r3,r2,r16
  813d84:	e0bfff17 	ldw	r2,-4(fp)
  813d88:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  813d8c:	00802074 	movhi	r2,129
  813d90:	1099b704 	addi	r2,r2,26332
  813d94:	10c00017 	ldw	r3,0(r2)
  813d98:	e0bffe17 	ldw	r2,-8(fp)
  813d9c:	1880040e 	bge	r3,r2,813db0 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  813da0:	00c02074 	movhi	r3,129
  813da4:	18d9b704 	addi	r3,r3,26332
  813da8:	e0bffe17 	ldw	r2,-8(fp)
  813dac:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  813db0:	e0bffe17 	ldw	r2,-8(fp)
  813db4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  813db8:	00000606 	br	813dd4 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813dbc:	e0bffe17 	ldw	r2,-8(fp)
  813dc0:	10800044 	addi	r2,r2,1
  813dc4:	e0bffe15 	stw	r2,-8(fp)
  813dc8:	e0bffe17 	ldw	r2,-8(fp)
  813dcc:	10800810 	cmplti	r2,r2,32
  813dd0:	103fdd1e 	bne	r2,zero,813d48 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813dd4:	e0bffd17 	ldw	r2,-12(fp)
}
  813dd8:	e037883a 	mov	sp,fp
  813ddc:	dfc00217 	ldw	ra,8(sp)
  813de0:	df000117 	ldw	fp,4(sp)
  813de4:	dc000017 	ldw	r16,0(sp)
  813de8:	dec00304 	addi	sp,sp,12
  813dec:	f800283a 	ret

00813df0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  813df0:	defffb04 	addi	sp,sp,-20
  813df4:	df000415 	stw	fp,16(sp)
  813df8:	df000404 	addi	fp,sp,16
  813dfc:	e13ffe15 	stw	r4,-8(fp)
  813e00:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  813e04:	e0bfff17 	ldw	r2,-4(fp)
  813e08:	10840070 	cmpltui	r2,r2,4097
  813e0c:	1000021e 	bne	r2,zero,813e18 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813e10:	00840004 	movi	r2,4096
  813e14:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813e18:	e0fffe17 	ldw	r3,-8(fp)
  813e1c:	e0bfff17 	ldw	r2,-4(fp)
  813e20:	1885883a 	add	r2,r3,r2
  813e24:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813e28:	e0bffe17 	ldw	r2,-8(fp)
  813e2c:	e0bffd15 	stw	r2,-12(fp)
  813e30:	00000506 	br	813e48 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813e34:	e0bffd17 	ldw	r2,-12(fp)
  813e38:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813e3c:	e0bffd17 	ldw	r2,-12(fp)
  813e40:	10800804 	addi	r2,r2,32
  813e44:	e0bffd15 	stw	r2,-12(fp)
  813e48:	e0fffd17 	ldw	r3,-12(fp)
  813e4c:	e0bffc17 	ldw	r2,-16(fp)
  813e50:	18bff836 	bltu	r3,r2,813e34 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813e54:	e0bffe17 	ldw	r2,-8(fp)
  813e58:	108007cc 	andi	r2,r2,31
  813e5c:	1005003a 	cmpeq	r2,r2,zero
  813e60:	1000021e 	bne	r2,zero,813e6c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813e64:	e0bffd17 	ldw	r2,-12(fp)
  813e68:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813e6c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813e70:	e037883a 	mov	sp,fp
  813e74:	df000017 	ldw	fp,0(sp)
  813e78:	dec00104 	addi	sp,sp,4
  813e7c:	f800283a 	ret

00813e80 <atexit>:
  813e80:	200b883a 	mov	r5,r4
  813e84:	000d883a 	mov	r6,zero
  813e88:	0009883a 	mov	r4,zero
  813e8c:	000f883a 	mov	r7,zero
  813e90:	0813f401 	jmpi	813f40 <__register_exitproc>

00813e94 <exit>:
  813e94:	defffe04 	addi	sp,sp,-8
  813e98:	000b883a 	mov	r5,zero
  813e9c:	dc000015 	stw	r16,0(sp)
  813ea0:	dfc00115 	stw	ra,4(sp)
  813ea4:	2021883a 	mov	r16,r4
  813ea8:	08140780 	call	814078 <__call_exitprocs>
  813eac:	00802074 	movhi	r2,129
  813eb0:	1099b004 	addi	r2,r2,26304
  813eb4:	11000017 	ldw	r4,0(r2)
  813eb8:	20800f17 	ldw	r2,60(r4)
  813ebc:	10000126 	beq	r2,zero,813ec4 <exit+0x30>
  813ec0:	103ee83a 	callr	r2
  813ec4:	8009883a 	mov	r4,r16
  813ec8:	08142680 	call	814268 <_exit>

00813ecc <memcmp>:
  813ecc:	00c000c4 	movi	r3,3
  813ed0:	1980032e 	bgeu	r3,r6,813ee0 <memcmp+0x14>
  813ed4:	2144b03a 	or	r2,r4,r5
  813ed8:	10c4703a 	and	r2,r2,r3
  813edc:	10000f26 	beq	r2,zero,813f1c <memcmp+0x50>
  813ee0:	31ffffc4 	addi	r7,r6,-1
  813ee4:	3000061e 	bne	r6,zero,813f00 <memcmp+0x34>
  813ee8:	00000a06 	br	813f14 <memcmp+0x48>
  813eec:	39ffffc4 	addi	r7,r7,-1
  813ef0:	00bfffc4 	movi	r2,-1
  813ef4:	21000044 	addi	r4,r4,1
  813ef8:	29400044 	addi	r5,r5,1
  813efc:	38800526 	beq	r7,r2,813f14 <memcmp+0x48>
  813f00:	20c00003 	ldbu	r3,0(r4)
  813f04:	28800003 	ldbu	r2,0(r5)
  813f08:	18bff826 	beq	r3,r2,813eec <memcmp+0x20>
  813f0c:	1885c83a 	sub	r2,r3,r2
  813f10:	f800283a 	ret
  813f14:	0005883a 	mov	r2,zero
  813f18:	f800283a 	ret
  813f1c:	180f883a 	mov	r7,r3
  813f20:	20c00017 	ldw	r3,0(r4)
  813f24:	28800017 	ldw	r2,0(r5)
  813f28:	18bfed1e 	bne	r3,r2,813ee0 <memcmp+0x14>
  813f2c:	31bfff04 	addi	r6,r6,-4
  813f30:	21000104 	addi	r4,r4,4
  813f34:	29400104 	addi	r5,r5,4
  813f38:	39bff936 	bltu	r7,r6,813f20 <memcmp+0x54>
  813f3c:	003fe806 	br	813ee0 <memcmp+0x14>

00813f40 <__register_exitproc>:
  813f40:	defffa04 	addi	sp,sp,-24
  813f44:	00802074 	movhi	r2,129
  813f48:	1099b004 	addi	r2,r2,26304
  813f4c:	dc000015 	stw	r16,0(sp)
  813f50:	14000017 	ldw	r16,0(r2)
  813f54:	dd000415 	stw	r20,16(sp)
  813f58:	2829883a 	mov	r20,r5
  813f5c:	81405217 	ldw	r5,328(r16)
  813f60:	dcc00315 	stw	r19,12(sp)
  813f64:	dc800215 	stw	r18,8(sp)
  813f68:	dc400115 	stw	r17,4(sp)
  813f6c:	dfc00515 	stw	ra,20(sp)
  813f70:	2023883a 	mov	r17,r4
  813f74:	3027883a 	mov	r19,r6
  813f78:	3825883a 	mov	r18,r7
  813f7c:	28002526 	beq	r5,zero,814014 <__register_exitproc+0xd4>
  813f80:	29000117 	ldw	r4,4(r5)
  813f84:	008007c4 	movi	r2,31
  813f88:	11002716 	blt	r2,r4,814028 <__register_exitproc+0xe8>
  813f8c:	8800101e 	bne	r17,zero,813fd0 <__register_exitproc+0x90>
  813f90:	2105883a 	add	r2,r4,r4
  813f94:	1085883a 	add	r2,r2,r2
  813f98:	20c00044 	addi	r3,r4,1
  813f9c:	1145883a 	add	r2,r2,r5
  813fa0:	0009883a 	mov	r4,zero
  813fa4:	15000215 	stw	r20,8(r2)
  813fa8:	28c00115 	stw	r3,4(r5)
  813fac:	2005883a 	mov	r2,r4
  813fb0:	dfc00517 	ldw	ra,20(sp)
  813fb4:	dd000417 	ldw	r20,16(sp)
  813fb8:	dcc00317 	ldw	r19,12(sp)
  813fbc:	dc800217 	ldw	r18,8(sp)
  813fc0:	dc400117 	ldw	r17,4(sp)
  813fc4:	dc000017 	ldw	r16,0(sp)
  813fc8:	dec00604 	addi	sp,sp,24
  813fcc:	f800283a 	ret
  813fd0:	29802204 	addi	r6,r5,136
  813fd4:	00800044 	movi	r2,1
  813fd8:	110e983a 	sll	r7,r2,r4
  813fdc:	30c04017 	ldw	r3,256(r6)
  813fe0:	2105883a 	add	r2,r4,r4
  813fe4:	1085883a 	add	r2,r2,r2
  813fe8:	1185883a 	add	r2,r2,r6
  813fec:	19c6b03a 	or	r3,r3,r7
  813ff0:	14802015 	stw	r18,128(r2)
  813ff4:	14c00015 	stw	r19,0(r2)
  813ff8:	00800084 	movi	r2,2
  813ffc:	30c04015 	stw	r3,256(r6)
  814000:	88bfe31e 	bne	r17,r2,813f90 <__register_exitproc+0x50>
  814004:	30804117 	ldw	r2,260(r6)
  814008:	11c4b03a 	or	r2,r2,r7
  81400c:	30804115 	stw	r2,260(r6)
  814010:	003fdf06 	br	813f90 <__register_exitproc+0x50>
  814014:	00802174 	movhi	r2,133
  814018:	10838604 	addi	r2,r2,3608
  81401c:	100b883a 	mov	r5,r2
  814020:	80805215 	stw	r2,328(r16)
  814024:	003fd606 	br	813f80 <__register_exitproc+0x40>
  814028:	00802034 	movhi	r2,128
  81402c:	10860004 	addi	r2,r2,6144
  814030:	1000021e 	bne	r2,zero,81403c <__register_exitproc+0xfc>
  814034:	013fffc4 	movi	r4,-1
  814038:	003fdc06 	br	813fac <__register_exitproc+0x6c>
  81403c:	01006404 	movi	r4,400
  814040:	103ee83a 	callr	r2
  814044:	1007883a 	mov	r3,r2
  814048:	103ffa26 	beq	r2,zero,814034 <__register_exitproc+0xf4>
  81404c:	80805217 	ldw	r2,328(r16)
  814050:	180b883a 	mov	r5,r3
  814054:	18000115 	stw	zero,4(r3)
  814058:	18800015 	stw	r2,0(r3)
  81405c:	80c05215 	stw	r3,328(r16)
  814060:	18006215 	stw	zero,392(r3)
  814064:	18006315 	stw	zero,396(r3)
  814068:	0009883a 	mov	r4,zero
  81406c:	883fc826 	beq	r17,zero,813f90 <__register_exitproc+0x50>
  814070:	003fd706 	br	813fd0 <__register_exitproc+0x90>

00814074 <register_fini>:
  814074:	f800283a 	ret

00814078 <__call_exitprocs>:
  814078:	00802074 	movhi	r2,129
  81407c:	1099b004 	addi	r2,r2,26304
  814080:	10800017 	ldw	r2,0(r2)
  814084:	defff304 	addi	sp,sp,-52
  814088:	df000b15 	stw	fp,44(sp)
  81408c:	d8800115 	stw	r2,4(sp)
  814090:	00802034 	movhi	r2,128
  814094:	1085fb04 	addi	r2,r2,6124
  814098:	1005003a 	cmpeq	r2,r2,zero
  81409c:	d8800215 	stw	r2,8(sp)
  8140a0:	d8800117 	ldw	r2,4(sp)
  8140a4:	dd400815 	stw	r21,32(sp)
  8140a8:	dd000715 	stw	r20,28(sp)
  8140ac:	10805204 	addi	r2,r2,328
  8140b0:	dfc00c15 	stw	ra,48(sp)
  8140b4:	ddc00a15 	stw	r23,40(sp)
  8140b8:	dd800915 	stw	r22,36(sp)
  8140bc:	dcc00615 	stw	r19,24(sp)
  8140c0:	dc800515 	stw	r18,20(sp)
  8140c4:	dc400415 	stw	r17,16(sp)
  8140c8:	dc000315 	stw	r16,12(sp)
  8140cc:	282b883a 	mov	r21,r5
  8140d0:	2039883a 	mov	fp,r4
  8140d4:	d8800015 	stw	r2,0(sp)
  8140d8:	2829003a 	cmpeq	r20,r5,zero
  8140dc:	d8800117 	ldw	r2,4(sp)
  8140e0:	14405217 	ldw	r17,328(r2)
  8140e4:	88001026 	beq	r17,zero,814128 <__call_exitprocs+0xb0>
  8140e8:	ddc00017 	ldw	r23,0(sp)
  8140ec:	88800117 	ldw	r2,4(r17)
  8140f0:	8c802204 	addi	r18,r17,136
  8140f4:	143fffc4 	addi	r16,r2,-1
  8140f8:	80000916 	blt	r16,zero,814120 <__call_exitprocs+0xa8>
  8140fc:	05bfffc4 	movi	r22,-1
  814100:	a000151e 	bne	r20,zero,814158 <__call_exitprocs+0xe0>
  814104:	8409883a 	add	r4,r16,r16
  814108:	2105883a 	add	r2,r4,r4
  81410c:	1485883a 	add	r2,r2,r18
  814110:	10c02017 	ldw	r3,128(r2)
  814114:	a8c01126 	beq	r21,r3,81415c <__call_exitprocs+0xe4>
  814118:	843fffc4 	addi	r16,r16,-1
  81411c:	85bff81e 	bne	r16,r22,814100 <__call_exitprocs+0x88>
  814120:	d8800217 	ldw	r2,8(sp)
  814124:	10003126 	beq	r2,zero,8141ec <__call_exitprocs+0x174>
  814128:	dfc00c17 	ldw	ra,48(sp)
  81412c:	df000b17 	ldw	fp,44(sp)
  814130:	ddc00a17 	ldw	r23,40(sp)
  814134:	dd800917 	ldw	r22,36(sp)
  814138:	dd400817 	ldw	r21,32(sp)
  81413c:	dd000717 	ldw	r20,28(sp)
  814140:	dcc00617 	ldw	r19,24(sp)
  814144:	dc800517 	ldw	r18,20(sp)
  814148:	dc400417 	ldw	r17,16(sp)
  81414c:	dc000317 	ldw	r16,12(sp)
  814150:	dec00d04 	addi	sp,sp,52
  814154:	f800283a 	ret
  814158:	8409883a 	add	r4,r16,r16
  81415c:	88c00117 	ldw	r3,4(r17)
  814160:	2105883a 	add	r2,r4,r4
  814164:	1445883a 	add	r2,r2,r17
  814168:	18ffffc4 	addi	r3,r3,-1
  81416c:	11800217 	ldw	r6,8(r2)
  814170:	1c001526 	beq	r3,r16,8141c8 <__call_exitprocs+0x150>
  814174:	10000215 	stw	zero,8(r2)
  814178:	303fe726 	beq	r6,zero,814118 <__call_exitprocs+0xa0>
  81417c:	00c00044 	movi	r3,1
  814180:	1c06983a 	sll	r3,r3,r16
  814184:	90804017 	ldw	r2,256(r18)
  814188:	8cc00117 	ldw	r19,4(r17)
  81418c:	1884703a 	and	r2,r3,r2
  814190:	10001426 	beq	r2,zero,8141e4 <__call_exitprocs+0x16c>
  814194:	90804117 	ldw	r2,260(r18)
  814198:	1884703a 	and	r2,r3,r2
  81419c:	10000c1e 	bne	r2,zero,8141d0 <__call_exitprocs+0x158>
  8141a0:	2105883a 	add	r2,r4,r4
  8141a4:	1485883a 	add	r2,r2,r18
  8141a8:	11400017 	ldw	r5,0(r2)
  8141ac:	e009883a 	mov	r4,fp
  8141b0:	303ee83a 	callr	r6
  8141b4:	88800117 	ldw	r2,4(r17)
  8141b8:	98bfc81e 	bne	r19,r2,8140dc <__call_exitprocs+0x64>
  8141bc:	b8800017 	ldw	r2,0(r23)
  8141c0:	147fd526 	beq	r2,r17,814118 <__call_exitprocs+0xa0>
  8141c4:	003fc506 	br	8140dc <__call_exitprocs+0x64>
  8141c8:	8c000115 	stw	r16,4(r17)
  8141cc:	003fea06 	br	814178 <__call_exitprocs+0x100>
  8141d0:	2105883a 	add	r2,r4,r4
  8141d4:	1485883a 	add	r2,r2,r18
  8141d8:	11000017 	ldw	r4,0(r2)
  8141dc:	303ee83a 	callr	r6
  8141e0:	003ff406 	br	8141b4 <__call_exitprocs+0x13c>
  8141e4:	303ee83a 	callr	r6
  8141e8:	003ff206 	br	8141b4 <__call_exitprocs+0x13c>
  8141ec:	88800117 	ldw	r2,4(r17)
  8141f0:	1000081e 	bne	r2,zero,814214 <__call_exitprocs+0x19c>
  8141f4:	89000017 	ldw	r4,0(r17)
  8141f8:	20000726 	beq	r4,zero,814218 <__call_exitprocs+0x1a0>
  8141fc:	b9000015 	stw	r4,0(r23)
  814200:	8809883a 	mov	r4,r17
  814204:	08017ec0 	call	8017ec <free>
  814208:	bc400017 	ldw	r17,0(r23)
  81420c:	883fb71e 	bne	r17,zero,8140ec <__call_exitprocs+0x74>
  814210:	003fc506 	br	814128 <__call_exitprocs+0xb0>
  814214:	89000017 	ldw	r4,0(r17)
  814218:	882f883a 	mov	r23,r17
  81421c:	2023883a 	mov	r17,r4
  814220:	883fb21e 	bne	r17,zero,8140ec <__call_exitprocs+0x74>
  814224:	003fc006 	br	814128 <__call_exitprocs+0xb0>

00814228 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  814228:	defffd04 	addi	sp,sp,-12
  81422c:	df000215 	stw	fp,8(sp)
  814230:	df000204 	addi	fp,sp,8
  814234:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  814238:	e0bfff17 	ldw	r2,-4(fp)
  81423c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814240:	e0bffe17 	ldw	r2,-8(fp)
  814244:	1005003a 	cmpeq	r2,r2,zero
  814248:	1000021e 	bne	r2,zero,814254 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  81424c:	002af070 	cmpltui	zero,zero,43969
  814250:	00000106 	br	814258 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  814254:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  814258:	e037883a 	mov	sp,fp
  81425c:	df000017 	ldw	fp,0(sp)
  814260:	dec00104 	addi	sp,sp,4
  814264:	f800283a 	ret

00814268 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814268:	defffd04 	addi	sp,sp,-12
  81426c:	dfc00215 	stw	ra,8(sp)
  814270:	df000115 	stw	fp,4(sp)
  814274:	df000104 	addi	fp,sp,4
  814278:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81427c:	e13fff17 	ldw	r4,-4(fp)
  814280:	08142280 	call	814228 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814284:	003fff06 	br	814284 <_exit+0x1c>
  814288:	00000010 	cmplti	zero,zero,0
  81428c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  814290:	00527a01 	jmpi	527a0 <__alt_mem_sdram-0x7ad860>
  814294:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram-0x6e0840>
  814298:	001b0c0b 	ldhu	zero,27696(zero)
  81429c:	00000028 	cmpgeui	zero,zero,0
  8142a0:	00000018 	cmpnei	zero,zero,0
  8142a4:	00808c4c 	andi	r2,zero,561
  8142a8:	0000066c 	andhi	zero,zero,25
  8142ac:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  8142b0:	910a9074 	orhi	r4,r18,10817
  8142b4:	94089209 	0x94089209
  8142b8:	97049606 	br	815514 <alt_fd_list+0x134>
  8142bc:	93019f03 	ldbu	r12,1660(r18)
  8142c0:	9c059507 	ldb	r16,5716(r19)
  8142c4:	00000002 	0x2
  8142c8:	00000028 	cmpgeui	zero,zero,0
  8142cc:	00000044 	movi	zero,1
  8142d0:	008092b8 	rdprs	r2,zero,586
  8142d4:	00000660 	cmpeqi	zero,zero,25
  8142d8:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  8142dc:	92099170 	cmpltui	r8,r18,9797
  8142e0:	96069408 	cmpgei	et,r18,6736
  8142e4:	9c039704 	addi	r16,r19,3676
  8142e8:	90019f02 	0x90019f02
  8142ec:	9507930a 	0x9507930a
  8142f0:	00000005 	stb	zero,0(zero)
  8142f4:	00814074 	movhi	r2,1281
