
lcd_demo.elf:     file format elf32-littlenios2
lcd_demo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000d814 memsz 0x0000d814 flags r-x
    LOAD off    0x0000e834 vaddr 0x0100d834 paddr 0x0100f2bc align 2**12
         filesz 0x00001a88 memsz 0x00001a88 flags rw-
    LOAD off    0x00010d44 vaddr 0x01010d44 paddr 0x01010d44 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d2b4  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003cc  0100d468  0100d468  0000e468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a88  0100d834  0100f2bc  0000e834  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  01010d44  01010d44  00010d44  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000102bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  000102e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000015af  00000000  00000000  00010fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024a36  00000000  00000000  0001258f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007da3  00000000  00000000  00036fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014125  00000000  00000000  0003ed68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ac8  00000000  00000000  00052e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002321  00000000  00000000  00054958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c37a  00000000  00000000  00056c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00062ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00063018  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00066be5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00066be8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00066bf7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00066bf8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00066bf9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00066c02  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00066c0b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00066c14  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  00066c1f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a68  00000000  00000000  00066c3f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00041a4a  00000000  00000000  0006c6a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0100d468 l    d  .rodata	00000000 .rodata
0100d834 l    d  .rwdata	00000000 .rwdata
01010d44 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
010005d8 l     F .text	00000058 __sprint_r
0100d552 l     O .rodata	00000010 blanks.3452
0100d542 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01002654 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100407c l     F .text	00000058 std
01004188 l     F .text	00000008 __fp_lock
01004190 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100d834 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0100f288 l     O .rwdata	00000004 charset
0100d588 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100d6d0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
010085b0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010096dc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a018 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a078 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a17c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100a2a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a380 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a4e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a9a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100f2ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100ac60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100e1f0 l     O .rwdata	00001060 jtag_uart
0100f250 l     O .rwdata	0000002c character_lcd_0
0100ad50 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100af90 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100b1b8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100bf88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100c440 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100c590 l     F .text	000000f8 alt_file_locked
0100c814 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100d1e4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100d398 l     F .text	00000040 alt_sim_halt
01005e6c g     F .text	00000094 _mprec_log10
01005f58 g     F .text	00000088 __any_on
01007784 g     F .text	00000070 _isatty_r
0100d6a8 g     O .rodata	00000028 __mprec_tinytens
0100a540 g     F .text	0000006c alt_main
01010da0 g     O .bss	00000100 alt_irq
010077f4 g     F .text	00000078 _lseek_r
0100f2bc g       *ABS*	00000000 __flash_rwdata_start
0100b8b0 g     F .text	00000034 alt_up_character_lcd_send_cmd
010090d0 g     F .text	00000088 __eqdf2
01011030 g       *ABS*	00000000 __alt_heap_start
01000560 g     F .text	00000044 printf
010071c8 g     F .text	00000068 __sseek
010040e4 g     F .text	000000a4 __sinit
0100cf64 g     F .text	00000130 __swbuf_r
01004df0 g     F .text	00000084 _setlocale_r
010041e4 g     F .text	0000009c __sfmoreglue
0100a5cc g     F .text	00000020 __malloc_unlock
010058e8 g     F .text	000000e0 memmove
010041d4 g     F .text	00000010 _cleanup
01005fe0 g     F .text	000000bc _Balloc
010091e0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100b834 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
010001f0 g     F .text	00000024 turnAllLightsOff
01000020 g       *ABS*	00000000 __flash_exceptions_start
01007710 g     F .text	00000074 _fstat_r
01010d5c g     O .bss	00000004 errno
01010d64 g     O .bss	00000004 alt_argv
0101727c g       *ABS*	00000000 _gp
0100e070 g     O .rwdata	00000180 alt_fd_list
0100c0b0 g     F .text	00000094 alt_find_dev
01005848 g     F .text	000000a0 memcpy
0100ba48 g     F .text	0000004c alt_up_character_lcd_write_fd
010041c8 g     F .text	0000000c _cleanup_r
01009378 g     F .text	000000f8 __floatsidf
0100c518 g     F .text	00000078 alt_io_redirect
010092f0 g     F .text	00000088 __ltdf2
0100d468 g       *ABS*	00000000 __DTOR_END__
010002bc g     F .text	00000058 turnLightOff
01005dbc g     F .text	000000b0 __ratio
0100b3d0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
010005a4 g     F .text	00000034 _printf_r
01009818 g     F .text	00000008 __udivsi3
0100a1dc g     F .text	000000c4 isatty
0100d5b8 g     O .rodata	000000c8 __mprec_tens
01004dcc g     F .text	00000008 __locale_charset
0100cc28 g     F .text	00000090 alt_icache_flush
01010d50 g     O .bss	00000004 __malloc_top_pad
0100f284 g     O .rwdata	00000004 __mb_cur_max
01004dd4 g     F .text	0000000c _localeconv_r
01006744 g     F .text	0000003c __i2b
010047b0 g     F .text	0000049c __sfvwrite_r
01007150 g     F .text	00000070 _sbrk_r
0100786c g     F .text	00000078 _read_r
0100dc34 g     O .rwdata	0000000c __lc_ctype
0100f2a4 g     O .rwdata	00000004 alt_max_fd
01009d18 g     F .text	00000138 __unpack_d
010075ec g     F .text	00000110 _fclose_r
01004048 g     F .text	00000034 fflush
01010d54 g     O .bss	00000004 __malloc_max_sbrked_mem
01008a40 g     F .text	00000074 __adddf3
01005c9c g     F .text	00000120 __b2d
01007f50 g     F .text	00000660 __umoddi3
0100a3ec g     F .text	000000f4 lseek
0100f280 g     O .rwdata	00000004 _global_impure_ptr
01006aec g     F .text	000005f4 _realloc_r
01011030 g       *ABS*	00000000 __bss_end
0100c348 g     F .text	000000f8 alt_iic_isr_register
0100c90c g     F .text	0000010c alt_tick
010078e4 g     F .text	0000066c __udivdi3
0100d680 g     O .rodata	00000028 __mprec_bigtens
010069cc g     F .text	00000120 __s2b
01009548 g     F .text	00000194 __floatunsidf
01005bbc g     F .text	00000060 __mcmp
010041b0 g     F .text	00000018 __fp_lock_all
0100c300 g     F .text	00000048 alt_ic_irq_enabled
0100c874 g     F .text	00000098 alt_alarm_stop
01010d6c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
0100e048 g     O .rwdata	00000028 alt_dev_null
0100bd30 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100beb8 g     F .text	0000001c alt_dcache_flush_all
01005a88 g     F .text	00000070 __hi0bits
01009470 g     F .text	000000d8 __fixdfsi
0100f2bc g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0100f29c g     O .rwdata	00000008 alt_dev_list
0100ab3c g     F .text	00000124 write
0100ce7c g     F .text	000000e8 _putc_r
0100d834 g       *ABS*	00000000 __ram_rodata_end
0100a0a4 g     F .text	000000d8 fstat
010068ac g     F .text	00000120 __pow5mult
01010d44 g     O .bss	00000004 __nlocale_changed
01009820 g     F .text	00000008 __umodsi3
01011030 g       *ABS*	00000000 end
0100aed0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100d464 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01009984 g     F .text	00000080 __clzsi2
0100b5f4 g     F .text	00000240 altera_avalon_jtag_uart_write
010040d4 g     F .text	00000004 __sfp_lock_acquire
01005764 g     F .text	000000e4 memchr
01000630 g     F .text	00001ec4 ___vfprintf_internal_r
0100b958 g     F .text	00000078 alt_up_character_lcd_write
0100449c g     F .text	00000314 _free_r
0100a5ec g     F .text	00000258 alt_printf
0100d1e8 g     F .text	000001b0 __call_exitprocs
01010d48 g     O .bss	00000004 __mlocale_changed
0100f290 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
01010d70 g     O .bss	00000004 _alt_tick_rate
010063a4 g     F .text	0000014c __lshift
01010d74 g     O .bss	00000004 _alt_nticks
0100a884 g     F .text	00000124 read
0100acf4 g     F .text	0000005c alt_sys_init
0100bbbc g     F .text	000000b0 alt_up_character_lcd_shift_display
0100d0b0 g     F .text	00000134 __register_exitproc
010064f0 g     F .text	00000254 __multiply
0100bc6c g     F .text	00000090 alt_up_character_lcd_erase_pos
0100b268 g     F .text	00000074 altera_avalon_jtag_uart_close
01009828 g     F .text	00000038 __mulsi3
0100d834 g       *ABS*	00000000 __ram_rwdata_start
0100d468 g       *ABS*	00000000 __ram_rodata_start
01010d78 g     O .bss	00000028 __malloc_current_mallinfo
0100609c g     F .text	0000017c __d2b
0100ad88 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100cb58 g     F .text	000000d0 alt_get_fd
01009e50 g     F .text	000000c8 __fpcmp_parts_d
0100757c g     F .text	00000070 _close_r
0100cd04 g     F .text	00000074 memcmp
0100ae38 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01011030 g       *ABS*	00000000 __alt_stack_base
0100ae80 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01002518 g     F .text	0000013c __swsetup_r
01008e78 g     F .text	00000258 __divdf3
01004280 g     F .text	000000f0 __sfp
01005f00 g     F .text	00000058 __copybits
0100dc40 g     O .rwdata	00000408 __malloc_av_
010040e0 g     F .text	00000004 __sinit_lock_release
01008ab4 g     F .text	000003c4 __muldf3
010072ac g     F .text	00000060 __sread
0100ca38 g     F .text	00000120 alt_find_file
0100bed4 g     F .text	000000b4 alt_dev_llist_insert
0100a5ac g     F .text	00000020 __malloc_lock
0100aa80 g     F .text	000000bc sbrk
01003e4c g     F .text	000001fc _fflush_r
010074b4 g     F .text	000000c8 _calloc_r
01010d44 g       *ABS*	00000000 __bss_start
010059c8 g     F .text	00000098 memset
01000394 g     F .text	000001cc main
01010d68 g     O .bss	00000004 alt_envp
01010d58 g     O .bss	00000004 __malloc_max_total_mem
0100ade0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100d094 g     F .text	0000001c __swbuf
0100bb0c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010071c0 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010076fc g     F .text	00000014 fclose
01010ea0 g     O .bss	00000190 _atexit0
01002898 g     F .text	000015b4 _dtoa_r
01005024 g     F .text	00000740 _malloc_r
0100f2a8 g     O .rwdata	00000004 alt_errno
01004d14 g     F .text	000000b8 _fwalk
0100cd78 g     F .text	00000104 putc
01009758 g     F .text	00000060 __divsi3
0100d6dc g     O .rodata	00000014 __thenan_df
0100b918 g     F .text	00000040 alt_up_character_lcd_open_dev
01004370 g     F .text	0000012c _malloc_trim_r
0100d468 g       *ABS*	00000000 __CTOR_END__
0100b8e4 g     F .text	00000034 alt_up_character_lcd_init
0100730c g     F .text	000000bc strcmp
0100d468 g       *ABS*	00000000 __flash_rodata_start
0100d468 g       *ABS*	00000000 __DTOR_LIST__
01009158 g     F .text	00000088 __nedf2
0100acc0 g     F .text	00000034 alt_irq_init
0100aa08 g     F .text	00000078 alt_release_fd
0100bcfc g     F .text	00000034 alt_up_character_lcd_cursor_off
0100d6f0 g     O .rodata	00000100 __clz_tab
01010d4c g     O .bss	00000004 _PathLocale
0100ccb8 g     F .text	00000014 atexit
0100743c g     F .text	00000078 _write_r
01004e74 g     F .text	0000001c setlocale
0100f27c g     O .rwdata	00000004 _impure_ptr
01010d60 g     O .bss	00000004 alt_argc
0100c04c g     F .text	00000064 _do_dtors
01000214 g     F .text	00000028 turnAllLightsOn
01000020 g       .exceptions	00000000 alt_irq_entry
01005c1c g     F .text	00000080 __ulp
010070e0 g     F .text	00000040 __isinfd
01004198 g     F .text	00000018 __fp_unlock_all
0100f294 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004de0 g     F .text	00000010 localeconv
0100c174 g     F .text	00000050 alt_ic_isr_register
0100f2bc g       *ABS*	00000000 _edata
01011030 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100b2dc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100c260 g     F .text	000000a0 alt_ic_irq_disable
01007230 g     F .text	0000007c __swrite
0100f28c g     O .rwdata	00000004 __malloc_trim_threshold
01000314 g     F .text	00000080 getButton
0100ca18 g     F .text	00000020 altera_nios2_qsys_irq_init
0100cccc g     F .text	00000038 exit
01004c4c g     F .text	000000c8 _fwalk_reent
01006218 g     F .text	0000018c __mdiff
010097b8 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
010040d8 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100b9d0 g     F .text	00000078 alt_up_character_lcd_string
0100d3d8 g     F .text	00000020 _exit
01007120 g     F .text	00000030 __isnand
0100bd64 g     F .text	00000154 alt_alarm_start
01009860 g     F .text	00000124 __muldi3
01004e90 g     F .text	00000194 __smakebuf_r
010073c8 g     F .text	00000074 strlen
0100c688 g     F .text	0000018c open
01009268 g     F .text	00000088 __gedf2
0100a844 g     F .text	00000040 alt_putchar
0100c144 g     F .text	00000030 alt_icache_flush_all
0100ba94 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100f2b0 g     O .rwdata	00000004 alt_priority_mask
0100c1c4 g     F .text	0000009c alt_ic_irq_enable
010024f4 g     F .text	00000024 __vfprintf_internal
010089c0 g     F .text	00000080 __subdf3
01005af8 g     F .text	000000c4 __lo0bits
0100f2b4 g     O .rwdata	00000008 alt_alarm_list
0100bfe8 g     F .text	00000064 _do_ctors
01009f18 g     F .text	00000100 close
0100a300 g     F .text	00000080 alt_load
01009a04 g     F .text	00000314 __pack_d
0100023c g     F .text	00000080 turnLightOn
00000000  w      *UND*	00000000 free
010040dc g     F .text	00000004 __sinit_lock_acquire
01006780 g     F .text	0000012c __multadd
01005a60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406d14 	ori	at,at,436
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c36804 	addi	r3,r3,3488
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c36804 	addi	r3,r3,3488
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d69c9f14 	ori	gp,gp,29308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10835114 	ori	r2,r2,3396

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18c40c14 	ori	r3,r3,4144

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100a3000 	call	100a300 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100a5400 	call	100a540 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <turnAllLightsOff>:
void turnLightOn(int lightNo);
void turnLightOff(int lightNo);

/* Light Functions: */

void turnAllLightsOff() {
 10001f0:	deffff04 	addi	sp,sp,-4
 10001f4:	df000015 	stw	fp,0(sp)
 10001f8:	d839883a 	mov	fp,sp
	*leds = 0;
 10001fc:	00880404 	movi	r2,8208
 1000200:	10000005 	stb	zero,0(r2)
}
 1000204:	e037883a 	mov	sp,fp
 1000208:	df000017 	ldw	fp,0(sp)
 100020c:	dec00104 	addi	sp,sp,4
 1000210:	f800283a 	ret

01000214 <turnAllLightsOn>:

void turnAllLightsOn() {
 1000214:	deffff04 	addi	sp,sp,-4
 1000218:	df000015 	stw	fp,0(sp)
 100021c:	d839883a 	mov	fp,sp
	*leds = 0xFF;
 1000220:	00c80404 	movi	r3,8208
 1000224:	00bfffc4 	movi	r2,-1
 1000228:	18800005 	stb	r2,0(r3)
}
 100022c:	e037883a 	mov	sp,fp
 1000230:	df000017 	ldw	fp,0(sp)
 1000234:	dec00104 	addi	sp,sp,4
 1000238:	f800283a 	ret

0100023c <turnLightOn>:

void turnLightOn(int lightNo) {
 100023c:	defffc04 	addi	sp,sp,-16
 1000240:	dfc00315 	stw	ra,12(sp)
 1000244:	df000215 	stw	fp,8(sp)
 1000248:	df000204 	addi	fp,sp,8
 100024c:	e13fff15 	stw	r4,-4(fp)
	if (lightNo >= SWITCHES_DATA_WIDTH || lightNo < 0) return;
 1000250:	e0bfff17 	ldw	r2,-4(fp)
 1000254:	10800208 	cmpgei	r2,r2,8
 1000258:	1000131e 	bne	r2,zero,10002a8 <turnLightOn+0x6c>
 100025c:	e0bfff17 	ldw	r2,-4(fp)
 1000260:	1004403a 	cmpge	r2,r2,zero
 1000264:	1000011e 	bne	r2,zero,100026c <turnLightOn+0x30>
 1000268:	00000f06 	br	10002a8 <turnLightOn+0x6c>

	unsigned char mask = 1 << lightNo;
 100026c:	00c00044 	movi	r3,1
 1000270:	e0bfff17 	ldw	r2,-4(fp)
 1000274:	1884983a 	sll	r2,r3,r2
 1000278:	e0bffe05 	stb	r2,-8(fp)

	printf("LightNo: %x, Mask: %x.\n", lightNo, mask);
 100027c:	e1bffe03 	ldbu	r6,-8(fp)
 1000280:	01004074 	movhi	r4,257
 1000284:	21351a04 	addi	r4,r4,-11160
 1000288:	e17fff17 	ldw	r5,-4(fp)
 100028c:	10005600 	call	1000560 <printf>

	*leds = (*leds) | mask;
 1000290:	01080404 	movi	r4,8208
 1000294:	00880404 	movi	r2,8208
 1000298:	10c00003 	ldbu	r3,0(r2)
 100029c:	e0bffe03 	ldbu	r2,-8(fp)
 10002a0:	1884b03a 	or	r2,r3,r2
 10002a4:	20800005 	stb	r2,0(r4)
}
 10002a8:	e037883a 	mov	sp,fp
 10002ac:	dfc00117 	ldw	ra,4(sp)
 10002b0:	df000017 	ldw	fp,0(sp)
 10002b4:	dec00204 	addi	sp,sp,8
 10002b8:	f800283a 	ret

010002bc <turnLightOff>:

void turnLightOff(int lightNo) {
 10002bc:	defffd04 	addi	sp,sp,-12
 10002c0:	df000215 	stw	fp,8(sp)
 10002c4:	df000204 	addi	fp,sp,8
 10002c8:	e13fff15 	stw	r4,-4(fp)
	if (lightNo >= SWITCHES_DATA_WIDTH) return;
 10002cc:	e0bfff17 	ldw	r2,-4(fp)
 10002d0:	10800208 	cmpgei	r2,r2,8
 10002d4:	10000b1e 	bne	r2,zero,1000304 <turnLightOff+0x48>

	unsigned char mask = ~(1 << lightNo);
 10002d8:	00c00044 	movi	r3,1
 10002dc:	e0bfff17 	ldw	r2,-4(fp)
 10002e0:	1884983a 	sll	r2,r3,r2
 10002e4:	0084303a 	nor	r2,zero,r2
 10002e8:	e0bffe05 	stb	r2,-8(fp)

	*leds = (*leds) & mask;
 10002ec:	01080404 	movi	r4,8208
 10002f0:	00880404 	movi	r2,8208
 10002f4:	10c00003 	ldbu	r3,0(r2)
 10002f8:	e0bffe03 	ldbu	r2,-8(fp)
 10002fc:	1884703a 	and	r2,r3,r2
 1000300:	20800005 	stb	r2,0(r4)
}
 1000304:	e037883a 	mov	sp,fp
 1000308:	df000017 	ldw	fp,0(sp)
 100030c:	dec00104 	addi	sp,sp,4
 1000310:	f800283a 	ret

01000314 <getButton>:

/* Button Functions */

unsigned char getButton(int buttonNum) {
 1000314:	defffc04 	addi	sp,sp,-16
 1000318:	df000315 	stw	fp,12(sp)
 100031c:	df000304 	addi	fp,sp,12
 1000320:	e13ffe15 	stw	r4,-8(fp)
	if (buttonNum >= BUTTONS_DATA_WIDTH || buttonNum < 0) return 0;
 1000324:	e0bffe17 	ldw	r2,-8(fp)
 1000328:	10800108 	cmpgei	r2,r2,4
 100032c:	1000031e 	bne	r2,zero,100033c <getButton+0x28>
 1000330:	e0bffe17 	ldw	r2,-8(fp)
 1000334:	1004403a 	cmpge	r2,r2,zero
 1000338:	1000021e 	bne	r2,zero,1000344 <getButton+0x30>
 100033c:	e03fff15 	stw	zero,-4(fp)
 1000340:	00000f06 	br	1000380 <getButton+0x6c>

	unsigned char mask = 1 << buttonNum;
 1000344:	00c00044 	movi	r3,1
 1000348:	e0bffe17 	ldw	r2,-8(fp)
 100034c:	1884983a 	sll	r2,r3,r2
 1000350:	e0bffd05 	stb	r2,-12(fp)

	return ((*buttons) & mask) >> buttonNum;
 1000354:	00880804 	movi	r2,8224
 1000358:	10800003 	ldbu	r2,0(r2)
 100035c:	10c03fcc 	andi	r3,r2,255
 1000360:	18c0201c 	xori	r3,r3,128
 1000364:	18ffe004 	addi	r3,r3,-128
 1000368:	e0bffd03 	ldbu	r2,-12(fp)
 100036c:	1886703a 	and	r3,r3,r2
 1000370:	e0bffe17 	ldw	r2,-8(fp)
 1000374:	1885d83a 	sra	r2,r3,r2
 1000378:	10803fcc 	andi	r2,r2,255
 100037c:	e0bfff15 	stw	r2,-4(fp)
 1000380:	e0bfff17 	ldw	r2,-4(fp)
}
 1000384:	e037883a 	mov	sp,fp
 1000388:	df000017 	ldw	fp,0(sp)
 100038c:	dec00104 	addi	sp,sp,4
 1000390:	f800283a 	ret

01000394 <main>:

int main(void)
{
 1000394:	defff704 	addi	sp,sp,-36
 1000398:	dfc00815 	stw	ra,32(sp)
 100039c:	df000715 	stw	fp,28(sp)
 10003a0:	dc000615 	stw	r16,24(sp)
 10003a4:	df000604 	addi	fp,sp,24
	alt_up_character_lcd_dev * char_lcd_dev;

	// Turn all LEDs off initially.
	turnAllLightsOff();
 10003a8:	10001f00 	call	10001f0 <turnAllLightsOff>

	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 10003ac:	01004074 	movhi	r4,257
 10003b0:	21352004 	addi	r4,r4,-11136
 10003b4:	100b9180 	call	100b918 <alt_up_character_lcd_open_dev>
 10003b8:	e0bffc15 	stw	r2,-16(fp)

	if ( char_lcd_dev == NULL)
 10003bc:	e0bffc17 	ldw	r2,-16(fp)
 10003c0:	1004c03a 	cmpne	r2,r2,zero
 10003c4:	1000041e 	bne	r2,zero,10003d8 <main+0x44>
		alt_printf ("Error: could not open character LCD device\n");
 10003c8:	01004074 	movhi	r4,257
 10003cc:	21352604 	addi	r4,r4,-11112
 10003d0:	100a5ec0 	call	100a5ec <alt_printf>
 10003d4:	00000306 	br	10003e4 <main+0x50>
	else
		alt_printf ("Opened character LCD device\n");
 10003d8:	01004074 	movhi	r4,257
 10003dc:	21353104 	addi	r4,r4,-11068
 10003e0:	100a5ec0 	call	100a5ec <alt_printf>

	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
 10003e4:	e13ffc17 	ldw	r4,-16(fp)
 10003e8:	100b8e40 	call	100b8e4 <alt_up_character_lcd_init>

	//alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
	//alt_up_character_lcd_string(char_lcd_dev, second_row);

	/* Testing */
    turnLightOn(0);
 10003ec:	0009883a 	mov	r4,zero
 10003f0:	100023c0 	call	100023c <turnLightOn>
    turnLightOn(3);
 10003f4:	010000c4 	movi	r4,3
 10003f8:	100023c0 	call	100023c <turnLightOn>
    turnLightOn(5);
 10003fc:	01000144 	movi	r4,5
 1000400:	100023c0 	call	100023c <turnLightOn>

    unsigned char button_states[4] = {1, 1, 1, 1};
 1000404:	00800044 	movi	r2,1
 1000408:	e0bffd05 	stb	r2,-12(fp)
 100040c:	00800044 	movi	r2,1
 1000410:	e0bffd45 	stb	r2,-11(fp)
 1000414:	00800044 	movi	r2,1
 1000418:	e0bffd85 	stb	r2,-10(fp)
 100041c:	00800044 	movi	r2,1
 1000420:	e0bffdc5 	stb	r2,-9(fp)
    unsigned char prev_state[4] = {1, 1, 1, 1};
 1000424:	00800044 	movi	r2,1
 1000428:	e0bffe05 	stb	r2,-8(fp)
 100042c:	00800044 	movi	r2,1
 1000430:	e0bffe45 	stb	r2,-7(fp)
 1000434:	00800044 	movi	r2,1
 1000438:	e0bffe85 	stb	r2,-6(fp)
 100043c:	00800044 	movi	r2,1
 1000440:	e0bffec5 	stb	r2,-5(fp)
    int i;
    int char_count = 0;
 1000444:	e03ffa15 	stw	zero,-24(fp)

	while (1) {
		for (i = 0; i < 4; i++)
 1000448:	e03ffb15 	stw	zero,-20(fp)
 100044c:	00000b06 	br	100047c <main+0xe8>
			prev_state[i] = button_states[i];
 1000450:	e13ffb17 	ldw	r4,-20(fp)
 1000454:	e0fffb17 	ldw	r3,-20(fp)
 1000458:	e0bffd04 	addi	r2,fp,-12
 100045c:	10c5883a 	add	r2,r2,r3
 1000460:	10c00003 	ldbu	r3,0(r2)
 1000464:	e0bffe04 	addi	r2,fp,-8
 1000468:	1105883a 	add	r2,r2,r4
 100046c:	10c00005 	stb	r3,0(r2)
    unsigned char prev_state[4] = {1, 1, 1, 1};
    int i;
    int char_count = 0;

	while (1) {
		for (i = 0; i < 4; i++)
 1000470:	e0bffb17 	ldw	r2,-20(fp)
 1000474:	10800044 	addi	r2,r2,1
 1000478:	e0bffb15 	stw	r2,-20(fp)
 100047c:	e0bffb17 	ldw	r2,-20(fp)
 1000480:	10800110 	cmplti	r2,r2,4
 1000484:	103ff21e 	bne	r2,zero,1000450 <main+0xbc>
			prev_state[i] = button_states[i];

		for (i = 0; i < 4; i++)
 1000488:	e03ffb15 	stw	zero,-20(fp)
 100048c:	00000a06 	br	10004b8 <main+0x124>
			button_states[i] = getButton(i);
 1000490:	e43ffb17 	ldw	r16,-20(fp)
 1000494:	e13ffb17 	ldw	r4,-20(fp)
 1000498:	10003140 	call	1000314 <getButton>
 100049c:	1007883a 	mov	r3,r2
 10004a0:	e0bffd04 	addi	r2,fp,-12
 10004a4:	1405883a 	add	r2,r2,r16
 10004a8:	10c00005 	stb	r3,0(r2)

	while (1) {
		for (i = 0; i < 4; i++)
			prev_state[i] = button_states[i];

		for (i = 0; i < 4; i++)
 10004ac:	e0bffb17 	ldw	r2,-20(fp)
 10004b0:	10800044 	addi	r2,r2,1
 10004b4:	e0bffb15 	stw	r2,-20(fp)
 10004b8:	e0bffb17 	ldw	r2,-20(fp)
 10004bc:	10800110 	cmplti	r2,r2,4
 10004c0:	103ff31e 	bne	r2,zero,1000490 <main+0xfc>
			button_states[i] = getButton(i);

		for (i = 0; i < 4; i++) {
 10004c4:	e03ffb15 	stw	zero,-20(fp)
 10004c8:	00002106 	br	1000550 <main+0x1bc>
			if (prev_state[i] ==  1 && button_states[i] == 0) {
 10004cc:	e0fffb17 	ldw	r3,-20(fp)
 10004d0:	e0bffe04 	addi	r2,fp,-8
 10004d4:	10c5883a 	add	r2,r2,r3
 10004d8:	10800003 	ldbu	r2,0(r2)
 10004dc:	10803fcc 	andi	r2,r2,255
 10004e0:	10800058 	cmpnei	r2,r2,1
 10004e4:	1000171e 	bne	r2,zero,1000544 <main+0x1b0>
 10004e8:	e0fffb17 	ldw	r3,-20(fp)
 10004ec:	e0bffd04 	addi	r2,fp,-12
 10004f0:	10c5883a 	add	r2,r2,r3
 10004f4:	10800003 	ldbu	r2,0(r2)
 10004f8:	10803fcc 	andi	r2,r2,255
 10004fc:	1004c03a 	cmpne	r2,r2,zero
 1000500:	1000101e 	bne	r2,zero,1000544 <main+0x1b0>
				char ascii_val[1] = {i + '0'};
 1000504:	e0bffb17 	ldw	r2,-20(fp)
 1000508:	10800c04 	addi	r2,r2,48
 100050c:	e0bfff05 	stb	r2,-4(fp)
				if (++char_count > 16) alt_up_character_lcd_shift_display(char_lcd_dev, -1);
 1000510:	e0bffa17 	ldw	r2,-24(fp)
 1000514:	10800044 	addi	r2,r2,1
 1000518:	e0bffa15 	stw	r2,-24(fp)
 100051c:	e0bffa17 	ldw	r2,-24(fp)
 1000520:	10800450 	cmplti	r2,r2,17
 1000524:	1000031e 	bne	r2,zero,1000534 <main+0x1a0>
 1000528:	e13ffc17 	ldw	r4,-16(fp)
 100052c:	017fffc4 	movi	r5,-1
 1000530:	100bbbc0 	call	100bbbc <alt_up_character_lcd_shift_display>
				alt_up_character_lcd_write(char_lcd_dev, ascii_val, 1);
 1000534:	e17fff04 	addi	r5,fp,-4
 1000538:	e13ffc17 	ldw	r4,-16(fp)
 100053c:	01800044 	movi	r6,1
 1000540:	100b9580 	call	100b958 <alt_up_character_lcd_write>
			prev_state[i] = button_states[i];

		for (i = 0; i < 4; i++)
			button_states[i] = getButton(i);

		for (i = 0; i < 4; i++) {
 1000544:	e0bffb17 	ldw	r2,-20(fp)
 1000548:	10800044 	addi	r2,r2,1
 100054c:	e0bffb15 	stw	r2,-20(fp)
 1000550:	e0bffb17 	ldw	r2,-20(fp)
 1000554:	10800110 	cmplti	r2,r2,4
 1000558:	103fdc1e 	bne	r2,zero,10004cc <main+0x138>
				char ascii_val[1] = {i + '0'};
				if (++char_count > 16) alt_up_character_lcd_shift_display(char_lcd_dev, -1);
				alt_up_character_lcd_write(char_lcd_dev, ascii_val, 1);
			}
		}
	}
 100055c:	003fba06 	br	1000448 <main+0xb4>

01000560 <printf>:
 1000560:	defffb04 	addi	sp,sp,-20
 1000564:	dfc00115 	stw	ra,4(sp)
 1000568:	d9400215 	stw	r5,8(sp)
 100056c:	d9800315 	stw	r6,12(sp)
 1000570:	d9c00415 	stw	r7,16(sp)
 1000574:	00804074 	movhi	r2,257
 1000578:	10bc9f04 	addi	r2,r2,-3460
 100057c:	10c00017 	ldw	r3,0(r2)
 1000580:	200b883a 	mov	r5,r4
 1000584:	d8800204 	addi	r2,sp,8
 1000588:	19000217 	ldw	r4,8(r3)
 100058c:	100d883a 	mov	r6,r2
 1000590:	d8800015 	stw	r2,0(sp)
 1000594:	10024f40 	call	10024f4 <__vfprintf_internal>
 1000598:	dfc00117 	ldw	ra,4(sp)
 100059c:	dec00504 	addi	sp,sp,20
 10005a0:	f800283a 	ret

010005a4 <_printf_r>:
 10005a4:	defffc04 	addi	sp,sp,-16
 10005a8:	dfc00115 	stw	ra,4(sp)
 10005ac:	d9800215 	stw	r6,8(sp)
 10005b0:	d9c00315 	stw	r7,12(sp)
 10005b4:	280d883a 	mov	r6,r5
 10005b8:	21400217 	ldw	r5,8(r4)
 10005bc:	d8c00204 	addi	r3,sp,8
 10005c0:	180f883a 	mov	r7,r3
 10005c4:	d8c00015 	stw	r3,0(sp)
 10005c8:	10006300 	call	1000630 <___vfprintf_internal_r>
 10005cc:	dfc00117 	ldw	ra,4(sp)
 10005d0:	dec00404 	addi	sp,sp,16
 10005d4:	f800283a 	ret

010005d8 <__sprint_r>:
 10005d8:	30800217 	ldw	r2,8(r6)
 10005dc:	defffe04 	addi	sp,sp,-8
 10005e0:	dc000015 	stw	r16,0(sp)
 10005e4:	dfc00115 	stw	ra,4(sp)
 10005e8:	3021883a 	mov	r16,r6
 10005ec:	0007883a 	mov	r3,zero
 10005f0:	1000061e 	bne	r2,zero,100060c <__sprint_r+0x34>
 10005f4:	1805883a 	mov	r2,r3
 10005f8:	30000115 	stw	zero,4(r6)
 10005fc:	dfc00117 	ldw	ra,4(sp)
 1000600:	dc000017 	ldw	r16,0(sp)
 1000604:	dec00204 	addi	sp,sp,8
 1000608:	f800283a 	ret
 100060c:	10047b00 	call	10047b0 <__sfvwrite_r>
 1000610:	1007883a 	mov	r3,r2
 1000614:	1805883a 	mov	r2,r3
 1000618:	80000115 	stw	zero,4(r16)
 100061c:	80000215 	stw	zero,8(r16)
 1000620:	dfc00117 	ldw	ra,4(sp)
 1000624:	dc000017 	ldw	r16,0(sp)
 1000628:	dec00204 	addi	sp,sp,8
 100062c:	f800283a 	ret

01000630 <___vfprintf_internal_r>:
 1000630:	defea404 	addi	sp,sp,-1392
 1000634:	dd815815 	stw	r22,1376(sp)
 1000638:	dc015215 	stw	r16,1352(sp)
 100063c:	d9c15115 	stw	r7,1348(sp)
 1000640:	dfc15b15 	stw	ra,1388(sp)
 1000644:	df015a15 	stw	fp,1384(sp)
 1000648:	ddc15915 	stw	r23,1380(sp)
 100064c:	dd415715 	stw	r21,1372(sp)
 1000650:	dd015615 	stw	r20,1368(sp)
 1000654:	dcc15515 	stw	r19,1364(sp)
 1000658:	dc815415 	stw	r18,1360(sp)
 100065c:	dc415315 	stw	r17,1356(sp)
 1000660:	282d883a 	mov	r22,r5
 1000664:	3021883a 	mov	r16,r6
 1000668:	d9014f15 	stw	r4,1340(sp)
 100066c:	1004dd40 	call	1004dd4 <_localeconv_r>
 1000670:	10800017 	ldw	r2,0(r2)
 1000674:	d9c15117 	ldw	r7,1348(sp)
 1000678:	d8814915 	stw	r2,1316(sp)
 100067c:	d8814f17 	ldw	r2,1340(sp)
 1000680:	10000226 	beq	r2,zero,100068c <___vfprintf_internal_r+0x5c>
 1000684:	10800e17 	ldw	r2,56(r2)
 1000688:	10020d26 	beq	r2,zero,1000ec0 <___vfprintf_internal_r+0x890>
 100068c:	b080030b 	ldhu	r2,12(r22)
 1000690:	1080020c 	andi	r2,r2,8
 1000694:	10020e26 	beq	r2,zero,1000ed0 <___vfprintf_internal_r+0x8a0>
 1000698:	b0800417 	ldw	r2,16(r22)
 100069c:	10020c26 	beq	r2,zero,1000ed0 <___vfprintf_internal_r+0x8a0>
 10006a0:	b200030b 	ldhu	r8,12(r22)
 10006a4:	00800284 	movi	r2,10
 10006a8:	40c0068c 	andi	r3,r8,26
 10006ac:	18802f1e 	bne	r3,r2,100076c <___vfprintf_internal_r+0x13c>
 10006b0:	b080038f 	ldh	r2,14(r22)
 10006b4:	10002d16 	blt	r2,zero,100076c <___vfprintf_internal_r+0x13c>
 10006b8:	b240038b 	ldhu	r9,14(r22)
 10006bc:	b2800717 	ldw	r10,28(r22)
 10006c0:	b2c00917 	ldw	r11,36(r22)
 10006c4:	d9014f17 	ldw	r4,1340(sp)
 10006c8:	dc402904 	addi	r17,sp,164
 10006cc:	d8804004 	addi	r2,sp,256
 10006d0:	00c10004 	movi	r3,1024
 10006d4:	423fff4c 	andi	r8,r8,65533
 10006d8:	800d883a 	mov	r6,r16
 10006dc:	880b883a 	mov	r5,r17
 10006e0:	da002c0d 	sth	r8,176(sp)
 10006e4:	da402c8d 	sth	r9,178(sp)
 10006e8:	da803015 	stw	r10,192(sp)
 10006ec:	dac03215 	stw	r11,200(sp)
 10006f0:	d8802d15 	stw	r2,180(sp)
 10006f4:	d8c02e15 	stw	r3,184(sp)
 10006f8:	d8802915 	stw	r2,164(sp)
 10006fc:	d8c02b15 	stw	r3,172(sp)
 1000700:	d8002f15 	stw	zero,188(sp)
 1000704:	10006300 	call	1000630 <___vfprintf_internal_r>
 1000708:	d8814b15 	stw	r2,1324(sp)
 100070c:	10000416 	blt	r2,zero,1000720 <___vfprintf_internal_r+0xf0>
 1000710:	d9014f17 	ldw	r4,1340(sp)
 1000714:	880b883a 	mov	r5,r17
 1000718:	1003e4c0 	call	1003e4c <_fflush_r>
 100071c:	1002321e 	bne	r2,zero,1000fe8 <___vfprintf_internal_r+0x9b8>
 1000720:	d8802c0b 	ldhu	r2,176(sp)
 1000724:	1080100c 	andi	r2,r2,64
 1000728:	10000326 	beq	r2,zero,1000738 <___vfprintf_internal_r+0x108>
 100072c:	b080030b 	ldhu	r2,12(r22)
 1000730:	10801014 	ori	r2,r2,64
 1000734:	b080030d 	sth	r2,12(r22)
 1000738:	d8814b17 	ldw	r2,1324(sp)
 100073c:	dfc15b17 	ldw	ra,1388(sp)
 1000740:	df015a17 	ldw	fp,1384(sp)
 1000744:	ddc15917 	ldw	r23,1380(sp)
 1000748:	dd815817 	ldw	r22,1376(sp)
 100074c:	dd415717 	ldw	r21,1372(sp)
 1000750:	dd015617 	ldw	r20,1368(sp)
 1000754:	dcc15517 	ldw	r19,1364(sp)
 1000758:	dc815417 	ldw	r18,1360(sp)
 100075c:	dc415317 	ldw	r17,1356(sp)
 1000760:	dc015217 	ldw	r16,1352(sp)
 1000764:	dec15c04 	addi	sp,sp,1392
 1000768:	f800283a 	ret
 100076c:	0005883a 	mov	r2,zero
 1000770:	0007883a 	mov	r3,zero
 1000774:	dd401904 	addi	r21,sp,100
 1000778:	d8814215 	stw	r2,1288(sp)
 100077c:	802f883a 	mov	r23,r16
 1000780:	d8c14315 	stw	r3,1292(sp)
 1000784:	d8014b15 	stw	zero,1324(sp)
 1000788:	d8014815 	stw	zero,1312(sp)
 100078c:	d8014415 	stw	zero,1296(sp)
 1000790:	d8014715 	stw	zero,1308(sp)
 1000794:	dd400c15 	stw	r21,48(sp)
 1000798:	d8000e15 	stw	zero,56(sp)
 100079c:	d8000d15 	stw	zero,52(sp)
 10007a0:	b8800007 	ldb	r2,0(r23)
 10007a4:	10001926 	beq	r2,zero,100080c <___vfprintf_internal_r+0x1dc>
 10007a8:	00c00944 	movi	r3,37
 10007ac:	10c01726 	beq	r2,r3,100080c <___vfprintf_internal_r+0x1dc>
 10007b0:	b821883a 	mov	r16,r23
 10007b4:	00000106 	br	10007bc <___vfprintf_internal_r+0x18c>
 10007b8:	10c00326 	beq	r2,r3,10007c8 <___vfprintf_internal_r+0x198>
 10007bc:	84000044 	addi	r16,r16,1
 10007c0:	80800007 	ldb	r2,0(r16)
 10007c4:	103ffc1e 	bne	r2,zero,10007b8 <___vfprintf_internal_r+0x188>
 10007c8:	85e7c83a 	sub	r19,r16,r23
 10007cc:	98000e26 	beq	r19,zero,1000808 <___vfprintf_internal_r+0x1d8>
 10007d0:	dc800e17 	ldw	r18,56(sp)
 10007d4:	dc400d17 	ldw	r17,52(sp)
 10007d8:	008001c4 	movi	r2,7
 10007dc:	94e5883a 	add	r18,r18,r19
 10007e0:	8c400044 	addi	r17,r17,1
 10007e4:	adc00015 	stw	r23,0(r21)
 10007e8:	dc800e15 	stw	r18,56(sp)
 10007ec:	acc00115 	stw	r19,4(r21)
 10007f0:	dc400d15 	stw	r17,52(sp)
 10007f4:	14428b16 	blt	r2,r17,1001224 <___vfprintf_internal_r+0xbf4>
 10007f8:	ad400204 	addi	r21,r21,8
 10007fc:	d9014b17 	ldw	r4,1324(sp)
 1000800:	24c9883a 	add	r4,r4,r19
 1000804:	d9014b15 	stw	r4,1324(sp)
 1000808:	802f883a 	mov	r23,r16
 100080c:	b8800007 	ldb	r2,0(r23)
 1000810:	10013c26 	beq	r2,zero,1000d04 <___vfprintf_internal_r+0x6d4>
 1000814:	bdc00044 	addi	r23,r23,1
 1000818:	d8000405 	stb	zero,16(sp)
 100081c:	b8c00007 	ldb	r3,0(r23)
 1000820:	04ffffc4 	movi	r19,-1
 1000824:	d8014c15 	stw	zero,1328(sp)
 1000828:	d8014a15 	stw	zero,1320(sp)
 100082c:	d8c14d15 	stw	r3,1332(sp)
 1000830:	bdc00044 	addi	r23,r23,1
 1000834:	d9414d17 	ldw	r5,1332(sp)
 1000838:	00801604 	movi	r2,88
 100083c:	28fff804 	addi	r3,r5,-32
 1000840:	10c06036 	bltu	r2,r3,10009c4 <___vfprintf_internal_r+0x394>
 1000844:	18c5883a 	add	r2,r3,r3
 1000848:	1085883a 	add	r2,r2,r2
 100084c:	00c04034 	movhi	r3,256
 1000850:	18c21804 	addi	r3,r3,2144
 1000854:	10c5883a 	add	r2,r2,r3
 1000858:	11000017 	ldw	r4,0(r2)
 100085c:	2000683a 	jmp	r4
 1000860:	010017d4 	movui	r4,95
 1000864:	010009c4 	movi	r4,39
 1000868:	010009c4 	movi	r4,39
 100086c:	010017c0 	call	10017c <__alt_mem_onchip_memory+0x10017c>
 1000870:	010009c4 	movi	r4,39
 1000874:	010009c4 	movi	r4,39
 1000878:	010009c4 	movi	r4,39
 100087c:	010009c4 	movi	r4,39
 1000880:	010009c4 	movi	r4,39
 1000884:	010009c4 	movi	r4,39
 1000888:	010015a0 	cmpeqi	r4,zero,86
 100088c:	010017b0 	cmpltui	r4,zero,94
 1000890:	010009c4 	movi	r4,39
 1000894:	010015b8 	rdprs	r4,zero,86
 1000898:	01001858 	cmpnei	r4,zero,97
 100089c:	010009c4 	movi	r4,39
 10008a0:	01001844 	movi	r4,97
 10008a4:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008a8:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008ac:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008b0:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008b4:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008b8:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008bc:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008c0:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008c4:	01001800 	call	100180 <__alt_mem_onchip_memory+0x100180>
 10008c8:	010009c4 	movi	r4,39
 10008cc:	010009c4 	movi	r4,39
 10008d0:	010009c4 	movi	r4,39
 10008d4:	010009c4 	movi	r4,39
 10008d8:	010009c4 	movi	r4,39
 10008dc:	010009c4 	movi	r4,39
 10008e0:	010009c4 	movi	r4,39
 10008e4:	010009c4 	movi	r4,39
 10008e8:	010009c4 	movi	r4,39
 10008ec:	010009c4 	movi	r4,39
 10008f0:	0100101c 	xori	r4,zero,64
 10008f4:	01001688 	cmpgei	r4,zero,90
 10008f8:	010009c4 	movi	r4,39
 10008fc:	01001688 	cmpgei	r4,zero,90
 1000900:	010009c4 	movi	r4,39
 1000904:	010009c4 	movi	r4,39
 1000908:	010009c4 	movi	r4,39
 100090c:	010009c4 	movi	r4,39
 1000910:	010017ec 	andhi	r4,zero,95
 1000914:	010009c4 	movi	r4,39
 1000918:	010009c4 	movi	r4,39
 100091c:	010010d0 	cmplti	r4,zero,67
 1000920:	010009c4 	movi	r4,39
 1000924:	010009c4 	movi	r4,39
 1000928:	010009c4 	movi	r4,39
 100092c:	010009c4 	movi	r4,39
 1000930:	010009c4 	movi	r4,39
 1000934:	0100111c 	xori	r4,zero,68
 1000938:	010009c4 	movi	r4,39
 100093c:	010009c4 	movi	r4,39
 1000940:	0100173c 	xorhi	r4,zero,92
 1000944:	010009c4 	movi	r4,39
 1000948:	010009c4 	movi	r4,39
 100094c:	010009c4 	movi	r4,39
 1000950:	010009c4 	movi	r4,39
 1000954:	010009c4 	movi	r4,39
 1000958:	010009c4 	movi	r4,39
 100095c:	010009c4 	movi	r4,39
 1000960:	010009c4 	movi	r4,39
 1000964:	010009c4 	movi	r4,39
 1000968:	010009c4 	movi	r4,39
 100096c:	01001710 	cmplti	r4,zero,92
 1000970:	01001028 	cmpgeui	r4,zero,64
 1000974:	01001688 	cmpgei	r4,zero,90
 1000978:	01001688 	cmpgei	r4,zero,90
 100097c:	01001688 	cmpgei	r4,zero,90
 1000980:	01001674 	movhi	r4,89
 1000984:	01001028 	cmpgeui	r4,zero,64
 1000988:	010009c4 	movi	r4,39
 100098c:	010009c4 	movi	r4,39
 1000990:	010015fc 	xorhi	r4,zero,87
 1000994:	010009c4 	movi	r4,39
 1000998:	010015cc 	andi	r4,zero,87
 100099c:	010010dc 	xori	r4,zero,67
 10009a0:	0100162c 	andhi	r4,zero,88
 10009a4:	01001618 	cmpnei	r4,zero,88
 10009a8:	010009c4 	movi	r4,39
 10009ac:	010018c0 	call	10018c <__alt_mem_onchip_memory+0x10018c>
 10009b0:	010009c4 	movi	r4,39
 10009b4:	01001128 	cmpgeui	r4,zero,68
 10009b8:	010009c4 	movi	r4,39
 10009bc:	010009c4 	movi	r4,39
 10009c0:	010017a0 	cmpeqi	r4,zero,94
 10009c4:	d9014d17 	ldw	r4,1332(sp)
 10009c8:	2000ce26 	beq	r4,zero,1000d04 <___vfprintf_internal_r+0x6d4>
 10009cc:	01400044 	movi	r5,1
 10009d0:	d9800f04 	addi	r6,sp,60
 10009d4:	d9c14015 	stw	r7,1280(sp)
 10009d8:	d9414515 	stw	r5,1300(sp)
 10009dc:	d9814115 	stw	r6,1284(sp)
 10009e0:	280f883a 	mov	r7,r5
 10009e4:	d9000f05 	stb	r4,60(sp)
 10009e8:	d8000405 	stb	zero,16(sp)
 10009ec:	d8014615 	stw	zero,1304(sp)
 10009f0:	d8c14c17 	ldw	r3,1328(sp)
 10009f4:	1880008c 	andi	r2,r3,2
 10009f8:	1005003a 	cmpeq	r2,r2,zero
 10009fc:	d8815015 	stw	r2,1344(sp)
 1000a00:	1000031e 	bne	r2,zero,1000a10 <___vfprintf_internal_r+0x3e0>
 1000a04:	d9014517 	ldw	r4,1300(sp)
 1000a08:	21000084 	addi	r4,r4,2
 1000a0c:	d9014515 	stw	r4,1300(sp)
 1000a10:	d9414c17 	ldw	r5,1328(sp)
 1000a14:	2940210c 	andi	r5,r5,132
 1000a18:	d9414e15 	stw	r5,1336(sp)
 1000a1c:	28002d1e 	bne	r5,zero,1000ad4 <___vfprintf_internal_r+0x4a4>
 1000a20:	d9814a17 	ldw	r6,1320(sp)
 1000a24:	d8814517 	ldw	r2,1300(sp)
 1000a28:	30a1c83a 	sub	r16,r6,r2
 1000a2c:	0400290e 	bge	zero,r16,1000ad4 <___vfprintf_internal_r+0x4a4>
 1000a30:	00800404 	movi	r2,16
 1000a34:	14045e0e 	bge	r2,r16,1001bb0 <___vfprintf_internal_r+0x1580>
 1000a38:	dc800e17 	ldw	r18,56(sp)
 1000a3c:	dc400d17 	ldw	r17,52(sp)
 1000a40:	1027883a 	mov	r19,r2
 1000a44:	07004074 	movhi	fp,257
 1000a48:	e7355484 	addi	fp,fp,-10926
 1000a4c:	050001c4 	movi	r20,7
 1000a50:	00000306 	br	1000a60 <___vfprintf_internal_r+0x430>
 1000a54:	843ffc04 	addi	r16,r16,-16
 1000a58:	ad400204 	addi	r21,r21,8
 1000a5c:	9c00130e 	bge	r19,r16,1000aac <___vfprintf_internal_r+0x47c>
 1000a60:	94800404 	addi	r18,r18,16
 1000a64:	8c400044 	addi	r17,r17,1
 1000a68:	af000015 	stw	fp,0(r21)
 1000a6c:	acc00115 	stw	r19,4(r21)
 1000a70:	dc800e15 	stw	r18,56(sp)
 1000a74:	dc400d15 	stw	r17,52(sp)
 1000a78:	a47ff60e 	bge	r20,r17,1000a54 <___vfprintf_internal_r+0x424>
 1000a7c:	d9014f17 	ldw	r4,1340(sp)
 1000a80:	b00b883a 	mov	r5,r22
 1000a84:	d9800c04 	addi	r6,sp,48
 1000a88:	d9c15115 	stw	r7,1348(sp)
 1000a8c:	10005d80 	call	10005d8 <__sprint_r>
 1000a90:	d9c15117 	ldw	r7,1348(sp)
 1000a94:	10009e1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1000a98:	843ffc04 	addi	r16,r16,-16
 1000a9c:	dc800e17 	ldw	r18,56(sp)
 1000aa0:	dc400d17 	ldw	r17,52(sp)
 1000aa4:	dd401904 	addi	r21,sp,100
 1000aa8:	9c3fed16 	blt	r19,r16,1000a60 <___vfprintf_internal_r+0x430>
 1000aac:	9425883a 	add	r18,r18,r16
 1000ab0:	8c400044 	addi	r17,r17,1
 1000ab4:	008001c4 	movi	r2,7
 1000ab8:	af000015 	stw	fp,0(r21)
 1000abc:	ac000115 	stw	r16,4(r21)
 1000ac0:	dc800e15 	stw	r18,56(sp)
 1000ac4:	dc400d15 	stw	r17,52(sp)
 1000ac8:	1441f516 	blt	r2,r17,10012a0 <___vfprintf_internal_r+0xc70>
 1000acc:	ad400204 	addi	r21,r21,8
 1000ad0:	00000206 	br	1000adc <___vfprintf_internal_r+0x4ac>
 1000ad4:	dc800e17 	ldw	r18,56(sp)
 1000ad8:	dc400d17 	ldw	r17,52(sp)
 1000adc:	d8800407 	ldb	r2,16(sp)
 1000ae0:	10000b26 	beq	r2,zero,1000b10 <___vfprintf_internal_r+0x4e0>
 1000ae4:	00800044 	movi	r2,1
 1000ae8:	94800044 	addi	r18,r18,1
 1000aec:	8c400044 	addi	r17,r17,1
 1000af0:	a8800115 	stw	r2,4(r21)
 1000af4:	d8c00404 	addi	r3,sp,16
 1000af8:	008001c4 	movi	r2,7
 1000afc:	a8c00015 	stw	r3,0(r21)
 1000b00:	dc800e15 	stw	r18,56(sp)
 1000b04:	dc400d15 	stw	r17,52(sp)
 1000b08:	1441da16 	blt	r2,r17,1001274 <___vfprintf_internal_r+0xc44>
 1000b0c:	ad400204 	addi	r21,r21,8
 1000b10:	d9015017 	ldw	r4,1344(sp)
 1000b14:	20000b1e 	bne	r4,zero,1000b44 <___vfprintf_internal_r+0x514>
 1000b18:	d8800444 	addi	r2,sp,17
 1000b1c:	94800084 	addi	r18,r18,2
 1000b20:	8c400044 	addi	r17,r17,1
 1000b24:	a8800015 	stw	r2,0(r21)
 1000b28:	00c00084 	movi	r3,2
 1000b2c:	008001c4 	movi	r2,7
 1000b30:	a8c00115 	stw	r3,4(r21)
 1000b34:	dc800e15 	stw	r18,56(sp)
 1000b38:	dc400d15 	stw	r17,52(sp)
 1000b3c:	1441c216 	blt	r2,r17,1001248 <___vfprintf_internal_r+0xc18>
 1000b40:	ad400204 	addi	r21,r21,8
 1000b44:	d9414e17 	ldw	r5,1336(sp)
 1000b48:	00802004 	movi	r2,128
 1000b4c:	2880b126 	beq	r5,r2,1000e14 <___vfprintf_internal_r+0x7e4>
 1000b50:	d8c14617 	ldw	r3,1304(sp)
 1000b54:	19e1c83a 	sub	r16,r3,r7
 1000b58:	0400260e 	bge	zero,r16,1000bf4 <___vfprintf_internal_r+0x5c4>
 1000b5c:	00800404 	movi	r2,16
 1000b60:	1403cf0e 	bge	r2,r16,1001aa0 <___vfprintf_internal_r+0x1470>
 1000b64:	1027883a 	mov	r19,r2
 1000b68:	07004074 	movhi	fp,257
 1000b6c:	e7355084 	addi	fp,fp,-10942
 1000b70:	050001c4 	movi	r20,7
 1000b74:	00000306 	br	1000b84 <___vfprintf_internal_r+0x554>
 1000b78:	843ffc04 	addi	r16,r16,-16
 1000b7c:	ad400204 	addi	r21,r21,8
 1000b80:	9c00130e 	bge	r19,r16,1000bd0 <___vfprintf_internal_r+0x5a0>
 1000b84:	94800404 	addi	r18,r18,16
 1000b88:	8c400044 	addi	r17,r17,1
 1000b8c:	af000015 	stw	fp,0(r21)
 1000b90:	acc00115 	stw	r19,4(r21)
 1000b94:	dc800e15 	stw	r18,56(sp)
 1000b98:	dc400d15 	stw	r17,52(sp)
 1000b9c:	a47ff60e 	bge	r20,r17,1000b78 <___vfprintf_internal_r+0x548>
 1000ba0:	d9014f17 	ldw	r4,1340(sp)
 1000ba4:	b00b883a 	mov	r5,r22
 1000ba8:	d9800c04 	addi	r6,sp,48
 1000bac:	d9c15115 	stw	r7,1348(sp)
 1000bb0:	10005d80 	call	10005d8 <__sprint_r>
 1000bb4:	d9c15117 	ldw	r7,1348(sp)
 1000bb8:	1000551e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1000bbc:	843ffc04 	addi	r16,r16,-16
 1000bc0:	dc800e17 	ldw	r18,56(sp)
 1000bc4:	dc400d17 	ldw	r17,52(sp)
 1000bc8:	dd401904 	addi	r21,sp,100
 1000bcc:	9c3fed16 	blt	r19,r16,1000b84 <___vfprintf_internal_r+0x554>
 1000bd0:	9425883a 	add	r18,r18,r16
 1000bd4:	8c400044 	addi	r17,r17,1
 1000bd8:	008001c4 	movi	r2,7
 1000bdc:	af000015 	stw	fp,0(r21)
 1000be0:	ac000115 	stw	r16,4(r21)
 1000be4:	dc800e15 	stw	r18,56(sp)
 1000be8:	dc400d15 	stw	r17,52(sp)
 1000bec:	14418216 	blt	r2,r17,10011f8 <___vfprintf_internal_r+0xbc8>
 1000bf0:	ad400204 	addi	r21,r21,8
 1000bf4:	d9014c17 	ldw	r4,1328(sp)
 1000bf8:	2080400c 	andi	r2,r4,256
 1000bfc:	10004a1e 	bne	r2,zero,1000d28 <___vfprintf_internal_r+0x6f8>
 1000c00:	d9414117 	ldw	r5,1284(sp)
 1000c04:	91e5883a 	add	r18,r18,r7
 1000c08:	8c400044 	addi	r17,r17,1
 1000c0c:	008001c4 	movi	r2,7
 1000c10:	a9400015 	stw	r5,0(r21)
 1000c14:	a9c00115 	stw	r7,4(r21)
 1000c18:	dc800e15 	stw	r18,56(sp)
 1000c1c:	dc400d15 	stw	r17,52(sp)
 1000c20:	14416716 	blt	r2,r17,10011c0 <___vfprintf_internal_r+0xb90>
 1000c24:	a8c00204 	addi	r3,r21,8
 1000c28:	d9814c17 	ldw	r6,1328(sp)
 1000c2c:	3080010c 	andi	r2,r6,4
 1000c30:	10002826 	beq	r2,zero,1000cd4 <___vfprintf_internal_r+0x6a4>
 1000c34:	d8814a17 	ldw	r2,1320(sp)
 1000c38:	d9014517 	ldw	r4,1300(sp)
 1000c3c:	1121c83a 	sub	r16,r2,r4
 1000c40:	0400240e 	bge	zero,r16,1000cd4 <___vfprintf_internal_r+0x6a4>
 1000c44:	00800404 	movi	r2,16
 1000c48:	1404550e 	bge	r2,r16,1001da0 <___vfprintf_internal_r+0x1770>
 1000c4c:	dc400d17 	ldw	r17,52(sp)
 1000c50:	1027883a 	mov	r19,r2
 1000c54:	07004074 	movhi	fp,257
 1000c58:	e7355484 	addi	fp,fp,-10926
 1000c5c:	050001c4 	movi	r20,7
 1000c60:	00000306 	br	1000c70 <___vfprintf_internal_r+0x640>
 1000c64:	843ffc04 	addi	r16,r16,-16
 1000c68:	18c00204 	addi	r3,r3,8
 1000c6c:	9c00110e 	bge	r19,r16,1000cb4 <___vfprintf_internal_r+0x684>
 1000c70:	94800404 	addi	r18,r18,16
 1000c74:	8c400044 	addi	r17,r17,1
 1000c78:	1f000015 	stw	fp,0(r3)
 1000c7c:	1cc00115 	stw	r19,4(r3)
 1000c80:	dc800e15 	stw	r18,56(sp)
 1000c84:	dc400d15 	stw	r17,52(sp)
 1000c88:	a47ff60e 	bge	r20,r17,1000c64 <___vfprintf_internal_r+0x634>
 1000c8c:	d9014f17 	ldw	r4,1340(sp)
 1000c90:	b00b883a 	mov	r5,r22
 1000c94:	d9800c04 	addi	r6,sp,48
 1000c98:	10005d80 	call	10005d8 <__sprint_r>
 1000c9c:	10001c1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1000ca0:	843ffc04 	addi	r16,r16,-16
 1000ca4:	dc800e17 	ldw	r18,56(sp)
 1000ca8:	dc400d17 	ldw	r17,52(sp)
 1000cac:	d8c01904 	addi	r3,sp,100
 1000cb0:	9c3fef16 	blt	r19,r16,1000c70 <___vfprintf_internal_r+0x640>
 1000cb4:	9425883a 	add	r18,r18,r16
 1000cb8:	8c400044 	addi	r17,r17,1
 1000cbc:	008001c4 	movi	r2,7
 1000cc0:	1f000015 	stw	fp,0(r3)
 1000cc4:	1c000115 	stw	r16,4(r3)
 1000cc8:	dc800e15 	stw	r18,56(sp)
 1000ccc:	dc400d15 	stw	r17,52(sp)
 1000cd0:	1440cb16 	blt	r2,r17,1001000 <___vfprintf_internal_r+0x9d0>
 1000cd4:	d8814a17 	ldw	r2,1320(sp)
 1000cd8:	d9414517 	ldw	r5,1300(sp)
 1000cdc:	1140010e 	bge	r2,r5,1000ce4 <___vfprintf_internal_r+0x6b4>
 1000ce0:	2805883a 	mov	r2,r5
 1000ce4:	d9814b17 	ldw	r6,1324(sp)
 1000ce8:	308d883a 	add	r6,r6,r2
 1000cec:	d9814b15 	stw	r6,1324(sp)
 1000cf0:	90013b1e 	bne	r18,zero,10011e0 <___vfprintf_internal_r+0xbb0>
 1000cf4:	d9c14017 	ldw	r7,1280(sp)
 1000cf8:	dd401904 	addi	r21,sp,100
 1000cfc:	d8000d15 	stw	zero,52(sp)
 1000d00:	003ea706 	br	10007a0 <___vfprintf_internal_r+0x170>
 1000d04:	d8800e17 	ldw	r2,56(sp)
 1000d08:	1005451e 	bne	r2,zero,1002220 <___vfprintf_internal_r+0x1bf0>
 1000d0c:	d8000d15 	stw	zero,52(sp)
 1000d10:	b080030b 	ldhu	r2,12(r22)
 1000d14:	1080100c 	andi	r2,r2,64
 1000d18:	103e8726 	beq	r2,zero,1000738 <___vfprintf_internal_r+0x108>
 1000d1c:	00bfffc4 	movi	r2,-1
 1000d20:	d8814b15 	stw	r2,1324(sp)
 1000d24:	003e8406 	br	1000738 <___vfprintf_internal_r+0x108>
 1000d28:	d9814d17 	ldw	r6,1332(sp)
 1000d2c:	00801944 	movi	r2,101
 1000d30:	11806e16 	blt	r2,r6,1000eec <___vfprintf_internal_r+0x8bc>
 1000d34:	d9414717 	ldw	r5,1308(sp)
 1000d38:	00c00044 	movi	r3,1
 1000d3c:	1943490e 	bge	r3,r5,1001a64 <___vfprintf_internal_r+0x1434>
 1000d40:	d8814117 	ldw	r2,1284(sp)
 1000d44:	94800044 	addi	r18,r18,1
 1000d48:	8c400044 	addi	r17,r17,1
 1000d4c:	a8800015 	stw	r2,0(r21)
 1000d50:	008001c4 	movi	r2,7
 1000d54:	a8c00115 	stw	r3,4(r21)
 1000d58:	dc800e15 	stw	r18,56(sp)
 1000d5c:	dc400d15 	stw	r17,52(sp)
 1000d60:	1441ca16 	blt	r2,r17,100148c <___vfprintf_internal_r+0xe5c>
 1000d64:	a8c00204 	addi	r3,r21,8
 1000d68:	d9014917 	ldw	r4,1316(sp)
 1000d6c:	00800044 	movi	r2,1
 1000d70:	94800044 	addi	r18,r18,1
 1000d74:	8c400044 	addi	r17,r17,1
 1000d78:	18800115 	stw	r2,4(r3)
 1000d7c:	008001c4 	movi	r2,7
 1000d80:	19000015 	stw	r4,0(r3)
 1000d84:	dc800e15 	stw	r18,56(sp)
 1000d88:	dc400d15 	stw	r17,52(sp)
 1000d8c:	1441b616 	blt	r2,r17,1001468 <___vfprintf_internal_r+0xe38>
 1000d90:	1cc00204 	addi	r19,r3,8
 1000d94:	d9014217 	ldw	r4,1288(sp)
 1000d98:	d9414317 	ldw	r5,1292(sp)
 1000d9c:	000d883a 	mov	r6,zero
 1000da0:	000f883a 	mov	r7,zero
 1000da4:	10091580 	call	1009158 <__nedf2>
 1000da8:	10017426 	beq	r2,zero,100137c <___vfprintf_internal_r+0xd4c>
 1000dac:	d9414717 	ldw	r5,1308(sp)
 1000db0:	d9814117 	ldw	r6,1284(sp)
 1000db4:	8c400044 	addi	r17,r17,1
 1000db8:	2c85883a 	add	r2,r5,r18
 1000dbc:	14bfffc4 	addi	r18,r2,-1
 1000dc0:	28bfffc4 	addi	r2,r5,-1
 1000dc4:	30c00044 	addi	r3,r6,1
 1000dc8:	98800115 	stw	r2,4(r19)
 1000dcc:	008001c4 	movi	r2,7
 1000dd0:	98c00015 	stw	r3,0(r19)
 1000dd4:	dc800e15 	stw	r18,56(sp)
 1000dd8:	dc400d15 	stw	r17,52(sp)
 1000ddc:	14418e16 	blt	r2,r17,1001418 <___vfprintf_internal_r+0xde8>
 1000de0:	9cc00204 	addi	r19,r19,8
 1000de4:	d9414817 	ldw	r5,1312(sp)
 1000de8:	d8800804 	addi	r2,sp,32
 1000dec:	8c400044 	addi	r17,r17,1
 1000df0:	9165883a 	add	r18,r18,r5
 1000df4:	98800015 	stw	r2,0(r19)
 1000df8:	008001c4 	movi	r2,7
 1000dfc:	99400115 	stw	r5,4(r19)
 1000e00:	dc800e15 	stw	r18,56(sp)
 1000e04:	dc400d15 	stw	r17,52(sp)
 1000e08:	1440ed16 	blt	r2,r17,10011c0 <___vfprintf_internal_r+0xb90>
 1000e0c:	98c00204 	addi	r3,r19,8
 1000e10:	003f8506 	br	1000c28 <___vfprintf_internal_r+0x5f8>
 1000e14:	d9814a17 	ldw	r6,1320(sp)
 1000e18:	d8814517 	ldw	r2,1300(sp)
 1000e1c:	30a1c83a 	sub	r16,r6,r2
 1000e20:	043f4b0e 	bge	zero,r16,1000b50 <___vfprintf_internal_r+0x520>
 1000e24:	00800404 	movi	r2,16
 1000e28:	14043a0e 	bge	r2,r16,1001f14 <___vfprintf_internal_r+0x18e4>
 1000e2c:	1027883a 	mov	r19,r2
 1000e30:	07004074 	movhi	fp,257
 1000e34:	e7355084 	addi	fp,fp,-10942
 1000e38:	050001c4 	movi	r20,7
 1000e3c:	00000306 	br	1000e4c <___vfprintf_internal_r+0x81c>
 1000e40:	843ffc04 	addi	r16,r16,-16
 1000e44:	ad400204 	addi	r21,r21,8
 1000e48:	9c00130e 	bge	r19,r16,1000e98 <___vfprintf_internal_r+0x868>
 1000e4c:	94800404 	addi	r18,r18,16
 1000e50:	8c400044 	addi	r17,r17,1
 1000e54:	af000015 	stw	fp,0(r21)
 1000e58:	acc00115 	stw	r19,4(r21)
 1000e5c:	dc800e15 	stw	r18,56(sp)
 1000e60:	dc400d15 	stw	r17,52(sp)
 1000e64:	a47ff60e 	bge	r20,r17,1000e40 <___vfprintf_internal_r+0x810>
 1000e68:	d9014f17 	ldw	r4,1340(sp)
 1000e6c:	b00b883a 	mov	r5,r22
 1000e70:	d9800c04 	addi	r6,sp,48
 1000e74:	d9c15115 	stw	r7,1348(sp)
 1000e78:	10005d80 	call	10005d8 <__sprint_r>
 1000e7c:	d9c15117 	ldw	r7,1348(sp)
 1000e80:	103fa31e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1000e84:	843ffc04 	addi	r16,r16,-16
 1000e88:	dc800e17 	ldw	r18,56(sp)
 1000e8c:	dc400d17 	ldw	r17,52(sp)
 1000e90:	dd401904 	addi	r21,sp,100
 1000e94:	9c3fed16 	blt	r19,r16,1000e4c <___vfprintf_internal_r+0x81c>
 1000e98:	9425883a 	add	r18,r18,r16
 1000e9c:	8c400044 	addi	r17,r17,1
 1000ea0:	008001c4 	movi	r2,7
 1000ea4:	af000015 	stw	fp,0(r21)
 1000ea8:	ac000115 	stw	r16,4(r21)
 1000eac:	dc800e15 	stw	r18,56(sp)
 1000eb0:	dc400d15 	stw	r17,52(sp)
 1000eb4:	14416116 	blt	r2,r17,100143c <___vfprintf_internal_r+0xe0c>
 1000eb8:	ad400204 	addi	r21,r21,8
 1000ebc:	003f2406 	br	1000b50 <___vfprintf_internal_r+0x520>
 1000ec0:	d9014f17 	ldw	r4,1340(sp)
 1000ec4:	10040e40 	call	10040e4 <__sinit>
 1000ec8:	d9c15117 	ldw	r7,1348(sp)
 1000ecc:	003def06 	br	100068c <___vfprintf_internal_r+0x5c>
 1000ed0:	d9014f17 	ldw	r4,1340(sp)
 1000ed4:	b00b883a 	mov	r5,r22
 1000ed8:	d9c15115 	stw	r7,1348(sp)
 1000edc:	10025180 	call	1002518 <__swsetup_r>
 1000ee0:	d9c15117 	ldw	r7,1348(sp)
 1000ee4:	103dee26 	beq	r2,zero,10006a0 <___vfprintf_internal_r+0x70>
 1000ee8:	003f8c06 	br	1000d1c <___vfprintf_internal_r+0x6ec>
 1000eec:	d9014217 	ldw	r4,1288(sp)
 1000ef0:	d9414317 	ldw	r5,1292(sp)
 1000ef4:	000d883a 	mov	r6,zero
 1000ef8:	000f883a 	mov	r7,zero
 1000efc:	10090d00 	call	10090d0 <__eqdf2>
 1000f00:	1000f21e 	bne	r2,zero,10012cc <___vfprintf_internal_r+0xc9c>
 1000f04:	00804074 	movhi	r2,257
 1000f08:	10b55004 	addi	r2,r2,-10944
 1000f0c:	94800044 	addi	r18,r18,1
 1000f10:	8c400044 	addi	r17,r17,1
 1000f14:	a8800015 	stw	r2,0(r21)
 1000f18:	00c00044 	movi	r3,1
 1000f1c:	008001c4 	movi	r2,7
 1000f20:	a8c00115 	stw	r3,4(r21)
 1000f24:	dc800e15 	stw	r18,56(sp)
 1000f28:	dc400d15 	stw	r17,52(sp)
 1000f2c:	14430016 	blt	r2,r17,1001b30 <___vfprintf_internal_r+0x1500>
 1000f30:	a8c00204 	addi	r3,r21,8
 1000f34:	d8800517 	ldw	r2,20(sp)
 1000f38:	d9014717 	ldw	r4,1308(sp)
 1000f3c:	11015c0e 	bge	r2,r4,10014b0 <___vfprintf_internal_r+0xe80>
 1000f40:	dc400d17 	ldw	r17,52(sp)
 1000f44:	d9814917 	ldw	r6,1316(sp)
 1000f48:	00800044 	movi	r2,1
 1000f4c:	94800044 	addi	r18,r18,1
 1000f50:	8c400044 	addi	r17,r17,1
 1000f54:	18800115 	stw	r2,4(r3)
 1000f58:	008001c4 	movi	r2,7
 1000f5c:	19800015 	stw	r6,0(r3)
 1000f60:	dc800e15 	stw	r18,56(sp)
 1000f64:	dc400d15 	stw	r17,52(sp)
 1000f68:	14431616 	blt	r2,r17,1001bc4 <___vfprintf_internal_r+0x1594>
 1000f6c:	18c00204 	addi	r3,r3,8
 1000f70:	d8814717 	ldw	r2,1308(sp)
 1000f74:	143fffc4 	addi	r16,r2,-1
 1000f78:	043f2b0e 	bge	zero,r16,1000c28 <___vfprintf_internal_r+0x5f8>
 1000f7c:	00800404 	movi	r2,16
 1000f80:	1402a80e 	bge	r2,r16,1001a24 <___vfprintf_internal_r+0x13f4>
 1000f84:	dc400d17 	ldw	r17,52(sp)
 1000f88:	1027883a 	mov	r19,r2
 1000f8c:	07004074 	movhi	fp,257
 1000f90:	e7355084 	addi	fp,fp,-10942
 1000f94:	050001c4 	movi	r20,7
 1000f98:	00000306 	br	1000fa8 <___vfprintf_internal_r+0x978>
 1000f9c:	18c00204 	addi	r3,r3,8
 1000fa0:	843ffc04 	addi	r16,r16,-16
 1000fa4:	9c02a20e 	bge	r19,r16,1001a30 <___vfprintf_internal_r+0x1400>
 1000fa8:	94800404 	addi	r18,r18,16
 1000fac:	8c400044 	addi	r17,r17,1
 1000fb0:	1f000015 	stw	fp,0(r3)
 1000fb4:	1cc00115 	stw	r19,4(r3)
 1000fb8:	dc800e15 	stw	r18,56(sp)
 1000fbc:	dc400d15 	stw	r17,52(sp)
 1000fc0:	a47ff60e 	bge	r20,r17,1000f9c <___vfprintf_internal_r+0x96c>
 1000fc4:	d9014f17 	ldw	r4,1340(sp)
 1000fc8:	b00b883a 	mov	r5,r22
 1000fcc:	d9800c04 	addi	r6,sp,48
 1000fd0:	10005d80 	call	10005d8 <__sprint_r>
 1000fd4:	103f4e1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1000fd8:	dc800e17 	ldw	r18,56(sp)
 1000fdc:	dc400d17 	ldw	r17,52(sp)
 1000fe0:	d8c01904 	addi	r3,sp,100
 1000fe4:	003fee06 	br	1000fa0 <___vfprintf_internal_r+0x970>
 1000fe8:	d8802c0b 	ldhu	r2,176(sp)
 1000fec:	00ffffc4 	movi	r3,-1
 1000ff0:	d8c14b15 	stw	r3,1324(sp)
 1000ff4:	1080100c 	andi	r2,r2,64
 1000ff8:	103dcc1e 	bne	r2,zero,100072c <___vfprintf_internal_r+0xfc>
 1000ffc:	003dce06 	br	1000738 <___vfprintf_internal_r+0x108>
 1001000:	d9014f17 	ldw	r4,1340(sp)
 1001004:	b00b883a 	mov	r5,r22
 1001008:	d9800c04 	addi	r6,sp,48
 100100c:	10005d80 	call	10005d8 <__sprint_r>
 1001010:	103f3f1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001014:	dc800e17 	ldw	r18,56(sp)
 1001018:	003f2e06 	br	1000cd4 <___vfprintf_internal_r+0x6a4>
 100101c:	d9414c17 	ldw	r5,1328(sp)
 1001020:	29400414 	ori	r5,r5,16
 1001024:	d9414c15 	stw	r5,1328(sp)
 1001028:	d9814c17 	ldw	r6,1328(sp)
 100102c:	3080080c 	andi	r2,r6,32
 1001030:	10014f1e 	bne	r2,zero,1001570 <___vfprintf_internal_r+0xf40>
 1001034:	d8c14c17 	ldw	r3,1328(sp)
 1001038:	1880040c 	andi	r2,r3,16
 100103c:	1002f01e 	bne	r2,zero,1001c00 <___vfprintf_internal_r+0x15d0>
 1001040:	d9014c17 	ldw	r4,1328(sp)
 1001044:	2080100c 	andi	r2,r4,64
 1001048:	1002ed26 	beq	r2,zero,1001c00 <___vfprintf_internal_r+0x15d0>
 100104c:	3880000f 	ldh	r2,0(r7)
 1001050:	39c00104 	addi	r7,r7,4
 1001054:	d9c14015 	stw	r7,1280(sp)
 1001058:	1023d7fa 	srai	r17,r2,31
 100105c:	1021883a 	mov	r16,r2
 1001060:	88037816 	blt	r17,zero,1001e44 <___vfprintf_internal_r+0x1814>
 1001064:	01000044 	movi	r4,1
 1001068:	98000416 	blt	r19,zero,100107c <___vfprintf_internal_r+0xa4c>
 100106c:	d8c14c17 	ldw	r3,1328(sp)
 1001070:	00bfdfc4 	movi	r2,-129
 1001074:	1886703a 	and	r3,r3,r2
 1001078:	d8c14c15 	stw	r3,1328(sp)
 100107c:	8444b03a 	or	r2,r16,r17
 1001080:	10022c1e 	bne	r2,zero,1001934 <___vfprintf_internal_r+0x1304>
 1001084:	98022b1e 	bne	r19,zero,1001934 <___vfprintf_internal_r+0x1304>
 1001088:	20803fcc 	andi	r2,r4,255
 100108c:	1002a126 	beq	r2,zero,1001b14 <___vfprintf_internal_r+0x14e4>
 1001090:	d8c01904 	addi	r3,sp,100
 1001094:	dd000f04 	addi	r20,sp,60
 1001098:	d8c14115 	stw	r3,1284(sp)
 100109c:	d8c14117 	ldw	r3,1284(sp)
 10010a0:	dcc14515 	stw	r19,1300(sp)
 10010a4:	a0c5c83a 	sub	r2,r20,r3
 10010a8:	11c00a04 	addi	r7,r2,40
 10010ac:	99c0010e 	bge	r19,r7,10010b4 <___vfprintf_internal_r+0xa84>
 10010b0:	d9c14515 	stw	r7,1300(sp)
 10010b4:	dcc14615 	stw	r19,1304(sp)
 10010b8:	d8800407 	ldb	r2,16(sp)
 10010bc:	103e4c26 	beq	r2,zero,10009f0 <___vfprintf_internal_r+0x3c0>
 10010c0:	d8814517 	ldw	r2,1300(sp)
 10010c4:	10800044 	addi	r2,r2,1
 10010c8:	d8814515 	stw	r2,1300(sp)
 10010cc:	003e4806 	br	10009f0 <___vfprintf_internal_r+0x3c0>
 10010d0:	d9814c17 	ldw	r6,1328(sp)
 10010d4:	31800414 	ori	r6,r6,16
 10010d8:	d9814c15 	stw	r6,1328(sp)
 10010dc:	d8c14c17 	ldw	r3,1328(sp)
 10010e0:	1880080c 	andi	r2,r3,32
 10010e4:	1001271e 	bne	r2,zero,1001584 <___vfprintf_internal_r+0xf54>
 10010e8:	d9414c17 	ldw	r5,1328(sp)
 10010ec:	2880040c 	andi	r2,r5,16
 10010f0:	1002bc1e 	bne	r2,zero,1001be4 <___vfprintf_internal_r+0x15b4>
 10010f4:	d9814c17 	ldw	r6,1328(sp)
 10010f8:	3080100c 	andi	r2,r6,64
 10010fc:	1002b926 	beq	r2,zero,1001be4 <___vfprintf_internal_r+0x15b4>
 1001100:	3c00000b 	ldhu	r16,0(r7)
 1001104:	0009883a 	mov	r4,zero
 1001108:	39c00104 	addi	r7,r7,4
 100110c:	0023883a 	mov	r17,zero
 1001110:	d9c14015 	stw	r7,1280(sp)
 1001114:	d8000405 	stb	zero,16(sp)
 1001118:	003fd306 	br	1001068 <___vfprintf_internal_r+0xa38>
 100111c:	d9014c17 	ldw	r4,1328(sp)
 1001120:	21000414 	ori	r4,r4,16
 1001124:	d9014c15 	stw	r4,1328(sp)
 1001128:	d9414c17 	ldw	r5,1328(sp)
 100112c:	2880080c 	andi	r2,r5,32
 1001130:	1001081e 	bne	r2,zero,1001554 <___vfprintf_internal_r+0xf24>
 1001134:	d8c14c17 	ldw	r3,1328(sp)
 1001138:	1880040c 	andi	r2,r3,16
 100113c:	1002b61e 	bne	r2,zero,1001c18 <___vfprintf_internal_r+0x15e8>
 1001140:	d9014c17 	ldw	r4,1328(sp)
 1001144:	2080100c 	andi	r2,r4,64
 1001148:	1002b326 	beq	r2,zero,1001c18 <___vfprintf_internal_r+0x15e8>
 100114c:	3c00000b 	ldhu	r16,0(r7)
 1001150:	01000044 	movi	r4,1
 1001154:	39c00104 	addi	r7,r7,4
 1001158:	0023883a 	mov	r17,zero
 100115c:	d9c14015 	stw	r7,1280(sp)
 1001160:	d8000405 	stb	zero,16(sp)
 1001164:	003fc006 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001168:	d9014f17 	ldw	r4,1340(sp)
 100116c:	b00b883a 	mov	r5,r22
 1001170:	d9800c04 	addi	r6,sp,48
 1001174:	10005d80 	call	10005d8 <__sprint_r>
 1001178:	103ee51e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 100117c:	dc800e17 	ldw	r18,56(sp)
 1001180:	d8c01904 	addi	r3,sp,100
 1001184:	d9814c17 	ldw	r6,1328(sp)
 1001188:	3080004c 	andi	r2,r6,1
 100118c:	1005003a 	cmpeq	r2,r2,zero
 1001190:	103ea51e 	bne	r2,zero,1000c28 <___vfprintf_internal_r+0x5f8>
 1001194:	00800044 	movi	r2,1
 1001198:	dc400d17 	ldw	r17,52(sp)
 100119c:	18800115 	stw	r2,4(r3)
 10011a0:	d8814917 	ldw	r2,1316(sp)
 10011a4:	94800044 	addi	r18,r18,1
 10011a8:	8c400044 	addi	r17,r17,1
 10011ac:	18800015 	stw	r2,0(r3)
 10011b0:	008001c4 	movi	r2,7
 10011b4:	dc800e15 	stw	r18,56(sp)
 10011b8:	dc400d15 	stw	r17,52(sp)
 10011bc:	1442240e 	bge	r2,r17,1001a50 <___vfprintf_internal_r+0x1420>
 10011c0:	d9014f17 	ldw	r4,1340(sp)
 10011c4:	b00b883a 	mov	r5,r22
 10011c8:	d9800c04 	addi	r6,sp,48
 10011cc:	10005d80 	call	10005d8 <__sprint_r>
 10011d0:	103ecf1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 10011d4:	dc800e17 	ldw	r18,56(sp)
 10011d8:	d8c01904 	addi	r3,sp,100
 10011dc:	003e9206 	br	1000c28 <___vfprintf_internal_r+0x5f8>
 10011e0:	d9014f17 	ldw	r4,1340(sp)
 10011e4:	b00b883a 	mov	r5,r22
 10011e8:	d9800c04 	addi	r6,sp,48
 10011ec:	10005d80 	call	10005d8 <__sprint_r>
 10011f0:	103ec026 	beq	r2,zero,1000cf4 <___vfprintf_internal_r+0x6c4>
 10011f4:	003ec606 	br	1000d10 <___vfprintf_internal_r+0x6e0>
 10011f8:	d9014f17 	ldw	r4,1340(sp)
 10011fc:	b00b883a 	mov	r5,r22
 1001200:	d9800c04 	addi	r6,sp,48
 1001204:	d9c15115 	stw	r7,1348(sp)
 1001208:	10005d80 	call	10005d8 <__sprint_r>
 100120c:	d9c15117 	ldw	r7,1348(sp)
 1001210:	103ebf1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001214:	dc800e17 	ldw	r18,56(sp)
 1001218:	dc400d17 	ldw	r17,52(sp)
 100121c:	dd401904 	addi	r21,sp,100
 1001220:	003e7406 	br	1000bf4 <___vfprintf_internal_r+0x5c4>
 1001224:	d9014f17 	ldw	r4,1340(sp)
 1001228:	b00b883a 	mov	r5,r22
 100122c:	d9800c04 	addi	r6,sp,48
 1001230:	d9c15115 	stw	r7,1348(sp)
 1001234:	10005d80 	call	10005d8 <__sprint_r>
 1001238:	d9c15117 	ldw	r7,1348(sp)
 100123c:	103eb41e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001240:	dd401904 	addi	r21,sp,100
 1001244:	003d6d06 	br	10007fc <___vfprintf_internal_r+0x1cc>
 1001248:	d9014f17 	ldw	r4,1340(sp)
 100124c:	b00b883a 	mov	r5,r22
 1001250:	d9800c04 	addi	r6,sp,48
 1001254:	d9c15115 	stw	r7,1348(sp)
 1001258:	10005d80 	call	10005d8 <__sprint_r>
 100125c:	d9c15117 	ldw	r7,1348(sp)
 1001260:	103eab1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001264:	dc800e17 	ldw	r18,56(sp)
 1001268:	dc400d17 	ldw	r17,52(sp)
 100126c:	dd401904 	addi	r21,sp,100
 1001270:	003e3406 	br	1000b44 <___vfprintf_internal_r+0x514>
 1001274:	d9014f17 	ldw	r4,1340(sp)
 1001278:	b00b883a 	mov	r5,r22
 100127c:	d9800c04 	addi	r6,sp,48
 1001280:	d9c15115 	stw	r7,1348(sp)
 1001284:	10005d80 	call	10005d8 <__sprint_r>
 1001288:	d9c15117 	ldw	r7,1348(sp)
 100128c:	103ea01e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001290:	dc800e17 	ldw	r18,56(sp)
 1001294:	dc400d17 	ldw	r17,52(sp)
 1001298:	dd401904 	addi	r21,sp,100
 100129c:	003e1c06 	br	1000b10 <___vfprintf_internal_r+0x4e0>
 10012a0:	d9014f17 	ldw	r4,1340(sp)
 10012a4:	b00b883a 	mov	r5,r22
 10012a8:	d9800c04 	addi	r6,sp,48
 10012ac:	d9c15115 	stw	r7,1348(sp)
 10012b0:	10005d80 	call	10005d8 <__sprint_r>
 10012b4:	d9c15117 	ldw	r7,1348(sp)
 10012b8:	103e951e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 10012bc:	dc800e17 	ldw	r18,56(sp)
 10012c0:	dc400d17 	ldw	r17,52(sp)
 10012c4:	dd401904 	addi	r21,sp,100
 10012c8:	003e0406 	br	1000adc <___vfprintf_internal_r+0x4ac>
 10012cc:	d9000517 	ldw	r4,20(sp)
 10012d0:	0102580e 	bge	zero,r4,1001c34 <___vfprintf_internal_r+0x1604>
 10012d4:	d9814717 	ldw	r6,1308(sp)
 10012d8:	21807a16 	blt	r4,r6,10014c4 <___vfprintf_internal_r+0xe94>
 10012dc:	d8814117 	ldw	r2,1284(sp)
 10012e0:	91a5883a 	add	r18,r18,r6
 10012e4:	8c400044 	addi	r17,r17,1
 10012e8:	a8800015 	stw	r2,0(r21)
 10012ec:	008001c4 	movi	r2,7
 10012f0:	a9800115 	stw	r6,4(r21)
 10012f4:	dc800e15 	stw	r18,56(sp)
 10012f8:	dc400d15 	stw	r17,52(sp)
 10012fc:	1442fc16 	blt	r2,r17,1001ef0 <___vfprintf_internal_r+0x18c0>
 1001300:	a8c00204 	addi	r3,r21,8
 1001304:	d9414717 	ldw	r5,1308(sp)
 1001308:	2161c83a 	sub	r16,r4,r5
 100130c:	043f9d0e 	bge	zero,r16,1001184 <___vfprintf_internal_r+0xb54>
 1001310:	00800404 	movi	r2,16
 1001314:	1402190e 	bge	r2,r16,1001b7c <___vfprintf_internal_r+0x154c>
 1001318:	dc400d17 	ldw	r17,52(sp)
 100131c:	1027883a 	mov	r19,r2
 1001320:	07004074 	movhi	fp,257
 1001324:	e7355084 	addi	fp,fp,-10942
 1001328:	050001c4 	movi	r20,7
 100132c:	00000306 	br	100133c <___vfprintf_internal_r+0xd0c>
 1001330:	18c00204 	addi	r3,r3,8
 1001334:	843ffc04 	addi	r16,r16,-16
 1001338:	9c02130e 	bge	r19,r16,1001b88 <___vfprintf_internal_r+0x1558>
 100133c:	94800404 	addi	r18,r18,16
 1001340:	8c400044 	addi	r17,r17,1
 1001344:	1f000015 	stw	fp,0(r3)
 1001348:	1cc00115 	stw	r19,4(r3)
 100134c:	dc800e15 	stw	r18,56(sp)
 1001350:	dc400d15 	stw	r17,52(sp)
 1001354:	a47ff60e 	bge	r20,r17,1001330 <___vfprintf_internal_r+0xd00>
 1001358:	d9014f17 	ldw	r4,1340(sp)
 100135c:	b00b883a 	mov	r5,r22
 1001360:	d9800c04 	addi	r6,sp,48
 1001364:	10005d80 	call	10005d8 <__sprint_r>
 1001368:	103e691e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 100136c:	dc800e17 	ldw	r18,56(sp)
 1001370:	dc400d17 	ldw	r17,52(sp)
 1001374:	d8c01904 	addi	r3,sp,100
 1001378:	003fee06 	br	1001334 <___vfprintf_internal_r+0xd04>
 100137c:	d8814717 	ldw	r2,1308(sp)
 1001380:	143fffc4 	addi	r16,r2,-1
 1001384:	043e970e 	bge	zero,r16,1000de4 <___vfprintf_internal_r+0x7b4>
 1001388:	00800404 	movi	r2,16
 100138c:	1400180e 	bge	r2,r16,10013f0 <___vfprintf_internal_r+0xdc0>
 1001390:	1029883a 	mov	r20,r2
 1001394:	07004074 	movhi	fp,257
 1001398:	e7355084 	addi	fp,fp,-10942
 100139c:	054001c4 	movi	r21,7
 10013a0:	00000306 	br	10013b0 <___vfprintf_internal_r+0xd80>
 10013a4:	9cc00204 	addi	r19,r19,8
 10013a8:	843ffc04 	addi	r16,r16,-16
 10013ac:	a400120e 	bge	r20,r16,10013f8 <___vfprintf_internal_r+0xdc8>
 10013b0:	94800404 	addi	r18,r18,16
 10013b4:	8c400044 	addi	r17,r17,1
 10013b8:	9f000015 	stw	fp,0(r19)
 10013bc:	9d000115 	stw	r20,4(r19)
 10013c0:	dc800e15 	stw	r18,56(sp)
 10013c4:	dc400d15 	stw	r17,52(sp)
 10013c8:	ac7ff60e 	bge	r21,r17,10013a4 <___vfprintf_internal_r+0xd74>
 10013cc:	d9014f17 	ldw	r4,1340(sp)
 10013d0:	b00b883a 	mov	r5,r22
 10013d4:	d9800c04 	addi	r6,sp,48
 10013d8:	10005d80 	call	10005d8 <__sprint_r>
 10013dc:	103e4c1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 10013e0:	dc800e17 	ldw	r18,56(sp)
 10013e4:	dc400d17 	ldw	r17,52(sp)
 10013e8:	dcc01904 	addi	r19,sp,100
 10013ec:	003fee06 	br	10013a8 <___vfprintf_internal_r+0xd78>
 10013f0:	07004074 	movhi	fp,257
 10013f4:	e7355084 	addi	fp,fp,-10942
 10013f8:	9425883a 	add	r18,r18,r16
 10013fc:	8c400044 	addi	r17,r17,1
 1001400:	008001c4 	movi	r2,7
 1001404:	9f000015 	stw	fp,0(r19)
 1001408:	9c000115 	stw	r16,4(r19)
 100140c:	dc800e15 	stw	r18,56(sp)
 1001410:	dc400d15 	stw	r17,52(sp)
 1001414:	147e720e 	bge	r2,r17,1000de0 <___vfprintf_internal_r+0x7b0>
 1001418:	d9014f17 	ldw	r4,1340(sp)
 100141c:	b00b883a 	mov	r5,r22
 1001420:	d9800c04 	addi	r6,sp,48
 1001424:	10005d80 	call	10005d8 <__sprint_r>
 1001428:	103e391e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 100142c:	dc800e17 	ldw	r18,56(sp)
 1001430:	dc400d17 	ldw	r17,52(sp)
 1001434:	dcc01904 	addi	r19,sp,100
 1001438:	003e6a06 	br	1000de4 <___vfprintf_internal_r+0x7b4>
 100143c:	d9014f17 	ldw	r4,1340(sp)
 1001440:	b00b883a 	mov	r5,r22
 1001444:	d9800c04 	addi	r6,sp,48
 1001448:	d9c15115 	stw	r7,1348(sp)
 100144c:	10005d80 	call	10005d8 <__sprint_r>
 1001450:	d9c15117 	ldw	r7,1348(sp)
 1001454:	103e2e1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001458:	dc800e17 	ldw	r18,56(sp)
 100145c:	dc400d17 	ldw	r17,52(sp)
 1001460:	dd401904 	addi	r21,sp,100
 1001464:	003dba06 	br	1000b50 <___vfprintf_internal_r+0x520>
 1001468:	d9014f17 	ldw	r4,1340(sp)
 100146c:	b00b883a 	mov	r5,r22
 1001470:	d9800c04 	addi	r6,sp,48
 1001474:	10005d80 	call	10005d8 <__sprint_r>
 1001478:	103e251e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 100147c:	dc800e17 	ldw	r18,56(sp)
 1001480:	dc400d17 	ldw	r17,52(sp)
 1001484:	dcc01904 	addi	r19,sp,100
 1001488:	003e4206 	br	1000d94 <___vfprintf_internal_r+0x764>
 100148c:	d9014f17 	ldw	r4,1340(sp)
 1001490:	b00b883a 	mov	r5,r22
 1001494:	d9800c04 	addi	r6,sp,48
 1001498:	10005d80 	call	10005d8 <__sprint_r>
 100149c:	103e1c1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 10014a0:	dc800e17 	ldw	r18,56(sp)
 10014a4:	dc400d17 	ldw	r17,52(sp)
 10014a8:	d8c01904 	addi	r3,sp,100
 10014ac:	003e2e06 	br	1000d68 <___vfprintf_internal_r+0x738>
 10014b0:	d9414c17 	ldw	r5,1328(sp)
 10014b4:	2880004c 	andi	r2,r5,1
 10014b8:	1005003a 	cmpeq	r2,r2,zero
 10014bc:	103dda1e 	bne	r2,zero,1000c28 <___vfprintf_internal_r+0x5f8>
 10014c0:	003e9f06 	br	1000f40 <___vfprintf_internal_r+0x910>
 10014c4:	d8c14117 	ldw	r3,1284(sp)
 10014c8:	9125883a 	add	r18,r18,r4
 10014cc:	8c400044 	addi	r17,r17,1
 10014d0:	008001c4 	movi	r2,7
 10014d4:	a8c00015 	stw	r3,0(r21)
 10014d8:	a9000115 	stw	r4,4(r21)
 10014dc:	dc800e15 	stw	r18,56(sp)
 10014e0:	dc400d15 	stw	r17,52(sp)
 10014e4:	14426c16 	blt	r2,r17,1001e98 <___vfprintf_internal_r+0x1868>
 10014e8:	a8c00204 	addi	r3,r21,8
 10014ec:	d9414917 	ldw	r5,1316(sp)
 10014f0:	00800044 	movi	r2,1
 10014f4:	94800044 	addi	r18,r18,1
 10014f8:	8c400044 	addi	r17,r17,1
 10014fc:	18800115 	stw	r2,4(r3)
 1001500:	008001c4 	movi	r2,7
 1001504:	19400015 	stw	r5,0(r3)
 1001508:	dc800e15 	stw	r18,56(sp)
 100150c:	dc400d15 	stw	r17,52(sp)
 1001510:	2021883a 	mov	r16,r4
 1001514:	14425616 	blt	r2,r17,1001e70 <___vfprintf_internal_r+0x1840>
 1001518:	19400204 	addi	r5,r3,8
 100151c:	d9814717 	ldw	r6,1308(sp)
 1001520:	8c400044 	addi	r17,r17,1
 1001524:	dc400d15 	stw	r17,52(sp)
 1001528:	3107c83a 	sub	r3,r6,r4
 100152c:	d9014117 	ldw	r4,1284(sp)
 1001530:	90e5883a 	add	r18,r18,r3
 1001534:	28c00115 	stw	r3,4(r5)
 1001538:	8105883a 	add	r2,r16,r4
 100153c:	28800015 	stw	r2,0(r5)
 1001540:	008001c4 	movi	r2,7
 1001544:	dc800e15 	stw	r18,56(sp)
 1001548:	147f1d16 	blt	r2,r17,10011c0 <___vfprintf_internal_r+0xb90>
 100154c:	28c00204 	addi	r3,r5,8
 1001550:	003db506 	br	1000c28 <___vfprintf_internal_r+0x5f8>
 1001554:	3c000017 	ldw	r16,0(r7)
 1001558:	3c400117 	ldw	r17,4(r7)
 100155c:	39800204 	addi	r6,r7,8
 1001560:	01000044 	movi	r4,1
 1001564:	d9814015 	stw	r6,1280(sp)
 1001568:	d8000405 	stb	zero,16(sp)
 100156c:	003ebe06 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001570:	3c000017 	ldw	r16,0(r7)
 1001574:	3c400117 	ldw	r17,4(r7)
 1001578:	38800204 	addi	r2,r7,8
 100157c:	d8814015 	stw	r2,1280(sp)
 1001580:	003eb706 	br	1001060 <___vfprintf_internal_r+0xa30>
 1001584:	3c000017 	ldw	r16,0(r7)
 1001588:	3c400117 	ldw	r17,4(r7)
 100158c:	39000204 	addi	r4,r7,8
 1001590:	d9014015 	stw	r4,1280(sp)
 1001594:	0009883a 	mov	r4,zero
 1001598:	d8000405 	stb	zero,16(sp)
 100159c:	003eb206 	br	1001068 <___vfprintf_internal_r+0xa38>
 10015a0:	38c00017 	ldw	r3,0(r7)
 10015a4:	39c00104 	addi	r7,r7,4
 10015a8:	d8c14a15 	stw	r3,1320(sp)
 10015ac:	1800d70e 	bge	r3,zero,100190c <___vfprintf_internal_r+0x12dc>
 10015b0:	00c7c83a 	sub	r3,zero,r3
 10015b4:	d8c14a15 	stw	r3,1320(sp)
 10015b8:	d9014c17 	ldw	r4,1328(sp)
 10015bc:	b8c00007 	ldb	r3,0(r23)
 10015c0:	21000114 	ori	r4,r4,4
 10015c4:	d9014c15 	stw	r4,1328(sp)
 10015c8:	003c9806 	br	100082c <___vfprintf_internal_r+0x1fc>
 10015cc:	d9814c17 	ldw	r6,1328(sp)
 10015d0:	3080080c 	andi	r2,r6,32
 10015d4:	1001f626 	beq	r2,zero,1001db0 <___vfprintf_internal_r+0x1780>
 10015d8:	d9014b17 	ldw	r4,1324(sp)
 10015dc:	38800017 	ldw	r2,0(r7)
 10015e0:	39c00104 	addi	r7,r7,4
 10015e4:	d9c14015 	stw	r7,1280(sp)
 10015e8:	2007d7fa 	srai	r3,r4,31
 10015ec:	d9c14017 	ldw	r7,1280(sp)
 10015f0:	11000015 	stw	r4,0(r2)
 10015f4:	10c00115 	stw	r3,4(r2)
 10015f8:	003c6906 	br	10007a0 <___vfprintf_internal_r+0x170>
 10015fc:	b8c00007 	ldb	r3,0(r23)
 1001600:	00801b04 	movi	r2,108
 1001604:	18825526 	beq	r3,r2,1001f5c <___vfprintf_internal_r+0x192c>
 1001608:	d9414c17 	ldw	r5,1328(sp)
 100160c:	29400414 	ori	r5,r5,16
 1001610:	d9414c15 	stw	r5,1328(sp)
 1001614:	003c8506 	br	100082c <___vfprintf_internal_r+0x1fc>
 1001618:	d9814c17 	ldw	r6,1328(sp)
 100161c:	b8c00007 	ldb	r3,0(r23)
 1001620:	31800814 	ori	r6,r6,32
 1001624:	d9814c15 	stw	r6,1328(sp)
 1001628:	003c8006 	br	100082c <___vfprintf_internal_r+0x1fc>
 100162c:	d8814c17 	ldw	r2,1328(sp)
 1001630:	3c000017 	ldw	r16,0(r7)
 1001634:	00c01e04 	movi	r3,120
 1001638:	10800094 	ori	r2,r2,2
 100163c:	d8814c15 	stw	r2,1328(sp)
 1001640:	39c00104 	addi	r7,r7,4
 1001644:	01404074 	movhi	r5,257
 1001648:	29753904 	addi	r5,r5,-11036
 100164c:	00800c04 	movi	r2,48
 1001650:	0023883a 	mov	r17,zero
 1001654:	01000084 	movi	r4,2
 1001658:	d9c14015 	stw	r7,1280(sp)
 100165c:	d8c14d15 	stw	r3,1332(sp)
 1001660:	d9414415 	stw	r5,1296(sp)
 1001664:	d8800445 	stb	r2,17(sp)
 1001668:	d8c00485 	stb	r3,18(sp)
 100166c:	d8000405 	stb	zero,16(sp)
 1001670:	003e7d06 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001674:	d8814c17 	ldw	r2,1328(sp)
 1001678:	b8c00007 	ldb	r3,0(r23)
 100167c:	10801014 	ori	r2,r2,64
 1001680:	d8814c15 	stw	r2,1328(sp)
 1001684:	003c6906 	br	100082c <___vfprintf_internal_r+0x1fc>
 1001688:	d9414c17 	ldw	r5,1328(sp)
 100168c:	2880020c 	andi	r2,r5,8
 1001690:	1001e526 	beq	r2,zero,1001e28 <___vfprintf_internal_r+0x17f8>
 1001694:	39800017 	ldw	r6,0(r7)
 1001698:	38800204 	addi	r2,r7,8
 100169c:	d8814015 	stw	r2,1280(sp)
 10016a0:	d9814215 	stw	r6,1288(sp)
 10016a4:	39c00117 	ldw	r7,4(r7)
 10016a8:	d9c14315 	stw	r7,1292(sp)
 10016ac:	d9014217 	ldw	r4,1288(sp)
 10016b0:	d9414317 	ldw	r5,1292(sp)
 10016b4:	10070e00 	call	10070e0 <__isinfd>
 10016b8:	10021d26 	beq	r2,zero,1001f30 <___vfprintf_internal_r+0x1900>
 10016bc:	d9014217 	ldw	r4,1288(sp)
 10016c0:	d9414317 	ldw	r5,1292(sp)
 10016c4:	000d883a 	mov	r6,zero
 10016c8:	000f883a 	mov	r7,zero
 10016cc:	10092f00 	call	10092f0 <__ltdf2>
 10016d0:	1002d016 	blt	r2,zero,1002214 <___vfprintf_internal_r+0x1be4>
 10016d4:	d9414d17 	ldw	r5,1332(sp)
 10016d8:	008011c4 	movi	r2,71
 10016dc:	11421016 	blt	r2,r5,1001f20 <___vfprintf_internal_r+0x18f0>
 10016e0:	01804074 	movhi	r6,257
 10016e4:	31b53e04 	addi	r6,r6,-11016
 10016e8:	d9814115 	stw	r6,1284(sp)
 10016ec:	d9014c17 	ldw	r4,1328(sp)
 10016f0:	00c000c4 	movi	r3,3
 10016f4:	00bfdfc4 	movi	r2,-129
 10016f8:	2088703a 	and	r4,r4,r2
 10016fc:	180f883a 	mov	r7,r3
 1001700:	d8c14515 	stw	r3,1300(sp)
 1001704:	d9014c15 	stw	r4,1328(sp)
 1001708:	d8014615 	stw	zero,1304(sp)
 100170c:	003e6a06 	br	10010b8 <___vfprintf_internal_r+0xa88>
 1001710:	38800017 	ldw	r2,0(r7)
 1001714:	00c00044 	movi	r3,1
 1001718:	39c00104 	addi	r7,r7,4
 100171c:	d9c14015 	stw	r7,1280(sp)
 1001720:	d9000f04 	addi	r4,sp,60
 1001724:	180f883a 	mov	r7,r3
 1001728:	d8c14515 	stw	r3,1300(sp)
 100172c:	d9014115 	stw	r4,1284(sp)
 1001730:	d8800f05 	stb	r2,60(sp)
 1001734:	d8000405 	stb	zero,16(sp)
 1001738:	003cac06 	br	10009ec <___vfprintf_internal_r+0x3bc>
 100173c:	01404074 	movhi	r5,257
 1001740:	29754404 	addi	r5,r5,-10992
 1001744:	d9414415 	stw	r5,1296(sp)
 1001748:	d9814c17 	ldw	r6,1328(sp)
 100174c:	3080080c 	andi	r2,r6,32
 1001750:	1000ff26 	beq	r2,zero,1001b50 <___vfprintf_internal_r+0x1520>
 1001754:	3c000017 	ldw	r16,0(r7)
 1001758:	3c400117 	ldw	r17,4(r7)
 100175c:	38800204 	addi	r2,r7,8
 1001760:	d8814015 	stw	r2,1280(sp)
 1001764:	d9414c17 	ldw	r5,1328(sp)
 1001768:	2880004c 	andi	r2,r5,1
 100176c:	1005003a 	cmpeq	r2,r2,zero
 1001770:	1000b91e 	bne	r2,zero,1001a58 <___vfprintf_internal_r+0x1428>
 1001774:	8444b03a 	or	r2,r16,r17
 1001778:	1000b726 	beq	r2,zero,1001a58 <___vfprintf_internal_r+0x1428>
 100177c:	d9814d17 	ldw	r6,1332(sp)
 1001780:	29400094 	ori	r5,r5,2
 1001784:	00800c04 	movi	r2,48
 1001788:	01000084 	movi	r4,2
 100178c:	d9414c15 	stw	r5,1328(sp)
 1001790:	d8800445 	stb	r2,17(sp)
 1001794:	d9800485 	stb	r6,18(sp)
 1001798:	d8000405 	stb	zero,16(sp)
 100179c:	003e3206 	br	1001068 <___vfprintf_internal_r+0xa38>
 10017a0:	01804074 	movhi	r6,257
 10017a4:	31b53904 	addi	r6,r6,-11036
 10017a8:	d9814415 	stw	r6,1296(sp)
 10017ac:	003fe606 	br	1001748 <___vfprintf_internal_r+0x1118>
 10017b0:	00800ac4 	movi	r2,43
 10017b4:	d8800405 	stb	r2,16(sp)
 10017b8:	b8c00007 	ldb	r3,0(r23)
 10017bc:	003c1b06 	br	100082c <___vfprintf_internal_r+0x1fc>
 10017c0:	d8814c17 	ldw	r2,1328(sp)
 10017c4:	b8c00007 	ldb	r3,0(r23)
 10017c8:	10800054 	ori	r2,r2,1
 10017cc:	d8814c15 	stw	r2,1328(sp)
 10017d0:	003c1606 	br	100082c <___vfprintf_internal_r+0x1fc>
 10017d4:	d8800407 	ldb	r2,16(sp)
 10017d8:	10004c1e 	bne	r2,zero,100190c <___vfprintf_internal_r+0x12dc>
 10017dc:	00800804 	movi	r2,32
 10017e0:	d8800405 	stb	r2,16(sp)
 10017e4:	b8c00007 	ldb	r3,0(r23)
 10017e8:	003c1006 	br	100082c <___vfprintf_internal_r+0x1fc>
 10017ec:	d9814c17 	ldw	r6,1328(sp)
 10017f0:	b8c00007 	ldb	r3,0(r23)
 10017f4:	31800214 	ori	r6,r6,8
 10017f8:	d9814c15 	stw	r6,1328(sp)
 10017fc:	003c0b06 	br	100082c <___vfprintf_internal_r+0x1fc>
 1001800:	0009883a 	mov	r4,zero
 1001804:	04000244 	movi	r16,9
 1001808:	01400284 	movi	r5,10
 100180c:	d9c15115 	stw	r7,1348(sp)
 1001810:	10098280 	call	1009828 <__mulsi3>
 1001814:	b9000007 	ldb	r4,0(r23)
 1001818:	d8c14d17 	ldw	r3,1332(sp)
 100181c:	bdc00044 	addi	r23,r23,1
 1001820:	d9014d15 	stw	r4,1332(sp)
 1001824:	d9414d17 	ldw	r5,1332(sp)
 1001828:	1885883a 	add	r2,r3,r2
 100182c:	113ff404 	addi	r4,r2,-48
 1001830:	28bff404 	addi	r2,r5,-48
 1001834:	d9c15117 	ldw	r7,1348(sp)
 1001838:	80bff32e 	bgeu	r16,r2,1001808 <___vfprintf_internal_r+0x11d8>
 100183c:	d9014a15 	stw	r4,1320(sp)
 1001840:	003bfc06 	br	1000834 <___vfprintf_internal_r+0x204>
 1001844:	d8814c17 	ldw	r2,1328(sp)
 1001848:	b8c00007 	ldb	r3,0(r23)
 100184c:	10802014 	ori	r2,r2,128
 1001850:	d8814c15 	stw	r2,1328(sp)
 1001854:	003bf506 	br	100082c <___vfprintf_internal_r+0x1fc>
 1001858:	b8c00007 	ldb	r3,0(r23)
 100185c:	00800a84 	movi	r2,42
 1001860:	bdc00044 	addi	r23,r23,1
 1001864:	18831826 	beq	r3,r2,10024c8 <___vfprintf_internal_r+0x1e98>
 1001868:	d8c14d15 	stw	r3,1332(sp)
 100186c:	18bff404 	addi	r2,r3,-48
 1001870:	00c00244 	movi	r3,9
 1001874:	18827b36 	bltu	r3,r2,1002264 <___vfprintf_internal_r+0x1c34>
 1001878:	1821883a 	mov	r16,r3
 100187c:	0009883a 	mov	r4,zero
 1001880:	01400284 	movi	r5,10
 1001884:	d9c15115 	stw	r7,1348(sp)
 1001888:	10098280 	call	1009828 <__mulsi3>
 100188c:	d9414d17 	ldw	r5,1332(sp)
 1001890:	b9800007 	ldb	r6,0(r23)
 1001894:	d9c15117 	ldw	r7,1348(sp)
 1001898:	1145883a 	add	r2,r2,r5
 100189c:	113ff404 	addi	r4,r2,-48
 10018a0:	30bff404 	addi	r2,r6,-48
 10018a4:	d9814d15 	stw	r6,1332(sp)
 10018a8:	bdc00044 	addi	r23,r23,1
 10018ac:	80bff42e 	bgeu	r16,r2,1001880 <___vfprintf_internal_r+0x1250>
 10018b0:	2027883a 	mov	r19,r4
 10018b4:	203bdf0e 	bge	r4,zero,1000834 <___vfprintf_internal_r+0x204>
 10018b8:	04ffffc4 	movi	r19,-1
 10018bc:	003bdd06 	br	1000834 <___vfprintf_internal_r+0x204>
 10018c0:	d8000405 	stb	zero,16(sp)
 10018c4:	39800017 	ldw	r6,0(r7)
 10018c8:	39c00104 	addi	r7,r7,4
 10018cc:	d9c14015 	stw	r7,1280(sp)
 10018d0:	d9814115 	stw	r6,1284(sp)
 10018d4:	3001c926 	beq	r6,zero,1001ffc <___vfprintf_internal_r+0x19cc>
 10018d8:	98000e16 	blt	r19,zero,1001914 <___vfprintf_internal_r+0x12e4>
 10018dc:	d9014117 	ldw	r4,1284(sp)
 10018e0:	000b883a 	mov	r5,zero
 10018e4:	980d883a 	mov	r6,r19
 10018e8:	10057640 	call	1005764 <memchr>
 10018ec:	10025926 	beq	r2,zero,1002254 <___vfprintf_internal_r+0x1c24>
 10018f0:	d8c14117 	ldw	r3,1284(sp)
 10018f4:	10cfc83a 	sub	r7,r2,r3
 10018f8:	99c19e16 	blt	r19,r7,1001f74 <___vfprintf_internal_r+0x1944>
 10018fc:	d9c14515 	stw	r7,1300(sp)
 1001900:	38000916 	blt	r7,zero,1001928 <___vfprintf_internal_r+0x12f8>
 1001904:	d8014615 	stw	zero,1304(sp)
 1001908:	003deb06 	br	10010b8 <___vfprintf_internal_r+0xa88>
 100190c:	b8c00007 	ldb	r3,0(r23)
 1001910:	003bc606 	br	100082c <___vfprintf_internal_r+0x1fc>
 1001914:	d9014117 	ldw	r4,1284(sp)
 1001918:	10073c80 	call	10073c8 <strlen>
 100191c:	d8814515 	stw	r2,1300(sp)
 1001920:	100f883a 	mov	r7,r2
 1001924:	103ff70e 	bge	r2,zero,1001904 <___vfprintf_internal_r+0x12d4>
 1001928:	d8014515 	stw	zero,1300(sp)
 100192c:	d8014615 	stw	zero,1304(sp)
 1001930:	003de106 	br	10010b8 <___vfprintf_internal_r+0xa88>
 1001934:	20c03fcc 	andi	r3,r4,255
 1001938:	00800044 	movi	r2,1
 100193c:	18802d26 	beq	r3,r2,10019f4 <___vfprintf_internal_r+0x13c4>
 1001940:	18800e36 	bltu	r3,r2,100197c <___vfprintf_internal_r+0x134c>
 1001944:	00800084 	movi	r2,2
 1001948:	1880fa26 	beq	r3,r2,1001d34 <___vfprintf_internal_r+0x1704>
 100194c:	01004074 	movhi	r4,257
 1001950:	21354904 	addi	r4,r4,-10972
 1001954:	10073c80 	call	10073c8 <strlen>
 1001958:	100f883a 	mov	r7,r2
 100195c:	dcc14515 	stw	r19,1300(sp)
 1001960:	9880010e 	bge	r19,r2,1001968 <___vfprintf_internal_r+0x1338>
 1001964:	d8814515 	stw	r2,1300(sp)
 1001968:	00804074 	movhi	r2,257
 100196c:	10b54904 	addi	r2,r2,-10972
 1001970:	dcc14615 	stw	r19,1304(sp)
 1001974:	d8814115 	stw	r2,1284(sp)
 1001978:	003dcf06 	br	10010b8 <___vfprintf_internal_r+0xa88>
 100197c:	d9401904 	addi	r5,sp,100
 1001980:	dd000f04 	addi	r20,sp,60
 1001984:	d9414115 	stw	r5,1284(sp)
 1001988:	880a977a 	slli	r5,r17,29
 100198c:	d9814117 	ldw	r6,1284(sp)
 1001990:	8004d0fa 	srli	r2,r16,3
 1001994:	8806d0fa 	srli	r3,r17,3
 1001998:	810001cc 	andi	r4,r16,7
 100199c:	2884b03a 	or	r2,r5,r2
 10019a0:	31bfffc4 	addi	r6,r6,-1
 10019a4:	21000c04 	addi	r4,r4,48
 10019a8:	d9814115 	stw	r6,1284(sp)
 10019ac:	10cab03a 	or	r5,r2,r3
 10019b0:	31000005 	stb	r4,0(r6)
 10019b4:	1021883a 	mov	r16,r2
 10019b8:	1823883a 	mov	r17,r3
 10019bc:	283ff21e 	bne	r5,zero,1001988 <___vfprintf_internal_r+0x1358>
 10019c0:	d8c14c17 	ldw	r3,1328(sp)
 10019c4:	1880004c 	andi	r2,r3,1
 10019c8:	1005003a 	cmpeq	r2,r2,zero
 10019cc:	103db31e 	bne	r2,zero,100109c <___vfprintf_internal_r+0xa6c>
 10019d0:	20803fcc 	andi	r2,r4,255
 10019d4:	1080201c 	xori	r2,r2,128
 10019d8:	10bfe004 	addi	r2,r2,-128
 10019dc:	00c00c04 	movi	r3,48
 10019e0:	10fdae26 	beq	r2,r3,100109c <___vfprintf_internal_r+0xa6c>
 10019e4:	31bfffc4 	addi	r6,r6,-1
 10019e8:	d9814115 	stw	r6,1284(sp)
 10019ec:	30c00005 	stb	r3,0(r6)
 10019f0:	003daa06 	br	100109c <___vfprintf_internal_r+0xa6c>
 10019f4:	88800068 	cmpgeui	r2,r17,1
 10019f8:	10002c1e 	bne	r2,zero,1001aac <___vfprintf_internal_r+0x147c>
 10019fc:	8800021e 	bne	r17,zero,1001a08 <___vfprintf_internal_r+0x13d8>
 1001a00:	00800244 	movi	r2,9
 1001a04:	14002936 	bltu	r2,r16,1001aac <___vfprintf_internal_r+0x147c>
 1001a08:	d90018c4 	addi	r4,sp,99
 1001a0c:	dd000f04 	addi	r20,sp,60
 1001a10:	d9014115 	stw	r4,1284(sp)
 1001a14:	d9014117 	ldw	r4,1284(sp)
 1001a18:	80800c04 	addi	r2,r16,48
 1001a1c:	20800005 	stb	r2,0(r4)
 1001a20:	003d9e06 	br	100109c <___vfprintf_internal_r+0xa6c>
 1001a24:	dc400d17 	ldw	r17,52(sp)
 1001a28:	07004074 	movhi	fp,257
 1001a2c:	e7355084 	addi	fp,fp,-10942
 1001a30:	9425883a 	add	r18,r18,r16
 1001a34:	8c400044 	addi	r17,r17,1
 1001a38:	008001c4 	movi	r2,7
 1001a3c:	1f000015 	stw	fp,0(r3)
 1001a40:	1c000115 	stw	r16,4(r3)
 1001a44:	dc800e15 	stw	r18,56(sp)
 1001a48:	dc400d15 	stw	r17,52(sp)
 1001a4c:	147ddc16 	blt	r2,r17,10011c0 <___vfprintf_internal_r+0xb90>
 1001a50:	18c00204 	addi	r3,r3,8
 1001a54:	003c7406 	br	1000c28 <___vfprintf_internal_r+0x5f8>
 1001a58:	01000084 	movi	r4,2
 1001a5c:	d8000405 	stb	zero,16(sp)
 1001a60:	003d8106 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001a64:	d9814c17 	ldw	r6,1328(sp)
 1001a68:	30c4703a 	and	r2,r6,r3
 1001a6c:	1005003a 	cmpeq	r2,r2,zero
 1001a70:	103cb326 	beq	r2,zero,1000d40 <___vfprintf_internal_r+0x710>
 1001a74:	d9014117 	ldw	r4,1284(sp)
 1001a78:	94800044 	addi	r18,r18,1
 1001a7c:	8c400044 	addi	r17,r17,1
 1001a80:	008001c4 	movi	r2,7
 1001a84:	a9000015 	stw	r4,0(r21)
 1001a88:	a8c00115 	stw	r3,4(r21)
 1001a8c:	dc800e15 	stw	r18,56(sp)
 1001a90:	dc400d15 	stw	r17,52(sp)
 1001a94:	147e6016 	blt	r2,r17,1001418 <___vfprintf_internal_r+0xde8>
 1001a98:	acc00204 	addi	r19,r21,8
 1001a9c:	003cd106 	br	1000de4 <___vfprintf_internal_r+0x7b4>
 1001aa0:	07004074 	movhi	fp,257
 1001aa4:	e7355084 	addi	fp,fp,-10942
 1001aa8:	003c4906 	br	1000bd0 <___vfprintf_internal_r+0x5a0>
 1001aac:	dd000f04 	addi	r20,sp,60
 1001ab0:	dc801904 	addi	r18,sp,100
 1001ab4:	8009883a 	mov	r4,r16
 1001ab8:	880b883a 	mov	r5,r17
 1001abc:	01800284 	movi	r6,10
 1001ac0:	000f883a 	mov	r7,zero
 1001ac4:	1007f500 	call	1007f50 <__umoddi3>
 1001ac8:	12000c04 	addi	r8,r2,48
 1001acc:	94bfffc4 	addi	r18,r18,-1
 1001ad0:	8009883a 	mov	r4,r16
 1001ad4:	880b883a 	mov	r5,r17
 1001ad8:	01800284 	movi	r6,10
 1001adc:	000f883a 	mov	r7,zero
 1001ae0:	92000005 	stb	r8,0(r18)
 1001ae4:	10078e40 	call	10078e4 <__udivdi3>
 1001ae8:	1009883a 	mov	r4,r2
 1001aec:	1021883a 	mov	r16,r2
 1001af0:	18800068 	cmpgeui	r2,r3,1
 1001af4:	1823883a 	mov	r17,r3
 1001af8:	103fee1e 	bne	r2,zero,1001ab4 <___vfprintf_internal_r+0x1484>
 1001afc:	1800021e 	bne	r3,zero,1001b08 <___vfprintf_internal_r+0x14d8>
 1001b00:	00800244 	movi	r2,9
 1001b04:	113feb36 	bltu	r2,r4,1001ab4 <___vfprintf_internal_r+0x1484>
 1001b08:	94bfffc4 	addi	r18,r18,-1
 1001b0c:	dc814115 	stw	r18,1284(sp)
 1001b10:	003fc006 	br	1001a14 <___vfprintf_internal_r+0x13e4>
 1001b14:	d9014c17 	ldw	r4,1328(sp)
 1001b18:	2080004c 	andi	r2,r4,1
 1001b1c:	10009a1e 	bne	r2,zero,1001d88 <___vfprintf_internal_r+0x1758>
 1001b20:	d9401904 	addi	r5,sp,100
 1001b24:	dd000f04 	addi	r20,sp,60
 1001b28:	d9414115 	stw	r5,1284(sp)
 1001b2c:	003d5b06 	br	100109c <___vfprintf_internal_r+0xa6c>
 1001b30:	d9014f17 	ldw	r4,1340(sp)
 1001b34:	b00b883a 	mov	r5,r22
 1001b38:	d9800c04 	addi	r6,sp,48
 1001b3c:	10005d80 	call	10005d8 <__sprint_r>
 1001b40:	103c731e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001b44:	dc800e17 	ldw	r18,56(sp)
 1001b48:	d8c01904 	addi	r3,sp,100
 1001b4c:	003cf906 	br	1000f34 <___vfprintf_internal_r+0x904>
 1001b50:	d8c14c17 	ldw	r3,1328(sp)
 1001b54:	1880040c 	andi	r2,r3,16
 1001b58:	1000711e 	bne	r2,zero,1001d20 <___vfprintf_internal_r+0x16f0>
 1001b5c:	d9014c17 	ldw	r4,1328(sp)
 1001b60:	2080100c 	andi	r2,r4,64
 1001b64:	10006e26 	beq	r2,zero,1001d20 <___vfprintf_internal_r+0x16f0>
 1001b68:	3c00000b 	ldhu	r16,0(r7)
 1001b6c:	0023883a 	mov	r17,zero
 1001b70:	39c00104 	addi	r7,r7,4
 1001b74:	d9c14015 	stw	r7,1280(sp)
 1001b78:	003efa06 	br	1001764 <___vfprintf_internal_r+0x1134>
 1001b7c:	dc400d17 	ldw	r17,52(sp)
 1001b80:	07004074 	movhi	fp,257
 1001b84:	e7355084 	addi	fp,fp,-10942
 1001b88:	9425883a 	add	r18,r18,r16
 1001b8c:	8c400044 	addi	r17,r17,1
 1001b90:	008001c4 	movi	r2,7
 1001b94:	1f000015 	stw	fp,0(r3)
 1001b98:	1c000115 	stw	r16,4(r3)
 1001b9c:	dc800e15 	stw	r18,56(sp)
 1001ba0:	dc400d15 	stw	r17,52(sp)
 1001ba4:	147d7016 	blt	r2,r17,1001168 <___vfprintf_internal_r+0xb38>
 1001ba8:	18c00204 	addi	r3,r3,8
 1001bac:	003d7506 	br	1001184 <___vfprintf_internal_r+0xb54>
 1001bb0:	dc800e17 	ldw	r18,56(sp)
 1001bb4:	dc400d17 	ldw	r17,52(sp)
 1001bb8:	07004074 	movhi	fp,257
 1001bbc:	e7355484 	addi	fp,fp,-10926
 1001bc0:	003bba06 	br	1000aac <___vfprintf_internal_r+0x47c>
 1001bc4:	d9014f17 	ldw	r4,1340(sp)
 1001bc8:	b00b883a 	mov	r5,r22
 1001bcc:	d9800c04 	addi	r6,sp,48
 1001bd0:	10005d80 	call	10005d8 <__sprint_r>
 1001bd4:	103c4e1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001bd8:	dc800e17 	ldw	r18,56(sp)
 1001bdc:	d8c01904 	addi	r3,sp,100
 1001be0:	003ce306 	br	1000f70 <___vfprintf_internal_r+0x940>
 1001be4:	3c000017 	ldw	r16,0(r7)
 1001be8:	0009883a 	mov	r4,zero
 1001bec:	39c00104 	addi	r7,r7,4
 1001bf0:	0023883a 	mov	r17,zero
 1001bf4:	d9c14015 	stw	r7,1280(sp)
 1001bf8:	d8000405 	stb	zero,16(sp)
 1001bfc:	003d1a06 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001c00:	38800017 	ldw	r2,0(r7)
 1001c04:	39c00104 	addi	r7,r7,4
 1001c08:	d9c14015 	stw	r7,1280(sp)
 1001c0c:	1023d7fa 	srai	r17,r2,31
 1001c10:	1021883a 	mov	r16,r2
 1001c14:	003d1206 	br	1001060 <___vfprintf_internal_r+0xa30>
 1001c18:	3c000017 	ldw	r16,0(r7)
 1001c1c:	01000044 	movi	r4,1
 1001c20:	39c00104 	addi	r7,r7,4
 1001c24:	0023883a 	mov	r17,zero
 1001c28:	d9c14015 	stw	r7,1280(sp)
 1001c2c:	d8000405 	stb	zero,16(sp)
 1001c30:	003d0d06 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001c34:	00804074 	movhi	r2,257
 1001c38:	10b55004 	addi	r2,r2,-10944
 1001c3c:	94800044 	addi	r18,r18,1
 1001c40:	8c400044 	addi	r17,r17,1
 1001c44:	a8800015 	stw	r2,0(r21)
 1001c48:	00c00044 	movi	r3,1
 1001c4c:	008001c4 	movi	r2,7
 1001c50:	a8c00115 	stw	r3,4(r21)
 1001c54:	dc800e15 	stw	r18,56(sp)
 1001c58:	dc400d15 	stw	r17,52(sp)
 1001c5c:	1440ca16 	blt	r2,r17,1001f88 <___vfprintf_internal_r+0x1958>
 1001c60:	a8c00204 	addi	r3,r21,8
 1001c64:	2000061e 	bne	r4,zero,1001c80 <___vfprintf_internal_r+0x1650>
 1001c68:	d9414717 	ldw	r5,1308(sp)
 1001c6c:	2800041e 	bne	r5,zero,1001c80 <___vfprintf_internal_r+0x1650>
 1001c70:	d9814c17 	ldw	r6,1328(sp)
 1001c74:	3080004c 	andi	r2,r6,1
 1001c78:	1005003a 	cmpeq	r2,r2,zero
 1001c7c:	103bea1e 	bne	r2,zero,1000c28 <___vfprintf_internal_r+0x5f8>
 1001c80:	00800044 	movi	r2,1
 1001c84:	dc400d17 	ldw	r17,52(sp)
 1001c88:	18800115 	stw	r2,4(r3)
 1001c8c:	d8814917 	ldw	r2,1316(sp)
 1001c90:	94800044 	addi	r18,r18,1
 1001c94:	8c400044 	addi	r17,r17,1
 1001c98:	18800015 	stw	r2,0(r3)
 1001c9c:	008001c4 	movi	r2,7
 1001ca0:	dc800e15 	stw	r18,56(sp)
 1001ca4:	dc400d15 	stw	r17,52(sp)
 1001ca8:	1440ca16 	blt	r2,r17,1001fd4 <___vfprintf_internal_r+0x19a4>
 1001cac:	18c00204 	addi	r3,r3,8
 1001cb0:	0121c83a 	sub	r16,zero,r4
 1001cb4:	0400500e 	bge	zero,r16,1001df8 <___vfprintf_internal_r+0x17c8>
 1001cb8:	00800404 	movi	r2,16
 1001cbc:	1400800e 	bge	r2,r16,1001ec0 <___vfprintf_internal_r+0x1890>
 1001cc0:	1027883a 	mov	r19,r2
 1001cc4:	07004074 	movhi	fp,257
 1001cc8:	e7355084 	addi	fp,fp,-10942
 1001ccc:	050001c4 	movi	r20,7
 1001cd0:	00000306 	br	1001ce0 <___vfprintf_internal_r+0x16b0>
 1001cd4:	18c00204 	addi	r3,r3,8
 1001cd8:	843ffc04 	addi	r16,r16,-16
 1001cdc:	9c007a0e 	bge	r19,r16,1001ec8 <___vfprintf_internal_r+0x1898>
 1001ce0:	94800404 	addi	r18,r18,16
 1001ce4:	8c400044 	addi	r17,r17,1
 1001ce8:	1f000015 	stw	fp,0(r3)
 1001cec:	1cc00115 	stw	r19,4(r3)
 1001cf0:	dc800e15 	stw	r18,56(sp)
 1001cf4:	dc400d15 	stw	r17,52(sp)
 1001cf8:	a47ff60e 	bge	r20,r17,1001cd4 <___vfprintf_internal_r+0x16a4>
 1001cfc:	d9014f17 	ldw	r4,1340(sp)
 1001d00:	b00b883a 	mov	r5,r22
 1001d04:	d9800c04 	addi	r6,sp,48
 1001d08:	10005d80 	call	10005d8 <__sprint_r>
 1001d0c:	103c001e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001d10:	dc800e17 	ldw	r18,56(sp)
 1001d14:	dc400d17 	ldw	r17,52(sp)
 1001d18:	d8c01904 	addi	r3,sp,100
 1001d1c:	003fee06 	br	1001cd8 <___vfprintf_internal_r+0x16a8>
 1001d20:	3c000017 	ldw	r16,0(r7)
 1001d24:	0023883a 	mov	r17,zero
 1001d28:	39c00104 	addi	r7,r7,4
 1001d2c:	d9c14015 	stw	r7,1280(sp)
 1001d30:	003e8c06 	br	1001764 <___vfprintf_internal_r+0x1134>
 1001d34:	d9401904 	addi	r5,sp,100
 1001d38:	dd000f04 	addi	r20,sp,60
 1001d3c:	d9414115 	stw	r5,1284(sp)
 1001d40:	d9814417 	ldw	r6,1296(sp)
 1001d44:	880a973a 	slli	r5,r17,28
 1001d48:	8004d13a 	srli	r2,r16,4
 1001d4c:	810003cc 	andi	r4,r16,15
 1001d50:	3109883a 	add	r4,r6,r4
 1001d54:	2884b03a 	or	r2,r5,r2
 1001d58:	21400003 	ldbu	r5,0(r4)
 1001d5c:	d9014117 	ldw	r4,1284(sp)
 1001d60:	8806d13a 	srli	r3,r17,4
 1001d64:	1021883a 	mov	r16,r2
 1001d68:	213fffc4 	addi	r4,r4,-1
 1001d6c:	d9014115 	stw	r4,1284(sp)
 1001d70:	d9814117 	ldw	r6,1284(sp)
 1001d74:	10c8b03a 	or	r4,r2,r3
 1001d78:	1823883a 	mov	r17,r3
 1001d7c:	31400005 	stb	r5,0(r6)
 1001d80:	203fef1e 	bne	r4,zero,1001d40 <___vfprintf_internal_r+0x1710>
 1001d84:	003cc506 	br	100109c <___vfprintf_internal_r+0xa6c>
 1001d88:	00800c04 	movi	r2,48
 1001d8c:	d98018c4 	addi	r6,sp,99
 1001d90:	dd000f04 	addi	r20,sp,60
 1001d94:	d88018c5 	stb	r2,99(sp)
 1001d98:	d9814115 	stw	r6,1284(sp)
 1001d9c:	003cbf06 	br	100109c <___vfprintf_internal_r+0xa6c>
 1001da0:	dc400d17 	ldw	r17,52(sp)
 1001da4:	07004074 	movhi	fp,257
 1001da8:	e7355484 	addi	fp,fp,-10926
 1001dac:	003bc106 	br	1000cb4 <___vfprintf_internal_r+0x684>
 1001db0:	d9414c17 	ldw	r5,1328(sp)
 1001db4:	2880040c 	andi	r2,r5,16
 1001db8:	10007c26 	beq	r2,zero,1001fac <___vfprintf_internal_r+0x197c>
 1001dbc:	38800017 	ldw	r2,0(r7)
 1001dc0:	39c00104 	addi	r7,r7,4
 1001dc4:	d9c14015 	stw	r7,1280(sp)
 1001dc8:	d9814b17 	ldw	r6,1324(sp)
 1001dcc:	d9c14017 	ldw	r7,1280(sp)
 1001dd0:	11800015 	stw	r6,0(r2)
 1001dd4:	003a7206 	br	10007a0 <___vfprintf_internal_r+0x170>
 1001dd8:	d9014f17 	ldw	r4,1340(sp)
 1001ddc:	b00b883a 	mov	r5,r22
 1001de0:	d9800c04 	addi	r6,sp,48
 1001de4:	10005d80 	call	10005d8 <__sprint_r>
 1001de8:	103bc91e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001dec:	dc800e17 	ldw	r18,56(sp)
 1001df0:	dc400d17 	ldw	r17,52(sp)
 1001df4:	d8c01904 	addi	r3,sp,100
 1001df8:	d9014717 	ldw	r4,1308(sp)
 1001dfc:	d9414117 	ldw	r5,1284(sp)
 1001e00:	8c400044 	addi	r17,r17,1
 1001e04:	9125883a 	add	r18,r18,r4
 1001e08:	008001c4 	movi	r2,7
 1001e0c:	19400015 	stw	r5,0(r3)
 1001e10:	19000115 	stw	r4,4(r3)
 1001e14:	dc800e15 	stw	r18,56(sp)
 1001e18:	dc400d15 	stw	r17,52(sp)
 1001e1c:	147ce816 	blt	r2,r17,10011c0 <___vfprintf_internal_r+0xb90>
 1001e20:	18c00204 	addi	r3,r3,8
 1001e24:	003b8006 	br	1000c28 <___vfprintf_internal_r+0x5f8>
 1001e28:	38c00017 	ldw	r3,0(r7)
 1001e2c:	39000204 	addi	r4,r7,8
 1001e30:	d9014015 	stw	r4,1280(sp)
 1001e34:	d8c14215 	stw	r3,1288(sp)
 1001e38:	39c00117 	ldw	r7,4(r7)
 1001e3c:	d9c14315 	stw	r7,1292(sp)
 1001e40:	003e1a06 	br	10016ac <___vfprintf_internal_r+0x107c>
 1001e44:	0005883a 	mov	r2,zero
 1001e48:	1409c83a 	sub	r4,r2,r16
 1001e4c:	1105803a 	cmpltu	r2,r2,r4
 1001e50:	044bc83a 	sub	r5,zero,r17
 1001e54:	2885c83a 	sub	r2,r5,r2
 1001e58:	2021883a 	mov	r16,r4
 1001e5c:	1023883a 	mov	r17,r2
 1001e60:	01000044 	movi	r4,1
 1001e64:	00800b44 	movi	r2,45
 1001e68:	d8800405 	stb	r2,16(sp)
 1001e6c:	003c7e06 	br	1001068 <___vfprintf_internal_r+0xa38>
 1001e70:	d9014f17 	ldw	r4,1340(sp)
 1001e74:	b00b883a 	mov	r5,r22
 1001e78:	d9800c04 	addi	r6,sp,48
 1001e7c:	10005d80 	call	10005d8 <__sprint_r>
 1001e80:	103ba31e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001e84:	dc800e17 	ldw	r18,56(sp)
 1001e88:	dc400d17 	ldw	r17,52(sp)
 1001e8c:	d9000517 	ldw	r4,20(sp)
 1001e90:	d9401904 	addi	r5,sp,100
 1001e94:	003da106 	br	100151c <___vfprintf_internal_r+0xeec>
 1001e98:	d9014f17 	ldw	r4,1340(sp)
 1001e9c:	b00b883a 	mov	r5,r22
 1001ea0:	d9800c04 	addi	r6,sp,48
 1001ea4:	10005d80 	call	10005d8 <__sprint_r>
 1001ea8:	103b991e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001eac:	dc800e17 	ldw	r18,56(sp)
 1001eb0:	dc400d17 	ldw	r17,52(sp)
 1001eb4:	d9000517 	ldw	r4,20(sp)
 1001eb8:	d8c01904 	addi	r3,sp,100
 1001ebc:	003d8b06 	br	10014ec <___vfprintf_internal_r+0xebc>
 1001ec0:	07004074 	movhi	fp,257
 1001ec4:	e7355084 	addi	fp,fp,-10942
 1001ec8:	9425883a 	add	r18,r18,r16
 1001ecc:	8c400044 	addi	r17,r17,1
 1001ed0:	008001c4 	movi	r2,7
 1001ed4:	1f000015 	stw	fp,0(r3)
 1001ed8:	1c000115 	stw	r16,4(r3)
 1001edc:	dc800e15 	stw	r18,56(sp)
 1001ee0:	dc400d15 	stw	r17,52(sp)
 1001ee4:	147fbc16 	blt	r2,r17,1001dd8 <___vfprintf_internal_r+0x17a8>
 1001ee8:	18c00204 	addi	r3,r3,8
 1001eec:	003fc206 	br	1001df8 <___vfprintf_internal_r+0x17c8>
 1001ef0:	d9014f17 	ldw	r4,1340(sp)
 1001ef4:	b00b883a 	mov	r5,r22
 1001ef8:	d9800c04 	addi	r6,sp,48
 1001efc:	10005d80 	call	10005d8 <__sprint_r>
 1001f00:	103b831e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001f04:	dc800e17 	ldw	r18,56(sp)
 1001f08:	d9000517 	ldw	r4,20(sp)
 1001f0c:	d8c01904 	addi	r3,sp,100
 1001f10:	003cfc06 	br	1001304 <___vfprintf_internal_r+0xcd4>
 1001f14:	07004074 	movhi	fp,257
 1001f18:	e7355084 	addi	fp,fp,-10942
 1001f1c:	003bde06 	br	1000e98 <___vfprintf_internal_r+0x868>
 1001f20:	00804074 	movhi	r2,257
 1001f24:	10b53f04 	addi	r2,r2,-11012
 1001f28:	d8814115 	stw	r2,1284(sp)
 1001f2c:	003def06 	br	10016ec <___vfprintf_internal_r+0x10bc>
 1001f30:	d9014217 	ldw	r4,1288(sp)
 1001f34:	d9414317 	ldw	r5,1292(sp)
 1001f38:	10071200 	call	1007120 <__isnand>
 1001f3c:	10003926 	beq	r2,zero,1002024 <___vfprintf_internal_r+0x19f4>
 1001f40:	d9414d17 	ldw	r5,1332(sp)
 1001f44:	008011c4 	movi	r2,71
 1001f48:	1140ce16 	blt	r2,r5,1002284 <___vfprintf_internal_r+0x1c54>
 1001f4c:	01804074 	movhi	r6,257
 1001f50:	31b54004 	addi	r6,r6,-11008
 1001f54:	d9814115 	stw	r6,1284(sp)
 1001f58:	003de406 	br	10016ec <___vfprintf_internal_r+0x10bc>
 1001f5c:	d9014c17 	ldw	r4,1328(sp)
 1001f60:	bdc00044 	addi	r23,r23,1
 1001f64:	b8c00007 	ldb	r3,0(r23)
 1001f68:	21000814 	ori	r4,r4,32
 1001f6c:	d9014c15 	stw	r4,1328(sp)
 1001f70:	003a2e06 	br	100082c <___vfprintf_internal_r+0x1fc>
 1001f74:	dcc14515 	stw	r19,1300(sp)
 1001f78:	98011016 	blt	r19,zero,10023bc <___vfprintf_internal_r+0x1d8c>
 1001f7c:	980f883a 	mov	r7,r19
 1001f80:	d8014615 	stw	zero,1304(sp)
 1001f84:	003c4c06 	br	10010b8 <___vfprintf_internal_r+0xa88>
 1001f88:	d9014f17 	ldw	r4,1340(sp)
 1001f8c:	b00b883a 	mov	r5,r22
 1001f90:	d9800c04 	addi	r6,sp,48
 1001f94:	10005d80 	call	10005d8 <__sprint_r>
 1001f98:	103b5d1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001f9c:	dc800e17 	ldw	r18,56(sp)
 1001fa0:	d9000517 	ldw	r4,20(sp)
 1001fa4:	d8c01904 	addi	r3,sp,100
 1001fa8:	003f2e06 	br	1001c64 <___vfprintf_internal_r+0x1634>
 1001fac:	d8c14c17 	ldw	r3,1328(sp)
 1001fb0:	1880100c 	andi	r2,r3,64
 1001fb4:	1000a026 	beq	r2,zero,1002238 <___vfprintf_internal_r+0x1c08>
 1001fb8:	38800017 	ldw	r2,0(r7)
 1001fbc:	39c00104 	addi	r7,r7,4
 1001fc0:	d9c14015 	stw	r7,1280(sp)
 1001fc4:	d9014b17 	ldw	r4,1324(sp)
 1001fc8:	d9c14017 	ldw	r7,1280(sp)
 1001fcc:	1100000d 	sth	r4,0(r2)
 1001fd0:	0039f306 	br	10007a0 <___vfprintf_internal_r+0x170>
 1001fd4:	d9014f17 	ldw	r4,1340(sp)
 1001fd8:	b00b883a 	mov	r5,r22
 1001fdc:	d9800c04 	addi	r6,sp,48
 1001fe0:	10005d80 	call	10005d8 <__sprint_r>
 1001fe4:	103b4a1e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1001fe8:	dc800e17 	ldw	r18,56(sp)
 1001fec:	dc400d17 	ldw	r17,52(sp)
 1001ff0:	d9000517 	ldw	r4,20(sp)
 1001ff4:	d8c01904 	addi	r3,sp,100
 1001ff8:	003f2d06 	br	1001cb0 <___vfprintf_internal_r+0x1680>
 1001ffc:	00800184 	movi	r2,6
 1002000:	14c09a36 	bltu	r2,r19,100226c <___vfprintf_internal_r+0x1c3c>
 1002004:	dcc14515 	stw	r19,1300(sp)
 1002008:	9800010e 	bge	r19,zero,1002010 <___vfprintf_internal_r+0x19e0>
 100200c:	d8014515 	stw	zero,1300(sp)
 1002010:	00804074 	movhi	r2,257
 1002014:	10b54204 	addi	r2,r2,-11000
 1002018:	980f883a 	mov	r7,r19
 100201c:	d8814115 	stw	r2,1284(sp)
 1002020:	003a7206 	br	10009ec <___vfprintf_internal_r+0x3bc>
 1002024:	00bfffc4 	movi	r2,-1
 1002028:	9880e226 	beq	r19,r2,10023b4 <___vfprintf_internal_r+0x1d84>
 100202c:	d9414d17 	ldw	r5,1332(sp)
 1002030:	008019c4 	movi	r2,103
 1002034:	2880dc26 	beq	r5,r2,10023a8 <___vfprintf_internal_r+0x1d78>
 1002038:	008011c4 	movi	r2,71
 100203c:	2880da26 	beq	r5,r2,10023a8 <___vfprintf_internal_r+0x1d78>
 1002040:	d9414c17 	ldw	r5,1328(sp)
 1002044:	d9014317 	ldw	r4,1292(sp)
 1002048:	d9814217 	ldw	r6,1288(sp)
 100204c:	29404014 	ori	r5,r5,256
 1002050:	d9414c15 	stw	r5,1328(sp)
 1002054:	2000cc16 	blt	r4,zero,1002388 <___vfprintf_internal_r+0x1d58>
 1002058:	3021883a 	mov	r16,r6
 100205c:	2023883a 	mov	r17,r4
 1002060:	0039883a 	mov	fp,zero
 1002064:	d9414d17 	ldw	r5,1332(sp)
 1002068:	00801984 	movi	r2,102
 100206c:	2880b726 	beq	r5,r2,100234c <___vfprintf_internal_r+0x1d1c>
 1002070:	00801184 	movi	r2,70
 1002074:	2880b526 	beq	r5,r2,100234c <___vfprintf_internal_r+0x1d1c>
 1002078:	00801944 	movi	r2,101
 100207c:	2880c826 	beq	r5,r2,10023a0 <___vfprintf_internal_r+0x1d70>
 1002080:	00801144 	movi	r2,69
 1002084:	2880c626 	beq	r5,r2,10023a0 <___vfprintf_internal_r+0x1d70>
 1002088:	9829883a 	mov	r20,r19
 100208c:	d9014f17 	ldw	r4,1340(sp)
 1002090:	d8800504 	addi	r2,sp,20
 1002094:	880d883a 	mov	r6,r17
 1002098:	d8800115 	stw	r2,4(sp)
 100209c:	d8c00604 	addi	r3,sp,24
 10020a0:	d8800704 	addi	r2,sp,28
 10020a4:	800b883a 	mov	r5,r16
 10020a8:	01c00084 	movi	r7,2
 10020ac:	d8c00215 	stw	r3,8(sp)
 10020b0:	d8800315 	stw	r2,12(sp)
 10020b4:	dd000015 	stw	r20,0(sp)
 10020b8:	10028980 	call	1002898 <_dtoa_r>
 10020bc:	d9814d17 	ldw	r6,1332(sp)
 10020c0:	d8814115 	stw	r2,1284(sp)
 10020c4:	008019c4 	movi	r2,103
 10020c8:	30809526 	beq	r6,r2,1002320 <___vfprintf_internal_r+0x1cf0>
 10020cc:	d8c14d17 	ldw	r3,1332(sp)
 10020d0:	008011c4 	movi	r2,71
 10020d4:	18809226 	beq	r3,r2,1002320 <___vfprintf_internal_r+0x1cf0>
 10020d8:	d9414117 	ldw	r5,1284(sp)
 10020dc:	d9814d17 	ldw	r6,1332(sp)
 10020e0:	00801984 	movi	r2,102
 10020e4:	2d25883a 	add	r18,r5,r20
 10020e8:	30808626 	beq	r6,r2,1002304 <___vfprintf_internal_r+0x1cd4>
 10020ec:	00801184 	movi	r2,70
 10020f0:	30808426 	beq	r6,r2,1002304 <___vfprintf_internal_r+0x1cd4>
 10020f4:	000d883a 	mov	r6,zero
 10020f8:	000f883a 	mov	r7,zero
 10020fc:	880b883a 	mov	r5,r17
 1002100:	8009883a 	mov	r4,r16
 1002104:	10090d00 	call	10090d0 <__eqdf2>
 1002108:	1000751e 	bne	r2,zero,10022e0 <___vfprintf_internal_r+0x1cb0>
 100210c:	9005883a 	mov	r2,r18
 1002110:	dc800715 	stw	r18,28(sp)
 1002114:	d9014117 	ldw	r4,1284(sp)
 1002118:	d9414d17 	ldw	r5,1332(sp)
 100211c:	00c019c4 	movi	r3,103
 1002120:	1125c83a 	sub	r18,r2,r4
 1002124:	28c06826 	beq	r5,r3,10022c8 <___vfprintf_internal_r+0x1c98>
 1002128:	008011c4 	movi	r2,71
 100212c:	28806626 	beq	r5,r2,10022c8 <___vfprintf_internal_r+0x1c98>
 1002130:	d9000517 	ldw	r4,20(sp)
 1002134:	d8c14d17 	ldw	r3,1332(sp)
 1002138:	00801944 	movi	r2,101
 100213c:	10c05516 	blt	r2,r3,1002294 <___vfprintf_internal_r+0x1c64>
 1002140:	213fffc4 	addi	r4,r4,-1
 1002144:	d9000515 	stw	r4,20(sp)
 1002148:	d8c00805 	stb	r3,32(sp)
 100214c:	2021883a 	mov	r16,r4
 1002150:	2000c116 	blt	r4,zero,1002458 <___vfprintf_internal_r+0x1e28>
 1002154:	00800ac4 	movi	r2,43
 1002158:	d8800845 	stb	r2,33(sp)
 100215c:	00800244 	movi	r2,9
 1002160:	1400af0e 	bge	r2,r16,1002420 <___vfprintf_internal_r+0x1df0>
 1002164:	1027883a 	mov	r19,r2
 1002168:	dc400b84 	addi	r17,sp,46
 100216c:	8009883a 	mov	r4,r16
 1002170:	01400284 	movi	r5,10
 1002174:	10097b80 	call	10097b8 <__modsi3>
 1002178:	10800c04 	addi	r2,r2,48
 100217c:	8c7fffc4 	addi	r17,r17,-1
 1002180:	8009883a 	mov	r4,r16
 1002184:	01400284 	movi	r5,10
 1002188:	88800005 	stb	r2,0(r17)
 100218c:	10097580 	call	1009758 <__divsi3>
 1002190:	1021883a 	mov	r16,r2
 1002194:	98bff516 	blt	r19,r2,100216c <___vfprintf_internal_r+0x1b3c>
 1002198:	10c00c04 	addi	r3,r2,48
 100219c:	d88009c4 	addi	r2,sp,39
 10021a0:	108001c4 	addi	r2,r2,7
 10021a4:	897fffc4 	addi	r5,r17,-1
 10021a8:	88ffffc5 	stb	r3,-1(r17)
 10021ac:	2880a72e 	bgeu	r5,r2,100244c <___vfprintf_internal_r+0x1e1c>
 10021b0:	1009883a 	mov	r4,r2
 10021b4:	d9800804 	addi	r6,sp,32
 10021b8:	d8c00884 	addi	r3,sp,34
 10021bc:	28800003 	ldbu	r2,0(r5)
 10021c0:	29400044 	addi	r5,r5,1
 10021c4:	18800005 	stb	r2,0(r3)
 10021c8:	18c00044 	addi	r3,r3,1
 10021cc:	293ffb36 	bltu	r5,r4,10021bc <___vfprintf_internal_r+0x1b8c>
 10021d0:	1987c83a 	sub	r3,r3,r6
 10021d4:	00800044 	movi	r2,1
 10021d8:	d8c14815 	stw	r3,1312(sp)
 10021dc:	90cf883a 	add	r7,r18,r3
 10021e0:	1480960e 	bge	r2,r18,100243c <___vfprintf_internal_r+0x1e0c>
 10021e4:	39c00044 	addi	r7,r7,1
 10021e8:	d9c14515 	stw	r7,1300(sp)
 10021ec:	38003416 	blt	r7,zero,10022c0 <___vfprintf_internal_r+0x1c90>
 10021f0:	e0803fcc 	andi	r2,fp,255
 10021f4:	1080201c 	xori	r2,r2,128
 10021f8:	10bfe004 	addi	r2,r2,-128
 10021fc:	10004e26 	beq	r2,zero,1002338 <___vfprintf_internal_r+0x1d08>
 1002200:	00800b44 	movi	r2,45
 1002204:	dc814715 	stw	r18,1308(sp)
 1002208:	d8014615 	stw	zero,1304(sp)
 100220c:	d8800405 	stb	r2,16(sp)
 1002210:	003bab06 	br	10010c0 <___vfprintf_internal_r+0xa90>
 1002214:	00800b44 	movi	r2,45
 1002218:	d8800405 	stb	r2,16(sp)
 100221c:	003d2d06 	br	10016d4 <___vfprintf_internal_r+0x10a4>
 1002220:	d9014f17 	ldw	r4,1340(sp)
 1002224:	b00b883a 	mov	r5,r22
 1002228:	d9800c04 	addi	r6,sp,48
 100222c:	10005d80 	call	10005d8 <__sprint_r>
 1002230:	103ab71e 	bne	r2,zero,1000d10 <___vfprintf_internal_r+0x6e0>
 1002234:	003ab506 	br	1000d0c <___vfprintf_internal_r+0x6dc>
 1002238:	38800017 	ldw	r2,0(r7)
 100223c:	39c00104 	addi	r7,r7,4
 1002240:	d9c14015 	stw	r7,1280(sp)
 1002244:	d9414b17 	ldw	r5,1324(sp)
 1002248:	d9c14017 	ldw	r7,1280(sp)
 100224c:	11400015 	stw	r5,0(r2)
 1002250:	00395306 	br	10007a0 <___vfprintf_internal_r+0x170>
 1002254:	980f883a 	mov	r7,r19
 1002258:	dcc14515 	stw	r19,1300(sp)
 100225c:	d8014615 	stw	zero,1304(sp)
 1002260:	003b9506 	br	10010b8 <___vfprintf_internal_r+0xa88>
 1002264:	0027883a 	mov	r19,zero
 1002268:	00397206 	br	1000834 <___vfprintf_internal_r+0x204>
 100226c:	00c04074 	movhi	r3,257
 1002270:	18f54204 	addi	r3,r3,-11000
 1002274:	100f883a 	mov	r7,r2
 1002278:	d8814515 	stw	r2,1300(sp)
 100227c:	d8c14115 	stw	r3,1284(sp)
 1002280:	0039da06 	br	10009ec <___vfprintf_internal_r+0x3bc>
 1002284:	00804074 	movhi	r2,257
 1002288:	10b54104 	addi	r2,r2,-11004
 100228c:	d8814115 	stw	r2,1284(sp)
 1002290:	003d1606 	br	10016ec <___vfprintf_internal_r+0x10bc>
 1002294:	d9414d17 	ldw	r5,1332(sp)
 1002298:	00801984 	movi	r2,102
 100229c:	28804926 	beq	r5,r2,10023c4 <___vfprintf_internal_r+0x1d94>
 10022a0:	200f883a 	mov	r7,r4
 10022a4:	24805716 	blt	r4,r18,1002404 <___vfprintf_internal_r+0x1dd4>
 10022a8:	d9414c17 	ldw	r5,1328(sp)
 10022ac:	2880004c 	andi	r2,r5,1
 10022b0:	10000126 	beq	r2,zero,10022b8 <___vfprintf_internal_r+0x1c88>
 10022b4:	21c00044 	addi	r7,r4,1
 10022b8:	d9c14515 	stw	r7,1300(sp)
 10022bc:	383fcc0e 	bge	r7,zero,10021f0 <___vfprintf_internal_r+0x1bc0>
 10022c0:	d8014515 	stw	zero,1300(sp)
 10022c4:	003fca06 	br	10021f0 <___vfprintf_internal_r+0x1bc0>
 10022c8:	d9000517 	ldw	r4,20(sp)
 10022cc:	00bfff04 	movi	r2,-4
 10022d0:	1100480e 	bge	r2,r4,10023f4 <___vfprintf_internal_r+0x1dc4>
 10022d4:	99004716 	blt	r19,r4,10023f4 <___vfprintf_internal_r+0x1dc4>
 10022d8:	d8c14d15 	stw	r3,1332(sp)
 10022dc:	003ff006 	br	10022a0 <___vfprintf_internal_r+0x1c70>
 10022e0:	d8800717 	ldw	r2,28(sp)
 10022e4:	14bf8b2e 	bgeu	r2,r18,1002114 <___vfprintf_internal_r+0x1ae4>
 10022e8:	9007883a 	mov	r3,r18
 10022ec:	01000c04 	movi	r4,48
 10022f0:	11000005 	stb	r4,0(r2)
 10022f4:	10800044 	addi	r2,r2,1
 10022f8:	d8800715 	stw	r2,28(sp)
 10022fc:	18bffc1e 	bne	r3,r2,10022f0 <___vfprintf_internal_r+0x1cc0>
 1002300:	003f8406 	br	1002114 <___vfprintf_internal_r+0x1ae4>
 1002304:	d8814117 	ldw	r2,1284(sp)
 1002308:	10c00007 	ldb	r3,0(r2)
 100230c:	00800c04 	movi	r2,48
 1002310:	18805b26 	beq	r3,r2,1002480 <___vfprintf_internal_r+0x1e50>
 1002314:	d9000517 	ldw	r4,20(sp)
 1002318:	9125883a 	add	r18,r18,r4
 100231c:	003f7506 	br	10020f4 <___vfprintf_internal_r+0x1ac4>
 1002320:	d9014c17 	ldw	r4,1328(sp)
 1002324:	2080004c 	andi	r2,r4,1
 1002328:	1005003a 	cmpeq	r2,r2,zero
 100232c:	103f6a26 	beq	r2,zero,10020d8 <___vfprintf_internal_r+0x1aa8>
 1002330:	d8800717 	ldw	r2,28(sp)
 1002334:	003f7706 	br	1002114 <___vfprintf_internal_r+0x1ae4>
 1002338:	d9c14515 	stw	r7,1300(sp)
 100233c:	38004d16 	blt	r7,zero,1002474 <___vfprintf_internal_r+0x1e44>
 1002340:	dc814715 	stw	r18,1308(sp)
 1002344:	d8014615 	stw	zero,1304(sp)
 1002348:	003b5b06 	br	10010b8 <___vfprintf_internal_r+0xa88>
 100234c:	d9014f17 	ldw	r4,1340(sp)
 1002350:	d8800504 	addi	r2,sp,20
 1002354:	d8800115 	stw	r2,4(sp)
 1002358:	d8c00604 	addi	r3,sp,24
 100235c:	d8800704 	addi	r2,sp,28
 1002360:	800b883a 	mov	r5,r16
 1002364:	880d883a 	mov	r6,r17
 1002368:	01c000c4 	movi	r7,3
 100236c:	d8c00215 	stw	r3,8(sp)
 1002370:	d8800315 	stw	r2,12(sp)
 1002374:	dcc00015 	stw	r19,0(sp)
 1002378:	9829883a 	mov	r20,r19
 100237c:	10028980 	call	1002898 <_dtoa_r>
 1002380:	d8814115 	stw	r2,1284(sp)
 1002384:	003f5106 	br	10020cc <___vfprintf_internal_r+0x1a9c>
 1002388:	d8c14217 	ldw	r3,1288(sp)
 100238c:	d9014317 	ldw	r4,1292(sp)
 1002390:	07000b44 	movi	fp,45
 1002394:	1821883a 	mov	r16,r3
 1002398:	2460003c 	xorhi	r17,r4,32768
 100239c:	003f3106 	br	1002064 <___vfprintf_internal_r+0x1a34>
 10023a0:	9d000044 	addi	r20,r19,1
 10023a4:	003f3906 	br	100208c <___vfprintf_internal_r+0x1a5c>
 10023a8:	983f251e 	bne	r19,zero,1002040 <___vfprintf_internal_r+0x1a10>
 10023ac:	04c00044 	movi	r19,1
 10023b0:	003f2306 	br	1002040 <___vfprintf_internal_r+0x1a10>
 10023b4:	04c00184 	movi	r19,6
 10023b8:	003f2106 	br	1002040 <___vfprintf_internal_r+0x1a10>
 10023bc:	d8014515 	stw	zero,1300(sp)
 10023c0:	003eee06 	br	1001f7c <___vfprintf_internal_r+0x194c>
 10023c4:	200f883a 	mov	r7,r4
 10023c8:	0100370e 	bge	zero,r4,10024a8 <___vfprintf_internal_r+0x1e78>
 10023cc:	9800031e 	bne	r19,zero,10023dc <___vfprintf_internal_r+0x1dac>
 10023d0:	d9814c17 	ldw	r6,1328(sp)
 10023d4:	3080004c 	andi	r2,r6,1
 10023d8:	103fb726 	beq	r2,zero,10022b8 <___vfprintf_internal_r+0x1c88>
 10023dc:	20800044 	addi	r2,r4,1
 10023e0:	98a7883a 	add	r19,r19,r2
 10023e4:	dcc14515 	stw	r19,1300(sp)
 10023e8:	980f883a 	mov	r7,r19
 10023ec:	983f800e 	bge	r19,zero,10021f0 <___vfprintf_internal_r+0x1bc0>
 10023f0:	003fb306 	br	10022c0 <___vfprintf_internal_r+0x1c90>
 10023f4:	d9814d17 	ldw	r6,1332(sp)
 10023f8:	31bfff84 	addi	r6,r6,-2
 10023fc:	d9814d15 	stw	r6,1332(sp)
 1002400:	003f4c06 	br	1002134 <___vfprintf_internal_r+0x1b04>
 1002404:	0100180e 	bge	zero,r4,1002468 <___vfprintf_internal_r+0x1e38>
 1002408:	00800044 	movi	r2,1
 100240c:	1485883a 	add	r2,r2,r18
 1002410:	d8814515 	stw	r2,1300(sp)
 1002414:	100f883a 	mov	r7,r2
 1002418:	103f750e 	bge	r2,zero,10021f0 <___vfprintf_internal_r+0x1bc0>
 100241c:	003fa806 	br	10022c0 <___vfprintf_internal_r+0x1c90>
 1002420:	80c00c04 	addi	r3,r16,48
 1002424:	00800c04 	movi	r2,48
 1002428:	d8c008c5 	stb	r3,35(sp)
 100242c:	d9800804 	addi	r6,sp,32
 1002430:	d8c00904 	addi	r3,sp,36
 1002434:	d8800885 	stb	r2,34(sp)
 1002438:	003f6506 	br	10021d0 <___vfprintf_internal_r+0x1ba0>
 100243c:	d9014c17 	ldw	r4,1328(sp)
 1002440:	2084703a 	and	r2,r4,r2
 1002444:	103f9c26 	beq	r2,zero,10022b8 <___vfprintf_internal_r+0x1c88>
 1002448:	003f6606 	br	10021e4 <___vfprintf_internal_r+0x1bb4>
 100244c:	d9800804 	addi	r6,sp,32
 1002450:	d8c00884 	addi	r3,sp,34
 1002454:	003f5e06 	br	10021d0 <___vfprintf_internal_r+0x1ba0>
 1002458:	00800b44 	movi	r2,45
 100245c:	0121c83a 	sub	r16,zero,r4
 1002460:	d8800845 	stb	r2,33(sp)
 1002464:	003f3d06 	br	100215c <___vfprintf_internal_r+0x1b2c>
 1002468:	00800084 	movi	r2,2
 100246c:	1105c83a 	sub	r2,r2,r4
 1002470:	003fe606 	br	100240c <___vfprintf_internal_r+0x1ddc>
 1002474:	d8014515 	stw	zero,1300(sp)
 1002478:	dc814715 	stw	r18,1308(sp)
 100247c:	003fb106 	br	1002344 <___vfprintf_internal_r+0x1d14>
 1002480:	000d883a 	mov	r6,zero
 1002484:	000f883a 	mov	r7,zero
 1002488:	8009883a 	mov	r4,r16
 100248c:	880b883a 	mov	r5,r17
 1002490:	10091580 	call	1009158 <__nedf2>
 1002494:	103f9f26 	beq	r2,zero,1002314 <___vfprintf_internal_r+0x1ce4>
 1002498:	00800044 	movi	r2,1
 100249c:	1509c83a 	sub	r4,r2,r20
 10024a0:	d9000515 	stw	r4,20(sp)
 10024a4:	003f9b06 	br	1002314 <___vfprintf_internal_r+0x1ce4>
 10024a8:	98000d1e 	bne	r19,zero,10024e0 <___vfprintf_internal_r+0x1eb0>
 10024ac:	d8c14c17 	ldw	r3,1328(sp)
 10024b0:	1880004c 	andi	r2,r3,1
 10024b4:	10000a1e 	bne	r2,zero,10024e0 <___vfprintf_internal_r+0x1eb0>
 10024b8:	01000044 	movi	r4,1
 10024bc:	200f883a 	mov	r7,r4
 10024c0:	d9014515 	stw	r4,1300(sp)
 10024c4:	003f4a06 	br	10021f0 <___vfprintf_internal_r+0x1bc0>
 10024c8:	3cc00017 	ldw	r19,0(r7)
 10024cc:	39c00104 	addi	r7,r7,4
 10024d0:	983d0e0e 	bge	r19,zero,100190c <___vfprintf_internal_r+0x12dc>
 10024d4:	b8c00007 	ldb	r3,0(r23)
 10024d8:	04ffffc4 	movi	r19,-1
 10024dc:	0038d306 	br	100082c <___vfprintf_internal_r+0x1fc>
 10024e0:	9cc00084 	addi	r19,r19,2
 10024e4:	dcc14515 	stw	r19,1300(sp)
 10024e8:	980f883a 	mov	r7,r19
 10024ec:	983f400e 	bge	r19,zero,10021f0 <___vfprintf_internal_r+0x1bc0>
 10024f0:	003f7306 	br	10022c0 <___vfprintf_internal_r+0x1c90>

010024f4 <__vfprintf_internal>:
 10024f4:	00804074 	movhi	r2,257
 10024f8:	10bc9f04 	addi	r2,r2,-3460
 10024fc:	2013883a 	mov	r9,r4
 1002500:	11000017 	ldw	r4,0(r2)
 1002504:	2805883a 	mov	r2,r5
 1002508:	300f883a 	mov	r7,r6
 100250c:	480b883a 	mov	r5,r9
 1002510:	100d883a 	mov	r6,r2
 1002514:	10006301 	jmpi	1000630 <___vfprintf_internal_r>

01002518 <__swsetup_r>:
 1002518:	00804074 	movhi	r2,257
 100251c:	10bc9f04 	addi	r2,r2,-3460
 1002520:	10c00017 	ldw	r3,0(r2)
 1002524:	defffd04 	addi	sp,sp,-12
 1002528:	dc400115 	stw	r17,4(sp)
 100252c:	dc000015 	stw	r16,0(sp)
 1002530:	dfc00215 	stw	ra,8(sp)
 1002534:	2023883a 	mov	r17,r4
 1002538:	2821883a 	mov	r16,r5
 100253c:	18000226 	beq	r3,zero,1002548 <__swsetup_r+0x30>
 1002540:	18800e17 	ldw	r2,56(r3)
 1002544:	10001f26 	beq	r2,zero,10025c4 <__swsetup_r+0xac>
 1002548:	8100030b 	ldhu	r4,12(r16)
 100254c:	2080020c 	andi	r2,r4,8
 1002550:	10002826 	beq	r2,zero,10025f4 <__swsetup_r+0xdc>
 1002554:	81400417 	ldw	r5,16(r16)
 1002558:	28001d26 	beq	r5,zero,10025d0 <__swsetup_r+0xb8>
 100255c:	2080004c 	andi	r2,r4,1
 1002560:	1005003a 	cmpeq	r2,r2,zero
 1002564:	10000b26 	beq	r2,zero,1002594 <__swsetup_r+0x7c>
 1002568:	2080008c 	andi	r2,r4,2
 100256c:	10001226 	beq	r2,zero,10025b8 <__swsetup_r+0xa0>
 1002570:	0005883a 	mov	r2,zero
 1002574:	80800215 	stw	r2,8(r16)
 1002578:	28000b26 	beq	r5,zero,10025a8 <__swsetup_r+0x90>
 100257c:	0005883a 	mov	r2,zero
 1002580:	dfc00217 	ldw	ra,8(sp)
 1002584:	dc400117 	ldw	r17,4(sp)
 1002588:	dc000017 	ldw	r16,0(sp)
 100258c:	dec00304 	addi	sp,sp,12
 1002590:	f800283a 	ret
 1002594:	80800517 	ldw	r2,20(r16)
 1002598:	80000215 	stw	zero,8(r16)
 100259c:	0085c83a 	sub	r2,zero,r2
 10025a0:	80800615 	stw	r2,24(r16)
 10025a4:	283ff51e 	bne	r5,zero,100257c <__swsetup_r+0x64>
 10025a8:	2080200c 	andi	r2,r4,128
 10025ac:	103ff326 	beq	r2,zero,100257c <__swsetup_r+0x64>
 10025b0:	00bfffc4 	movi	r2,-1
 10025b4:	003ff206 	br	1002580 <__swsetup_r+0x68>
 10025b8:	80800517 	ldw	r2,20(r16)
 10025bc:	80800215 	stw	r2,8(r16)
 10025c0:	003fed06 	br	1002578 <__swsetup_r+0x60>
 10025c4:	1809883a 	mov	r4,r3
 10025c8:	10040e40 	call	10040e4 <__sinit>
 10025cc:	003fde06 	br	1002548 <__swsetup_r+0x30>
 10025d0:	20c0a00c 	andi	r3,r4,640
 10025d4:	00808004 	movi	r2,512
 10025d8:	18bfe026 	beq	r3,r2,100255c <__swsetup_r+0x44>
 10025dc:	8809883a 	mov	r4,r17
 10025e0:	800b883a 	mov	r5,r16
 10025e4:	1004e900 	call	1004e90 <__smakebuf_r>
 10025e8:	8100030b 	ldhu	r4,12(r16)
 10025ec:	81400417 	ldw	r5,16(r16)
 10025f0:	003fda06 	br	100255c <__swsetup_r+0x44>
 10025f4:	2080040c 	andi	r2,r4,16
 10025f8:	103fed26 	beq	r2,zero,10025b0 <__swsetup_r+0x98>
 10025fc:	2080010c 	andi	r2,r4,4
 1002600:	10001226 	beq	r2,zero,100264c <__swsetup_r+0x134>
 1002604:	81400c17 	ldw	r5,48(r16)
 1002608:	28000526 	beq	r5,zero,1002620 <__swsetup_r+0x108>
 100260c:	80801004 	addi	r2,r16,64
 1002610:	28800226 	beq	r5,r2,100261c <__swsetup_r+0x104>
 1002614:	8809883a 	mov	r4,r17
 1002618:	100449c0 	call	100449c <_free_r>
 100261c:	80000c15 	stw	zero,48(r16)
 1002620:	8080030b 	ldhu	r2,12(r16)
 1002624:	81400417 	ldw	r5,16(r16)
 1002628:	80000115 	stw	zero,4(r16)
 100262c:	10bff6cc 	andi	r2,r2,65499
 1002630:	8080030d 	sth	r2,12(r16)
 1002634:	81400015 	stw	r5,0(r16)
 1002638:	8080030b 	ldhu	r2,12(r16)
 100263c:	10800214 	ori	r2,r2,8
 1002640:	113fffcc 	andi	r4,r2,65535
 1002644:	8080030d 	sth	r2,12(r16)
 1002648:	003fc306 	br	1002558 <__swsetup_r+0x40>
 100264c:	81400417 	ldw	r5,16(r16)
 1002650:	003ff906 	br	1002638 <__swsetup_r+0x120>

01002654 <quorem>:
 1002654:	28c00417 	ldw	r3,16(r5)
 1002658:	20800417 	ldw	r2,16(r4)
 100265c:	defff104 	addi	sp,sp,-60
 1002660:	dfc00e15 	stw	ra,56(sp)
 1002664:	df000d15 	stw	fp,52(sp)
 1002668:	ddc00c15 	stw	r23,48(sp)
 100266c:	dd800b15 	stw	r22,44(sp)
 1002670:	dd400a15 	stw	r21,40(sp)
 1002674:	dd000915 	stw	r20,36(sp)
 1002678:	dcc00815 	stw	r19,32(sp)
 100267c:	dc800715 	stw	r18,28(sp)
 1002680:	dc400615 	stw	r17,24(sp)
 1002684:	dc000515 	stw	r16,20(sp)
 1002688:	d9000315 	stw	r4,12(sp)
 100268c:	d9400415 	stw	r5,16(sp)
 1002690:	10c07f16 	blt	r2,r3,1002890 <quorem+0x23c>
 1002694:	1d3fffc4 	addi	r20,r3,-1
 1002698:	d8c00417 	ldw	r3,16(sp)
 100269c:	d9000317 	ldw	r4,12(sp)
 10026a0:	a505883a 	add	r2,r20,r20
 10026a4:	1085883a 	add	r2,r2,r2
 10026a8:	1cc00504 	addi	r19,r3,20
 10026ac:	25c00504 	addi	r23,r4,20
 10026b0:	98ad883a 	add	r22,r19,r2
 10026b4:	15c7883a 	add	r3,r2,r23
 10026b8:	b1400017 	ldw	r5,0(r22)
 10026bc:	19000017 	ldw	r4,0(r3)
 10026c0:	d8c00015 	stw	r3,0(sp)
 10026c4:	29400044 	addi	r5,r5,1
 10026c8:	d9000215 	stw	r4,8(sp)
 10026cc:	10098180 	call	1009818 <__udivsi3>
 10026d0:	1039883a 	mov	fp,r2
 10026d4:	10003d1e 	bne	r2,zero,10027cc <quorem+0x178>
 10026d8:	d9400417 	ldw	r5,16(sp)
 10026dc:	d9000317 	ldw	r4,12(sp)
 10026e0:	1005bbc0 	call	1005bbc <__mcmp>
 10026e4:	10002c16 	blt	r2,zero,1002798 <quorem+0x144>
 10026e8:	e7000044 	addi	fp,fp,1
 10026ec:	b80f883a 	mov	r7,r23
 10026f0:	0011883a 	mov	r8,zero
 10026f4:	0009883a 	mov	r4,zero
 10026f8:	99400017 	ldw	r5,0(r19)
 10026fc:	38c00017 	ldw	r3,0(r7)
 1002700:	9cc00104 	addi	r19,r19,4
 1002704:	28bfffcc 	andi	r2,r5,65535
 1002708:	2085883a 	add	r2,r4,r2
 100270c:	11bfffcc 	andi	r6,r2,65535
 1002710:	193fffcc 	andi	r4,r3,65535
 1002714:	1004d43a 	srli	r2,r2,16
 1002718:	280ad43a 	srli	r5,r5,16
 100271c:	2189c83a 	sub	r4,r4,r6
 1002720:	2209883a 	add	r4,r4,r8
 1002724:	1806d43a 	srli	r3,r3,16
 1002728:	288b883a 	add	r5,r5,r2
 100272c:	200dd43a 	srai	r6,r4,16
 1002730:	28bfffcc 	andi	r2,r5,65535
 1002734:	1887c83a 	sub	r3,r3,r2
 1002738:	1987883a 	add	r3,r3,r6
 100273c:	3900000d 	sth	r4,0(r7)
 1002740:	38c0008d 	sth	r3,2(r7)
 1002744:	2808d43a 	srli	r4,r5,16
 1002748:	39c00104 	addi	r7,r7,4
 100274c:	1811d43a 	srai	r8,r3,16
 1002750:	b4ffe92e 	bgeu	r22,r19,10026f8 <quorem+0xa4>
 1002754:	a505883a 	add	r2,r20,r20
 1002758:	1085883a 	add	r2,r2,r2
 100275c:	b885883a 	add	r2,r23,r2
 1002760:	10c00017 	ldw	r3,0(r2)
 1002764:	18000c1e 	bne	r3,zero,1002798 <quorem+0x144>
 1002768:	113fff04 	addi	r4,r2,-4
 100276c:	b900082e 	bgeu	r23,r4,1002790 <quorem+0x13c>
 1002770:	10bfff17 	ldw	r2,-4(r2)
 1002774:	10000326 	beq	r2,zero,1002784 <quorem+0x130>
 1002778:	00000506 	br	1002790 <quorem+0x13c>
 100277c:	20800017 	ldw	r2,0(r4)
 1002780:	1000031e 	bne	r2,zero,1002790 <quorem+0x13c>
 1002784:	213fff04 	addi	r4,r4,-4
 1002788:	a53fffc4 	addi	r20,r20,-1
 100278c:	b93ffb36 	bltu	r23,r4,100277c <quorem+0x128>
 1002790:	d9000317 	ldw	r4,12(sp)
 1002794:	25000415 	stw	r20,16(r4)
 1002798:	e005883a 	mov	r2,fp
 100279c:	dfc00e17 	ldw	ra,56(sp)
 10027a0:	df000d17 	ldw	fp,52(sp)
 10027a4:	ddc00c17 	ldw	r23,48(sp)
 10027a8:	dd800b17 	ldw	r22,44(sp)
 10027ac:	dd400a17 	ldw	r21,40(sp)
 10027b0:	dd000917 	ldw	r20,36(sp)
 10027b4:	dcc00817 	ldw	r19,32(sp)
 10027b8:	dc800717 	ldw	r18,28(sp)
 10027bc:	dc400617 	ldw	r17,24(sp)
 10027c0:	dc000517 	ldw	r16,20(sp)
 10027c4:	dec00f04 	addi	sp,sp,60
 10027c8:	f800283a 	ret
 10027cc:	b823883a 	mov	r17,r23
 10027d0:	9825883a 	mov	r18,r19
 10027d4:	d8000115 	stw	zero,4(sp)
 10027d8:	002b883a 	mov	r21,zero
 10027dc:	94000017 	ldw	r16,0(r18)
 10027e0:	e009883a 	mov	r4,fp
 10027e4:	94800104 	addi	r18,r18,4
 10027e8:	817fffcc 	andi	r5,r16,65535
 10027ec:	10098280 	call	1009828 <__mulsi3>
 10027f0:	800ad43a 	srli	r5,r16,16
 10027f4:	e009883a 	mov	r4,fp
 10027f8:	a8a1883a 	add	r16,r21,r2
 10027fc:	10098280 	call	1009828 <__mulsi3>
 1002800:	89000017 	ldw	r4,0(r17)
 1002804:	80ffffcc 	andi	r3,r16,65535
 1002808:	8020d43a 	srli	r16,r16,16
 100280c:	217fffcc 	andi	r5,r4,65535
 1002810:	28cbc83a 	sub	r5,r5,r3
 1002814:	d8c00117 	ldw	r3,4(sp)
 1002818:	2008d43a 	srli	r4,r4,16
 100281c:	1405883a 	add	r2,r2,r16
 1002820:	28cb883a 	add	r5,r5,r3
 1002824:	280dd43a 	srai	r6,r5,16
 1002828:	10ffffcc 	andi	r3,r2,65535
 100282c:	20c9c83a 	sub	r4,r4,r3
 1002830:	2189883a 	add	r4,r4,r6
 1002834:	8900008d 	sth	r4,2(r17)
 1002838:	2009d43a 	srai	r4,r4,16
 100283c:	8940000d 	sth	r5,0(r17)
 1002840:	102ad43a 	srli	r21,r2,16
 1002844:	8c400104 	addi	r17,r17,4
 1002848:	d9000115 	stw	r4,4(sp)
 100284c:	b4bfe32e 	bgeu	r22,r18,10027dc <quorem+0x188>
 1002850:	d9000217 	ldw	r4,8(sp)
 1002854:	203fa01e 	bne	r4,zero,10026d8 <quorem+0x84>
 1002858:	d8800017 	ldw	r2,0(sp)
 100285c:	10ffff04 	addi	r3,r2,-4
 1002860:	b8c0082e 	bgeu	r23,r3,1002884 <quorem+0x230>
 1002864:	10bfff17 	ldw	r2,-4(r2)
 1002868:	10000326 	beq	r2,zero,1002878 <quorem+0x224>
 100286c:	00000506 	br	1002884 <quorem+0x230>
 1002870:	18800017 	ldw	r2,0(r3)
 1002874:	1000031e 	bne	r2,zero,1002884 <quorem+0x230>
 1002878:	18ffff04 	addi	r3,r3,-4
 100287c:	a53fffc4 	addi	r20,r20,-1
 1002880:	b8fffb36 	bltu	r23,r3,1002870 <quorem+0x21c>
 1002884:	d8c00317 	ldw	r3,12(sp)
 1002888:	1d000415 	stw	r20,16(r3)
 100288c:	003f9206 	br	10026d8 <quorem+0x84>
 1002890:	0005883a 	mov	r2,zero
 1002894:	003fc106 	br	100279c <quorem+0x148>

01002898 <_dtoa_r>:
 1002898:	22001017 	ldw	r8,64(r4)
 100289c:	deffda04 	addi	sp,sp,-152
 10028a0:	dd402115 	stw	r21,132(sp)
 10028a4:	dd002015 	stw	r20,128(sp)
 10028a8:	dc801e15 	stw	r18,120(sp)
 10028ac:	dc401d15 	stw	r17,116(sp)
 10028b0:	dfc02515 	stw	ra,148(sp)
 10028b4:	df002415 	stw	fp,144(sp)
 10028b8:	ddc02315 	stw	r23,140(sp)
 10028bc:	dd802215 	stw	r22,136(sp)
 10028c0:	dcc01f15 	stw	r19,124(sp)
 10028c4:	dc001c15 	stw	r16,112(sp)
 10028c8:	d9001615 	stw	r4,88(sp)
 10028cc:	3023883a 	mov	r17,r6
 10028d0:	2829883a 	mov	r20,r5
 10028d4:	d9c01715 	stw	r7,92(sp)
 10028d8:	dc802817 	ldw	r18,160(sp)
 10028dc:	302b883a 	mov	r21,r6
 10028e0:	40000a26 	beq	r8,zero,100290c <_dtoa_r+0x74>
 10028e4:	20801117 	ldw	r2,68(r4)
 10028e8:	400b883a 	mov	r5,r8
 10028ec:	40800115 	stw	r2,4(r8)
 10028f0:	20c01117 	ldw	r3,68(r4)
 10028f4:	00800044 	movi	r2,1
 10028f8:	10c4983a 	sll	r2,r2,r3
 10028fc:	40800215 	stw	r2,8(r8)
 1002900:	1005a600 	call	1005a60 <_Bfree>
 1002904:	d8c01617 	ldw	r3,88(sp)
 1002908:	18001015 	stw	zero,64(r3)
 100290c:	8800a316 	blt	r17,zero,1002b9c <_dtoa_r+0x304>
 1002910:	90000015 	stw	zero,0(r18)
 1002914:	a8dffc2c 	andhi	r3,r21,32752
 1002918:	009ffc34 	movhi	r2,32752
 100291c:	18809126 	beq	r3,r2,1002b64 <_dtoa_r+0x2cc>
 1002920:	000d883a 	mov	r6,zero
 1002924:	000f883a 	mov	r7,zero
 1002928:	a009883a 	mov	r4,r20
 100292c:	a80b883a 	mov	r5,r21
 1002930:	dd001215 	stw	r20,72(sp)
 1002934:	dd401315 	stw	r21,76(sp)
 1002938:	10091580 	call	1009158 <__nedf2>
 100293c:	1000171e 	bne	r2,zero,100299c <_dtoa_r+0x104>
 1002940:	d9802717 	ldw	r6,156(sp)
 1002944:	00800044 	movi	r2,1
 1002948:	30800015 	stw	r2,0(r6)
 100294c:	d8802917 	ldw	r2,164(sp)
 1002950:	10029b26 	beq	r2,zero,10033c0 <_dtoa_r+0xb28>
 1002954:	d9002917 	ldw	r4,164(sp)
 1002958:	00804074 	movhi	r2,257
 100295c:	10b55044 	addi	r2,r2,-10943
 1002960:	10ffffc4 	addi	r3,r2,-1
 1002964:	20800015 	stw	r2,0(r4)
 1002968:	1805883a 	mov	r2,r3
 100296c:	dfc02517 	ldw	ra,148(sp)
 1002970:	df002417 	ldw	fp,144(sp)
 1002974:	ddc02317 	ldw	r23,140(sp)
 1002978:	dd802217 	ldw	r22,136(sp)
 100297c:	dd402117 	ldw	r21,132(sp)
 1002980:	dd002017 	ldw	r20,128(sp)
 1002984:	dcc01f17 	ldw	r19,124(sp)
 1002988:	dc801e17 	ldw	r18,120(sp)
 100298c:	dc401d17 	ldw	r17,116(sp)
 1002990:	dc001c17 	ldw	r16,112(sp)
 1002994:	dec02604 	addi	sp,sp,152
 1002998:	f800283a 	ret
 100299c:	d9001617 	ldw	r4,88(sp)
 10029a0:	d9401217 	ldw	r5,72(sp)
 10029a4:	d8800104 	addi	r2,sp,4
 10029a8:	a80d883a 	mov	r6,r21
 10029ac:	d9c00204 	addi	r7,sp,8
 10029b0:	d8800015 	stw	r2,0(sp)
 10029b4:	100609c0 	call	100609c <__d2b>
 10029b8:	d8800715 	stw	r2,28(sp)
 10029bc:	a804d53a 	srli	r2,r21,20
 10029c0:	1101ffcc 	andi	r4,r2,2047
 10029c4:	20008626 	beq	r4,zero,1002be0 <_dtoa_r+0x348>
 10029c8:	d8c01217 	ldw	r3,72(sp)
 10029cc:	00800434 	movhi	r2,16
 10029d0:	10bfffc4 	addi	r2,r2,-1
 10029d4:	ddc00117 	ldw	r23,4(sp)
 10029d8:	a884703a 	and	r2,r21,r2
 10029dc:	1811883a 	mov	r8,r3
 10029e0:	124ffc34 	orhi	r9,r2,16368
 10029e4:	25bf0044 	addi	r22,r4,-1023
 10029e8:	d8000815 	stw	zero,32(sp)
 10029ec:	0005883a 	mov	r2,zero
 10029f0:	00cffe34 	movhi	r3,16376
 10029f4:	480b883a 	mov	r5,r9
 10029f8:	4009883a 	mov	r4,r8
 10029fc:	180f883a 	mov	r7,r3
 1002a00:	100d883a 	mov	r6,r2
 1002a04:	10089c00 	call	10089c0 <__subdf3>
 1002a08:	0218dbf4 	movhi	r8,25455
 1002a0c:	4210d844 	addi	r8,r8,17249
 1002a10:	024ff4f4 	movhi	r9,16339
 1002a14:	4a61e9c4 	addi	r9,r9,-30809
 1002a18:	480f883a 	mov	r7,r9
 1002a1c:	400d883a 	mov	r6,r8
 1002a20:	180b883a 	mov	r5,r3
 1002a24:	1009883a 	mov	r4,r2
 1002a28:	1008ab40 	call	1008ab4 <__muldf3>
 1002a2c:	0222d874 	movhi	r8,35681
 1002a30:	42322cc4 	addi	r8,r8,-14157
 1002a34:	024ff1f4 	movhi	r9,16327
 1002a38:	4a628a04 	addi	r9,r9,-30168
 1002a3c:	480f883a 	mov	r7,r9
 1002a40:	400d883a 	mov	r6,r8
 1002a44:	180b883a 	mov	r5,r3
 1002a48:	1009883a 	mov	r4,r2
 1002a4c:	1008a400 	call	1008a40 <__adddf3>
 1002a50:	b009883a 	mov	r4,r22
 1002a54:	1021883a 	mov	r16,r2
 1002a58:	1823883a 	mov	r17,r3
 1002a5c:	10093780 	call	1009378 <__floatsidf>
 1002a60:	021427f4 	movhi	r8,20639
 1002a64:	421e7ec4 	addi	r8,r8,31227
 1002a68:	024ff4f4 	movhi	r9,16339
 1002a6c:	4a5104c4 	addi	r9,r9,17427
 1002a70:	480f883a 	mov	r7,r9
 1002a74:	400d883a 	mov	r6,r8
 1002a78:	180b883a 	mov	r5,r3
 1002a7c:	1009883a 	mov	r4,r2
 1002a80:	1008ab40 	call	1008ab4 <__muldf3>
 1002a84:	180f883a 	mov	r7,r3
 1002a88:	880b883a 	mov	r5,r17
 1002a8c:	100d883a 	mov	r6,r2
 1002a90:	8009883a 	mov	r4,r16
 1002a94:	1008a400 	call	1008a40 <__adddf3>
 1002a98:	1009883a 	mov	r4,r2
 1002a9c:	180b883a 	mov	r5,r3
 1002aa0:	1021883a 	mov	r16,r2
 1002aa4:	1823883a 	mov	r17,r3
 1002aa8:	10094700 	call	1009470 <__fixdfsi>
 1002aac:	000d883a 	mov	r6,zero
 1002ab0:	000f883a 	mov	r7,zero
 1002ab4:	8009883a 	mov	r4,r16
 1002ab8:	880b883a 	mov	r5,r17
 1002abc:	d8800d15 	stw	r2,52(sp)
 1002ac0:	10092f00 	call	10092f0 <__ltdf2>
 1002ac4:	10031716 	blt	r2,zero,1003724 <_dtoa_r+0xe8c>
 1002ac8:	d8c00d17 	ldw	r3,52(sp)
 1002acc:	00800584 	movi	r2,22
 1002ad0:	10c1482e 	bgeu	r2,r3,1002ff4 <_dtoa_r+0x75c>
 1002ad4:	01000044 	movi	r4,1
 1002ad8:	d9000c15 	stw	r4,48(sp)
 1002adc:	bd85c83a 	sub	r2,r23,r22
 1002ae0:	11bfffc4 	addi	r6,r2,-1
 1002ae4:	30030b16 	blt	r6,zero,1003714 <_dtoa_r+0xe7c>
 1002ae8:	d9800a15 	stw	r6,40(sp)
 1002aec:	d8001115 	stw	zero,68(sp)
 1002af0:	d8c00d17 	ldw	r3,52(sp)
 1002af4:	1802ff16 	blt	r3,zero,10036f4 <_dtoa_r+0xe5c>
 1002af8:	d9000a17 	ldw	r4,40(sp)
 1002afc:	d8c00915 	stw	r3,36(sp)
 1002b00:	d8001015 	stw	zero,64(sp)
 1002b04:	20c9883a 	add	r4,r4,r3
 1002b08:	d9000a15 	stw	r4,40(sp)
 1002b0c:	d9001717 	ldw	r4,92(sp)
 1002b10:	00800244 	movi	r2,9
 1002b14:	11004636 	bltu	r2,r4,1002c30 <_dtoa_r+0x398>
 1002b18:	00800144 	movi	r2,5
 1002b1c:	11020416 	blt	r2,r4,1003330 <_dtoa_r+0xa98>
 1002b20:	04400044 	movi	r17,1
 1002b24:	d8c01717 	ldw	r3,92(sp)
 1002b28:	00800144 	movi	r2,5
 1002b2c:	10c1ed36 	bltu	r2,r3,10032e4 <_dtoa_r+0xa4c>
 1002b30:	18c5883a 	add	r2,r3,r3
 1002b34:	1085883a 	add	r2,r2,r2
 1002b38:	00c04034 	movhi	r3,256
 1002b3c:	18cad304 	addi	r3,r3,11084
 1002b40:	10c5883a 	add	r2,r2,r3
 1002b44:	11000017 	ldw	r4,0(r2)
 1002b48:	2000683a 	jmp	r4
 1002b4c:	01002c38 	rdprs	r4,zero,176
 1002b50:	01002c38 	rdprs	r4,zero,176
 1002b54:	01003638 	rdprs	r4,zero,216
 1002b58:	01003610 	cmplti	r4,zero,216
 1002b5c:	01003654 	movui	r4,217
 1002b60:	01003660 	cmpeqi	r4,zero,217
 1002b64:	d9002717 	ldw	r4,156(sp)
 1002b68:	0089c3c4 	movi	r2,9999
 1002b6c:	20800015 	stw	r2,0(r4)
 1002b70:	a0001026 	beq	r20,zero,1002bb4 <_dtoa_r+0x31c>
 1002b74:	00c04074 	movhi	r3,257
 1002b78:	18f55c04 	addi	r3,r3,-10896
 1002b7c:	d9802917 	ldw	r6,164(sp)
 1002b80:	303f7926 	beq	r6,zero,1002968 <_dtoa_r+0xd0>
 1002b84:	188000c7 	ldb	r2,3(r3)
 1002b88:	190000c4 	addi	r4,r3,3
 1002b8c:	1000101e 	bne	r2,zero,1002bd0 <_dtoa_r+0x338>
 1002b90:	d8802917 	ldw	r2,164(sp)
 1002b94:	11000015 	stw	r4,0(r2)
 1002b98:	003f7306 	br	1002968 <_dtoa_r+0xd0>
 1002b9c:	00a00034 	movhi	r2,32768
 1002ba0:	10bfffc4 	addi	r2,r2,-1
 1002ba4:	00c00044 	movi	r3,1
 1002ba8:	88aa703a 	and	r21,r17,r2
 1002bac:	90c00015 	stw	r3,0(r18)
 1002bb0:	003f5806 	br	1002914 <_dtoa_r+0x7c>
 1002bb4:	00800434 	movhi	r2,16
 1002bb8:	10bfffc4 	addi	r2,r2,-1
 1002bbc:	a884703a 	and	r2,r21,r2
 1002bc0:	103fec1e 	bne	r2,zero,1002b74 <_dtoa_r+0x2dc>
 1002bc4:	00c04074 	movhi	r3,257
 1002bc8:	18f55904 	addi	r3,r3,-10908
 1002bcc:	003feb06 	br	1002b7c <_dtoa_r+0x2e4>
 1002bd0:	d8802917 	ldw	r2,164(sp)
 1002bd4:	19000204 	addi	r4,r3,8
 1002bd8:	11000015 	stw	r4,0(r2)
 1002bdc:	003f6206 	br	1002968 <_dtoa_r+0xd0>
 1002be0:	ddc00117 	ldw	r23,4(sp)
 1002be4:	d8800217 	ldw	r2,8(sp)
 1002be8:	01000804 	movi	r4,32
 1002bec:	b8c10c84 	addi	r3,r23,1074
 1002bf0:	18a3883a 	add	r17,r3,r2
 1002bf4:	2441b80e 	bge	r4,r17,10032d8 <_dtoa_r+0xa40>
 1002bf8:	00c01004 	movi	r3,64
 1002bfc:	1c47c83a 	sub	r3,r3,r17
 1002c00:	88bff804 	addi	r2,r17,-32
 1002c04:	a8c6983a 	sll	r3,r21,r3
 1002c08:	a084d83a 	srl	r2,r20,r2
 1002c0c:	1888b03a 	or	r4,r3,r2
 1002c10:	10095480 	call	1009548 <__floatunsidf>
 1002c14:	1011883a 	mov	r8,r2
 1002c18:	00bf8434 	movhi	r2,65040
 1002c1c:	01000044 	movi	r4,1
 1002c20:	10d3883a 	add	r9,r2,r3
 1002c24:	8dbef344 	addi	r22,r17,-1075
 1002c28:	d9000815 	stw	r4,32(sp)
 1002c2c:	003f6f06 	br	10029ec <_dtoa_r+0x154>
 1002c30:	d8001715 	stw	zero,92(sp)
 1002c34:	04400044 	movi	r17,1
 1002c38:	00bfffc4 	movi	r2,-1
 1002c3c:	00c00044 	movi	r3,1
 1002c40:	d8800e15 	stw	r2,56(sp)
 1002c44:	d8002615 	stw	zero,152(sp)
 1002c48:	d8800f15 	stw	r2,60(sp)
 1002c4c:	d8c00b15 	stw	r3,44(sp)
 1002c50:	1021883a 	mov	r16,r2
 1002c54:	d8801617 	ldw	r2,88(sp)
 1002c58:	10001115 	stw	zero,68(r2)
 1002c5c:	d8801617 	ldw	r2,88(sp)
 1002c60:	11401117 	ldw	r5,68(r2)
 1002c64:	1009883a 	mov	r4,r2
 1002c68:	1005fe00 	call	1005fe0 <_Balloc>
 1002c6c:	d8c01617 	ldw	r3,88(sp)
 1002c70:	d8800515 	stw	r2,20(sp)
 1002c74:	18801015 	stw	r2,64(r3)
 1002c78:	00800384 	movi	r2,14
 1002c7c:	14006836 	bltu	r2,r16,1002e20 <_dtoa_r+0x588>
 1002c80:	8805003a 	cmpeq	r2,r17,zero
 1002c84:	1000661e 	bne	r2,zero,1002e20 <_dtoa_r+0x588>
 1002c88:	d9000d17 	ldw	r4,52(sp)
 1002c8c:	0102300e 	bge	zero,r4,1003550 <_dtoa_r+0xcb8>
 1002c90:	208003cc 	andi	r2,r4,15
 1002c94:	100490fa 	slli	r2,r2,3
 1002c98:	2025d13a 	srai	r18,r4,4
 1002c9c:	00c04074 	movhi	r3,257
 1002ca0:	18f56e04 	addi	r3,r3,-10824
 1002ca4:	10c5883a 	add	r2,r2,r3
 1002ca8:	90c0040c 	andi	r3,r18,16
 1002cac:	14000017 	ldw	r16,0(r2)
 1002cb0:	14400117 	ldw	r17,4(r2)
 1002cb4:	18036a1e 	bne	r3,zero,1003a60 <_dtoa_r+0x11c8>
 1002cb8:	05800084 	movi	r22,2
 1002cbc:	90001026 	beq	r18,zero,1002d00 <_dtoa_r+0x468>
 1002cc0:	04c04074 	movhi	r19,257
 1002cc4:	9cf5a004 	addi	r19,r19,-10624
 1002cc8:	9080004c 	andi	r2,r18,1
 1002ccc:	1005003a 	cmpeq	r2,r2,zero
 1002cd0:	1000081e 	bne	r2,zero,1002cf4 <_dtoa_r+0x45c>
 1002cd4:	99800017 	ldw	r6,0(r19)
 1002cd8:	99c00117 	ldw	r7,4(r19)
 1002cdc:	880b883a 	mov	r5,r17
 1002ce0:	8009883a 	mov	r4,r16
 1002ce4:	1008ab40 	call	1008ab4 <__muldf3>
 1002ce8:	1021883a 	mov	r16,r2
 1002cec:	b5800044 	addi	r22,r22,1
 1002cf0:	1823883a 	mov	r17,r3
 1002cf4:	9025d07a 	srai	r18,r18,1
 1002cf8:	9cc00204 	addi	r19,r19,8
 1002cfc:	903ff21e 	bne	r18,zero,1002cc8 <_dtoa_r+0x430>
 1002d00:	a80b883a 	mov	r5,r21
 1002d04:	a009883a 	mov	r4,r20
 1002d08:	880f883a 	mov	r7,r17
 1002d0c:	800d883a 	mov	r6,r16
 1002d10:	1008e780 	call	1008e78 <__divdf3>
 1002d14:	1029883a 	mov	r20,r2
 1002d18:	182b883a 	mov	r21,r3
 1002d1c:	d8c00c17 	ldw	r3,48(sp)
 1002d20:	1805003a 	cmpeq	r2,r3,zero
 1002d24:	1000081e 	bne	r2,zero,1002d48 <_dtoa_r+0x4b0>
 1002d28:	0005883a 	mov	r2,zero
 1002d2c:	00cffc34 	movhi	r3,16368
 1002d30:	180f883a 	mov	r7,r3
 1002d34:	a009883a 	mov	r4,r20
 1002d38:	a80b883a 	mov	r5,r21
 1002d3c:	100d883a 	mov	r6,r2
 1002d40:	10092f00 	call	10092f0 <__ltdf2>
 1002d44:	1003fe16 	blt	r2,zero,1003d40 <_dtoa_r+0x14a8>
 1002d48:	b009883a 	mov	r4,r22
 1002d4c:	10093780 	call	1009378 <__floatsidf>
 1002d50:	180b883a 	mov	r5,r3
 1002d54:	1009883a 	mov	r4,r2
 1002d58:	a00d883a 	mov	r6,r20
 1002d5c:	a80f883a 	mov	r7,r21
 1002d60:	1008ab40 	call	1008ab4 <__muldf3>
 1002d64:	0011883a 	mov	r8,zero
 1002d68:	02500734 	movhi	r9,16412
 1002d6c:	1009883a 	mov	r4,r2
 1002d70:	180b883a 	mov	r5,r3
 1002d74:	480f883a 	mov	r7,r9
 1002d78:	400d883a 	mov	r6,r8
 1002d7c:	1008a400 	call	1008a40 <__adddf3>
 1002d80:	d9000f17 	ldw	r4,60(sp)
 1002d84:	102d883a 	mov	r22,r2
 1002d88:	00bf3034 	movhi	r2,64704
 1002d8c:	18b9883a 	add	fp,r3,r2
 1002d90:	e02f883a 	mov	r23,fp
 1002d94:	20028f1e 	bne	r4,zero,10037d4 <_dtoa_r+0xf3c>
 1002d98:	0005883a 	mov	r2,zero
 1002d9c:	00d00534 	movhi	r3,16404
 1002da0:	a009883a 	mov	r4,r20
 1002da4:	a80b883a 	mov	r5,r21
 1002da8:	180f883a 	mov	r7,r3
 1002dac:	100d883a 	mov	r6,r2
 1002db0:	10089c00 	call	10089c0 <__subdf3>
 1002db4:	1009883a 	mov	r4,r2
 1002db8:	e00f883a 	mov	r7,fp
 1002dbc:	180b883a 	mov	r5,r3
 1002dc0:	b00d883a 	mov	r6,r22
 1002dc4:	1025883a 	mov	r18,r2
 1002dc8:	1827883a 	mov	r19,r3
 1002dcc:	10091e00 	call	10091e0 <__gtdf2>
 1002dd0:	00834f16 	blt	zero,r2,1003b10 <_dtoa_r+0x1278>
 1002dd4:	e0e0003c 	xorhi	r3,fp,32768
 1002dd8:	9009883a 	mov	r4,r18
 1002ddc:	980b883a 	mov	r5,r19
 1002de0:	180f883a 	mov	r7,r3
 1002de4:	b00d883a 	mov	r6,r22
 1002de8:	10092f00 	call	10092f0 <__ltdf2>
 1002dec:	1000080e 	bge	r2,zero,1002e10 <_dtoa_r+0x578>
 1002df0:	0027883a 	mov	r19,zero
 1002df4:	0025883a 	mov	r18,zero
 1002df8:	d8802617 	ldw	r2,152(sp)
 1002dfc:	df000517 	ldw	fp,20(sp)
 1002e00:	d8000615 	stw	zero,24(sp)
 1002e04:	0084303a 	nor	r2,zero,r2
 1002e08:	d8800d15 	stw	r2,52(sp)
 1002e0c:	00019b06 	br	100347c <_dtoa_r+0xbe4>
 1002e10:	d9801217 	ldw	r6,72(sp)
 1002e14:	d8801317 	ldw	r2,76(sp)
 1002e18:	3029883a 	mov	r20,r6
 1002e1c:	102b883a 	mov	r21,r2
 1002e20:	d8c00217 	ldw	r3,8(sp)
 1002e24:	18008516 	blt	r3,zero,100303c <_dtoa_r+0x7a4>
 1002e28:	d9000d17 	ldw	r4,52(sp)
 1002e2c:	00800384 	movi	r2,14
 1002e30:	11008216 	blt	r2,r4,100303c <_dtoa_r+0x7a4>
 1002e34:	200490fa 	slli	r2,r4,3
 1002e38:	d9802617 	ldw	r6,152(sp)
 1002e3c:	00c04074 	movhi	r3,257
 1002e40:	18f56e04 	addi	r3,r3,-10824
 1002e44:	10c5883a 	add	r2,r2,r3
 1002e48:	14800017 	ldw	r18,0(r2)
 1002e4c:	14c00117 	ldw	r19,4(r2)
 1002e50:	30031e16 	blt	r6,zero,1003acc <_dtoa_r+0x1234>
 1002e54:	d9000517 	ldw	r4,20(sp)
 1002e58:	d8c00f17 	ldw	r3,60(sp)
 1002e5c:	a823883a 	mov	r17,r21
 1002e60:	a021883a 	mov	r16,r20
 1002e64:	192b883a 	add	r21,r3,r4
 1002e68:	2039883a 	mov	fp,r4
 1002e6c:	00000f06 	br	1002eac <_dtoa_r+0x614>
 1002e70:	0005883a 	mov	r2,zero
 1002e74:	00d00934 	movhi	r3,16420
 1002e78:	5009883a 	mov	r4,r10
 1002e7c:	580b883a 	mov	r5,r11
 1002e80:	180f883a 	mov	r7,r3
 1002e84:	100d883a 	mov	r6,r2
 1002e88:	1008ab40 	call	1008ab4 <__muldf3>
 1002e8c:	180b883a 	mov	r5,r3
 1002e90:	000d883a 	mov	r6,zero
 1002e94:	000f883a 	mov	r7,zero
 1002e98:	1009883a 	mov	r4,r2
 1002e9c:	1021883a 	mov	r16,r2
 1002ea0:	1823883a 	mov	r17,r3
 1002ea4:	10091580 	call	1009158 <__nedf2>
 1002ea8:	10004526 	beq	r2,zero,1002fc0 <_dtoa_r+0x728>
 1002eac:	900d883a 	mov	r6,r18
 1002eb0:	980f883a 	mov	r7,r19
 1002eb4:	8009883a 	mov	r4,r16
 1002eb8:	880b883a 	mov	r5,r17
 1002ebc:	1008e780 	call	1008e78 <__divdf3>
 1002ec0:	180b883a 	mov	r5,r3
 1002ec4:	1009883a 	mov	r4,r2
 1002ec8:	10094700 	call	1009470 <__fixdfsi>
 1002ecc:	1009883a 	mov	r4,r2
 1002ed0:	1029883a 	mov	r20,r2
 1002ed4:	10093780 	call	1009378 <__floatsidf>
 1002ed8:	180f883a 	mov	r7,r3
 1002edc:	9009883a 	mov	r4,r18
 1002ee0:	980b883a 	mov	r5,r19
 1002ee4:	100d883a 	mov	r6,r2
 1002ee8:	1008ab40 	call	1008ab4 <__muldf3>
 1002eec:	180f883a 	mov	r7,r3
 1002ef0:	880b883a 	mov	r5,r17
 1002ef4:	8009883a 	mov	r4,r16
 1002ef8:	100d883a 	mov	r6,r2
 1002efc:	10089c00 	call	10089c0 <__subdf3>
 1002f00:	1015883a 	mov	r10,r2
 1002f04:	a0800c04 	addi	r2,r20,48
 1002f08:	e0800005 	stb	r2,0(fp)
 1002f0c:	e7000044 	addi	fp,fp,1
 1002f10:	1817883a 	mov	r11,r3
 1002f14:	e57fd61e 	bne	fp,r21,1002e70 <_dtoa_r+0x5d8>
 1002f18:	500d883a 	mov	r6,r10
 1002f1c:	180f883a 	mov	r7,r3
 1002f20:	5009883a 	mov	r4,r10
 1002f24:	180b883a 	mov	r5,r3
 1002f28:	1008a400 	call	1008a40 <__adddf3>
 1002f2c:	100d883a 	mov	r6,r2
 1002f30:	9009883a 	mov	r4,r18
 1002f34:	980b883a 	mov	r5,r19
 1002f38:	180f883a 	mov	r7,r3
 1002f3c:	1021883a 	mov	r16,r2
 1002f40:	1823883a 	mov	r17,r3
 1002f44:	10092f00 	call	10092f0 <__ltdf2>
 1002f48:	10000816 	blt	r2,zero,1002f6c <_dtoa_r+0x6d4>
 1002f4c:	980b883a 	mov	r5,r19
 1002f50:	800d883a 	mov	r6,r16
 1002f54:	880f883a 	mov	r7,r17
 1002f58:	9009883a 	mov	r4,r18
 1002f5c:	10090d00 	call	10090d0 <__eqdf2>
 1002f60:	1000171e 	bne	r2,zero,1002fc0 <_dtoa_r+0x728>
 1002f64:	a080004c 	andi	r2,r20,1
 1002f68:	10001526 	beq	r2,zero,1002fc0 <_dtoa_r+0x728>
 1002f6c:	d8800d17 	ldw	r2,52(sp)
 1002f70:	d8800415 	stw	r2,16(sp)
 1002f74:	e009883a 	mov	r4,fp
 1002f78:	213fffc4 	addi	r4,r4,-1
 1002f7c:	20c00007 	ldb	r3,0(r4)
 1002f80:	00800e44 	movi	r2,57
 1002f84:	1880081e 	bne	r3,r2,1002fa8 <_dtoa_r+0x710>
 1002f88:	d8800517 	ldw	r2,20(sp)
 1002f8c:	113ffa1e 	bne	r2,r4,1002f78 <_dtoa_r+0x6e0>
 1002f90:	d8c00417 	ldw	r3,16(sp)
 1002f94:	d9800517 	ldw	r6,20(sp)
 1002f98:	00800c04 	movi	r2,48
 1002f9c:	18c00044 	addi	r3,r3,1
 1002fa0:	d8c00415 	stw	r3,16(sp)
 1002fa4:	30800005 	stb	r2,0(r6)
 1002fa8:	20800003 	ldbu	r2,0(r4)
 1002fac:	d8c00417 	ldw	r3,16(sp)
 1002fb0:	27000044 	addi	fp,r4,1
 1002fb4:	10800044 	addi	r2,r2,1
 1002fb8:	d8c00d15 	stw	r3,52(sp)
 1002fbc:	20800005 	stb	r2,0(r4)
 1002fc0:	d9001617 	ldw	r4,88(sp)
 1002fc4:	d9400717 	ldw	r5,28(sp)
 1002fc8:	1005a600 	call	1005a60 <_Bfree>
 1002fcc:	e0000005 	stb	zero,0(fp)
 1002fd0:	d9800d17 	ldw	r6,52(sp)
 1002fd4:	d8c02717 	ldw	r3,156(sp)
 1002fd8:	d9002917 	ldw	r4,164(sp)
 1002fdc:	30800044 	addi	r2,r6,1
 1002fe0:	18800015 	stw	r2,0(r3)
 1002fe4:	20029c26 	beq	r4,zero,1003a58 <_dtoa_r+0x11c0>
 1002fe8:	d8c00517 	ldw	r3,20(sp)
 1002fec:	27000015 	stw	fp,0(r4)
 1002ff0:	003e5d06 	br	1002968 <_dtoa_r+0xd0>
 1002ff4:	d9800d17 	ldw	r6,52(sp)
 1002ff8:	00c04074 	movhi	r3,257
 1002ffc:	18f56e04 	addi	r3,r3,-10824
 1003000:	d9001217 	ldw	r4,72(sp)
 1003004:	300490fa 	slli	r2,r6,3
 1003008:	d9401317 	ldw	r5,76(sp)
 100300c:	10c5883a 	add	r2,r2,r3
 1003010:	12000017 	ldw	r8,0(r2)
 1003014:	12400117 	ldw	r9,4(r2)
 1003018:	400d883a 	mov	r6,r8
 100301c:	480f883a 	mov	r7,r9
 1003020:	10092f00 	call	10092f0 <__ltdf2>
 1003024:	1000030e 	bge	r2,zero,1003034 <_dtoa_r+0x79c>
 1003028:	d8800d17 	ldw	r2,52(sp)
 100302c:	10bfffc4 	addi	r2,r2,-1
 1003030:	d8800d15 	stw	r2,52(sp)
 1003034:	d8000c15 	stw	zero,48(sp)
 1003038:	003ea806 	br	1002adc <_dtoa_r+0x244>
 100303c:	d9000b17 	ldw	r4,44(sp)
 1003040:	202cc03a 	cmpne	r22,r4,zero
 1003044:	b000c71e 	bne	r22,zero,1003364 <_dtoa_r+0xacc>
 1003048:	dc001117 	ldw	r16,68(sp)
 100304c:	dc801017 	ldw	r18,64(sp)
 1003050:	0027883a 	mov	r19,zero
 1003054:	04000b0e 	bge	zero,r16,1003084 <_dtoa_r+0x7ec>
 1003058:	d8c00a17 	ldw	r3,40(sp)
 100305c:	00c0090e 	bge	zero,r3,1003084 <_dtoa_r+0x7ec>
 1003060:	8005883a 	mov	r2,r16
 1003064:	1c011316 	blt	r3,r16,10034b4 <_dtoa_r+0xc1c>
 1003068:	d9000a17 	ldw	r4,40(sp)
 100306c:	d9801117 	ldw	r6,68(sp)
 1003070:	80a1c83a 	sub	r16,r16,r2
 1003074:	2089c83a 	sub	r4,r4,r2
 1003078:	308dc83a 	sub	r6,r6,r2
 100307c:	d9000a15 	stw	r4,40(sp)
 1003080:	d9801115 	stw	r6,68(sp)
 1003084:	d8801017 	ldw	r2,64(sp)
 1003088:	0080150e 	bge	zero,r2,10030e0 <_dtoa_r+0x848>
 100308c:	d8c00b17 	ldw	r3,44(sp)
 1003090:	1805003a 	cmpeq	r2,r3,zero
 1003094:	1001c91e 	bne	r2,zero,10037bc <_dtoa_r+0xf24>
 1003098:	04800e0e 	bge	zero,r18,10030d4 <_dtoa_r+0x83c>
 100309c:	d9001617 	ldw	r4,88(sp)
 10030a0:	980b883a 	mov	r5,r19
 10030a4:	900d883a 	mov	r6,r18
 10030a8:	10068ac0 	call	10068ac <__pow5mult>
 10030ac:	d9001617 	ldw	r4,88(sp)
 10030b0:	d9800717 	ldw	r6,28(sp)
 10030b4:	100b883a 	mov	r5,r2
 10030b8:	1027883a 	mov	r19,r2
 10030bc:	10064f00 	call	10064f0 <__multiply>
 10030c0:	d9001617 	ldw	r4,88(sp)
 10030c4:	d9400717 	ldw	r5,28(sp)
 10030c8:	1023883a 	mov	r17,r2
 10030cc:	1005a600 	call	1005a60 <_Bfree>
 10030d0:	dc400715 	stw	r17,28(sp)
 10030d4:	d9001017 	ldw	r4,64(sp)
 10030d8:	248dc83a 	sub	r6,r4,r18
 10030dc:	30010e1e 	bne	r6,zero,1003518 <_dtoa_r+0xc80>
 10030e0:	d9001617 	ldw	r4,88(sp)
 10030e4:	04400044 	movi	r17,1
 10030e8:	880b883a 	mov	r5,r17
 10030ec:	10067440 	call	1006744 <__i2b>
 10030f0:	d9800917 	ldw	r6,36(sp)
 10030f4:	1025883a 	mov	r18,r2
 10030f8:	0180040e 	bge	zero,r6,100310c <_dtoa_r+0x874>
 10030fc:	d9001617 	ldw	r4,88(sp)
 1003100:	100b883a 	mov	r5,r2
 1003104:	10068ac0 	call	10068ac <__pow5mult>
 1003108:	1025883a 	mov	r18,r2
 100310c:	d8801717 	ldw	r2,92(sp)
 1003110:	8880f30e 	bge	r17,r2,10034e0 <_dtoa_r+0xc48>
 1003114:	0023883a 	mov	r17,zero
 1003118:	d9800917 	ldw	r6,36(sp)
 100311c:	30019e1e 	bne	r6,zero,1003798 <_dtoa_r+0xf00>
 1003120:	00c00044 	movi	r3,1
 1003124:	d9000a17 	ldw	r4,40(sp)
 1003128:	20c5883a 	add	r2,r4,r3
 100312c:	10c007cc 	andi	r3,r2,31
 1003130:	1800841e 	bne	r3,zero,1003344 <_dtoa_r+0xaac>
 1003134:	00800704 	movi	r2,28
 1003138:	d9000a17 	ldw	r4,40(sp)
 100313c:	d9801117 	ldw	r6,68(sp)
 1003140:	80a1883a 	add	r16,r16,r2
 1003144:	2089883a 	add	r4,r4,r2
 1003148:	308d883a 	add	r6,r6,r2
 100314c:	d9000a15 	stw	r4,40(sp)
 1003150:	d9801115 	stw	r6,68(sp)
 1003154:	d8801117 	ldw	r2,68(sp)
 1003158:	0080050e 	bge	zero,r2,1003170 <_dtoa_r+0x8d8>
 100315c:	d9400717 	ldw	r5,28(sp)
 1003160:	d9001617 	ldw	r4,88(sp)
 1003164:	100d883a 	mov	r6,r2
 1003168:	10063a40 	call	10063a4 <__lshift>
 100316c:	d8800715 	stw	r2,28(sp)
 1003170:	d8c00a17 	ldw	r3,40(sp)
 1003174:	00c0050e 	bge	zero,r3,100318c <_dtoa_r+0x8f4>
 1003178:	d9001617 	ldw	r4,88(sp)
 100317c:	900b883a 	mov	r5,r18
 1003180:	180d883a 	mov	r6,r3
 1003184:	10063a40 	call	10063a4 <__lshift>
 1003188:	1025883a 	mov	r18,r2
 100318c:	d9000c17 	ldw	r4,48(sp)
 1003190:	2005003a 	cmpeq	r2,r4,zero
 1003194:	10016f26 	beq	r2,zero,1003754 <_dtoa_r+0xebc>
 1003198:	d9000f17 	ldw	r4,60(sp)
 100319c:	0102170e 	bge	zero,r4,10039fc <_dtoa_r+0x1164>
 10031a0:	d9800b17 	ldw	r6,44(sp)
 10031a4:	3005003a 	cmpeq	r2,r6,zero
 10031a8:	1000881e 	bne	r2,zero,10033cc <_dtoa_r+0xb34>
 10031ac:	0400050e 	bge	zero,r16,10031c4 <_dtoa_r+0x92c>
 10031b0:	d9001617 	ldw	r4,88(sp)
 10031b4:	980b883a 	mov	r5,r19
 10031b8:	800d883a 	mov	r6,r16
 10031bc:	10063a40 	call	10063a4 <__lshift>
 10031c0:	1027883a 	mov	r19,r2
 10031c4:	8804c03a 	cmpne	r2,r17,zero
 10031c8:	1002541e 	bne	r2,zero,1003b1c <_dtoa_r+0x1284>
 10031cc:	980b883a 	mov	r5,r19
 10031d0:	dd800517 	ldw	r22,20(sp)
 10031d4:	dcc00615 	stw	r19,24(sp)
 10031d8:	a700004c 	andi	fp,r20,1
 10031dc:	2827883a 	mov	r19,r5
 10031e0:	d9000717 	ldw	r4,28(sp)
 10031e4:	900b883a 	mov	r5,r18
 10031e8:	10026540 	call	1002654 <quorem>
 10031ec:	d9000717 	ldw	r4,28(sp)
 10031f0:	d9400617 	ldw	r5,24(sp)
 10031f4:	1023883a 	mov	r17,r2
 10031f8:	8dc00c04 	addi	r23,r17,48
 10031fc:	1005bbc0 	call	1005bbc <__mcmp>
 1003200:	d9001617 	ldw	r4,88(sp)
 1003204:	900b883a 	mov	r5,r18
 1003208:	980d883a 	mov	r6,r19
 100320c:	1029883a 	mov	r20,r2
 1003210:	10062180 	call	1006218 <__mdiff>
 1003214:	102b883a 	mov	r21,r2
 1003218:	10800317 	ldw	r2,12(r2)
 100321c:	1001281e 	bne	r2,zero,10036c0 <_dtoa_r+0xe28>
 1003220:	d9000717 	ldw	r4,28(sp)
 1003224:	a80b883a 	mov	r5,r21
 1003228:	1005bbc0 	call	1005bbc <__mcmp>
 100322c:	d9001617 	ldw	r4,88(sp)
 1003230:	1021883a 	mov	r16,r2
 1003234:	a80b883a 	mov	r5,r21
 1003238:	1005a600 	call	1005a60 <_Bfree>
 100323c:	8000041e 	bne	r16,zero,1003250 <_dtoa_r+0x9b8>
 1003240:	d8801717 	ldw	r2,92(sp)
 1003244:	1000021e 	bne	r2,zero,1003250 <_dtoa_r+0x9b8>
 1003248:	e004c03a 	cmpne	r2,fp,zero
 100324c:	10011726 	beq	r2,zero,10036ac <_dtoa_r+0xe14>
 1003250:	a0010616 	blt	r20,zero,100366c <_dtoa_r+0xdd4>
 1003254:	a000041e 	bne	r20,zero,1003268 <_dtoa_r+0x9d0>
 1003258:	d8c01717 	ldw	r3,92(sp)
 100325c:	1800021e 	bne	r3,zero,1003268 <_dtoa_r+0x9d0>
 1003260:	e004c03a 	cmpne	r2,fp,zero
 1003264:	10010126 	beq	r2,zero,100366c <_dtoa_r+0xdd4>
 1003268:	04023d16 	blt	zero,r16,1003b60 <_dtoa_r+0x12c8>
 100326c:	b5c00005 	stb	r23,0(r22)
 1003270:	d9800517 	ldw	r6,20(sp)
 1003274:	d9000f17 	ldw	r4,60(sp)
 1003278:	b5800044 	addi	r22,r22,1
 100327c:	3105883a 	add	r2,r6,r4
 1003280:	b0806526 	beq	r22,r2,1003418 <_dtoa_r+0xb80>
 1003284:	d9400717 	ldw	r5,28(sp)
 1003288:	d9001617 	ldw	r4,88(sp)
 100328c:	01800284 	movi	r6,10
 1003290:	000f883a 	mov	r7,zero
 1003294:	10067800 	call	1006780 <__multadd>
 1003298:	d8800715 	stw	r2,28(sp)
 100329c:	d8800617 	ldw	r2,24(sp)
 10032a0:	14c10c26 	beq	r2,r19,10036d4 <_dtoa_r+0xe3c>
 10032a4:	d9400617 	ldw	r5,24(sp)
 10032a8:	d9001617 	ldw	r4,88(sp)
 10032ac:	01800284 	movi	r6,10
 10032b0:	000f883a 	mov	r7,zero
 10032b4:	10067800 	call	1006780 <__multadd>
 10032b8:	d9001617 	ldw	r4,88(sp)
 10032bc:	980b883a 	mov	r5,r19
 10032c0:	01800284 	movi	r6,10
 10032c4:	000f883a 	mov	r7,zero
 10032c8:	d8800615 	stw	r2,24(sp)
 10032cc:	10067800 	call	1006780 <__multadd>
 10032d0:	1027883a 	mov	r19,r2
 10032d4:	003fc206 	br	10031e0 <_dtoa_r+0x948>
 10032d8:	2445c83a 	sub	r2,r4,r17
 10032dc:	a088983a 	sll	r4,r20,r2
 10032e0:	003e4b06 	br	1002c10 <_dtoa_r+0x378>
 10032e4:	01bfffc4 	movi	r6,-1
 10032e8:	00800044 	movi	r2,1
 10032ec:	d9800e15 	stw	r6,56(sp)
 10032f0:	d9800f15 	stw	r6,60(sp)
 10032f4:	d8800b15 	stw	r2,44(sp)
 10032f8:	d8c01617 	ldw	r3,88(sp)
 10032fc:	008005c4 	movi	r2,23
 1003300:	18001115 	stw	zero,68(r3)
 1003304:	1580082e 	bgeu	r2,r22,1003328 <_dtoa_r+0xa90>
 1003308:	00c00104 	movi	r3,4
 100330c:	0009883a 	mov	r4,zero
 1003310:	18c7883a 	add	r3,r3,r3
 1003314:	18800504 	addi	r2,r3,20
 1003318:	21000044 	addi	r4,r4,1
 100331c:	b0bffc2e 	bgeu	r22,r2,1003310 <_dtoa_r+0xa78>
 1003320:	d9801617 	ldw	r6,88(sp)
 1003324:	31001115 	stw	r4,68(r6)
 1003328:	dc000f17 	ldw	r16,60(sp)
 100332c:	003e4b06 	br	1002c5c <_dtoa_r+0x3c4>
 1003330:	d9801717 	ldw	r6,92(sp)
 1003334:	0023883a 	mov	r17,zero
 1003338:	31bfff04 	addi	r6,r6,-4
 100333c:	d9801715 	stw	r6,92(sp)
 1003340:	003df806 	br	1002b24 <_dtoa_r+0x28c>
 1003344:	00800804 	movi	r2,32
 1003348:	10c9c83a 	sub	r4,r2,r3
 100334c:	00c00104 	movi	r3,4
 1003350:	19005a16 	blt	r3,r4,10034bc <_dtoa_r+0xc24>
 1003354:	008000c4 	movi	r2,3
 1003358:	113f7e16 	blt	r2,r4,1003154 <_dtoa_r+0x8bc>
 100335c:	20800704 	addi	r2,r4,28
 1003360:	003f7506 	br	1003138 <_dtoa_r+0x8a0>
 1003364:	d9801717 	ldw	r6,92(sp)
 1003368:	00800044 	movi	r2,1
 100336c:	1180a10e 	bge	r2,r6,10035f4 <_dtoa_r+0xd5c>
 1003370:	d9800f17 	ldw	r6,60(sp)
 1003374:	d8c01017 	ldw	r3,64(sp)
 1003378:	30bfffc4 	addi	r2,r6,-1
 100337c:	1881c616 	blt	r3,r2,1003a98 <_dtoa_r+0x1200>
 1003380:	18a5c83a 	sub	r18,r3,r2
 1003384:	d8800f17 	ldw	r2,60(sp)
 1003388:	10026216 	blt	r2,zero,1003d14 <_dtoa_r+0x147c>
 100338c:	dc001117 	ldw	r16,68(sp)
 1003390:	1007883a 	mov	r3,r2
 1003394:	d9800a17 	ldw	r6,40(sp)
 1003398:	d8801117 	ldw	r2,68(sp)
 100339c:	d9001617 	ldw	r4,88(sp)
 10033a0:	30cd883a 	add	r6,r6,r3
 10033a4:	10c5883a 	add	r2,r2,r3
 10033a8:	01400044 	movi	r5,1
 10033ac:	d9800a15 	stw	r6,40(sp)
 10033b0:	d8801115 	stw	r2,68(sp)
 10033b4:	10067440 	call	1006744 <__i2b>
 10033b8:	1027883a 	mov	r19,r2
 10033bc:	003f2506 	br	1003054 <_dtoa_r+0x7bc>
 10033c0:	00c04074 	movhi	r3,257
 10033c4:	18f55004 	addi	r3,r3,-10944
 10033c8:	003d6706 	br	1002968 <_dtoa_r+0xd0>
 10033cc:	dd800517 	ldw	r22,20(sp)
 10033d0:	04000044 	movi	r16,1
 10033d4:	00000706 	br	10033f4 <_dtoa_r+0xb5c>
 10033d8:	d9400717 	ldw	r5,28(sp)
 10033dc:	d9001617 	ldw	r4,88(sp)
 10033e0:	01800284 	movi	r6,10
 10033e4:	000f883a 	mov	r7,zero
 10033e8:	10067800 	call	1006780 <__multadd>
 10033ec:	d8800715 	stw	r2,28(sp)
 10033f0:	84000044 	addi	r16,r16,1
 10033f4:	d9000717 	ldw	r4,28(sp)
 10033f8:	900b883a 	mov	r5,r18
 10033fc:	10026540 	call	1002654 <quorem>
 1003400:	15c00c04 	addi	r23,r2,48
 1003404:	b5c00005 	stb	r23,0(r22)
 1003408:	d8c00f17 	ldw	r3,60(sp)
 100340c:	b5800044 	addi	r22,r22,1
 1003410:	80fff116 	blt	r16,r3,10033d8 <_dtoa_r+0xb40>
 1003414:	d8000615 	stw	zero,24(sp)
 1003418:	d9400717 	ldw	r5,28(sp)
 100341c:	d9001617 	ldw	r4,88(sp)
 1003420:	01800044 	movi	r6,1
 1003424:	10063a40 	call	10063a4 <__lshift>
 1003428:	1009883a 	mov	r4,r2
 100342c:	900b883a 	mov	r5,r18
 1003430:	d8800715 	stw	r2,28(sp)
 1003434:	1005bbc0 	call	1005bbc <__mcmp>
 1003438:	00803c0e 	bge	zero,r2,100352c <_dtoa_r+0xc94>
 100343c:	b009883a 	mov	r4,r22
 1003440:	213fffc4 	addi	r4,r4,-1
 1003444:	21400003 	ldbu	r5,0(r4)
 1003448:	00800e44 	movi	r2,57
 100344c:	28c03fcc 	andi	r3,r5,255
 1003450:	18c0201c 	xori	r3,r3,128
 1003454:	18ffe004 	addi	r3,r3,-128
 1003458:	1881981e 	bne	r3,r2,1003abc <_dtoa_r+0x1224>
 100345c:	d9800517 	ldw	r6,20(sp)
 1003460:	21bff71e 	bne	r4,r6,1003440 <_dtoa_r+0xba8>
 1003464:	d8800d17 	ldw	r2,52(sp)
 1003468:	37000044 	addi	fp,r6,1
 100346c:	10800044 	addi	r2,r2,1
 1003470:	d8800d15 	stw	r2,52(sp)
 1003474:	00800c44 	movi	r2,49
 1003478:	30800005 	stb	r2,0(r6)
 100347c:	d9001617 	ldw	r4,88(sp)
 1003480:	900b883a 	mov	r5,r18
 1003484:	1005a600 	call	1005a60 <_Bfree>
 1003488:	983ecd26 	beq	r19,zero,1002fc0 <_dtoa_r+0x728>
 100348c:	d8c00617 	ldw	r3,24(sp)
 1003490:	18000426 	beq	r3,zero,10034a4 <_dtoa_r+0xc0c>
 1003494:	1cc00326 	beq	r3,r19,10034a4 <_dtoa_r+0xc0c>
 1003498:	d9001617 	ldw	r4,88(sp)
 100349c:	180b883a 	mov	r5,r3
 10034a0:	1005a600 	call	1005a60 <_Bfree>
 10034a4:	d9001617 	ldw	r4,88(sp)
 10034a8:	980b883a 	mov	r5,r19
 10034ac:	1005a600 	call	1005a60 <_Bfree>
 10034b0:	003ec306 	br	1002fc0 <_dtoa_r+0x728>
 10034b4:	1805883a 	mov	r2,r3
 10034b8:	003eeb06 	br	1003068 <_dtoa_r+0x7d0>
 10034bc:	d9800a17 	ldw	r6,40(sp)
 10034c0:	d8c01117 	ldw	r3,68(sp)
 10034c4:	20bfff04 	addi	r2,r4,-4
 10034c8:	308d883a 	add	r6,r6,r2
 10034cc:	1887883a 	add	r3,r3,r2
 10034d0:	80a1883a 	add	r16,r16,r2
 10034d4:	d9800a15 	stw	r6,40(sp)
 10034d8:	d8c01115 	stw	r3,68(sp)
 10034dc:	003f1d06 	br	1003154 <_dtoa_r+0x8bc>
 10034e0:	a03f0c1e 	bne	r20,zero,1003114 <_dtoa_r+0x87c>
 10034e4:	00800434 	movhi	r2,16
 10034e8:	10bfffc4 	addi	r2,r2,-1
 10034ec:	a884703a 	and	r2,r21,r2
 10034f0:	103f081e 	bne	r2,zero,1003114 <_dtoa_r+0x87c>
 10034f4:	a89ffc2c 	andhi	r2,r21,32752
 10034f8:	103f0626 	beq	r2,zero,1003114 <_dtoa_r+0x87c>
 10034fc:	d8c01117 	ldw	r3,68(sp)
 1003500:	d9000a17 	ldw	r4,40(sp)
 1003504:	18c00044 	addi	r3,r3,1
 1003508:	21000044 	addi	r4,r4,1
 100350c:	d8c01115 	stw	r3,68(sp)
 1003510:	d9000a15 	stw	r4,40(sp)
 1003514:	003f0006 	br	1003118 <_dtoa_r+0x880>
 1003518:	d9400717 	ldw	r5,28(sp)
 100351c:	d9001617 	ldw	r4,88(sp)
 1003520:	10068ac0 	call	10068ac <__pow5mult>
 1003524:	d8800715 	stw	r2,28(sp)
 1003528:	003eed06 	br	10030e0 <_dtoa_r+0x848>
 100352c:	1000021e 	bne	r2,zero,1003538 <_dtoa_r+0xca0>
 1003530:	b880004c 	andi	r2,r23,1
 1003534:	103fc11e 	bne	r2,zero,100343c <_dtoa_r+0xba4>
 1003538:	b5bfffc4 	addi	r22,r22,-1
 100353c:	b0c00007 	ldb	r3,0(r22)
 1003540:	00800c04 	movi	r2,48
 1003544:	18bffc26 	beq	r3,r2,1003538 <_dtoa_r+0xca0>
 1003548:	b7000044 	addi	fp,r22,1
 100354c:	003fcb06 	br	100347c <_dtoa_r+0xbe4>
 1003550:	d9800d17 	ldw	r6,52(sp)
 1003554:	018fc83a 	sub	r7,zero,r6
 1003558:	3801f726 	beq	r7,zero,1003d38 <_dtoa_r+0x14a0>
 100355c:	398003cc 	andi	r6,r7,15
 1003560:	300c90fa 	slli	r6,r6,3
 1003564:	01404074 	movhi	r5,257
 1003568:	29756e04 	addi	r5,r5,-10824
 100356c:	d9001217 	ldw	r4,72(sp)
 1003570:	314d883a 	add	r6,r6,r5
 1003574:	30c00117 	ldw	r3,4(r6)
 1003578:	30800017 	ldw	r2,0(r6)
 100357c:	d9401317 	ldw	r5,76(sp)
 1003580:	3821d13a 	srai	r16,r7,4
 1003584:	100d883a 	mov	r6,r2
 1003588:	180f883a 	mov	r7,r3
 100358c:	1008ab40 	call	1008ab4 <__muldf3>
 1003590:	1011883a 	mov	r8,r2
 1003594:	1813883a 	mov	r9,r3
 1003598:	1029883a 	mov	r20,r2
 100359c:	182b883a 	mov	r21,r3
 10035a0:	8001e526 	beq	r16,zero,1003d38 <_dtoa_r+0x14a0>
 10035a4:	05800084 	movi	r22,2
 10035a8:	04404074 	movhi	r17,257
 10035ac:	8c75a004 	addi	r17,r17,-10624
 10035b0:	8080004c 	andi	r2,r16,1
 10035b4:	1005003a 	cmpeq	r2,r2,zero
 10035b8:	1000081e 	bne	r2,zero,10035dc <_dtoa_r+0xd44>
 10035bc:	89800017 	ldw	r6,0(r17)
 10035c0:	89c00117 	ldw	r7,4(r17)
 10035c4:	480b883a 	mov	r5,r9
 10035c8:	4009883a 	mov	r4,r8
 10035cc:	1008ab40 	call	1008ab4 <__muldf3>
 10035d0:	1011883a 	mov	r8,r2
 10035d4:	b5800044 	addi	r22,r22,1
 10035d8:	1813883a 	mov	r9,r3
 10035dc:	8021d07a 	srai	r16,r16,1
 10035e0:	8c400204 	addi	r17,r17,8
 10035e4:	803ff21e 	bne	r16,zero,10035b0 <_dtoa_r+0xd18>
 10035e8:	4029883a 	mov	r20,r8
 10035ec:	482b883a 	mov	r21,r9
 10035f0:	003dca06 	br	1002d1c <_dtoa_r+0x484>
 10035f4:	d9000817 	ldw	r4,32(sp)
 10035f8:	2005003a 	cmpeq	r2,r4,zero
 10035fc:	1001f61e 	bne	r2,zero,1003dd8 <_dtoa_r+0x1540>
 1003600:	dc001117 	ldw	r16,68(sp)
 1003604:	dc801017 	ldw	r18,64(sp)
 1003608:	18c10cc4 	addi	r3,r3,1075
 100360c:	003f6106 	br	1003394 <_dtoa_r+0xafc>
 1003610:	d8000b15 	stw	zero,44(sp)
 1003614:	d9802617 	ldw	r6,152(sp)
 1003618:	d8c00d17 	ldw	r3,52(sp)
 100361c:	30800044 	addi	r2,r6,1
 1003620:	18ad883a 	add	r22,r3,r2
 1003624:	b13fffc4 	addi	r4,r22,-1
 1003628:	d9000e15 	stw	r4,56(sp)
 100362c:	0581f60e 	bge	zero,r22,1003e08 <_dtoa_r+0x1570>
 1003630:	dd800f15 	stw	r22,60(sp)
 1003634:	003f3006 	br	10032f8 <_dtoa_r+0xa60>
 1003638:	d8000b15 	stw	zero,44(sp)
 100363c:	d9002617 	ldw	r4,152(sp)
 1003640:	0101eb0e 	bge	zero,r4,1003df0 <_dtoa_r+0x1558>
 1003644:	202d883a 	mov	r22,r4
 1003648:	d9000e15 	stw	r4,56(sp)
 100364c:	d9000f15 	stw	r4,60(sp)
 1003650:	003f2906 	br	10032f8 <_dtoa_r+0xa60>
 1003654:	01800044 	movi	r6,1
 1003658:	d9800b15 	stw	r6,44(sp)
 100365c:	003ff706 	br	100363c <_dtoa_r+0xda4>
 1003660:	01000044 	movi	r4,1
 1003664:	d9000b15 	stw	r4,44(sp)
 1003668:	003fea06 	br	1003614 <_dtoa_r+0xd7c>
 100366c:	04000c0e 	bge	zero,r16,10036a0 <_dtoa_r+0xe08>
 1003670:	d9400717 	ldw	r5,28(sp)
 1003674:	d9001617 	ldw	r4,88(sp)
 1003678:	01800044 	movi	r6,1
 100367c:	10063a40 	call	10063a4 <__lshift>
 1003680:	1009883a 	mov	r4,r2
 1003684:	900b883a 	mov	r5,r18
 1003688:	d8800715 	stw	r2,28(sp)
 100368c:	1005bbc0 	call	1005bbc <__mcmp>
 1003690:	0081e00e 	bge	zero,r2,1003e14 <_dtoa_r+0x157c>
 1003694:	bdc00044 	addi	r23,r23,1
 1003698:	00800e84 	movi	r2,58
 100369c:	b881a226 	beq	r23,r2,1003d28 <_dtoa_r+0x1490>
 10036a0:	b7000044 	addi	fp,r22,1
 10036a4:	b5c00005 	stb	r23,0(r22)
 10036a8:	003f7406 	br	100347c <_dtoa_r+0xbe4>
 10036ac:	00800e44 	movi	r2,57
 10036b0:	b8819d26 	beq	r23,r2,1003d28 <_dtoa_r+0x1490>
 10036b4:	053ffa0e 	bge	zero,r20,10036a0 <_dtoa_r+0xe08>
 10036b8:	8dc00c44 	addi	r23,r17,49
 10036bc:	003ff806 	br	10036a0 <_dtoa_r+0xe08>
 10036c0:	d9001617 	ldw	r4,88(sp)
 10036c4:	a80b883a 	mov	r5,r21
 10036c8:	04000044 	movi	r16,1
 10036cc:	1005a600 	call	1005a60 <_Bfree>
 10036d0:	003edf06 	br	1003250 <_dtoa_r+0x9b8>
 10036d4:	d9001617 	ldw	r4,88(sp)
 10036d8:	980b883a 	mov	r5,r19
 10036dc:	01800284 	movi	r6,10
 10036e0:	000f883a 	mov	r7,zero
 10036e4:	10067800 	call	1006780 <__multadd>
 10036e8:	1027883a 	mov	r19,r2
 10036ec:	d8800615 	stw	r2,24(sp)
 10036f0:	003ebb06 	br	10031e0 <_dtoa_r+0x948>
 10036f4:	d9801117 	ldw	r6,68(sp)
 10036f8:	d8800d17 	ldw	r2,52(sp)
 10036fc:	d8000915 	stw	zero,36(sp)
 1003700:	308dc83a 	sub	r6,r6,r2
 1003704:	0087c83a 	sub	r3,zero,r2
 1003708:	d9801115 	stw	r6,68(sp)
 100370c:	d8c01015 	stw	r3,64(sp)
 1003710:	003cfe06 	br	1002b0c <_dtoa_r+0x274>
 1003714:	018dc83a 	sub	r6,zero,r6
 1003718:	d9801115 	stw	r6,68(sp)
 100371c:	d8000a15 	stw	zero,40(sp)
 1003720:	003cf306 	br	1002af0 <_dtoa_r+0x258>
 1003724:	d9000d17 	ldw	r4,52(sp)
 1003728:	10093780 	call	1009378 <__floatsidf>
 100372c:	880b883a 	mov	r5,r17
 1003730:	8009883a 	mov	r4,r16
 1003734:	180f883a 	mov	r7,r3
 1003738:	100d883a 	mov	r6,r2
 100373c:	10091580 	call	1009158 <__nedf2>
 1003740:	103ce126 	beq	r2,zero,1002ac8 <_dtoa_r+0x230>
 1003744:	d9800d17 	ldw	r6,52(sp)
 1003748:	31bfffc4 	addi	r6,r6,-1
 100374c:	d9800d15 	stw	r6,52(sp)
 1003750:	003cdd06 	br	1002ac8 <_dtoa_r+0x230>
 1003754:	d9000717 	ldw	r4,28(sp)
 1003758:	900b883a 	mov	r5,r18
 100375c:	1005bbc0 	call	1005bbc <__mcmp>
 1003760:	103e8d0e 	bge	r2,zero,1003198 <_dtoa_r+0x900>
 1003764:	d9400717 	ldw	r5,28(sp)
 1003768:	d9001617 	ldw	r4,88(sp)
 100376c:	01800284 	movi	r6,10
 1003770:	000f883a 	mov	r7,zero
 1003774:	10067800 	call	1006780 <__multadd>
 1003778:	d9800d17 	ldw	r6,52(sp)
 100377c:	d8800715 	stw	r2,28(sp)
 1003780:	31bfffc4 	addi	r6,r6,-1
 1003784:	d9800d15 	stw	r6,52(sp)
 1003788:	b001a71e 	bne	r22,zero,1003e28 <_dtoa_r+0x1590>
 100378c:	d8800e17 	ldw	r2,56(sp)
 1003790:	d8800f15 	stw	r2,60(sp)
 1003794:	003e8006 	br	1003198 <_dtoa_r+0x900>
 1003798:	90800417 	ldw	r2,16(r18)
 100379c:	1085883a 	add	r2,r2,r2
 10037a0:	1085883a 	add	r2,r2,r2
 10037a4:	1485883a 	add	r2,r2,r18
 10037a8:	11000417 	ldw	r4,16(r2)
 10037ac:	1005a880 	call	1005a88 <__hi0bits>
 10037b0:	00c00804 	movi	r3,32
 10037b4:	1887c83a 	sub	r3,r3,r2
 10037b8:	003e5a06 	br	1003124 <_dtoa_r+0x88c>
 10037bc:	d9400717 	ldw	r5,28(sp)
 10037c0:	d9801017 	ldw	r6,64(sp)
 10037c4:	d9001617 	ldw	r4,88(sp)
 10037c8:	10068ac0 	call	10068ac <__pow5mult>
 10037cc:	d8800715 	stw	r2,28(sp)
 10037d0:	003e4306 	br	10030e0 <_dtoa_r+0x848>
 10037d4:	d9800f17 	ldw	r6,60(sp)
 10037d8:	d8800d17 	ldw	r2,52(sp)
 10037dc:	d9800315 	stw	r6,12(sp)
 10037e0:	d8800415 	stw	r2,16(sp)
 10037e4:	d8c00b17 	ldw	r3,44(sp)
 10037e8:	1805003a 	cmpeq	r2,r3,zero
 10037ec:	1000e21e 	bne	r2,zero,1003b78 <_dtoa_r+0x12e0>
 10037f0:	d9000317 	ldw	r4,12(sp)
 10037f4:	0005883a 	mov	r2,zero
 10037f8:	00cff834 	movhi	r3,16352
 10037fc:	200c90fa 	slli	r6,r4,3
 1003800:	01004074 	movhi	r4,257
 1003804:	21356e04 	addi	r4,r4,-10824
 1003808:	180b883a 	mov	r5,r3
 100380c:	310d883a 	add	r6,r6,r4
 1003810:	327fff17 	ldw	r9,-4(r6)
 1003814:	323ffe17 	ldw	r8,-8(r6)
 1003818:	1009883a 	mov	r4,r2
 100381c:	480f883a 	mov	r7,r9
 1003820:	400d883a 	mov	r6,r8
 1003824:	1008e780 	call	1008e78 <__divdf3>
 1003828:	180b883a 	mov	r5,r3
 100382c:	b00d883a 	mov	r6,r22
 1003830:	b80f883a 	mov	r7,r23
 1003834:	1009883a 	mov	r4,r2
 1003838:	10089c00 	call	10089c0 <__subdf3>
 100383c:	a80b883a 	mov	r5,r21
 1003840:	a009883a 	mov	r4,r20
 1003844:	d8c01915 	stw	r3,100(sp)
 1003848:	d8801815 	stw	r2,96(sp)
 100384c:	10094700 	call	1009470 <__fixdfsi>
 1003850:	1009883a 	mov	r4,r2
 1003854:	1027883a 	mov	r19,r2
 1003858:	10093780 	call	1009378 <__floatsidf>
 100385c:	a80b883a 	mov	r5,r21
 1003860:	a009883a 	mov	r4,r20
 1003864:	180f883a 	mov	r7,r3
 1003868:	100d883a 	mov	r6,r2
 100386c:	10089c00 	call	10089c0 <__subdf3>
 1003870:	d9801817 	ldw	r6,96(sp)
 1003874:	1823883a 	mov	r17,r3
 1003878:	d8801415 	stw	r2,80(sp)
 100387c:	302d883a 	mov	r22,r6
 1003880:	d9800517 	ldw	r6,20(sp)
 1003884:	9cc00c04 	addi	r19,r19,48
 1003888:	dc401515 	stw	r17,84(sp)
 100388c:	d8c01917 	ldw	r3,100(sp)
 1003890:	34c00005 	stb	r19,0(r6)
 1003894:	d8800517 	ldw	r2,20(sp)
 1003898:	d9401917 	ldw	r5,100(sp)
 100389c:	d9801417 	ldw	r6,80(sp)
 10038a0:	b009883a 	mov	r4,r22
 10038a4:	880f883a 	mov	r7,r17
 10038a8:	182f883a 	mov	r23,r3
 10038ac:	17000044 	addi	fp,r2,1
 10038b0:	10091e00 	call	10091e0 <__gtdf2>
 10038b4:	00804e16 	blt	zero,r2,10039f0 <_dtoa_r+0x1158>
 10038b8:	d9801417 	ldw	r6,80(sp)
 10038bc:	0005883a 	mov	r2,zero
 10038c0:	00cffc34 	movhi	r3,16368
 10038c4:	180b883a 	mov	r5,r3
 10038c8:	880f883a 	mov	r7,r17
 10038cc:	1009883a 	mov	r4,r2
 10038d0:	10089c00 	call	10089c0 <__subdf3>
 10038d4:	d9401917 	ldw	r5,100(sp)
 10038d8:	180f883a 	mov	r7,r3
 10038dc:	b009883a 	mov	r4,r22
 10038e0:	100d883a 	mov	r6,r2
 10038e4:	10091e00 	call	10091e0 <__gtdf2>
 10038e8:	00bda216 	blt	zero,r2,1002f74 <_dtoa_r+0x6dc>
 10038ec:	d8c00317 	ldw	r3,12(sp)
 10038f0:	00800044 	movi	r2,1
 10038f4:	10c01216 	blt	r2,r3,1003940 <_dtoa_r+0x10a8>
 10038f8:	003d4506 	br	1002e10 <_dtoa_r+0x578>
 10038fc:	d9801417 	ldw	r6,80(sp)
 1003900:	0005883a 	mov	r2,zero
 1003904:	00cffc34 	movhi	r3,16368
 1003908:	180b883a 	mov	r5,r3
 100390c:	880f883a 	mov	r7,r17
 1003910:	1009883a 	mov	r4,r2
 1003914:	10089c00 	call	10089c0 <__subdf3>
 1003918:	d9c01b17 	ldw	r7,108(sp)
 100391c:	180b883a 	mov	r5,r3
 1003920:	1009883a 	mov	r4,r2
 1003924:	b00d883a 	mov	r6,r22
 1003928:	10092f00 	call	10092f0 <__ltdf2>
 100392c:	103d9116 	blt	r2,zero,1002f74 <_dtoa_r+0x6dc>
 1003930:	d9800517 	ldw	r6,20(sp)
 1003934:	d9000317 	ldw	r4,12(sp)
 1003938:	3105883a 	add	r2,r6,r4
 100393c:	e0bd3426 	beq	fp,r2,1002e10 <_dtoa_r+0x578>
 1003940:	04500934 	movhi	r17,16420
 1003944:	0021883a 	mov	r16,zero
 1003948:	b80b883a 	mov	r5,r23
 100394c:	b009883a 	mov	r4,r22
 1003950:	800d883a 	mov	r6,r16
 1003954:	880f883a 	mov	r7,r17
 1003958:	1008ab40 	call	1008ab4 <__muldf3>
 100395c:	d9401517 	ldw	r5,84(sp)
 1003960:	d9001417 	ldw	r4,80(sp)
 1003964:	880f883a 	mov	r7,r17
 1003968:	000d883a 	mov	r6,zero
 100396c:	d8801a15 	stw	r2,104(sp)
 1003970:	d8c01b15 	stw	r3,108(sp)
 1003974:	1008ab40 	call	1008ab4 <__muldf3>
 1003978:	180b883a 	mov	r5,r3
 100397c:	1009883a 	mov	r4,r2
 1003980:	1823883a 	mov	r17,r3
 1003984:	1021883a 	mov	r16,r2
 1003988:	10094700 	call	1009470 <__fixdfsi>
 100398c:	1009883a 	mov	r4,r2
 1003990:	102b883a 	mov	r21,r2
 1003994:	10093780 	call	1009378 <__floatsidf>
 1003998:	880b883a 	mov	r5,r17
 100399c:	8009883a 	mov	r4,r16
 10039a0:	180f883a 	mov	r7,r3
 10039a4:	100d883a 	mov	r6,r2
 10039a8:	10089c00 	call	10089c0 <__subdf3>
 10039ac:	1021883a 	mov	r16,r2
 10039b0:	d9001b17 	ldw	r4,108(sp)
 10039b4:	1823883a 	mov	r17,r3
 10039b8:	dc001415 	stw	r16,80(sp)
 10039bc:	ad400c04 	addi	r21,r21,48
 10039c0:	dc401515 	stw	r17,84(sp)
 10039c4:	d8801a17 	ldw	r2,104(sp)
 10039c8:	e5400005 	stb	r21,0(fp)
 10039cc:	202f883a 	mov	r23,r4
 10039d0:	d9c01b17 	ldw	r7,108(sp)
 10039d4:	d9001417 	ldw	r4,80(sp)
 10039d8:	880b883a 	mov	r5,r17
 10039dc:	100d883a 	mov	r6,r2
 10039e0:	102d883a 	mov	r22,r2
 10039e4:	e7000044 	addi	fp,fp,1
 10039e8:	10092f00 	call	10092f0 <__ltdf2>
 10039ec:	103fc30e 	bge	r2,zero,10038fc <_dtoa_r+0x1064>
 10039f0:	d9000417 	ldw	r4,16(sp)
 10039f4:	d9000d15 	stw	r4,52(sp)
 10039f8:	003d7106 	br	1002fc0 <_dtoa_r+0x728>
 10039fc:	d9801717 	ldw	r6,92(sp)
 1003a00:	00800084 	movi	r2,2
 1003a04:	11bde60e 	bge	r2,r6,10031a0 <_dtoa_r+0x908>
 1003a08:	203cfb1e 	bne	r4,zero,1002df8 <_dtoa_r+0x560>
 1003a0c:	d9001617 	ldw	r4,88(sp)
 1003a10:	900b883a 	mov	r5,r18
 1003a14:	01800144 	movi	r6,5
 1003a18:	000f883a 	mov	r7,zero
 1003a1c:	10067800 	call	1006780 <__multadd>
 1003a20:	d9000717 	ldw	r4,28(sp)
 1003a24:	100b883a 	mov	r5,r2
 1003a28:	1025883a 	mov	r18,r2
 1003a2c:	1005bbc0 	call	1005bbc <__mcmp>
 1003a30:	00bcf10e 	bge	zero,r2,1002df8 <_dtoa_r+0x560>
 1003a34:	d8c00d17 	ldw	r3,52(sp)
 1003a38:	d9000517 	ldw	r4,20(sp)
 1003a3c:	d8000615 	stw	zero,24(sp)
 1003a40:	18c00044 	addi	r3,r3,1
 1003a44:	d8c00d15 	stw	r3,52(sp)
 1003a48:	00800c44 	movi	r2,49
 1003a4c:	27000044 	addi	fp,r4,1
 1003a50:	20800005 	stb	r2,0(r4)
 1003a54:	003e8906 	br	100347c <_dtoa_r+0xbe4>
 1003a58:	d8c00517 	ldw	r3,20(sp)
 1003a5c:	003bc206 	br	1002968 <_dtoa_r+0xd0>
 1003a60:	01804074 	movhi	r6,257
 1003a64:	31b5a004 	addi	r6,r6,-10624
 1003a68:	30c00917 	ldw	r3,36(r6)
 1003a6c:	30800817 	ldw	r2,32(r6)
 1003a70:	d9001217 	ldw	r4,72(sp)
 1003a74:	d9401317 	ldw	r5,76(sp)
 1003a78:	180f883a 	mov	r7,r3
 1003a7c:	100d883a 	mov	r6,r2
 1003a80:	1008e780 	call	1008e78 <__divdf3>
 1003a84:	948003cc 	andi	r18,r18,15
 1003a88:	058000c4 	movi	r22,3
 1003a8c:	1029883a 	mov	r20,r2
 1003a90:	182b883a 	mov	r21,r3
 1003a94:	003c8906 	br	1002cbc <_dtoa_r+0x424>
 1003a98:	d9001017 	ldw	r4,64(sp)
 1003a9c:	d9800917 	ldw	r6,36(sp)
 1003aa0:	0025883a 	mov	r18,zero
 1003aa4:	1105c83a 	sub	r2,r2,r4
 1003aa8:	2089883a 	add	r4,r4,r2
 1003aac:	308d883a 	add	r6,r6,r2
 1003ab0:	d9001015 	stw	r4,64(sp)
 1003ab4:	d9800915 	stw	r6,36(sp)
 1003ab8:	003e3206 	br	1003384 <_dtoa_r+0xaec>
 1003abc:	28800044 	addi	r2,r5,1
 1003ac0:	27000044 	addi	fp,r4,1
 1003ac4:	20800005 	stb	r2,0(r4)
 1003ac8:	003e6c06 	br	100347c <_dtoa_r+0xbe4>
 1003acc:	d8800f17 	ldw	r2,60(sp)
 1003ad0:	00bce016 	blt	zero,r2,1002e54 <_dtoa_r+0x5bc>
 1003ad4:	d9800f17 	ldw	r6,60(sp)
 1003ad8:	303cc51e 	bne	r6,zero,1002df0 <_dtoa_r+0x558>
 1003adc:	0005883a 	mov	r2,zero
 1003ae0:	00d00534 	movhi	r3,16404
 1003ae4:	980b883a 	mov	r5,r19
 1003ae8:	180f883a 	mov	r7,r3
 1003aec:	9009883a 	mov	r4,r18
 1003af0:	100d883a 	mov	r6,r2
 1003af4:	1008ab40 	call	1008ab4 <__muldf3>
 1003af8:	180b883a 	mov	r5,r3
 1003afc:	a80f883a 	mov	r7,r21
 1003b00:	1009883a 	mov	r4,r2
 1003b04:	a00d883a 	mov	r6,r20
 1003b08:	10092680 	call	1009268 <__gedf2>
 1003b0c:	103cb80e 	bge	r2,zero,1002df0 <_dtoa_r+0x558>
 1003b10:	0027883a 	mov	r19,zero
 1003b14:	0025883a 	mov	r18,zero
 1003b18:	003fc606 	br	1003a34 <_dtoa_r+0x119c>
 1003b1c:	99400117 	ldw	r5,4(r19)
 1003b20:	d9001617 	ldw	r4,88(sp)
 1003b24:	1005fe00 	call	1005fe0 <_Balloc>
 1003b28:	99800417 	ldw	r6,16(r19)
 1003b2c:	11000304 	addi	r4,r2,12
 1003b30:	99400304 	addi	r5,r19,12
 1003b34:	318d883a 	add	r6,r6,r6
 1003b38:	318d883a 	add	r6,r6,r6
 1003b3c:	31800204 	addi	r6,r6,8
 1003b40:	1023883a 	mov	r17,r2
 1003b44:	10058480 	call	1005848 <memcpy>
 1003b48:	d9001617 	ldw	r4,88(sp)
 1003b4c:	880b883a 	mov	r5,r17
 1003b50:	01800044 	movi	r6,1
 1003b54:	10063a40 	call	10063a4 <__lshift>
 1003b58:	100b883a 	mov	r5,r2
 1003b5c:	003d9c06 	br	10031d0 <_dtoa_r+0x938>
 1003b60:	00800e44 	movi	r2,57
 1003b64:	b8807026 	beq	r23,r2,1003d28 <_dtoa_r+0x1490>
 1003b68:	b8800044 	addi	r2,r23,1
 1003b6c:	b7000044 	addi	fp,r22,1
 1003b70:	b0800005 	stb	r2,0(r22)
 1003b74:	003e4106 	br	100347c <_dtoa_r+0xbe4>
 1003b78:	d8800317 	ldw	r2,12(sp)
 1003b7c:	01804074 	movhi	r6,257
 1003b80:	31b56e04 	addi	r6,r6,-10824
 1003b84:	b009883a 	mov	r4,r22
 1003b88:	100e90fa 	slli	r7,r2,3
 1003b8c:	b80b883a 	mov	r5,r23
 1003b90:	398f883a 	add	r7,r7,r6
 1003b94:	38bffe17 	ldw	r2,-8(r7)
 1003b98:	d9800517 	ldw	r6,20(sp)
 1003b9c:	38ffff17 	ldw	r3,-4(r7)
 1003ba0:	37000044 	addi	fp,r6,1
 1003ba4:	180f883a 	mov	r7,r3
 1003ba8:	100d883a 	mov	r6,r2
 1003bac:	1008ab40 	call	1008ab4 <__muldf3>
 1003bb0:	a80b883a 	mov	r5,r21
 1003bb4:	a009883a 	mov	r4,r20
 1003bb8:	182f883a 	mov	r23,r3
 1003bbc:	102d883a 	mov	r22,r2
 1003bc0:	10094700 	call	1009470 <__fixdfsi>
 1003bc4:	1009883a 	mov	r4,r2
 1003bc8:	1027883a 	mov	r19,r2
 1003bcc:	10093780 	call	1009378 <__floatsidf>
 1003bd0:	a80b883a 	mov	r5,r21
 1003bd4:	a009883a 	mov	r4,r20
 1003bd8:	180f883a 	mov	r7,r3
 1003bdc:	100d883a 	mov	r6,r2
 1003be0:	10089c00 	call	10089c0 <__subdf3>
 1003be4:	180b883a 	mov	r5,r3
 1003be8:	d8c00517 	ldw	r3,20(sp)
 1003bec:	9cc00c04 	addi	r19,r19,48
 1003bf0:	1009883a 	mov	r4,r2
 1003bf4:	1cc00005 	stb	r19,0(r3)
 1003bf8:	2021883a 	mov	r16,r4
 1003bfc:	d9000317 	ldw	r4,12(sp)
 1003c00:	00800044 	movi	r2,1
 1003c04:	2823883a 	mov	r17,r5
 1003c08:	20802226 	beq	r4,r2,1003c94 <_dtoa_r+0x13fc>
 1003c0c:	1029883a 	mov	r20,r2
 1003c10:	0005883a 	mov	r2,zero
 1003c14:	00d00934 	movhi	r3,16420
 1003c18:	180f883a 	mov	r7,r3
 1003c1c:	100d883a 	mov	r6,r2
 1003c20:	880b883a 	mov	r5,r17
 1003c24:	8009883a 	mov	r4,r16
 1003c28:	1008ab40 	call	1008ab4 <__muldf3>
 1003c2c:	180b883a 	mov	r5,r3
 1003c30:	1009883a 	mov	r4,r2
 1003c34:	1823883a 	mov	r17,r3
 1003c38:	1021883a 	mov	r16,r2
 1003c3c:	10094700 	call	1009470 <__fixdfsi>
 1003c40:	1009883a 	mov	r4,r2
 1003c44:	102b883a 	mov	r21,r2
 1003c48:	10093780 	call	1009378 <__floatsidf>
 1003c4c:	880b883a 	mov	r5,r17
 1003c50:	8009883a 	mov	r4,r16
 1003c54:	180f883a 	mov	r7,r3
 1003c58:	100d883a 	mov	r6,r2
 1003c5c:	10089c00 	call	10089c0 <__subdf3>
 1003c60:	180b883a 	mov	r5,r3
 1003c64:	d8c00517 	ldw	r3,20(sp)
 1003c68:	1009883a 	mov	r4,r2
 1003c6c:	ad400c04 	addi	r21,r21,48
 1003c70:	1d05883a 	add	r2,r3,r20
 1003c74:	15400005 	stb	r21,0(r2)
 1003c78:	2021883a 	mov	r16,r4
 1003c7c:	d9000317 	ldw	r4,12(sp)
 1003c80:	a5000044 	addi	r20,r20,1
 1003c84:	2823883a 	mov	r17,r5
 1003c88:	a13fe11e 	bne	r20,r4,1003c10 <_dtoa_r+0x1378>
 1003c8c:	e505883a 	add	r2,fp,r20
 1003c90:	173fffc4 	addi	fp,r2,-1
 1003c94:	0025883a 	mov	r18,zero
 1003c98:	04cff834 	movhi	r19,16352
 1003c9c:	b009883a 	mov	r4,r22
 1003ca0:	b80b883a 	mov	r5,r23
 1003ca4:	900d883a 	mov	r6,r18
 1003ca8:	980f883a 	mov	r7,r19
 1003cac:	1008a400 	call	1008a40 <__adddf3>
 1003cb0:	180b883a 	mov	r5,r3
 1003cb4:	1009883a 	mov	r4,r2
 1003cb8:	800d883a 	mov	r6,r16
 1003cbc:	880f883a 	mov	r7,r17
 1003cc0:	10092f00 	call	10092f0 <__ltdf2>
 1003cc4:	103cab16 	blt	r2,zero,1002f74 <_dtoa_r+0x6dc>
 1003cc8:	0009883a 	mov	r4,zero
 1003ccc:	980b883a 	mov	r5,r19
 1003cd0:	b80f883a 	mov	r7,r23
 1003cd4:	b00d883a 	mov	r6,r22
 1003cd8:	10089c00 	call	10089c0 <__subdf3>
 1003cdc:	180b883a 	mov	r5,r3
 1003ce0:	880f883a 	mov	r7,r17
 1003ce4:	1009883a 	mov	r4,r2
 1003ce8:	800d883a 	mov	r6,r16
 1003cec:	10091e00 	call	10091e0 <__gtdf2>
 1003cf0:	00bc470e 	bge	zero,r2,1002e10 <_dtoa_r+0x578>
 1003cf4:	00c00c04 	movi	r3,48
 1003cf8:	e73fffc4 	addi	fp,fp,-1
 1003cfc:	e0800007 	ldb	r2,0(fp)
 1003d00:	10fffd26 	beq	r2,r3,1003cf8 <_dtoa_r+0x1460>
 1003d04:	d9800417 	ldw	r6,16(sp)
 1003d08:	e7000044 	addi	fp,fp,1
 1003d0c:	d9800d15 	stw	r6,52(sp)
 1003d10:	003cab06 	br	1002fc0 <_dtoa_r+0x728>
 1003d14:	d8c00f17 	ldw	r3,60(sp)
 1003d18:	d9001117 	ldw	r4,68(sp)
 1003d1c:	20e1c83a 	sub	r16,r4,r3
 1003d20:	0007883a 	mov	r3,zero
 1003d24:	003d9b06 	br	1003394 <_dtoa_r+0xafc>
 1003d28:	00800e44 	movi	r2,57
 1003d2c:	b0800005 	stb	r2,0(r22)
 1003d30:	b5800044 	addi	r22,r22,1
 1003d34:	003dc106 	br	100343c <_dtoa_r+0xba4>
 1003d38:	05800084 	movi	r22,2
 1003d3c:	003bf706 	br	1002d1c <_dtoa_r+0x484>
 1003d40:	d9000f17 	ldw	r4,60(sp)
 1003d44:	013c000e 	bge	zero,r4,1002d48 <_dtoa_r+0x4b0>
 1003d48:	d9800e17 	ldw	r6,56(sp)
 1003d4c:	01bc300e 	bge	zero,r6,1002e10 <_dtoa_r+0x578>
 1003d50:	0005883a 	mov	r2,zero
 1003d54:	00d00934 	movhi	r3,16420
 1003d58:	a80b883a 	mov	r5,r21
 1003d5c:	180f883a 	mov	r7,r3
 1003d60:	a009883a 	mov	r4,r20
 1003d64:	100d883a 	mov	r6,r2
 1003d68:	1008ab40 	call	1008ab4 <__muldf3>
 1003d6c:	b1000044 	addi	r4,r22,1
 1003d70:	1021883a 	mov	r16,r2
 1003d74:	1823883a 	mov	r17,r3
 1003d78:	10093780 	call	1009378 <__floatsidf>
 1003d7c:	880b883a 	mov	r5,r17
 1003d80:	8009883a 	mov	r4,r16
 1003d84:	180f883a 	mov	r7,r3
 1003d88:	100d883a 	mov	r6,r2
 1003d8c:	1008ab40 	call	1008ab4 <__muldf3>
 1003d90:	0011883a 	mov	r8,zero
 1003d94:	02500734 	movhi	r9,16412
 1003d98:	180b883a 	mov	r5,r3
 1003d9c:	480f883a 	mov	r7,r9
 1003da0:	1009883a 	mov	r4,r2
 1003da4:	400d883a 	mov	r6,r8
 1003da8:	1008a400 	call	1008a40 <__adddf3>
 1003dac:	102d883a 	mov	r22,r2
 1003db0:	00bf3034 	movhi	r2,64704
 1003db4:	10ef883a 	add	r23,r2,r3
 1003db8:	d8800d17 	ldw	r2,52(sp)
 1003dbc:	d8c00e17 	ldw	r3,56(sp)
 1003dc0:	8029883a 	mov	r20,r16
 1003dc4:	10bfffc4 	addi	r2,r2,-1
 1003dc8:	882b883a 	mov	r21,r17
 1003dcc:	d8800415 	stw	r2,16(sp)
 1003dd0:	d8c00315 	stw	r3,12(sp)
 1003dd4:	003e8306 	br	10037e4 <_dtoa_r+0xf4c>
 1003dd8:	d8800117 	ldw	r2,4(sp)
 1003ddc:	dc001117 	ldw	r16,68(sp)
 1003de0:	dc801017 	ldw	r18,64(sp)
 1003de4:	00c00d84 	movi	r3,54
 1003de8:	1887c83a 	sub	r3,r3,r2
 1003dec:	003d6906 	br	1003394 <_dtoa_r+0xafc>
 1003df0:	01800044 	movi	r6,1
 1003df4:	3021883a 	mov	r16,r6
 1003df8:	d9800f15 	stw	r6,60(sp)
 1003dfc:	d9802615 	stw	r6,152(sp)
 1003e00:	d9800e15 	stw	r6,56(sp)
 1003e04:	003b9306 	br	1002c54 <_dtoa_r+0x3bc>
 1003e08:	b021883a 	mov	r16,r22
 1003e0c:	dd800f15 	stw	r22,60(sp)
 1003e10:	003b9006 	br	1002c54 <_dtoa_r+0x3bc>
 1003e14:	103e221e 	bne	r2,zero,10036a0 <_dtoa_r+0xe08>
 1003e18:	b880004c 	andi	r2,r23,1
 1003e1c:	1005003a 	cmpeq	r2,r2,zero
 1003e20:	103e1f1e 	bne	r2,zero,10036a0 <_dtoa_r+0xe08>
 1003e24:	003e1b06 	br	1003694 <_dtoa_r+0xdfc>
 1003e28:	d9001617 	ldw	r4,88(sp)
 1003e2c:	980b883a 	mov	r5,r19
 1003e30:	01800284 	movi	r6,10
 1003e34:	000f883a 	mov	r7,zero
 1003e38:	10067800 	call	1006780 <__multadd>
 1003e3c:	d8c00e17 	ldw	r3,56(sp)
 1003e40:	1027883a 	mov	r19,r2
 1003e44:	d8c00f15 	stw	r3,60(sp)
 1003e48:	003cd306 	br	1003198 <_dtoa_r+0x900>

01003e4c <_fflush_r>:
 1003e4c:	defffb04 	addi	sp,sp,-20
 1003e50:	dcc00315 	stw	r19,12(sp)
 1003e54:	dc800215 	stw	r18,8(sp)
 1003e58:	dfc00415 	stw	ra,16(sp)
 1003e5c:	dc400115 	stw	r17,4(sp)
 1003e60:	dc000015 	stw	r16,0(sp)
 1003e64:	2027883a 	mov	r19,r4
 1003e68:	2825883a 	mov	r18,r5
 1003e6c:	20000226 	beq	r4,zero,1003e78 <_fflush_r+0x2c>
 1003e70:	20800e17 	ldw	r2,56(r4)
 1003e74:	10005626 	beq	r2,zero,1003fd0 <_fflush_r+0x184>
 1003e78:	9100030b 	ldhu	r4,12(r18)
 1003e7c:	20ffffcc 	andi	r3,r4,65535
 1003e80:	18e0001c 	xori	r3,r3,32768
 1003e84:	18e00004 	addi	r3,r3,-32768
 1003e88:	1880020c 	andi	r2,r3,8
 1003e8c:	1000261e 	bne	r2,zero,1003f28 <_fflush_r+0xdc>
 1003e90:	90c00117 	ldw	r3,4(r18)
 1003e94:	20820014 	ori	r2,r4,2048
 1003e98:	9080030d 	sth	r2,12(r18)
 1003e9c:	1009883a 	mov	r4,r2
 1003ea0:	00c0400e 	bge	zero,r3,1003fa4 <_fflush_r+0x158>
 1003ea4:	92000a17 	ldw	r8,40(r18)
 1003ea8:	40004026 	beq	r8,zero,1003fac <_fflush_r+0x160>
 1003eac:	2084000c 	andi	r2,r4,4096
 1003eb0:	10005326 	beq	r2,zero,1004000 <_fflush_r+0x1b4>
 1003eb4:	94001417 	ldw	r16,80(r18)
 1003eb8:	9080030b 	ldhu	r2,12(r18)
 1003ebc:	1080010c 	andi	r2,r2,4
 1003ec0:	1000481e 	bne	r2,zero,1003fe4 <_fflush_r+0x198>
 1003ec4:	91400717 	ldw	r5,28(r18)
 1003ec8:	9809883a 	mov	r4,r19
 1003ecc:	800d883a 	mov	r6,r16
 1003ed0:	000f883a 	mov	r7,zero
 1003ed4:	403ee83a 	callr	r8
 1003ed8:	8080261e 	bne	r16,r2,1003f74 <_fflush_r+0x128>
 1003edc:	9080030b 	ldhu	r2,12(r18)
 1003ee0:	91000417 	ldw	r4,16(r18)
 1003ee4:	90000115 	stw	zero,4(r18)
 1003ee8:	10bdffcc 	andi	r2,r2,63487
 1003eec:	10ffffcc 	andi	r3,r2,65535
 1003ef0:	18c4000c 	andi	r3,r3,4096
 1003ef4:	9080030d 	sth	r2,12(r18)
 1003ef8:	91000015 	stw	r4,0(r18)
 1003efc:	18002b26 	beq	r3,zero,1003fac <_fflush_r+0x160>
 1003f00:	0007883a 	mov	r3,zero
 1003f04:	1805883a 	mov	r2,r3
 1003f08:	94001415 	stw	r16,80(r18)
 1003f0c:	dfc00417 	ldw	ra,16(sp)
 1003f10:	dcc00317 	ldw	r19,12(sp)
 1003f14:	dc800217 	ldw	r18,8(sp)
 1003f18:	dc400117 	ldw	r17,4(sp)
 1003f1c:	dc000017 	ldw	r16,0(sp)
 1003f20:	dec00504 	addi	sp,sp,20
 1003f24:	f800283a 	ret
 1003f28:	94400417 	ldw	r17,16(r18)
 1003f2c:	88001f26 	beq	r17,zero,1003fac <_fflush_r+0x160>
 1003f30:	90800017 	ldw	r2,0(r18)
 1003f34:	18c000cc 	andi	r3,r3,3
 1003f38:	94400015 	stw	r17,0(r18)
 1003f3c:	1461c83a 	sub	r16,r2,r17
 1003f40:	18002526 	beq	r3,zero,1003fd8 <_fflush_r+0x18c>
 1003f44:	0005883a 	mov	r2,zero
 1003f48:	90800215 	stw	r2,8(r18)
 1003f4c:	0400170e 	bge	zero,r16,1003fac <_fflush_r+0x160>
 1003f50:	90c00917 	ldw	r3,36(r18)
 1003f54:	91400717 	ldw	r5,28(r18)
 1003f58:	880d883a 	mov	r6,r17
 1003f5c:	800f883a 	mov	r7,r16
 1003f60:	9809883a 	mov	r4,r19
 1003f64:	183ee83a 	callr	r3
 1003f68:	88a3883a 	add	r17,r17,r2
 1003f6c:	80a1c83a 	sub	r16,r16,r2
 1003f70:	00bff616 	blt	zero,r2,1003f4c <_fflush_r+0x100>
 1003f74:	9080030b 	ldhu	r2,12(r18)
 1003f78:	00ffffc4 	movi	r3,-1
 1003f7c:	10801014 	ori	r2,r2,64
 1003f80:	9080030d 	sth	r2,12(r18)
 1003f84:	1805883a 	mov	r2,r3
 1003f88:	dfc00417 	ldw	ra,16(sp)
 1003f8c:	dcc00317 	ldw	r19,12(sp)
 1003f90:	dc800217 	ldw	r18,8(sp)
 1003f94:	dc400117 	ldw	r17,4(sp)
 1003f98:	dc000017 	ldw	r16,0(sp)
 1003f9c:	dec00504 	addi	sp,sp,20
 1003fa0:	f800283a 	ret
 1003fa4:	90800f17 	ldw	r2,60(r18)
 1003fa8:	00bfbe16 	blt	zero,r2,1003ea4 <_fflush_r+0x58>
 1003fac:	0007883a 	mov	r3,zero
 1003fb0:	1805883a 	mov	r2,r3
 1003fb4:	dfc00417 	ldw	ra,16(sp)
 1003fb8:	dcc00317 	ldw	r19,12(sp)
 1003fbc:	dc800217 	ldw	r18,8(sp)
 1003fc0:	dc400117 	ldw	r17,4(sp)
 1003fc4:	dc000017 	ldw	r16,0(sp)
 1003fc8:	dec00504 	addi	sp,sp,20
 1003fcc:	f800283a 	ret
 1003fd0:	10040e40 	call	10040e4 <__sinit>
 1003fd4:	003fa806 	br	1003e78 <_fflush_r+0x2c>
 1003fd8:	90800517 	ldw	r2,20(r18)
 1003fdc:	90800215 	stw	r2,8(r18)
 1003fe0:	003fda06 	br	1003f4c <_fflush_r+0x100>
 1003fe4:	90800117 	ldw	r2,4(r18)
 1003fe8:	90c00c17 	ldw	r3,48(r18)
 1003fec:	80a1c83a 	sub	r16,r16,r2
 1003ff0:	183fb426 	beq	r3,zero,1003ec4 <_fflush_r+0x78>
 1003ff4:	90800f17 	ldw	r2,60(r18)
 1003ff8:	80a1c83a 	sub	r16,r16,r2
 1003ffc:	003fb106 	br	1003ec4 <_fflush_r+0x78>
 1004000:	91400717 	ldw	r5,28(r18)
 1004004:	9809883a 	mov	r4,r19
 1004008:	000d883a 	mov	r6,zero
 100400c:	01c00044 	movi	r7,1
 1004010:	403ee83a 	callr	r8
 1004014:	1021883a 	mov	r16,r2
 1004018:	00bfffc4 	movi	r2,-1
 100401c:	80800226 	beq	r16,r2,1004028 <_fflush_r+0x1dc>
 1004020:	92000a17 	ldw	r8,40(r18)
 1004024:	003fa406 	br	1003eb8 <_fflush_r+0x6c>
 1004028:	98c00017 	ldw	r3,0(r19)
 100402c:	00800744 	movi	r2,29
 1004030:	18bfde26 	beq	r3,r2,1003fac <_fflush_r+0x160>
 1004034:	9080030b 	ldhu	r2,12(r18)
 1004038:	8007883a 	mov	r3,r16
 100403c:	10801014 	ori	r2,r2,64
 1004040:	9080030d 	sth	r2,12(r18)
 1004044:	003fcf06 	br	1003f84 <_fflush_r+0x138>

01004048 <fflush>:
 1004048:	01404034 	movhi	r5,256
 100404c:	294f9304 	addi	r5,r5,15948
 1004050:	2007883a 	mov	r3,r4
 1004054:	20000526 	beq	r4,zero,100406c <fflush+0x24>
 1004058:	00804074 	movhi	r2,257
 100405c:	10bc9f04 	addi	r2,r2,-3460
 1004060:	11000017 	ldw	r4,0(r2)
 1004064:	180b883a 	mov	r5,r3
 1004068:	1003e4c1 	jmpi	1003e4c <_fflush_r>
 100406c:	00804074 	movhi	r2,257
 1004070:	10bca004 	addi	r2,r2,-3456
 1004074:	11000017 	ldw	r4,0(r2)
 1004078:	1004c4c1 	jmpi	1004c4c <_fwalk_reent>

0100407c <std>:
 100407c:	00804034 	movhi	r2,256
 1004080:	109c7004 	addi	r2,r2,29120
 1004084:	20800b15 	stw	r2,44(r4)
 1004088:	00804034 	movhi	r2,256
 100408c:	109cab04 	addi	r2,r2,29356
 1004090:	20800815 	stw	r2,32(r4)
 1004094:	00c04034 	movhi	r3,256
 1004098:	18dc8c04 	addi	r3,r3,29232
 100409c:	00804034 	movhi	r2,256
 10040a0:	109c7204 	addi	r2,r2,29128
 10040a4:	2140030d 	sth	r5,12(r4)
 10040a8:	2180038d 	sth	r6,14(r4)
 10040ac:	20c00915 	stw	r3,36(r4)
 10040b0:	20800a15 	stw	r2,40(r4)
 10040b4:	20000015 	stw	zero,0(r4)
 10040b8:	20000115 	stw	zero,4(r4)
 10040bc:	20000215 	stw	zero,8(r4)
 10040c0:	20000415 	stw	zero,16(r4)
 10040c4:	20000515 	stw	zero,20(r4)
 10040c8:	20000615 	stw	zero,24(r4)
 10040cc:	21000715 	stw	r4,28(r4)
 10040d0:	f800283a 	ret

010040d4 <__sfp_lock_acquire>:
 10040d4:	f800283a 	ret

010040d8 <__sfp_lock_release>:
 10040d8:	f800283a 	ret

010040dc <__sinit_lock_acquire>:
 10040dc:	f800283a 	ret

010040e0 <__sinit_lock_release>:
 10040e0:	f800283a 	ret

010040e4 <__sinit>:
 10040e4:	20800e17 	ldw	r2,56(r4)
 10040e8:	defffd04 	addi	sp,sp,-12
 10040ec:	dc400115 	stw	r17,4(sp)
 10040f0:	dc000015 	stw	r16,0(sp)
 10040f4:	dfc00215 	stw	ra,8(sp)
 10040f8:	04400044 	movi	r17,1
 10040fc:	01400104 	movi	r5,4
 1004100:	000d883a 	mov	r6,zero
 1004104:	2021883a 	mov	r16,r4
 1004108:	2200bb04 	addi	r8,r4,748
 100410c:	200f883a 	mov	r7,r4
 1004110:	10000526 	beq	r2,zero,1004128 <__sinit+0x44>
 1004114:	dfc00217 	ldw	ra,8(sp)
 1004118:	dc400117 	ldw	r17,4(sp)
 100411c:	dc000017 	ldw	r16,0(sp)
 1004120:	dec00304 	addi	sp,sp,12
 1004124:	f800283a 	ret
 1004128:	21000117 	ldw	r4,4(r4)
 100412c:	00804034 	movhi	r2,256
 1004130:	10907204 	addi	r2,r2,16840
 1004134:	00c000c4 	movi	r3,3
 1004138:	80800f15 	stw	r2,60(r16)
 100413c:	80c0b915 	stw	r3,740(r16)
 1004140:	8200ba15 	stw	r8,744(r16)
 1004144:	84400e15 	stw	r17,56(r16)
 1004148:	8000b815 	stw	zero,736(r16)
 100414c:	100407c0 	call	100407c <std>
 1004150:	81000217 	ldw	r4,8(r16)
 1004154:	880d883a 	mov	r6,r17
 1004158:	800f883a 	mov	r7,r16
 100415c:	01400284 	movi	r5,10
 1004160:	100407c0 	call	100407c <std>
 1004164:	81000317 	ldw	r4,12(r16)
 1004168:	800f883a 	mov	r7,r16
 100416c:	01400484 	movi	r5,18
 1004170:	01800084 	movi	r6,2
 1004174:	dfc00217 	ldw	ra,8(sp)
 1004178:	dc400117 	ldw	r17,4(sp)
 100417c:	dc000017 	ldw	r16,0(sp)
 1004180:	dec00304 	addi	sp,sp,12
 1004184:	100407c1 	jmpi	100407c <std>

01004188 <__fp_lock>:
 1004188:	0005883a 	mov	r2,zero
 100418c:	f800283a 	ret

01004190 <__fp_unlock>:
 1004190:	0005883a 	mov	r2,zero
 1004194:	f800283a 	ret

01004198 <__fp_unlock_all>:
 1004198:	00804074 	movhi	r2,257
 100419c:	10bc9f04 	addi	r2,r2,-3460
 10041a0:	11000017 	ldw	r4,0(r2)
 10041a4:	01404034 	movhi	r5,256
 10041a8:	29506404 	addi	r5,r5,16784
 10041ac:	1004d141 	jmpi	1004d14 <_fwalk>

010041b0 <__fp_lock_all>:
 10041b0:	00804074 	movhi	r2,257
 10041b4:	10bc9f04 	addi	r2,r2,-3460
 10041b8:	11000017 	ldw	r4,0(r2)
 10041bc:	01404034 	movhi	r5,256
 10041c0:	29506204 	addi	r5,r5,16776
 10041c4:	1004d141 	jmpi	1004d14 <_fwalk>

010041c8 <_cleanup_r>:
 10041c8:	01404034 	movhi	r5,256
 10041cc:	295dbf04 	addi	r5,r5,30460
 10041d0:	1004d141 	jmpi	1004d14 <_fwalk>

010041d4 <_cleanup>:
 10041d4:	00804074 	movhi	r2,257
 10041d8:	10bca004 	addi	r2,r2,-3456
 10041dc:	11000017 	ldw	r4,0(r2)
 10041e0:	10041c81 	jmpi	10041c8 <_cleanup_r>

010041e4 <__sfmoreglue>:
 10041e4:	defffc04 	addi	sp,sp,-16
 10041e8:	dc000015 	stw	r16,0(sp)
 10041ec:	2821883a 	mov	r16,r5
 10041f0:	dc400115 	stw	r17,4(sp)
 10041f4:	01401704 	movi	r5,92
 10041f8:	2023883a 	mov	r17,r4
 10041fc:	8009883a 	mov	r4,r16
 1004200:	dfc00315 	stw	ra,12(sp)
 1004204:	dcc00215 	stw	r19,8(sp)
 1004208:	10098280 	call	1009828 <__mulsi3>
 100420c:	11400304 	addi	r5,r2,12
 1004210:	8809883a 	mov	r4,r17
 1004214:	1027883a 	mov	r19,r2
 1004218:	10050240 	call	1005024 <_malloc_r>
 100421c:	10c00304 	addi	r3,r2,12
 1004220:	1023883a 	mov	r17,r2
 1004224:	1809883a 	mov	r4,r3
 1004228:	980d883a 	mov	r6,r19
 100422c:	000b883a 	mov	r5,zero
 1004230:	10000b26 	beq	r2,zero,1004260 <__sfmoreglue+0x7c>
 1004234:	14000115 	stw	r16,4(r2)
 1004238:	10c00215 	stw	r3,8(r2)
 100423c:	10000015 	stw	zero,0(r2)
 1004240:	10059c80 	call	10059c8 <memset>
 1004244:	8805883a 	mov	r2,r17
 1004248:	dfc00317 	ldw	ra,12(sp)
 100424c:	dcc00217 	ldw	r19,8(sp)
 1004250:	dc400117 	ldw	r17,4(sp)
 1004254:	dc000017 	ldw	r16,0(sp)
 1004258:	dec00404 	addi	sp,sp,16
 100425c:	f800283a 	ret
 1004260:	0023883a 	mov	r17,zero
 1004264:	8805883a 	mov	r2,r17
 1004268:	dfc00317 	ldw	ra,12(sp)
 100426c:	dcc00217 	ldw	r19,8(sp)
 1004270:	dc400117 	ldw	r17,4(sp)
 1004274:	dc000017 	ldw	r16,0(sp)
 1004278:	dec00404 	addi	sp,sp,16
 100427c:	f800283a 	ret

01004280 <__sfp>:
 1004280:	defffd04 	addi	sp,sp,-12
 1004284:	00804074 	movhi	r2,257
 1004288:	10bca004 	addi	r2,r2,-3456
 100428c:	dc000015 	stw	r16,0(sp)
 1004290:	14000017 	ldw	r16,0(r2)
 1004294:	dc400115 	stw	r17,4(sp)
 1004298:	dfc00215 	stw	ra,8(sp)
 100429c:	80800e17 	ldw	r2,56(r16)
 10042a0:	2023883a 	mov	r17,r4
 10042a4:	10002626 	beq	r2,zero,1004340 <__sfp+0xc0>
 10042a8:	8400b804 	addi	r16,r16,736
 10042ac:	80800117 	ldw	r2,4(r16)
 10042b0:	81000217 	ldw	r4,8(r16)
 10042b4:	10ffffc4 	addi	r3,r2,-1
 10042b8:	18000916 	blt	r3,zero,10042e0 <__sfp+0x60>
 10042bc:	2080030f 	ldh	r2,12(r4)
 10042c0:	10000b26 	beq	r2,zero,10042f0 <__sfp+0x70>
 10042c4:	017fffc4 	movi	r5,-1
 10042c8:	00000206 	br	10042d4 <__sfp+0x54>
 10042cc:	2080030f 	ldh	r2,12(r4)
 10042d0:	10000726 	beq	r2,zero,10042f0 <__sfp+0x70>
 10042d4:	18ffffc4 	addi	r3,r3,-1
 10042d8:	21001704 	addi	r4,r4,92
 10042dc:	197ffb1e 	bne	r3,r5,10042cc <__sfp+0x4c>
 10042e0:	80800017 	ldw	r2,0(r16)
 10042e4:	10001926 	beq	r2,zero,100434c <__sfp+0xcc>
 10042e8:	1021883a 	mov	r16,r2
 10042ec:	003fef06 	br	10042ac <__sfp+0x2c>
 10042f0:	00bfffc4 	movi	r2,-1
 10042f4:	00c00044 	movi	r3,1
 10042f8:	2080038d 	sth	r2,14(r4)
 10042fc:	20c0030d 	sth	r3,12(r4)
 1004300:	20000015 	stw	zero,0(r4)
 1004304:	20000215 	stw	zero,8(r4)
 1004308:	20000115 	stw	zero,4(r4)
 100430c:	20000415 	stw	zero,16(r4)
 1004310:	20000515 	stw	zero,20(r4)
 1004314:	20000615 	stw	zero,24(r4)
 1004318:	20000c15 	stw	zero,48(r4)
 100431c:	20000d15 	stw	zero,52(r4)
 1004320:	20001115 	stw	zero,68(r4)
 1004324:	20001215 	stw	zero,72(r4)
 1004328:	2005883a 	mov	r2,r4
 100432c:	dfc00217 	ldw	ra,8(sp)
 1004330:	dc400117 	ldw	r17,4(sp)
 1004334:	dc000017 	ldw	r16,0(sp)
 1004338:	dec00304 	addi	sp,sp,12
 100433c:	f800283a 	ret
 1004340:	8009883a 	mov	r4,r16
 1004344:	10040e40 	call	10040e4 <__sinit>
 1004348:	003fd706 	br	10042a8 <__sfp+0x28>
 100434c:	8809883a 	mov	r4,r17
 1004350:	01400104 	movi	r5,4
 1004354:	10041e40 	call	10041e4 <__sfmoreglue>
 1004358:	80800015 	stw	r2,0(r16)
 100435c:	103fe21e 	bne	r2,zero,10042e8 <__sfp+0x68>
 1004360:	00800304 	movi	r2,12
 1004364:	0009883a 	mov	r4,zero
 1004368:	88800015 	stw	r2,0(r17)
 100436c:	003fee06 	br	1004328 <__sfp+0xa8>

01004370 <_malloc_trim_r>:
 1004370:	defffb04 	addi	sp,sp,-20
 1004374:	dcc00315 	stw	r19,12(sp)
 1004378:	04c04074 	movhi	r19,257
 100437c:	9cf71004 	addi	r19,r19,-9152
 1004380:	dc800215 	stw	r18,8(sp)
 1004384:	dc400115 	stw	r17,4(sp)
 1004388:	dc000015 	stw	r16,0(sp)
 100438c:	2823883a 	mov	r17,r5
 1004390:	2025883a 	mov	r18,r4
 1004394:	dfc00415 	stw	ra,16(sp)
 1004398:	100a5ac0 	call	100a5ac <__malloc_lock>
 100439c:	98800217 	ldw	r2,8(r19)
 10043a0:	9009883a 	mov	r4,r18
 10043a4:	000b883a 	mov	r5,zero
 10043a8:	10c00117 	ldw	r3,4(r2)
 10043ac:	00bfff04 	movi	r2,-4
 10043b0:	18a0703a 	and	r16,r3,r2
 10043b4:	8463c83a 	sub	r17,r16,r17
 10043b8:	8c43fbc4 	addi	r17,r17,4079
 10043bc:	8822d33a 	srli	r17,r17,12
 10043c0:	0083ffc4 	movi	r2,4095
 10043c4:	8c7fffc4 	addi	r17,r17,-1
 10043c8:	8822933a 	slli	r17,r17,12
 10043cc:	1440060e 	bge	r2,r17,10043e8 <_malloc_trim_r+0x78>
 10043d0:	10071500 	call	1007150 <_sbrk_r>
 10043d4:	98c00217 	ldw	r3,8(r19)
 10043d8:	9009883a 	mov	r4,r18
 10043dc:	044bc83a 	sub	r5,zero,r17
 10043e0:	80c7883a 	add	r3,r16,r3
 10043e4:	10c00926 	beq	r2,r3,100440c <_malloc_trim_r+0x9c>
 10043e8:	100a5cc0 	call	100a5cc <__malloc_unlock>
 10043ec:	0005883a 	mov	r2,zero
 10043f0:	dfc00417 	ldw	ra,16(sp)
 10043f4:	dcc00317 	ldw	r19,12(sp)
 10043f8:	dc800217 	ldw	r18,8(sp)
 10043fc:	dc400117 	ldw	r17,4(sp)
 1004400:	dc000017 	ldw	r16,0(sp)
 1004404:	dec00504 	addi	sp,sp,20
 1004408:	f800283a 	ret
 100440c:	9009883a 	mov	r4,r18
 1004410:	10071500 	call	1007150 <_sbrk_r>
 1004414:	844dc83a 	sub	r6,r16,r17
 1004418:	00ffffc4 	movi	r3,-1
 100441c:	9009883a 	mov	r4,r18
 1004420:	000b883a 	mov	r5,zero
 1004424:	01c04074 	movhi	r7,257
 1004428:	39c35e04 	addi	r7,r7,3448
 100442c:	31800054 	ori	r6,r6,1
 1004430:	10c00926 	beq	r2,r3,1004458 <_malloc_trim_r+0xe8>
 1004434:	38800017 	ldw	r2,0(r7)
 1004438:	98c00217 	ldw	r3,8(r19)
 100443c:	9009883a 	mov	r4,r18
 1004440:	1445c83a 	sub	r2,r2,r17
 1004444:	38800015 	stw	r2,0(r7)
 1004448:	19800115 	stw	r6,4(r3)
 100444c:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1004450:	00800044 	movi	r2,1
 1004454:	003fe606 	br	10043f0 <_malloc_trim_r+0x80>
 1004458:	10071500 	call	1007150 <_sbrk_r>
 100445c:	99800217 	ldw	r6,8(r19)
 1004460:	100f883a 	mov	r7,r2
 1004464:	9009883a 	mov	r4,r18
 1004468:	1187c83a 	sub	r3,r2,r6
 100446c:	008003c4 	movi	r2,15
 1004470:	19400054 	ori	r5,r3,1
 1004474:	10ffdc0e 	bge	r2,r3,10043e8 <_malloc_trim_r+0x78>
 1004478:	00804074 	movhi	r2,257
 100447c:	10bca404 	addi	r2,r2,-3440
 1004480:	10c00017 	ldw	r3,0(r2)
 1004484:	00804074 	movhi	r2,257
 1004488:	10835e04 	addi	r2,r2,3448
 100448c:	31400115 	stw	r5,4(r6)
 1004490:	38c7c83a 	sub	r3,r7,r3
 1004494:	10c00015 	stw	r3,0(r2)
 1004498:	003fd306 	br	10043e8 <_malloc_trim_r+0x78>

0100449c <_free_r>:
 100449c:	defffd04 	addi	sp,sp,-12
 10044a0:	dc400115 	stw	r17,4(sp)
 10044a4:	dc000015 	stw	r16,0(sp)
 10044a8:	dfc00215 	stw	ra,8(sp)
 10044ac:	2821883a 	mov	r16,r5
 10044b0:	2023883a 	mov	r17,r4
 10044b4:	28005a26 	beq	r5,zero,1004620 <_free_r+0x184>
 10044b8:	100a5ac0 	call	100a5ac <__malloc_lock>
 10044bc:	823ffe04 	addi	r8,r16,-8
 10044c0:	41400117 	ldw	r5,4(r8)
 10044c4:	00bfff84 	movi	r2,-2
 10044c8:	02804074 	movhi	r10,257
 10044cc:	52b71004 	addi	r10,r10,-9152
 10044d0:	288e703a 	and	r7,r5,r2
 10044d4:	41cd883a 	add	r6,r8,r7
 10044d8:	30c00117 	ldw	r3,4(r6)
 10044dc:	51000217 	ldw	r4,8(r10)
 10044e0:	00bfff04 	movi	r2,-4
 10044e4:	1892703a 	and	r9,r3,r2
 10044e8:	5017883a 	mov	r11,r10
 10044ec:	31006726 	beq	r6,r4,100468c <_free_r+0x1f0>
 10044f0:	2880004c 	andi	r2,r5,1
 10044f4:	1005003a 	cmpeq	r2,r2,zero
 10044f8:	32400115 	stw	r9,4(r6)
 10044fc:	10001a1e 	bne	r2,zero,1004568 <_free_r+0xcc>
 1004500:	000b883a 	mov	r5,zero
 1004504:	3247883a 	add	r3,r6,r9
 1004508:	18800117 	ldw	r2,4(r3)
 100450c:	1080004c 	andi	r2,r2,1
 1004510:	1000231e 	bne	r2,zero,10045a0 <_free_r+0x104>
 1004514:	280ac03a 	cmpne	r5,r5,zero
 1004518:	3a4f883a 	add	r7,r7,r9
 100451c:	2800451e 	bne	r5,zero,1004634 <_free_r+0x198>
 1004520:	31000217 	ldw	r4,8(r6)
 1004524:	00804074 	movhi	r2,257
 1004528:	10b71204 	addi	r2,r2,-9144
 100452c:	20807b26 	beq	r4,r2,100471c <_free_r+0x280>
 1004530:	30800317 	ldw	r2,12(r6)
 1004534:	3a07883a 	add	r3,r7,r8
 1004538:	19c00015 	stw	r7,0(r3)
 100453c:	11000215 	stw	r4,8(r2)
 1004540:	20800315 	stw	r2,12(r4)
 1004544:	38800054 	ori	r2,r7,1
 1004548:	40800115 	stw	r2,4(r8)
 100454c:	28001a26 	beq	r5,zero,10045b8 <_free_r+0x11c>
 1004550:	8809883a 	mov	r4,r17
 1004554:	dfc00217 	ldw	ra,8(sp)
 1004558:	dc400117 	ldw	r17,4(sp)
 100455c:	dc000017 	ldw	r16,0(sp)
 1004560:	dec00304 	addi	sp,sp,12
 1004564:	100a5cc1 	jmpi	100a5cc <__malloc_unlock>
 1004568:	80bffe17 	ldw	r2,-8(r16)
 100456c:	50c00204 	addi	r3,r10,8
 1004570:	4091c83a 	sub	r8,r8,r2
 1004574:	41000217 	ldw	r4,8(r8)
 1004578:	388f883a 	add	r7,r7,r2
 100457c:	20c06126 	beq	r4,r3,1004704 <_free_r+0x268>
 1004580:	40800317 	ldw	r2,12(r8)
 1004584:	3247883a 	add	r3,r6,r9
 1004588:	000b883a 	mov	r5,zero
 100458c:	11000215 	stw	r4,8(r2)
 1004590:	20800315 	stw	r2,12(r4)
 1004594:	18800117 	ldw	r2,4(r3)
 1004598:	1080004c 	andi	r2,r2,1
 100459c:	103fdd26 	beq	r2,zero,1004514 <_free_r+0x78>
 10045a0:	38800054 	ori	r2,r7,1
 10045a4:	3a07883a 	add	r3,r7,r8
 10045a8:	280ac03a 	cmpne	r5,r5,zero
 10045ac:	40800115 	stw	r2,4(r8)
 10045b0:	19c00015 	stw	r7,0(r3)
 10045b4:	283fe61e 	bne	r5,zero,1004550 <_free_r+0xb4>
 10045b8:	00807fc4 	movi	r2,511
 10045bc:	11c01f2e 	bgeu	r2,r7,100463c <_free_r+0x1a0>
 10045c0:	3806d27a 	srli	r3,r7,9
 10045c4:	1800481e 	bne	r3,zero,10046e8 <_free_r+0x24c>
 10045c8:	3804d0fa 	srli	r2,r7,3
 10045cc:	100690fa 	slli	r3,r2,3
 10045d0:	1acd883a 	add	r6,r3,r11
 10045d4:	31400217 	ldw	r5,8(r6)
 10045d8:	31405926 	beq	r6,r5,1004740 <_free_r+0x2a4>
 10045dc:	28800117 	ldw	r2,4(r5)
 10045e0:	00ffff04 	movi	r3,-4
 10045e4:	10c4703a 	and	r2,r2,r3
 10045e8:	3880022e 	bgeu	r7,r2,10045f4 <_free_r+0x158>
 10045ec:	29400217 	ldw	r5,8(r5)
 10045f0:	317ffa1e 	bne	r6,r5,10045dc <_free_r+0x140>
 10045f4:	29800317 	ldw	r6,12(r5)
 10045f8:	41800315 	stw	r6,12(r8)
 10045fc:	41400215 	stw	r5,8(r8)
 1004600:	8809883a 	mov	r4,r17
 1004604:	2a000315 	stw	r8,12(r5)
 1004608:	32000215 	stw	r8,8(r6)
 100460c:	dfc00217 	ldw	ra,8(sp)
 1004610:	dc400117 	ldw	r17,4(sp)
 1004614:	dc000017 	ldw	r16,0(sp)
 1004618:	dec00304 	addi	sp,sp,12
 100461c:	100a5cc1 	jmpi	100a5cc <__malloc_unlock>
 1004620:	dfc00217 	ldw	ra,8(sp)
 1004624:	dc400117 	ldw	r17,4(sp)
 1004628:	dc000017 	ldw	r16,0(sp)
 100462c:	dec00304 	addi	sp,sp,12
 1004630:	f800283a 	ret
 1004634:	31000217 	ldw	r4,8(r6)
 1004638:	003fbd06 	br	1004530 <_free_r+0x94>
 100463c:	3806d0fa 	srli	r3,r7,3
 1004640:	00800044 	movi	r2,1
 1004644:	51400117 	ldw	r5,4(r10)
 1004648:	180890fa 	slli	r4,r3,3
 100464c:	1807d0ba 	srai	r3,r3,2
 1004650:	22c9883a 	add	r4,r4,r11
 1004654:	21800217 	ldw	r6,8(r4)
 1004658:	10c4983a 	sll	r2,r2,r3
 100465c:	41000315 	stw	r4,12(r8)
 1004660:	41800215 	stw	r6,8(r8)
 1004664:	288ab03a 	or	r5,r5,r2
 1004668:	22000215 	stw	r8,8(r4)
 100466c:	8809883a 	mov	r4,r17
 1004670:	51400115 	stw	r5,4(r10)
 1004674:	32000315 	stw	r8,12(r6)
 1004678:	dfc00217 	ldw	ra,8(sp)
 100467c:	dc400117 	ldw	r17,4(sp)
 1004680:	dc000017 	ldw	r16,0(sp)
 1004684:	dec00304 	addi	sp,sp,12
 1004688:	100a5cc1 	jmpi	100a5cc <__malloc_unlock>
 100468c:	2880004c 	andi	r2,r5,1
 1004690:	3a4d883a 	add	r6,r7,r9
 1004694:	1000071e 	bne	r2,zero,10046b4 <_free_r+0x218>
 1004698:	80bffe17 	ldw	r2,-8(r16)
 100469c:	4091c83a 	sub	r8,r8,r2
 10046a0:	41000317 	ldw	r4,12(r8)
 10046a4:	40c00217 	ldw	r3,8(r8)
 10046a8:	308d883a 	add	r6,r6,r2
 10046ac:	20c00215 	stw	r3,8(r4)
 10046b0:	19000315 	stw	r4,12(r3)
 10046b4:	00804074 	movhi	r2,257
 10046b8:	10bca304 	addi	r2,r2,-3444
 10046bc:	11000017 	ldw	r4,0(r2)
 10046c0:	30c00054 	ori	r3,r6,1
 10046c4:	52000215 	stw	r8,8(r10)
 10046c8:	40c00115 	stw	r3,4(r8)
 10046cc:	313fa036 	bltu	r6,r4,1004550 <_free_r+0xb4>
 10046d0:	00804074 	movhi	r2,257
 10046d4:	10835404 	addi	r2,r2,3408
 10046d8:	11400017 	ldw	r5,0(r2)
 10046dc:	8809883a 	mov	r4,r17
 10046e0:	10043700 	call	1004370 <_malloc_trim_r>
 10046e4:	003f9a06 	br	1004550 <_free_r+0xb4>
 10046e8:	00800104 	movi	r2,4
 10046ec:	10c0072e 	bgeu	r2,r3,100470c <_free_r+0x270>
 10046f0:	00800504 	movi	r2,20
 10046f4:	10c01936 	bltu	r2,r3,100475c <_free_r+0x2c0>
 10046f8:	188016c4 	addi	r2,r3,91
 10046fc:	100690fa 	slli	r3,r2,3
 1004700:	003fb306 	br	10045d0 <_free_r+0x134>
 1004704:	01400044 	movi	r5,1
 1004708:	003f7e06 	br	1004504 <_free_r+0x68>
 100470c:	3804d1ba 	srli	r2,r7,6
 1004710:	10800e04 	addi	r2,r2,56
 1004714:	100690fa 	slli	r3,r2,3
 1004718:	003fad06 	br	10045d0 <_free_r+0x134>
 100471c:	22000315 	stw	r8,12(r4)
 1004720:	22000215 	stw	r8,8(r4)
 1004724:	3a05883a 	add	r2,r7,r8
 1004728:	38c00054 	ori	r3,r7,1
 100472c:	11c00015 	stw	r7,0(r2)
 1004730:	41000215 	stw	r4,8(r8)
 1004734:	40c00115 	stw	r3,4(r8)
 1004738:	41000315 	stw	r4,12(r8)
 100473c:	003f8406 	br	1004550 <_free_r+0xb4>
 1004740:	1005d0ba 	srai	r2,r2,2
 1004744:	00c00044 	movi	r3,1
 1004748:	51000117 	ldw	r4,4(r10)
 100474c:	1886983a 	sll	r3,r3,r2
 1004750:	20c8b03a 	or	r4,r4,r3
 1004754:	51000115 	stw	r4,4(r10)
 1004758:	003fa706 	br	10045f8 <_free_r+0x15c>
 100475c:	00801504 	movi	r2,84
 1004760:	10c00436 	bltu	r2,r3,1004774 <_free_r+0x2d8>
 1004764:	3804d33a 	srli	r2,r7,12
 1004768:	10801b84 	addi	r2,r2,110
 100476c:	100690fa 	slli	r3,r2,3
 1004770:	003f9706 	br	10045d0 <_free_r+0x134>
 1004774:	00805504 	movi	r2,340
 1004778:	10c00436 	bltu	r2,r3,100478c <_free_r+0x2f0>
 100477c:	3804d3fa 	srli	r2,r7,15
 1004780:	10801dc4 	addi	r2,r2,119
 1004784:	100690fa 	slli	r3,r2,3
 1004788:	003f9106 	br	10045d0 <_free_r+0x134>
 100478c:	00815504 	movi	r2,1364
 1004790:	10c0032e 	bgeu	r2,r3,10047a0 <_free_r+0x304>
 1004794:	00801f84 	movi	r2,126
 1004798:	00c0fc04 	movi	r3,1008
 100479c:	003f8c06 	br	10045d0 <_free_r+0x134>
 10047a0:	3804d4ba 	srli	r2,r7,18
 10047a4:	10801f04 	addi	r2,r2,124
 10047a8:	100690fa 	slli	r3,r2,3
 10047ac:	003f8806 	br	10045d0 <_free_r+0x134>

010047b0 <__sfvwrite_r>:
 10047b0:	30800217 	ldw	r2,8(r6)
 10047b4:	defff504 	addi	sp,sp,-44
 10047b8:	df000915 	stw	fp,36(sp)
 10047bc:	dd800715 	stw	r22,28(sp)
 10047c0:	dc800315 	stw	r18,12(sp)
 10047c4:	dfc00a15 	stw	ra,40(sp)
 10047c8:	ddc00815 	stw	r23,32(sp)
 10047cc:	dd400615 	stw	r21,24(sp)
 10047d0:	dd000515 	stw	r20,20(sp)
 10047d4:	dcc00415 	stw	r19,16(sp)
 10047d8:	dc400215 	stw	r17,8(sp)
 10047dc:	dc000115 	stw	r16,4(sp)
 10047e0:	302d883a 	mov	r22,r6
 10047e4:	2039883a 	mov	fp,r4
 10047e8:	2825883a 	mov	r18,r5
 10047ec:	10001c26 	beq	r2,zero,1004860 <__sfvwrite_r+0xb0>
 10047f0:	29c0030b 	ldhu	r7,12(r5)
 10047f4:	3880020c 	andi	r2,r7,8
 10047f8:	10002726 	beq	r2,zero,1004898 <__sfvwrite_r+0xe8>
 10047fc:	28800417 	ldw	r2,16(r5)
 1004800:	10002526 	beq	r2,zero,1004898 <__sfvwrite_r+0xe8>
 1004804:	3880008c 	andi	r2,r7,2
 1004808:	b5400017 	ldw	r21,0(r22)
 100480c:	10002826 	beq	r2,zero,10048b0 <__sfvwrite_r+0x100>
 1004810:	0021883a 	mov	r16,zero
 1004814:	0023883a 	mov	r17,zero
 1004818:	880d883a 	mov	r6,r17
 100481c:	e009883a 	mov	r4,fp
 1004820:	00810004 	movi	r2,1024
 1004824:	80006e26 	beq	r16,zero,10049e0 <__sfvwrite_r+0x230>
 1004828:	800f883a 	mov	r7,r16
 100482c:	91400717 	ldw	r5,28(r18)
 1004830:	1400012e 	bgeu	r2,r16,1004838 <__sfvwrite_r+0x88>
 1004834:	100f883a 	mov	r7,r2
 1004838:	90c00917 	ldw	r3,36(r18)
 100483c:	183ee83a 	callr	r3
 1004840:	1007883a 	mov	r3,r2
 1004844:	80a1c83a 	sub	r16,r16,r2
 1004848:	88a3883a 	add	r17,r17,r2
 100484c:	00806d0e 	bge	zero,r2,1004a04 <__sfvwrite_r+0x254>
 1004850:	b0800217 	ldw	r2,8(r22)
 1004854:	10c5c83a 	sub	r2,r2,r3
 1004858:	b0800215 	stw	r2,8(r22)
 100485c:	103fee1e 	bne	r2,zero,1004818 <__sfvwrite_r+0x68>
 1004860:	0009883a 	mov	r4,zero
 1004864:	2005883a 	mov	r2,r4
 1004868:	dfc00a17 	ldw	ra,40(sp)
 100486c:	df000917 	ldw	fp,36(sp)
 1004870:	ddc00817 	ldw	r23,32(sp)
 1004874:	dd800717 	ldw	r22,28(sp)
 1004878:	dd400617 	ldw	r21,24(sp)
 100487c:	dd000517 	ldw	r20,20(sp)
 1004880:	dcc00417 	ldw	r19,16(sp)
 1004884:	dc800317 	ldw	r18,12(sp)
 1004888:	dc400217 	ldw	r17,8(sp)
 100488c:	dc000117 	ldw	r16,4(sp)
 1004890:	dec00b04 	addi	sp,sp,44
 1004894:	f800283a 	ret
 1004898:	10025180 	call	1002518 <__swsetup_r>
 100489c:	1000e41e 	bne	r2,zero,1004c30 <__sfvwrite_r+0x480>
 10048a0:	91c0030b 	ldhu	r7,12(r18)
 10048a4:	b5400017 	ldw	r21,0(r22)
 10048a8:	3880008c 	andi	r2,r7,2
 10048ac:	103fd81e 	bne	r2,zero,1004810 <__sfvwrite_r+0x60>
 10048b0:	3880004c 	andi	r2,r7,1
 10048b4:	1005003a 	cmpeq	r2,r2,zero
 10048b8:	10005726 	beq	r2,zero,1004a18 <__sfvwrite_r+0x268>
 10048bc:	0029883a 	mov	r20,zero
 10048c0:	002f883a 	mov	r23,zero
 10048c4:	a0004226 	beq	r20,zero,10049d0 <__sfvwrite_r+0x220>
 10048c8:	3880800c 	andi	r2,r7,512
 10048cc:	94000217 	ldw	r16,8(r18)
 10048d0:	10008b26 	beq	r2,zero,1004b00 <__sfvwrite_r+0x350>
 10048d4:	800d883a 	mov	r6,r16
 10048d8:	a400a536 	bltu	r20,r16,1004b70 <__sfvwrite_r+0x3c0>
 10048dc:	3881200c 	andi	r2,r7,1152
 10048e0:	10002726 	beq	r2,zero,1004980 <__sfvwrite_r+0x1d0>
 10048e4:	90800517 	ldw	r2,20(r18)
 10048e8:	92000417 	ldw	r8,16(r18)
 10048ec:	91400017 	ldw	r5,0(r18)
 10048f0:	1087883a 	add	r3,r2,r2
 10048f4:	1887883a 	add	r3,r3,r2
 10048f8:	1808d7fa 	srli	r4,r3,31
 10048fc:	2a21c83a 	sub	r16,r5,r8
 1004900:	80800044 	addi	r2,r16,1
 1004904:	20c9883a 	add	r4,r4,r3
 1004908:	2027d07a 	srai	r19,r4,1
 100490c:	a085883a 	add	r2,r20,r2
 1004910:	980d883a 	mov	r6,r19
 1004914:	9880022e 	bgeu	r19,r2,1004920 <__sfvwrite_r+0x170>
 1004918:	1027883a 	mov	r19,r2
 100491c:	100d883a 	mov	r6,r2
 1004920:	3881000c 	andi	r2,r7,1024
 1004924:	1000b826 	beq	r2,zero,1004c08 <__sfvwrite_r+0x458>
 1004928:	300b883a 	mov	r5,r6
 100492c:	e009883a 	mov	r4,fp
 1004930:	10050240 	call	1005024 <_malloc_r>
 1004934:	10003126 	beq	r2,zero,10049fc <__sfvwrite_r+0x24c>
 1004938:	91400417 	ldw	r5,16(r18)
 100493c:	1009883a 	mov	r4,r2
 1004940:	800d883a 	mov	r6,r16
 1004944:	1023883a 	mov	r17,r2
 1004948:	10058480 	call	1005848 <memcpy>
 100494c:	90c0030b 	ldhu	r3,12(r18)
 1004950:	00beffc4 	movi	r2,-1025
 1004954:	1886703a 	and	r3,r3,r2
 1004958:	18c02014 	ori	r3,r3,128
 100495c:	90c0030d 	sth	r3,12(r18)
 1004960:	9c07c83a 	sub	r3,r19,r16
 1004964:	8c05883a 	add	r2,r17,r16
 1004968:	a00d883a 	mov	r6,r20
 100496c:	a021883a 	mov	r16,r20
 1004970:	90800015 	stw	r2,0(r18)
 1004974:	90c00215 	stw	r3,8(r18)
 1004978:	94400415 	stw	r17,16(r18)
 100497c:	94c00515 	stw	r19,20(r18)
 1004980:	91000017 	ldw	r4,0(r18)
 1004984:	b80b883a 	mov	r5,r23
 1004988:	a023883a 	mov	r17,r20
 100498c:	10058e80 	call	10058e8 <memmove>
 1004990:	90c00217 	ldw	r3,8(r18)
 1004994:	90800017 	ldw	r2,0(r18)
 1004998:	a027883a 	mov	r19,r20
 100499c:	1c07c83a 	sub	r3,r3,r16
 10049a0:	1405883a 	add	r2,r2,r16
 10049a4:	90c00215 	stw	r3,8(r18)
 10049a8:	a021883a 	mov	r16,r20
 10049ac:	90800015 	stw	r2,0(r18)
 10049b0:	b0800217 	ldw	r2,8(r22)
 10049b4:	1405c83a 	sub	r2,r2,r16
 10049b8:	b0800215 	stw	r2,8(r22)
 10049bc:	103fa826 	beq	r2,zero,1004860 <__sfvwrite_r+0xb0>
 10049c0:	a469c83a 	sub	r20,r20,r17
 10049c4:	91c0030b 	ldhu	r7,12(r18)
 10049c8:	bcef883a 	add	r23,r23,r19
 10049cc:	a03fbe1e 	bne	r20,zero,10048c8 <__sfvwrite_r+0x118>
 10049d0:	adc00017 	ldw	r23,0(r21)
 10049d4:	ad000117 	ldw	r20,4(r21)
 10049d8:	ad400204 	addi	r21,r21,8
 10049dc:	003fb906 	br	10048c4 <__sfvwrite_r+0x114>
 10049e0:	ac400017 	ldw	r17,0(r21)
 10049e4:	ac000117 	ldw	r16,4(r21)
 10049e8:	ad400204 	addi	r21,r21,8
 10049ec:	003f8a06 	br	1004818 <__sfvwrite_r+0x68>
 10049f0:	91400417 	ldw	r5,16(r18)
 10049f4:	e009883a 	mov	r4,fp
 10049f8:	100449c0 	call	100449c <_free_r>
 10049fc:	00800304 	movi	r2,12
 1004a00:	e0800015 	stw	r2,0(fp)
 1004a04:	9080030b 	ldhu	r2,12(r18)
 1004a08:	013fffc4 	movi	r4,-1
 1004a0c:	10801014 	ori	r2,r2,64
 1004a10:	9080030d 	sth	r2,12(r18)
 1004a14:	003f9306 	br	1004864 <__sfvwrite_r+0xb4>
 1004a18:	0027883a 	mov	r19,zero
 1004a1c:	002f883a 	mov	r23,zero
 1004a20:	d8000015 	stw	zero,0(sp)
 1004a24:	0029883a 	mov	r20,zero
 1004a28:	98001e26 	beq	r19,zero,1004aa4 <__sfvwrite_r+0x2f4>
 1004a2c:	d8c00017 	ldw	r3,0(sp)
 1004a30:	1804c03a 	cmpne	r2,r3,zero
 1004a34:	10005e26 	beq	r2,zero,1004bb0 <__sfvwrite_r+0x400>
 1004a38:	9821883a 	mov	r16,r19
 1004a3c:	a4c0012e 	bgeu	r20,r19,1004a44 <__sfvwrite_r+0x294>
 1004a40:	a021883a 	mov	r16,r20
 1004a44:	91000017 	ldw	r4,0(r18)
 1004a48:	90800417 	ldw	r2,16(r18)
 1004a4c:	91800217 	ldw	r6,8(r18)
 1004a50:	91c00517 	ldw	r7,20(r18)
 1004a54:	1100022e 	bgeu	r2,r4,1004a60 <__sfvwrite_r+0x2b0>
 1004a58:	31e3883a 	add	r17,r6,r7
 1004a5c:	8c001616 	blt	r17,r16,1004ab8 <__sfvwrite_r+0x308>
 1004a60:	81c03816 	blt	r16,r7,1004b44 <__sfvwrite_r+0x394>
 1004a64:	90c00917 	ldw	r3,36(r18)
 1004a68:	91400717 	ldw	r5,28(r18)
 1004a6c:	e009883a 	mov	r4,fp
 1004a70:	b80d883a 	mov	r6,r23
 1004a74:	183ee83a 	callr	r3
 1004a78:	1023883a 	mov	r17,r2
 1004a7c:	00bfe10e 	bge	zero,r2,1004a04 <__sfvwrite_r+0x254>
 1004a80:	a469c83a 	sub	r20,r20,r17
 1004a84:	a0001826 	beq	r20,zero,1004ae8 <__sfvwrite_r+0x338>
 1004a88:	b0800217 	ldw	r2,8(r22)
 1004a8c:	1445c83a 	sub	r2,r2,r17
 1004a90:	b0800215 	stw	r2,8(r22)
 1004a94:	103f7226 	beq	r2,zero,1004860 <__sfvwrite_r+0xb0>
 1004a98:	9c67c83a 	sub	r19,r19,r17
 1004a9c:	bc6f883a 	add	r23,r23,r17
 1004aa0:	983fe21e 	bne	r19,zero,1004a2c <__sfvwrite_r+0x27c>
 1004aa4:	adc00017 	ldw	r23,0(r21)
 1004aa8:	acc00117 	ldw	r19,4(r21)
 1004aac:	ad400204 	addi	r21,r21,8
 1004ab0:	d8000015 	stw	zero,0(sp)
 1004ab4:	003fdc06 	br	1004a28 <__sfvwrite_r+0x278>
 1004ab8:	b80b883a 	mov	r5,r23
 1004abc:	880d883a 	mov	r6,r17
 1004ac0:	10058e80 	call	10058e8 <memmove>
 1004ac4:	90c00017 	ldw	r3,0(r18)
 1004ac8:	e009883a 	mov	r4,fp
 1004acc:	900b883a 	mov	r5,r18
 1004ad0:	1c47883a 	add	r3,r3,r17
 1004ad4:	90c00015 	stw	r3,0(r18)
 1004ad8:	1003e4c0 	call	1003e4c <_fflush_r>
 1004adc:	103fc91e 	bne	r2,zero,1004a04 <__sfvwrite_r+0x254>
 1004ae0:	a469c83a 	sub	r20,r20,r17
 1004ae4:	a03fe81e 	bne	r20,zero,1004a88 <__sfvwrite_r+0x2d8>
 1004ae8:	e009883a 	mov	r4,fp
 1004aec:	900b883a 	mov	r5,r18
 1004af0:	1003e4c0 	call	1003e4c <_fflush_r>
 1004af4:	103fc31e 	bne	r2,zero,1004a04 <__sfvwrite_r+0x254>
 1004af8:	d8000015 	stw	zero,0(sp)
 1004afc:	003fe206 	br	1004a88 <__sfvwrite_r+0x2d8>
 1004b00:	91000017 	ldw	r4,0(r18)
 1004b04:	90800417 	ldw	r2,16(r18)
 1004b08:	1100022e 	bgeu	r2,r4,1004b14 <__sfvwrite_r+0x364>
 1004b0c:	8023883a 	mov	r17,r16
 1004b10:	85003136 	bltu	r16,r20,1004bd8 <__sfvwrite_r+0x428>
 1004b14:	91c00517 	ldw	r7,20(r18)
 1004b18:	a1c01836 	bltu	r20,r7,1004b7c <__sfvwrite_r+0x3cc>
 1004b1c:	90c00917 	ldw	r3,36(r18)
 1004b20:	91400717 	ldw	r5,28(r18)
 1004b24:	e009883a 	mov	r4,fp
 1004b28:	b80d883a 	mov	r6,r23
 1004b2c:	183ee83a 	callr	r3
 1004b30:	1021883a 	mov	r16,r2
 1004b34:	00bfb30e 	bge	zero,r2,1004a04 <__sfvwrite_r+0x254>
 1004b38:	1023883a 	mov	r17,r2
 1004b3c:	1027883a 	mov	r19,r2
 1004b40:	003f9b06 	br	10049b0 <__sfvwrite_r+0x200>
 1004b44:	b80b883a 	mov	r5,r23
 1004b48:	800d883a 	mov	r6,r16
 1004b4c:	10058e80 	call	10058e8 <memmove>
 1004b50:	90c00217 	ldw	r3,8(r18)
 1004b54:	90800017 	ldw	r2,0(r18)
 1004b58:	8023883a 	mov	r17,r16
 1004b5c:	1c07c83a 	sub	r3,r3,r16
 1004b60:	1405883a 	add	r2,r2,r16
 1004b64:	90c00215 	stw	r3,8(r18)
 1004b68:	90800015 	stw	r2,0(r18)
 1004b6c:	003fc406 	br	1004a80 <__sfvwrite_r+0x2d0>
 1004b70:	a00d883a 	mov	r6,r20
 1004b74:	a021883a 	mov	r16,r20
 1004b78:	003f8106 	br	1004980 <__sfvwrite_r+0x1d0>
 1004b7c:	b80b883a 	mov	r5,r23
 1004b80:	a00d883a 	mov	r6,r20
 1004b84:	10058e80 	call	10058e8 <memmove>
 1004b88:	90c00217 	ldw	r3,8(r18)
 1004b8c:	90800017 	ldw	r2,0(r18)
 1004b90:	a021883a 	mov	r16,r20
 1004b94:	1d07c83a 	sub	r3,r3,r20
 1004b98:	1505883a 	add	r2,r2,r20
 1004b9c:	a023883a 	mov	r17,r20
 1004ba0:	a027883a 	mov	r19,r20
 1004ba4:	90c00215 	stw	r3,8(r18)
 1004ba8:	90800015 	stw	r2,0(r18)
 1004bac:	003f8006 	br	10049b0 <__sfvwrite_r+0x200>
 1004bb0:	b809883a 	mov	r4,r23
 1004bb4:	01400284 	movi	r5,10
 1004bb8:	980d883a 	mov	r6,r19
 1004bbc:	10057640 	call	1005764 <memchr>
 1004bc0:	10001726 	beq	r2,zero,1004c20 <__sfvwrite_r+0x470>
 1004bc4:	15c5c83a 	sub	r2,r2,r23
 1004bc8:	15000044 	addi	r20,r2,1
 1004bcc:	00800044 	movi	r2,1
 1004bd0:	d8800015 	stw	r2,0(sp)
 1004bd4:	003f9806 	br	1004a38 <__sfvwrite_r+0x288>
 1004bd8:	b80b883a 	mov	r5,r23
 1004bdc:	800d883a 	mov	r6,r16
 1004be0:	10058e80 	call	10058e8 <memmove>
 1004be4:	90c00017 	ldw	r3,0(r18)
 1004be8:	e009883a 	mov	r4,fp
 1004bec:	900b883a 	mov	r5,r18
 1004bf0:	1c07883a 	add	r3,r3,r16
 1004bf4:	90c00015 	stw	r3,0(r18)
 1004bf8:	8027883a 	mov	r19,r16
 1004bfc:	1003e4c0 	call	1003e4c <_fflush_r>
 1004c00:	103f6b26 	beq	r2,zero,10049b0 <__sfvwrite_r+0x200>
 1004c04:	003f7f06 	br	1004a04 <__sfvwrite_r+0x254>
 1004c08:	400b883a 	mov	r5,r8
 1004c0c:	e009883a 	mov	r4,fp
 1004c10:	1006aec0 	call	1006aec <_realloc_r>
 1004c14:	103f7626 	beq	r2,zero,10049f0 <__sfvwrite_r+0x240>
 1004c18:	1023883a 	mov	r17,r2
 1004c1c:	003f5006 	br	1004960 <__sfvwrite_r+0x1b0>
 1004c20:	00c00044 	movi	r3,1
 1004c24:	9d000044 	addi	r20,r19,1
 1004c28:	d8c00015 	stw	r3,0(sp)
 1004c2c:	003f8206 	br	1004a38 <__sfvwrite_r+0x288>
 1004c30:	9080030b 	ldhu	r2,12(r18)
 1004c34:	00c00244 	movi	r3,9
 1004c38:	013fffc4 	movi	r4,-1
 1004c3c:	10801014 	ori	r2,r2,64
 1004c40:	9080030d 	sth	r2,12(r18)
 1004c44:	e0c00015 	stw	r3,0(fp)
 1004c48:	003f0606 	br	1004864 <__sfvwrite_r+0xb4>

01004c4c <_fwalk_reent>:
 1004c4c:	defff704 	addi	sp,sp,-36
 1004c50:	dcc00315 	stw	r19,12(sp)
 1004c54:	24c0b804 	addi	r19,r4,736
 1004c58:	dd800615 	stw	r22,24(sp)
 1004c5c:	dd400515 	stw	r21,20(sp)
 1004c60:	dfc00815 	stw	ra,32(sp)
 1004c64:	ddc00715 	stw	r23,28(sp)
 1004c68:	dd000415 	stw	r20,16(sp)
 1004c6c:	dc800215 	stw	r18,8(sp)
 1004c70:	dc400115 	stw	r17,4(sp)
 1004c74:	dc000015 	stw	r16,0(sp)
 1004c78:	202b883a 	mov	r21,r4
 1004c7c:	282d883a 	mov	r22,r5
 1004c80:	10040d40 	call	10040d4 <__sfp_lock_acquire>
 1004c84:	98002126 	beq	r19,zero,1004d0c <_fwalk_reent+0xc0>
 1004c88:	002f883a 	mov	r23,zero
 1004c8c:	9c800117 	ldw	r18,4(r19)
 1004c90:	9c000217 	ldw	r16,8(r19)
 1004c94:	90bfffc4 	addi	r2,r18,-1
 1004c98:	10000d16 	blt	r2,zero,1004cd0 <_fwalk_reent+0x84>
 1004c9c:	0023883a 	mov	r17,zero
 1004ca0:	053fffc4 	movi	r20,-1
 1004ca4:	8080030f 	ldh	r2,12(r16)
 1004ca8:	8c400044 	addi	r17,r17,1
 1004cac:	10000626 	beq	r2,zero,1004cc8 <_fwalk_reent+0x7c>
 1004cb0:	8080038f 	ldh	r2,14(r16)
 1004cb4:	800b883a 	mov	r5,r16
 1004cb8:	a809883a 	mov	r4,r21
 1004cbc:	15000226 	beq	r2,r20,1004cc8 <_fwalk_reent+0x7c>
 1004cc0:	b03ee83a 	callr	r22
 1004cc4:	b8aeb03a 	or	r23,r23,r2
 1004cc8:	84001704 	addi	r16,r16,92
 1004ccc:	947ff51e 	bne	r18,r17,1004ca4 <_fwalk_reent+0x58>
 1004cd0:	9cc00017 	ldw	r19,0(r19)
 1004cd4:	983fed1e 	bne	r19,zero,1004c8c <_fwalk_reent+0x40>
 1004cd8:	10040d80 	call	10040d8 <__sfp_lock_release>
 1004cdc:	b805883a 	mov	r2,r23
 1004ce0:	dfc00817 	ldw	ra,32(sp)
 1004ce4:	ddc00717 	ldw	r23,28(sp)
 1004ce8:	dd800617 	ldw	r22,24(sp)
 1004cec:	dd400517 	ldw	r21,20(sp)
 1004cf0:	dd000417 	ldw	r20,16(sp)
 1004cf4:	dcc00317 	ldw	r19,12(sp)
 1004cf8:	dc800217 	ldw	r18,8(sp)
 1004cfc:	dc400117 	ldw	r17,4(sp)
 1004d00:	dc000017 	ldw	r16,0(sp)
 1004d04:	dec00904 	addi	sp,sp,36
 1004d08:	f800283a 	ret
 1004d0c:	002f883a 	mov	r23,zero
 1004d10:	003ff106 	br	1004cd8 <_fwalk_reent+0x8c>

01004d14 <_fwalk>:
 1004d14:	defff804 	addi	sp,sp,-32
 1004d18:	dcc00315 	stw	r19,12(sp)
 1004d1c:	24c0b804 	addi	r19,r4,736
 1004d20:	dd400515 	stw	r21,20(sp)
 1004d24:	dfc00715 	stw	ra,28(sp)
 1004d28:	dd800615 	stw	r22,24(sp)
 1004d2c:	dd000415 	stw	r20,16(sp)
 1004d30:	dc800215 	stw	r18,8(sp)
 1004d34:	dc400115 	stw	r17,4(sp)
 1004d38:	dc000015 	stw	r16,0(sp)
 1004d3c:	282b883a 	mov	r21,r5
 1004d40:	10040d40 	call	10040d4 <__sfp_lock_acquire>
 1004d44:	98001f26 	beq	r19,zero,1004dc4 <_fwalk+0xb0>
 1004d48:	002d883a 	mov	r22,zero
 1004d4c:	9c800117 	ldw	r18,4(r19)
 1004d50:	9c000217 	ldw	r16,8(r19)
 1004d54:	90bfffc4 	addi	r2,r18,-1
 1004d58:	10000c16 	blt	r2,zero,1004d8c <_fwalk+0x78>
 1004d5c:	0023883a 	mov	r17,zero
 1004d60:	053fffc4 	movi	r20,-1
 1004d64:	8080030f 	ldh	r2,12(r16)
 1004d68:	8c400044 	addi	r17,r17,1
 1004d6c:	10000526 	beq	r2,zero,1004d84 <_fwalk+0x70>
 1004d70:	8080038f 	ldh	r2,14(r16)
 1004d74:	8009883a 	mov	r4,r16
 1004d78:	15000226 	beq	r2,r20,1004d84 <_fwalk+0x70>
 1004d7c:	a83ee83a 	callr	r21
 1004d80:	b0acb03a 	or	r22,r22,r2
 1004d84:	84001704 	addi	r16,r16,92
 1004d88:	947ff61e 	bne	r18,r17,1004d64 <_fwalk+0x50>
 1004d8c:	9cc00017 	ldw	r19,0(r19)
 1004d90:	983fee1e 	bne	r19,zero,1004d4c <_fwalk+0x38>
 1004d94:	10040d80 	call	10040d8 <__sfp_lock_release>
 1004d98:	b005883a 	mov	r2,r22
 1004d9c:	dfc00717 	ldw	ra,28(sp)
 1004da0:	dd800617 	ldw	r22,24(sp)
 1004da4:	dd400517 	ldw	r21,20(sp)
 1004da8:	dd000417 	ldw	r20,16(sp)
 1004dac:	dcc00317 	ldw	r19,12(sp)
 1004db0:	dc800217 	ldw	r18,8(sp)
 1004db4:	dc400117 	ldw	r17,4(sp)
 1004db8:	dc000017 	ldw	r16,0(sp)
 1004dbc:	dec00804 	addi	sp,sp,32
 1004dc0:	f800283a 	ret
 1004dc4:	002d883a 	mov	r22,zero
 1004dc8:	003ff206 	br	1004d94 <_fwalk+0x80>

01004dcc <__locale_charset>:
 1004dcc:	d0a00317 	ldw	r2,-32756(gp)
 1004dd0:	f800283a 	ret

01004dd4 <_localeconv_r>:
 1004dd4:	00804074 	movhi	r2,257
 1004dd8:	10b56204 	addi	r2,r2,-10872
 1004ddc:	f800283a 	ret

01004de0 <localeconv>:
 1004de0:	00804074 	movhi	r2,257
 1004de4:	10bc9f04 	addi	r2,r2,-3460
 1004de8:	11000017 	ldw	r4,0(r2)
 1004dec:	1004dd41 	jmpi	1004dd4 <_localeconv_r>

01004df0 <_setlocale_r>:
 1004df0:	defffc04 	addi	sp,sp,-16
 1004df4:	00c04074 	movhi	r3,257
 1004df8:	18f55d04 	addi	r3,r3,-10892
 1004dfc:	dc800215 	stw	r18,8(sp)
 1004e00:	dc400115 	stw	r17,4(sp)
 1004e04:	dc000015 	stw	r16,0(sp)
 1004e08:	2023883a 	mov	r17,r4
 1004e0c:	2825883a 	mov	r18,r5
 1004e10:	dfc00315 	stw	ra,12(sp)
 1004e14:	3021883a 	mov	r16,r6
 1004e18:	3009883a 	mov	r4,r6
 1004e1c:	180b883a 	mov	r5,r3
 1004e20:	30000926 	beq	r6,zero,1004e48 <_setlocale_r+0x58>
 1004e24:	100730c0 	call	100730c <strcmp>
 1004e28:	8009883a 	mov	r4,r16
 1004e2c:	01404074 	movhi	r5,257
 1004e30:	29754804 	addi	r5,r5,-10976
 1004e34:	10000b1e 	bne	r2,zero,1004e64 <_setlocale_r+0x74>
 1004e38:	8c000d15 	stw	r16,52(r17)
 1004e3c:	8c800c15 	stw	r18,48(r17)
 1004e40:	00c04074 	movhi	r3,257
 1004e44:	18f55d04 	addi	r3,r3,-10892
 1004e48:	1805883a 	mov	r2,r3
 1004e4c:	dfc00317 	ldw	ra,12(sp)
 1004e50:	dc800217 	ldw	r18,8(sp)
 1004e54:	dc400117 	ldw	r17,4(sp)
 1004e58:	dc000017 	ldw	r16,0(sp)
 1004e5c:	dec00404 	addi	sp,sp,16
 1004e60:	f800283a 	ret
 1004e64:	100730c0 	call	100730c <strcmp>
 1004e68:	0007883a 	mov	r3,zero
 1004e6c:	103ff226 	beq	r2,zero,1004e38 <_setlocale_r+0x48>
 1004e70:	003ff506 	br	1004e48 <_setlocale_r+0x58>

01004e74 <setlocale>:
 1004e74:	01804074 	movhi	r6,257
 1004e78:	31bc9f04 	addi	r6,r6,-3460
 1004e7c:	2007883a 	mov	r3,r4
 1004e80:	31000017 	ldw	r4,0(r6)
 1004e84:	280d883a 	mov	r6,r5
 1004e88:	180b883a 	mov	r5,r3
 1004e8c:	1004df01 	jmpi	1004df0 <_setlocale_r>

01004e90 <__smakebuf_r>:
 1004e90:	2880030b 	ldhu	r2,12(r5)
 1004e94:	deffed04 	addi	sp,sp,-76
 1004e98:	dc401015 	stw	r17,64(sp)
 1004e9c:	1080008c 	andi	r2,r2,2
 1004ea0:	dc000f15 	stw	r16,60(sp)
 1004ea4:	dfc01215 	stw	ra,72(sp)
 1004ea8:	dc801115 	stw	r18,68(sp)
 1004eac:	2821883a 	mov	r16,r5
 1004eb0:	2023883a 	mov	r17,r4
 1004eb4:	10000b26 	beq	r2,zero,1004ee4 <__smakebuf_r+0x54>
 1004eb8:	28c010c4 	addi	r3,r5,67
 1004ebc:	00800044 	movi	r2,1
 1004ec0:	28800515 	stw	r2,20(r5)
 1004ec4:	28c00415 	stw	r3,16(r5)
 1004ec8:	28c00015 	stw	r3,0(r5)
 1004ecc:	dfc01217 	ldw	ra,72(sp)
 1004ed0:	dc801117 	ldw	r18,68(sp)
 1004ed4:	dc401017 	ldw	r17,64(sp)
 1004ed8:	dc000f17 	ldw	r16,60(sp)
 1004edc:	dec01304 	addi	sp,sp,76
 1004ee0:	f800283a 	ret
 1004ee4:	2940038f 	ldh	r5,14(r5)
 1004ee8:	28002116 	blt	r5,zero,1004f70 <__smakebuf_r+0xe0>
 1004eec:	d80d883a 	mov	r6,sp
 1004ef0:	10077100 	call	1007710 <_fstat_r>
 1004ef4:	10001e16 	blt	r2,zero,1004f70 <__smakebuf_r+0xe0>
 1004ef8:	d8800117 	ldw	r2,4(sp)
 1004efc:	00e00014 	movui	r3,32768
 1004f00:	113c000c 	andi	r4,r2,61440
 1004f04:	20c03126 	beq	r4,r3,1004fcc <__smakebuf_r+0x13c>
 1004f08:	8080030b 	ldhu	r2,12(r16)
 1004f0c:	00c80004 	movi	r3,8192
 1004f10:	10820014 	ori	r2,r2,2048
 1004f14:	8080030d 	sth	r2,12(r16)
 1004f18:	20c01e26 	beq	r4,r3,1004f94 <__smakebuf_r+0x104>
 1004f1c:	04810004 	movi	r18,1024
 1004f20:	8809883a 	mov	r4,r17
 1004f24:	900b883a 	mov	r5,r18
 1004f28:	10050240 	call	1005024 <_malloc_r>
 1004f2c:	1009883a 	mov	r4,r2
 1004f30:	10003126 	beq	r2,zero,1004ff8 <__smakebuf_r+0x168>
 1004f34:	80c0030b 	ldhu	r3,12(r16)
 1004f38:	00804034 	movhi	r2,256
 1004f3c:	10907204 	addi	r2,r2,16840
 1004f40:	88800f15 	stw	r2,60(r17)
 1004f44:	18c02014 	ori	r3,r3,128
 1004f48:	84800515 	stw	r18,20(r16)
 1004f4c:	80c0030d 	sth	r3,12(r16)
 1004f50:	81000415 	stw	r4,16(r16)
 1004f54:	81000015 	stw	r4,0(r16)
 1004f58:	dfc01217 	ldw	ra,72(sp)
 1004f5c:	dc801117 	ldw	r18,68(sp)
 1004f60:	dc401017 	ldw	r17,64(sp)
 1004f64:	dc000f17 	ldw	r16,60(sp)
 1004f68:	dec01304 	addi	sp,sp,76
 1004f6c:	f800283a 	ret
 1004f70:	80c0030b 	ldhu	r3,12(r16)
 1004f74:	1880200c 	andi	r2,r3,128
 1004f78:	10000426 	beq	r2,zero,1004f8c <__smakebuf_r+0xfc>
 1004f7c:	04801004 	movi	r18,64
 1004f80:	18820014 	ori	r2,r3,2048
 1004f84:	8080030d 	sth	r2,12(r16)
 1004f88:	003fe506 	br	1004f20 <__smakebuf_r+0x90>
 1004f8c:	04810004 	movi	r18,1024
 1004f90:	003ffb06 	br	1004f80 <__smakebuf_r+0xf0>
 1004f94:	8140038f 	ldh	r5,14(r16)
 1004f98:	8809883a 	mov	r4,r17
 1004f9c:	10077840 	call	1007784 <_isatty_r>
 1004fa0:	103fde26 	beq	r2,zero,1004f1c <__smakebuf_r+0x8c>
 1004fa4:	8080030b 	ldhu	r2,12(r16)
 1004fa8:	80c010c4 	addi	r3,r16,67
 1004fac:	04810004 	movi	r18,1024
 1004fb0:	10800054 	ori	r2,r2,1
 1004fb4:	8080030d 	sth	r2,12(r16)
 1004fb8:	00800044 	movi	r2,1
 1004fbc:	80c00415 	stw	r3,16(r16)
 1004fc0:	80800515 	stw	r2,20(r16)
 1004fc4:	80c00015 	stw	r3,0(r16)
 1004fc8:	003fd506 	br	1004f20 <__smakebuf_r+0x90>
 1004fcc:	80c00a17 	ldw	r3,40(r16)
 1004fd0:	00804034 	movhi	r2,256
 1004fd4:	109c7204 	addi	r2,r2,29128
 1004fd8:	18bfcb1e 	bne	r3,r2,1004f08 <__smakebuf_r+0x78>
 1004fdc:	8080030b 	ldhu	r2,12(r16)
 1004fe0:	00c10004 	movi	r3,1024
 1004fe4:	1825883a 	mov	r18,r3
 1004fe8:	10c4b03a 	or	r2,r2,r3
 1004fec:	8080030d 	sth	r2,12(r16)
 1004ff0:	80c01315 	stw	r3,76(r16)
 1004ff4:	003fca06 	br	1004f20 <__smakebuf_r+0x90>
 1004ff8:	8100030b 	ldhu	r4,12(r16)
 1004ffc:	2080800c 	andi	r2,r4,512
 1005000:	103fb21e 	bne	r2,zero,1004ecc <__smakebuf_r+0x3c>
 1005004:	80c010c4 	addi	r3,r16,67
 1005008:	21000094 	ori	r4,r4,2
 100500c:	00800044 	movi	r2,1
 1005010:	80800515 	stw	r2,20(r16)
 1005014:	8100030d 	sth	r4,12(r16)
 1005018:	80c00415 	stw	r3,16(r16)
 100501c:	80c00015 	stw	r3,0(r16)
 1005020:	003faa06 	br	1004ecc <__smakebuf_r+0x3c>

01005024 <_malloc_r>:
 1005024:	defff604 	addi	sp,sp,-40
 1005028:	28c002c4 	addi	r3,r5,11
 100502c:	00800584 	movi	r2,22
 1005030:	dc800215 	stw	r18,8(sp)
 1005034:	dfc00915 	stw	ra,36(sp)
 1005038:	df000815 	stw	fp,32(sp)
 100503c:	ddc00715 	stw	r23,28(sp)
 1005040:	dd800615 	stw	r22,24(sp)
 1005044:	dd400515 	stw	r21,20(sp)
 1005048:	dd000415 	stw	r20,16(sp)
 100504c:	dcc00315 	stw	r19,12(sp)
 1005050:	dc400115 	stw	r17,4(sp)
 1005054:	dc000015 	stw	r16,0(sp)
 1005058:	2025883a 	mov	r18,r4
 100505c:	10c01236 	bltu	r2,r3,10050a8 <_malloc_r+0x84>
 1005060:	04400404 	movi	r17,16
 1005064:	8940142e 	bgeu	r17,r5,10050b8 <_malloc_r+0x94>
 1005068:	00800304 	movi	r2,12
 100506c:	0007883a 	mov	r3,zero
 1005070:	90800015 	stw	r2,0(r18)
 1005074:	1805883a 	mov	r2,r3
 1005078:	dfc00917 	ldw	ra,36(sp)
 100507c:	df000817 	ldw	fp,32(sp)
 1005080:	ddc00717 	ldw	r23,28(sp)
 1005084:	dd800617 	ldw	r22,24(sp)
 1005088:	dd400517 	ldw	r21,20(sp)
 100508c:	dd000417 	ldw	r20,16(sp)
 1005090:	dcc00317 	ldw	r19,12(sp)
 1005094:	dc800217 	ldw	r18,8(sp)
 1005098:	dc400117 	ldw	r17,4(sp)
 100509c:	dc000017 	ldw	r16,0(sp)
 10050a0:	dec00a04 	addi	sp,sp,40
 10050a4:	f800283a 	ret
 10050a8:	00bffe04 	movi	r2,-8
 10050ac:	18a2703a 	and	r17,r3,r2
 10050b0:	883fed16 	blt	r17,zero,1005068 <_malloc_r+0x44>
 10050b4:	897fec36 	bltu	r17,r5,1005068 <_malloc_r+0x44>
 10050b8:	9009883a 	mov	r4,r18
 10050bc:	100a5ac0 	call	100a5ac <__malloc_lock>
 10050c0:	00807dc4 	movi	r2,503
 10050c4:	14402b2e 	bgeu	r2,r17,1005174 <_malloc_r+0x150>
 10050c8:	8806d27a 	srli	r3,r17,9
 10050cc:	18003f1e 	bne	r3,zero,10051cc <_malloc_r+0x1a8>
 10050d0:	880cd0fa 	srli	r6,r17,3
 10050d4:	300490fa 	slli	r2,r6,3
 10050d8:	02c04074 	movhi	r11,257
 10050dc:	5af71004 	addi	r11,r11,-9152
 10050e0:	12cb883a 	add	r5,r2,r11
 10050e4:	2c000317 	ldw	r16,12(r5)
 10050e8:	580f883a 	mov	r7,r11
 10050ec:	2c00041e 	bne	r5,r16,1005100 <_malloc_r+0xdc>
 10050f0:	00000a06 	br	100511c <_malloc_r+0xf8>
 10050f4:	1800860e 	bge	r3,zero,1005310 <_malloc_r+0x2ec>
 10050f8:	84000317 	ldw	r16,12(r16)
 10050fc:	2c000726 	beq	r5,r16,100511c <_malloc_r+0xf8>
 1005100:	80800117 	ldw	r2,4(r16)
 1005104:	00ffff04 	movi	r3,-4
 1005108:	10c8703a 	and	r4,r2,r3
 100510c:	2447c83a 	sub	r3,r4,r17
 1005110:	008003c4 	movi	r2,15
 1005114:	10fff70e 	bge	r2,r3,10050f4 <_malloc_r+0xd0>
 1005118:	31bfffc4 	addi	r6,r6,-1
 100511c:	32400044 	addi	r9,r6,1
 1005120:	02804074 	movhi	r10,257
 1005124:	52b71204 	addi	r10,r10,-9144
 1005128:	54000217 	ldw	r16,8(r10)
 100512c:	8280a026 	beq	r16,r10,10053b0 <_malloc_r+0x38c>
 1005130:	80800117 	ldw	r2,4(r16)
 1005134:	00ffff04 	movi	r3,-4
 1005138:	10ca703a 	and	r5,r2,r3
 100513c:	2c4dc83a 	sub	r6,r5,r17
 1005140:	008003c4 	movi	r2,15
 1005144:	11808316 	blt	r2,r6,1005354 <_malloc_r+0x330>
 1005148:	52800315 	stw	r10,12(r10)
 100514c:	52800215 	stw	r10,8(r10)
 1005150:	30002916 	blt	r6,zero,10051f8 <_malloc_r+0x1d4>
 1005154:	8147883a 	add	r3,r16,r5
 1005158:	18800117 	ldw	r2,4(r3)
 100515c:	9009883a 	mov	r4,r18
 1005160:	10800054 	ori	r2,r2,1
 1005164:	18800115 	stw	r2,4(r3)
 1005168:	100a5cc0 	call	100a5cc <__malloc_unlock>
 100516c:	80c00204 	addi	r3,r16,8
 1005170:	003fc006 	br	1005074 <_malloc_r+0x50>
 1005174:	02c04074 	movhi	r11,257
 1005178:	5af71004 	addi	r11,r11,-9152
 100517c:	8ac5883a 	add	r2,r17,r11
 1005180:	14000317 	ldw	r16,12(r2)
 1005184:	580f883a 	mov	r7,r11
 1005188:	8806d0fa 	srli	r3,r17,3
 100518c:	14006c26 	beq	r2,r16,1005340 <_malloc_r+0x31c>
 1005190:	80c00117 	ldw	r3,4(r16)
 1005194:	00bfff04 	movi	r2,-4
 1005198:	81800317 	ldw	r6,12(r16)
 100519c:	1886703a 	and	r3,r3,r2
 10051a0:	80c7883a 	add	r3,r16,r3
 10051a4:	18800117 	ldw	r2,4(r3)
 10051a8:	81400217 	ldw	r5,8(r16)
 10051ac:	9009883a 	mov	r4,r18
 10051b0:	10800054 	ori	r2,r2,1
 10051b4:	18800115 	stw	r2,4(r3)
 10051b8:	31400215 	stw	r5,8(r6)
 10051bc:	29800315 	stw	r6,12(r5)
 10051c0:	100a5cc0 	call	100a5cc <__malloc_unlock>
 10051c4:	80c00204 	addi	r3,r16,8
 10051c8:	003faa06 	br	1005074 <_malloc_r+0x50>
 10051cc:	00800104 	movi	r2,4
 10051d0:	10c0052e 	bgeu	r2,r3,10051e8 <_malloc_r+0x1c4>
 10051d4:	00800504 	movi	r2,20
 10051d8:	10c07836 	bltu	r2,r3,10053bc <_malloc_r+0x398>
 10051dc:	198016c4 	addi	r6,r3,91
 10051e0:	300490fa 	slli	r2,r6,3
 10051e4:	003fbc06 	br	10050d8 <_malloc_r+0xb4>
 10051e8:	8804d1ba 	srli	r2,r17,6
 10051ec:	11800e04 	addi	r6,r2,56
 10051f0:	300490fa 	slli	r2,r6,3
 10051f4:	003fb806 	br	10050d8 <_malloc_r+0xb4>
 10051f8:	00807fc4 	movi	r2,511
 10051fc:	1140bb36 	bltu	r2,r5,10054ec <_malloc_r+0x4c8>
 1005200:	2806d0fa 	srli	r3,r5,3
 1005204:	573ffe04 	addi	fp,r10,-8
 1005208:	00800044 	movi	r2,1
 100520c:	180890fa 	slli	r4,r3,3
 1005210:	1807d0ba 	srai	r3,r3,2
 1005214:	e1c00117 	ldw	r7,4(fp)
 1005218:	5909883a 	add	r4,r11,r4
 100521c:	21400217 	ldw	r5,8(r4)
 1005220:	10c4983a 	sll	r2,r2,r3
 1005224:	81000315 	stw	r4,12(r16)
 1005228:	81400215 	stw	r5,8(r16)
 100522c:	388eb03a 	or	r7,r7,r2
 1005230:	2c000315 	stw	r16,12(r5)
 1005234:	24000215 	stw	r16,8(r4)
 1005238:	e1c00115 	stw	r7,4(fp)
 100523c:	4807883a 	mov	r3,r9
 1005240:	4800cd16 	blt	r9,zero,1005578 <_malloc_r+0x554>
 1005244:	1807d0ba 	srai	r3,r3,2
 1005248:	00800044 	movi	r2,1
 100524c:	10c8983a 	sll	r4,r2,r3
 1005250:	39004436 	bltu	r7,r4,1005364 <_malloc_r+0x340>
 1005254:	21c4703a 	and	r2,r4,r7
 1005258:	10000a1e 	bne	r2,zero,1005284 <_malloc_r+0x260>
 100525c:	2109883a 	add	r4,r4,r4
 1005260:	00bfff04 	movi	r2,-4
 1005264:	4884703a 	and	r2,r9,r2
 1005268:	3906703a 	and	r3,r7,r4
 100526c:	12400104 	addi	r9,r2,4
 1005270:	1800041e 	bne	r3,zero,1005284 <_malloc_r+0x260>
 1005274:	2109883a 	add	r4,r4,r4
 1005278:	3904703a 	and	r2,r7,r4
 100527c:	4a400104 	addi	r9,r9,4
 1005280:	103ffc26 	beq	r2,zero,1005274 <_malloc_r+0x250>
 1005284:	480490fa 	slli	r2,r9,3
 1005288:	4819883a 	mov	r12,r9
 100528c:	023fff04 	movi	r8,-4
 1005290:	589b883a 	add	r13,r11,r2
 1005294:	6807883a 	mov	r3,r13
 1005298:	014003c4 	movi	r5,15
 100529c:	1c000317 	ldw	r16,12(r3)
 10052a0:	1c00041e 	bne	r3,r16,10052b4 <_malloc_r+0x290>
 10052a4:	0000a706 	br	1005544 <_malloc_r+0x520>
 10052a8:	3000ab0e 	bge	r6,zero,1005558 <_malloc_r+0x534>
 10052ac:	84000317 	ldw	r16,12(r16)
 10052b0:	1c00a426 	beq	r3,r16,1005544 <_malloc_r+0x520>
 10052b4:	80800117 	ldw	r2,4(r16)
 10052b8:	1204703a 	and	r2,r2,r8
 10052bc:	144dc83a 	sub	r6,r2,r17
 10052c0:	29bff90e 	bge	r5,r6,10052a8 <_malloc_r+0x284>
 10052c4:	81000317 	ldw	r4,12(r16)
 10052c8:	80c00217 	ldw	r3,8(r16)
 10052cc:	89400054 	ori	r5,r17,1
 10052d0:	8445883a 	add	r2,r16,r17
 10052d4:	20c00215 	stw	r3,8(r4)
 10052d8:	19000315 	stw	r4,12(r3)
 10052dc:	81400115 	stw	r5,4(r16)
 10052e0:	1187883a 	add	r3,r2,r6
 10052e4:	31000054 	ori	r4,r6,1
 10052e8:	50800315 	stw	r2,12(r10)
 10052ec:	50800215 	stw	r2,8(r10)
 10052f0:	19800015 	stw	r6,0(r3)
 10052f4:	11000115 	stw	r4,4(r2)
 10052f8:	12800215 	stw	r10,8(r2)
 10052fc:	12800315 	stw	r10,12(r2)
 1005300:	9009883a 	mov	r4,r18
 1005304:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1005308:	80c00204 	addi	r3,r16,8
 100530c:	003f5906 	br	1005074 <_malloc_r+0x50>
 1005310:	8109883a 	add	r4,r16,r4
 1005314:	20800117 	ldw	r2,4(r4)
 1005318:	80c00217 	ldw	r3,8(r16)
 100531c:	81400317 	ldw	r5,12(r16)
 1005320:	10800054 	ori	r2,r2,1
 1005324:	20800115 	stw	r2,4(r4)
 1005328:	28c00215 	stw	r3,8(r5)
 100532c:	19400315 	stw	r5,12(r3)
 1005330:	9009883a 	mov	r4,r18
 1005334:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1005338:	80c00204 	addi	r3,r16,8
 100533c:	003f4d06 	br	1005074 <_malloc_r+0x50>
 1005340:	80800204 	addi	r2,r16,8
 1005344:	14000317 	ldw	r16,12(r2)
 1005348:	143f911e 	bne	r2,r16,1005190 <_malloc_r+0x16c>
 100534c:	1a400084 	addi	r9,r3,2
 1005350:	003f7306 	br	1005120 <_malloc_r+0xfc>
 1005354:	88c00054 	ori	r3,r17,1
 1005358:	8445883a 	add	r2,r16,r17
 100535c:	80c00115 	stw	r3,4(r16)
 1005360:	003fdf06 	br	10052e0 <_malloc_r+0x2bc>
 1005364:	e4000217 	ldw	r16,8(fp)
 1005368:	00bfff04 	movi	r2,-4
 100536c:	80c00117 	ldw	r3,4(r16)
 1005370:	802d883a 	mov	r22,r16
 1005374:	18aa703a 	and	r21,r3,r2
 1005378:	ac401636 	bltu	r21,r17,10053d4 <_malloc_r+0x3b0>
 100537c:	ac49c83a 	sub	r4,r21,r17
 1005380:	008003c4 	movi	r2,15
 1005384:	1100130e 	bge	r2,r4,10053d4 <_malloc_r+0x3b0>
 1005388:	88800054 	ori	r2,r17,1
 100538c:	8447883a 	add	r3,r16,r17
 1005390:	80800115 	stw	r2,4(r16)
 1005394:	20800054 	ori	r2,r4,1
 1005398:	18800115 	stw	r2,4(r3)
 100539c:	e0c00215 	stw	r3,8(fp)
 10053a0:	9009883a 	mov	r4,r18
 10053a4:	100a5cc0 	call	100a5cc <__malloc_unlock>
 10053a8:	80c00204 	addi	r3,r16,8
 10053ac:	003f3106 	br	1005074 <_malloc_r+0x50>
 10053b0:	39c00117 	ldw	r7,4(r7)
 10053b4:	573ffe04 	addi	fp,r10,-8
 10053b8:	003fa006 	br	100523c <_malloc_r+0x218>
 10053bc:	00801504 	movi	r2,84
 10053c0:	10c06736 	bltu	r2,r3,1005560 <_malloc_r+0x53c>
 10053c4:	8804d33a 	srli	r2,r17,12
 10053c8:	11801b84 	addi	r6,r2,110
 10053cc:	300490fa 	slli	r2,r6,3
 10053d0:	003f4106 	br	10050d8 <_malloc_r+0xb4>
 10053d4:	d0a6b517 	ldw	r2,-25900(gp)
 10053d8:	d0e00517 	ldw	r3,-32748(gp)
 10053dc:	053fffc4 	movi	r20,-1
 10053e0:	10800404 	addi	r2,r2,16
 10053e4:	88a7883a 	add	r19,r17,r2
 10053e8:	1d000326 	beq	r3,r20,10053f8 <_malloc_r+0x3d4>
 10053ec:	98c3ffc4 	addi	r3,r19,4095
 10053f0:	00bc0004 	movi	r2,-4096
 10053f4:	18a6703a 	and	r19,r3,r2
 10053f8:	9009883a 	mov	r4,r18
 10053fc:	980b883a 	mov	r5,r19
 1005400:	10071500 	call	1007150 <_sbrk_r>
 1005404:	1009883a 	mov	r4,r2
 1005408:	15000426 	beq	r2,r20,100541c <_malloc_r+0x3f8>
 100540c:	854b883a 	add	r5,r16,r21
 1005410:	1029883a 	mov	r20,r2
 1005414:	11405a2e 	bgeu	r2,r5,1005580 <_malloc_r+0x55c>
 1005418:	87000c26 	beq	r16,fp,100544c <_malloc_r+0x428>
 100541c:	e4000217 	ldw	r16,8(fp)
 1005420:	80c00117 	ldw	r3,4(r16)
 1005424:	00bfff04 	movi	r2,-4
 1005428:	1884703a 	and	r2,r3,r2
 100542c:	14400336 	bltu	r2,r17,100543c <_malloc_r+0x418>
 1005430:	1449c83a 	sub	r4,r2,r17
 1005434:	008003c4 	movi	r2,15
 1005438:	113fd316 	blt	r2,r4,1005388 <_malloc_r+0x364>
 100543c:	9009883a 	mov	r4,r18
 1005440:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1005444:	0007883a 	mov	r3,zero
 1005448:	003f0a06 	br	1005074 <_malloc_r+0x50>
 100544c:	05c04074 	movhi	r23,257
 1005450:	bdc35e04 	addi	r23,r23,3448
 1005454:	b8800017 	ldw	r2,0(r23)
 1005458:	988d883a 	add	r6,r19,r2
 100545c:	b9800015 	stw	r6,0(r23)
 1005460:	d0e00517 	ldw	r3,-32748(gp)
 1005464:	00bfffc4 	movi	r2,-1
 1005468:	18808e26 	beq	r3,r2,10056a4 <_malloc_r+0x680>
 100546c:	2145c83a 	sub	r2,r4,r5
 1005470:	3085883a 	add	r2,r6,r2
 1005474:	b8800015 	stw	r2,0(r23)
 1005478:	20c001cc 	andi	r3,r4,7
 100547c:	18005f1e 	bne	r3,zero,10055fc <_malloc_r+0x5d8>
 1005480:	000b883a 	mov	r5,zero
 1005484:	a4c5883a 	add	r2,r20,r19
 1005488:	1083ffcc 	andi	r2,r2,4095
 100548c:	00c40004 	movi	r3,4096
 1005490:	1887c83a 	sub	r3,r3,r2
 1005494:	28e7883a 	add	r19,r5,r3
 1005498:	9009883a 	mov	r4,r18
 100549c:	980b883a 	mov	r5,r19
 10054a0:	10071500 	call	1007150 <_sbrk_r>
 10054a4:	1007883a 	mov	r3,r2
 10054a8:	00bfffc4 	movi	r2,-1
 10054ac:	18807a26 	beq	r3,r2,1005698 <_malloc_r+0x674>
 10054b0:	1d05c83a 	sub	r2,r3,r20
 10054b4:	9885883a 	add	r2,r19,r2
 10054b8:	10c00054 	ori	r3,r2,1
 10054bc:	b8800017 	ldw	r2,0(r23)
 10054c0:	a021883a 	mov	r16,r20
 10054c4:	a0c00115 	stw	r3,4(r20)
 10054c8:	9885883a 	add	r2,r19,r2
 10054cc:	b8800015 	stw	r2,0(r23)
 10054d0:	e5000215 	stw	r20,8(fp)
 10054d4:	b7003626 	beq	r22,fp,10055b0 <_malloc_r+0x58c>
 10054d8:	018003c4 	movi	r6,15
 10054dc:	35404b36 	bltu	r6,r21,100560c <_malloc_r+0x5e8>
 10054e0:	00800044 	movi	r2,1
 10054e4:	a0800115 	stw	r2,4(r20)
 10054e8:	003fcd06 	br	1005420 <_malloc_r+0x3fc>
 10054ec:	2808d27a 	srli	r4,r5,9
 10054f0:	2000371e 	bne	r4,zero,10055d0 <_malloc_r+0x5ac>
 10054f4:	2808d0fa 	srli	r4,r5,3
 10054f8:	200690fa 	slli	r3,r4,3
 10054fc:	1ad1883a 	add	r8,r3,r11
 1005500:	41800217 	ldw	r6,8(r8)
 1005504:	41805b26 	beq	r8,r6,1005674 <_malloc_r+0x650>
 1005508:	30800117 	ldw	r2,4(r6)
 100550c:	00ffff04 	movi	r3,-4
 1005510:	10c4703a 	and	r2,r2,r3
 1005514:	2880022e 	bgeu	r5,r2,1005520 <_malloc_r+0x4fc>
 1005518:	31800217 	ldw	r6,8(r6)
 100551c:	41bffa1e 	bne	r8,r6,1005508 <_malloc_r+0x4e4>
 1005520:	32000317 	ldw	r8,12(r6)
 1005524:	39c00117 	ldw	r7,4(r7)
 1005528:	82000315 	stw	r8,12(r16)
 100552c:	81800215 	stw	r6,8(r16)
 1005530:	07004074 	movhi	fp,257
 1005534:	e7371004 	addi	fp,fp,-9152
 1005538:	34000315 	stw	r16,12(r6)
 100553c:	44000215 	stw	r16,8(r8)
 1005540:	003f3e06 	br	100523c <_malloc_r+0x218>
 1005544:	63000044 	addi	r12,r12,1
 1005548:	608000cc 	andi	r2,r12,3
 100554c:	10005d26 	beq	r2,zero,10056c4 <_malloc_r+0x6a0>
 1005550:	18c00204 	addi	r3,r3,8
 1005554:	003f5106 	br	100529c <_malloc_r+0x278>
 1005558:	8089883a 	add	r4,r16,r2
 100555c:	003f6d06 	br	1005314 <_malloc_r+0x2f0>
 1005560:	00805504 	movi	r2,340
 1005564:	10c02036 	bltu	r2,r3,10055e8 <_malloc_r+0x5c4>
 1005568:	8804d3fa 	srli	r2,r17,15
 100556c:	11801dc4 	addi	r6,r2,119
 1005570:	300490fa 	slli	r2,r6,3
 1005574:	003ed806 	br	10050d8 <_malloc_r+0xb4>
 1005578:	48c000c4 	addi	r3,r9,3
 100557c:	003f3106 	br	1005244 <_malloc_r+0x220>
 1005580:	05c04074 	movhi	r23,257
 1005584:	bdc35e04 	addi	r23,r23,3448
 1005588:	b8800017 	ldw	r2,0(r23)
 100558c:	988d883a 	add	r6,r19,r2
 1005590:	b9800015 	stw	r6,0(r23)
 1005594:	293fb21e 	bne	r5,r4,1005460 <_malloc_r+0x43c>
 1005598:	2083ffcc 	andi	r2,r4,4095
 100559c:	103fb01e 	bne	r2,zero,1005460 <_malloc_r+0x43c>
 10055a0:	e4000217 	ldw	r16,8(fp)
 10055a4:	9d45883a 	add	r2,r19,r21
 10055a8:	10800054 	ori	r2,r2,1
 10055ac:	80800115 	stw	r2,4(r16)
 10055b0:	b8c00017 	ldw	r3,0(r23)
 10055b4:	d0a6b617 	ldw	r2,-25896(gp)
 10055b8:	10c0012e 	bgeu	r2,r3,10055c0 <_malloc_r+0x59c>
 10055bc:	d0e6b615 	stw	r3,-25896(gp)
 10055c0:	d0a6b717 	ldw	r2,-25892(gp)
 10055c4:	10ff962e 	bgeu	r2,r3,1005420 <_malloc_r+0x3fc>
 10055c8:	d0e6b715 	stw	r3,-25892(gp)
 10055cc:	003f9406 	br	1005420 <_malloc_r+0x3fc>
 10055d0:	00800104 	movi	r2,4
 10055d4:	11001e36 	bltu	r2,r4,1005650 <_malloc_r+0x62c>
 10055d8:	2804d1ba 	srli	r2,r5,6
 10055dc:	11000e04 	addi	r4,r2,56
 10055e0:	200690fa 	slli	r3,r4,3
 10055e4:	003fc506 	br	10054fc <_malloc_r+0x4d8>
 10055e8:	00815504 	movi	r2,1364
 10055ec:	10c01d2e 	bgeu	r2,r3,1005664 <_malloc_r+0x640>
 10055f0:	01801f84 	movi	r6,126
 10055f4:	0080fc04 	movi	r2,1008
 10055f8:	003eb706 	br	10050d8 <_malloc_r+0xb4>
 10055fc:	00800204 	movi	r2,8
 1005600:	10cbc83a 	sub	r5,r2,r3
 1005604:	2169883a 	add	r20,r4,r5
 1005608:	003f9e06 	br	1005484 <_malloc_r+0x460>
 100560c:	00bffe04 	movi	r2,-8
 1005610:	a93ffd04 	addi	r4,r21,-12
 1005614:	2088703a 	and	r4,r4,r2
 1005618:	b10b883a 	add	r5,r22,r4
 100561c:	00c00144 	movi	r3,5
 1005620:	28c00215 	stw	r3,8(r5)
 1005624:	28c00115 	stw	r3,4(r5)
 1005628:	b0800117 	ldw	r2,4(r22)
 100562c:	1080004c 	andi	r2,r2,1
 1005630:	2084b03a 	or	r2,r4,r2
 1005634:	b0800115 	stw	r2,4(r22)
 1005638:	313fdd2e 	bgeu	r6,r4,10055b0 <_malloc_r+0x58c>
 100563c:	b1400204 	addi	r5,r22,8
 1005640:	9009883a 	mov	r4,r18
 1005644:	100449c0 	call	100449c <_free_r>
 1005648:	e4000217 	ldw	r16,8(fp)
 100564c:	003fd806 	br	10055b0 <_malloc_r+0x58c>
 1005650:	00800504 	movi	r2,20
 1005654:	11001536 	bltu	r2,r4,10056ac <_malloc_r+0x688>
 1005658:	210016c4 	addi	r4,r4,91
 100565c:	200690fa 	slli	r3,r4,3
 1005660:	003fa606 	br	10054fc <_malloc_r+0x4d8>
 1005664:	8804d4ba 	srli	r2,r17,18
 1005668:	11801f04 	addi	r6,r2,124
 100566c:	300490fa 	slli	r2,r6,3
 1005670:	003e9906 	br	10050d8 <_malloc_r+0xb4>
 1005674:	2009d0ba 	srai	r4,r4,2
 1005678:	01404074 	movhi	r5,257
 100567c:	29771004 	addi	r5,r5,-9152
 1005680:	00c00044 	movi	r3,1
 1005684:	28800117 	ldw	r2,4(r5)
 1005688:	1906983a 	sll	r3,r3,r4
 100568c:	10c4b03a 	or	r2,r2,r3
 1005690:	28800115 	stw	r2,4(r5)
 1005694:	003fa306 	br	1005524 <_malloc_r+0x500>
 1005698:	0027883a 	mov	r19,zero
 100569c:	00c00044 	movi	r3,1
 10056a0:	003f8606 	br	10054bc <_malloc_r+0x498>
 10056a4:	d1200515 	stw	r4,-32748(gp)
 10056a8:	003f7306 	br	1005478 <_malloc_r+0x454>
 10056ac:	00801504 	movi	r2,84
 10056b0:	11001936 	bltu	r2,r4,1005718 <_malloc_r+0x6f4>
 10056b4:	2804d33a 	srli	r2,r5,12
 10056b8:	11001b84 	addi	r4,r2,110
 10056bc:	200690fa 	slli	r3,r4,3
 10056c0:	003f8e06 	br	10054fc <_malloc_r+0x4d8>
 10056c4:	480b883a 	mov	r5,r9
 10056c8:	6807883a 	mov	r3,r13
 10056cc:	288000cc 	andi	r2,r5,3
 10056d0:	18fffe04 	addi	r3,r3,-8
 10056d4:	297fffc4 	addi	r5,r5,-1
 10056d8:	10001526 	beq	r2,zero,1005730 <_malloc_r+0x70c>
 10056dc:	18800217 	ldw	r2,8(r3)
 10056e0:	10fffa26 	beq	r2,r3,10056cc <_malloc_r+0x6a8>
 10056e4:	2109883a 	add	r4,r4,r4
 10056e8:	393f1e36 	bltu	r7,r4,1005364 <_malloc_r+0x340>
 10056ec:	203f1d26 	beq	r4,zero,1005364 <_malloc_r+0x340>
 10056f0:	21c4703a 	and	r2,r4,r7
 10056f4:	10000226 	beq	r2,zero,1005700 <_malloc_r+0x6dc>
 10056f8:	6013883a 	mov	r9,r12
 10056fc:	003ee106 	br	1005284 <_malloc_r+0x260>
 1005700:	2109883a 	add	r4,r4,r4
 1005704:	3904703a 	and	r2,r7,r4
 1005708:	63000104 	addi	r12,r12,4
 100570c:	103ffc26 	beq	r2,zero,1005700 <_malloc_r+0x6dc>
 1005710:	6013883a 	mov	r9,r12
 1005714:	003edb06 	br	1005284 <_malloc_r+0x260>
 1005718:	00805504 	movi	r2,340
 100571c:	11000836 	bltu	r2,r4,1005740 <_malloc_r+0x71c>
 1005720:	2804d3fa 	srli	r2,r5,15
 1005724:	11001dc4 	addi	r4,r2,119
 1005728:	200690fa 	slli	r3,r4,3
 100572c:	003f7306 	br	10054fc <_malloc_r+0x4d8>
 1005730:	0104303a 	nor	r2,zero,r4
 1005734:	388e703a 	and	r7,r7,r2
 1005738:	e1c00115 	stw	r7,4(fp)
 100573c:	003fe906 	br	10056e4 <_malloc_r+0x6c0>
 1005740:	00815504 	movi	r2,1364
 1005744:	1100032e 	bgeu	r2,r4,1005754 <_malloc_r+0x730>
 1005748:	01001f84 	movi	r4,126
 100574c:	00c0fc04 	movi	r3,1008
 1005750:	003f6a06 	br	10054fc <_malloc_r+0x4d8>
 1005754:	2804d4ba 	srli	r2,r5,18
 1005758:	11001f04 	addi	r4,r2,124
 100575c:	200690fa 	slli	r3,r4,3
 1005760:	003f6606 	br	10054fc <_malloc_r+0x4d8>

01005764 <memchr>:
 1005764:	008000c4 	movi	r2,3
 1005768:	29403fcc 	andi	r5,r5,255
 100576c:	2007883a 	mov	r3,r4
 1005770:	1180022e 	bgeu	r2,r6,100577c <memchr+0x18>
 1005774:	2084703a 	and	r2,r4,r2
 1005778:	10000b26 	beq	r2,zero,10057a8 <memchr+0x44>
 100577c:	313fffc4 	addi	r4,r6,-1
 1005780:	3000051e 	bne	r6,zero,1005798 <memchr+0x34>
 1005784:	00002c06 	br	1005838 <memchr+0xd4>
 1005788:	213fffc4 	addi	r4,r4,-1
 100578c:	00bfffc4 	movi	r2,-1
 1005790:	18c00044 	addi	r3,r3,1
 1005794:	20802826 	beq	r4,r2,1005838 <memchr+0xd4>
 1005798:	18800003 	ldbu	r2,0(r3)
 100579c:	28bffa1e 	bne	r5,r2,1005788 <memchr+0x24>
 10057a0:	1805883a 	mov	r2,r3
 10057a4:	f800283a 	ret
 10057a8:	0011883a 	mov	r8,zero
 10057ac:	0007883a 	mov	r3,zero
 10057b0:	01c00104 	movi	r7,4
 10057b4:	4004923a 	slli	r2,r8,8
 10057b8:	18c00044 	addi	r3,r3,1
 10057bc:	1151883a 	add	r8,r2,r5
 10057c0:	19fffc1e 	bne	r3,r7,10057b4 <memchr+0x50>
 10057c4:	02bfbff4 	movhi	r10,65279
 10057c8:	52bfbfc4 	addi	r10,r10,-257
 10057cc:	02602074 	movhi	r9,32897
 10057d0:	4a602004 	addi	r9,r9,-32640
 10057d4:	02c000c4 	movi	r11,3
 10057d8:	20800017 	ldw	r2,0(r4)
 10057dc:	31bfff04 	addi	r6,r6,-4
 10057e0:	200f883a 	mov	r7,r4
 10057e4:	1204f03a 	xor	r2,r2,r8
 10057e8:	1287883a 	add	r3,r2,r10
 10057ec:	1a46703a 	and	r3,r3,r9
 10057f0:	0084303a 	nor	r2,zero,r2
 10057f4:	10c4703a 	and	r2,r2,r3
 10057f8:	10000b26 	beq	r2,zero,1005828 <memchr+0xc4>
 10057fc:	20800003 	ldbu	r2,0(r4)
 1005800:	28800f26 	beq	r5,r2,1005840 <memchr+0xdc>
 1005804:	20800043 	ldbu	r2,1(r4)
 1005808:	21c00044 	addi	r7,r4,1
 100580c:	28800c26 	beq	r5,r2,1005840 <memchr+0xdc>
 1005810:	20800083 	ldbu	r2,2(r4)
 1005814:	21c00084 	addi	r7,r4,2
 1005818:	28800926 	beq	r5,r2,1005840 <memchr+0xdc>
 100581c:	208000c3 	ldbu	r2,3(r4)
 1005820:	21c000c4 	addi	r7,r4,3
 1005824:	28800626 	beq	r5,r2,1005840 <memchr+0xdc>
 1005828:	21000104 	addi	r4,r4,4
 100582c:	59bfea36 	bltu	r11,r6,10057d8 <memchr+0x74>
 1005830:	2007883a 	mov	r3,r4
 1005834:	003fd106 	br	100577c <memchr+0x18>
 1005838:	0005883a 	mov	r2,zero
 100583c:	f800283a 	ret
 1005840:	3805883a 	mov	r2,r7
 1005844:	f800283a 	ret

01005848 <memcpy>:
 1005848:	01c003c4 	movi	r7,15
 100584c:	2007883a 	mov	r3,r4
 1005850:	3980032e 	bgeu	r7,r6,1005860 <memcpy+0x18>
 1005854:	2904b03a 	or	r2,r5,r4
 1005858:	108000cc 	andi	r2,r2,3
 100585c:	10000926 	beq	r2,zero,1005884 <memcpy+0x3c>
 1005860:	30000626 	beq	r6,zero,100587c <memcpy+0x34>
 1005864:	30cd883a 	add	r6,r6,r3
 1005868:	28800003 	ldbu	r2,0(r5)
 100586c:	29400044 	addi	r5,r5,1
 1005870:	18800005 	stb	r2,0(r3)
 1005874:	18c00044 	addi	r3,r3,1
 1005878:	30fffb1e 	bne	r6,r3,1005868 <memcpy+0x20>
 100587c:	2005883a 	mov	r2,r4
 1005880:	f800283a 	ret
 1005884:	3811883a 	mov	r8,r7
 1005888:	200f883a 	mov	r7,r4
 100588c:	28c00017 	ldw	r3,0(r5)
 1005890:	31bffc04 	addi	r6,r6,-16
 1005894:	38c00015 	stw	r3,0(r7)
 1005898:	28800117 	ldw	r2,4(r5)
 100589c:	38800115 	stw	r2,4(r7)
 10058a0:	28c00217 	ldw	r3,8(r5)
 10058a4:	38c00215 	stw	r3,8(r7)
 10058a8:	28800317 	ldw	r2,12(r5)
 10058ac:	29400404 	addi	r5,r5,16
 10058b0:	38800315 	stw	r2,12(r7)
 10058b4:	39c00404 	addi	r7,r7,16
 10058b8:	41bff436 	bltu	r8,r6,100588c <memcpy+0x44>
 10058bc:	008000c4 	movi	r2,3
 10058c0:	1180072e 	bgeu	r2,r6,10058e0 <memcpy+0x98>
 10058c4:	1007883a 	mov	r3,r2
 10058c8:	28800017 	ldw	r2,0(r5)
 10058cc:	31bfff04 	addi	r6,r6,-4
 10058d0:	29400104 	addi	r5,r5,4
 10058d4:	38800015 	stw	r2,0(r7)
 10058d8:	39c00104 	addi	r7,r7,4
 10058dc:	19bffa36 	bltu	r3,r6,10058c8 <memcpy+0x80>
 10058e0:	3807883a 	mov	r3,r7
 10058e4:	003fde06 	br	1005860 <memcpy+0x18>

010058e8 <memmove>:
 10058e8:	2807883a 	mov	r3,r5
 10058ec:	2011883a 	mov	r8,r4
 10058f0:	29000c2e 	bgeu	r5,r4,1005924 <memmove+0x3c>
 10058f4:	298f883a 	add	r7,r5,r6
 10058f8:	21c00a2e 	bgeu	r4,r7,1005924 <memmove+0x3c>
 10058fc:	30000726 	beq	r6,zero,100591c <memmove+0x34>
 1005900:	2187883a 	add	r3,r4,r6
 1005904:	198dc83a 	sub	r6,r3,r6
 1005908:	39ffffc4 	addi	r7,r7,-1
 100590c:	38800003 	ldbu	r2,0(r7)
 1005910:	18ffffc4 	addi	r3,r3,-1
 1005914:	18800005 	stb	r2,0(r3)
 1005918:	19bffb1e 	bne	r3,r6,1005908 <memmove+0x20>
 100591c:	2005883a 	mov	r2,r4
 1005920:	f800283a 	ret
 1005924:	01c003c4 	movi	r7,15
 1005928:	39800a36 	bltu	r7,r6,1005954 <memmove+0x6c>
 100592c:	303ffb26 	beq	r6,zero,100591c <memmove+0x34>
 1005930:	400f883a 	mov	r7,r8
 1005934:	320d883a 	add	r6,r6,r8
 1005938:	28800003 	ldbu	r2,0(r5)
 100593c:	29400044 	addi	r5,r5,1
 1005940:	38800005 	stb	r2,0(r7)
 1005944:	39c00044 	addi	r7,r7,1
 1005948:	39bffb1e 	bne	r7,r6,1005938 <memmove+0x50>
 100594c:	2005883a 	mov	r2,r4
 1005950:	f800283a 	ret
 1005954:	1904b03a 	or	r2,r3,r4
 1005958:	108000cc 	andi	r2,r2,3
 100595c:	103ff31e 	bne	r2,zero,100592c <memmove+0x44>
 1005960:	3811883a 	mov	r8,r7
 1005964:	180b883a 	mov	r5,r3
 1005968:	200f883a 	mov	r7,r4
 100596c:	28c00017 	ldw	r3,0(r5)
 1005970:	31bffc04 	addi	r6,r6,-16
 1005974:	38c00015 	stw	r3,0(r7)
 1005978:	28800117 	ldw	r2,4(r5)
 100597c:	38800115 	stw	r2,4(r7)
 1005980:	28c00217 	ldw	r3,8(r5)
 1005984:	38c00215 	stw	r3,8(r7)
 1005988:	28800317 	ldw	r2,12(r5)
 100598c:	29400404 	addi	r5,r5,16
 1005990:	38800315 	stw	r2,12(r7)
 1005994:	39c00404 	addi	r7,r7,16
 1005998:	41bff436 	bltu	r8,r6,100596c <memmove+0x84>
 100599c:	008000c4 	movi	r2,3
 10059a0:	1180072e 	bgeu	r2,r6,10059c0 <memmove+0xd8>
 10059a4:	1007883a 	mov	r3,r2
 10059a8:	28800017 	ldw	r2,0(r5)
 10059ac:	31bfff04 	addi	r6,r6,-4
 10059b0:	29400104 	addi	r5,r5,4
 10059b4:	38800015 	stw	r2,0(r7)
 10059b8:	39c00104 	addi	r7,r7,4
 10059bc:	19bffa36 	bltu	r3,r6,10059a8 <memmove+0xc0>
 10059c0:	3811883a 	mov	r8,r7
 10059c4:	003fd906 	br	100592c <memmove+0x44>

010059c8 <memset>:
 10059c8:	008000c4 	movi	r2,3
 10059cc:	29403fcc 	andi	r5,r5,255
 10059d0:	2007883a 	mov	r3,r4
 10059d4:	1180022e 	bgeu	r2,r6,10059e0 <memset+0x18>
 10059d8:	2084703a 	and	r2,r4,r2
 10059dc:	10000826 	beq	r2,zero,1005a00 <memset+0x38>
 10059e0:	30000526 	beq	r6,zero,10059f8 <memset+0x30>
 10059e4:	2805883a 	mov	r2,r5
 10059e8:	30cd883a 	add	r6,r6,r3
 10059ec:	18800005 	stb	r2,0(r3)
 10059f0:	18c00044 	addi	r3,r3,1
 10059f4:	19bffd1e 	bne	r3,r6,10059ec <memset+0x24>
 10059f8:	2005883a 	mov	r2,r4
 10059fc:	f800283a 	ret
 1005a00:	2804923a 	slli	r2,r5,8
 1005a04:	020003c4 	movi	r8,15
 1005a08:	200f883a 	mov	r7,r4
 1005a0c:	2884b03a 	or	r2,r5,r2
 1005a10:	1006943a 	slli	r3,r2,16
 1005a14:	10c6b03a 	or	r3,r2,r3
 1005a18:	41800a2e 	bgeu	r8,r6,1005a44 <memset+0x7c>
 1005a1c:	4005883a 	mov	r2,r8
 1005a20:	31bffc04 	addi	r6,r6,-16
 1005a24:	38c00015 	stw	r3,0(r7)
 1005a28:	38c00115 	stw	r3,4(r7)
 1005a2c:	38c00215 	stw	r3,8(r7)
 1005a30:	38c00315 	stw	r3,12(r7)
 1005a34:	39c00404 	addi	r7,r7,16
 1005a38:	11bff936 	bltu	r2,r6,1005a20 <memset+0x58>
 1005a3c:	008000c4 	movi	r2,3
 1005a40:	1180052e 	bgeu	r2,r6,1005a58 <memset+0x90>
 1005a44:	31bfff04 	addi	r6,r6,-4
 1005a48:	008000c4 	movi	r2,3
 1005a4c:	38c00015 	stw	r3,0(r7)
 1005a50:	39c00104 	addi	r7,r7,4
 1005a54:	11bffb36 	bltu	r2,r6,1005a44 <memset+0x7c>
 1005a58:	3807883a 	mov	r3,r7
 1005a5c:	003fe006 	br	10059e0 <memset+0x18>

01005a60 <_Bfree>:
 1005a60:	28000826 	beq	r5,zero,1005a84 <_Bfree+0x24>
 1005a64:	28800117 	ldw	r2,4(r5)
 1005a68:	21001317 	ldw	r4,76(r4)
 1005a6c:	1085883a 	add	r2,r2,r2
 1005a70:	1085883a 	add	r2,r2,r2
 1005a74:	1105883a 	add	r2,r2,r4
 1005a78:	10c00017 	ldw	r3,0(r2)
 1005a7c:	28c00015 	stw	r3,0(r5)
 1005a80:	11400015 	stw	r5,0(r2)
 1005a84:	f800283a 	ret

01005a88 <__hi0bits>:
 1005a88:	20bfffec 	andhi	r2,r4,65535
 1005a8c:	10001426 	beq	r2,zero,1005ae0 <__hi0bits+0x58>
 1005a90:	0007883a 	mov	r3,zero
 1005a94:	20bfc02c 	andhi	r2,r4,65280
 1005a98:	1000021e 	bne	r2,zero,1005aa4 <__hi0bits+0x1c>
 1005a9c:	2008923a 	slli	r4,r4,8
 1005aa0:	18c00204 	addi	r3,r3,8
 1005aa4:	20bc002c 	andhi	r2,r4,61440
 1005aa8:	1000021e 	bne	r2,zero,1005ab4 <__hi0bits+0x2c>
 1005aac:	2008913a 	slli	r4,r4,4
 1005ab0:	18c00104 	addi	r3,r3,4
 1005ab4:	20b0002c 	andhi	r2,r4,49152
 1005ab8:	1000031e 	bne	r2,zero,1005ac8 <__hi0bits+0x40>
 1005abc:	2105883a 	add	r2,r4,r4
 1005ac0:	18c00084 	addi	r3,r3,2
 1005ac4:	1089883a 	add	r4,r2,r2
 1005ac8:	20000316 	blt	r4,zero,1005ad8 <__hi0bits+0x50>
 1005acc:	2090002c 	andhi	r2,r4,16384
 1005ad0:	10000626 	beq	r2,zero,1005aec <__hi0bits+0x64>
 1005ad4:	18c00044 	addi	r3,r3,1
 1005ad8:	1805883a 	mov	r2,r3
 1005adc:	f800283a 	ret
 1005ae0:	2008943a 	slli	r4,r4,16
 1005ae4:	00c00404 	movi	r3,16
 1005ae8:	003fea06 	br	1005a94 <__hi0bits+0xc>
 1005aec:	00c00804 	movi	r3,32
 1005af0:	1805883a 	mov	r2,r3
 1005af4:	f800283a 	ret

01005af8 <__lo0bits>:
 1005af8:	20c00017 	ldw	r3,0(r4)
 1005afc:	188001cc 	andi	r2,r3,7
 1005b00:	10000a26 	beq	r2,zero,1005b2c <__lo0bits+0x34>
 1005b04:	1880004c 	andi	r2,r3,1
 1005b08:	1005003a 	cmpeq	r2,r2,zero
 1005b0c:	10002126 	beq	r2,zero,1005b94 <__lo0bits+0x9c>
 1005b10:	1880008c 	andi	r2,r3,2
 1005b14:	1000251e 	bne	r2,zero,1005bac <__lo0bits+0xb4>
 1005b18:	1804d0ba 	srli	r2,r3,2
 1005b1c:	01400084 	movi	r5,2
 1005b20:	20800015 	stw	r2,0(r4)
 1005b24:	2805883a 	mov	r2,r5
 1005b28:	f800283a 	ret
 1005b2c:	18bfffcc 	andi	r2,r3,65535
 1005b30:	10001526 	beq	r2,zero,1005b88 <__lo0bits+0x90>
 1005b34:	000b883a 	mov	r5,zero
 1005b38:	18803fcc 	andi	r2,r3,255
 1005b3c:	1000021e 	bne	r2,zero,1005b48 <__lo0bits+0x50>
 1005b40:	1806d23a 	srli	r3,r3,8
 1005b44:	29400204 	addi	r5,r5,8
 1005b48:	188003cc 	andi	r2,r3,15
 1005b4c:	1000021e 	bne	r2,zero,1005b58 <__lo0bits+0x60>
 1005b50:	1806d13a 	srli	r3,r3,4
 1005b54:	29400104 	addi	r5,r5,4
 1005b58:	188000cc 	andi	r2,r3,3
 1005b5c:	1000021e 	bne	r2,zero,1005b68 <__lo0bits+0x70>
 1005b60:	1806d0ba 	srli	r3,r3,2
 1005b64:	29400084 	addi	r5,r5,2
 1005b68:	1880004c 	andi	r2,r3,1
 1005b6c:	1000031e 	bne	r2,zero,1005b7c <__lo0bits+0x84>
 1005b70:	1806d07a 	srli	r3,r3,1
 1005b74:	18000a26 	beq	r3,zero,1005ba0 <__lo0bits+0xa8>
 1005b78:	29400044 	addi	r5,r5,1
 1005b7c:	2805883a 	mov	r2,r5
 1005b80:	20c00015 	stw	r3,0(r4)
 1005b84:	f800283a 	ret
 1005b88:	1806d43a 	srli	r3,r3,16
 1005b8c:	01400404 	movi	r5,16
 1005b90:	003fe906 	br	1005b38 <__lo0bits+0x40>
 1005b94:	000b883a 	mov	r5,zero
 1005b98:	2805883a 	mov	r2,r5
 1005b9c:	f800283a 	ret
 1005ba0:	01400804 	movi	r5,32
 1005ba4:	2805883a 	mov	r2,r5
 1005ba8:	f800283a 	ret
 1005bac:	1804d07a 	srli	r2,r3,1
 1005bb0:	01400044 	movi	r5,1
 1005bb4:	20800015 	stw	r2,0(r4)
 1005bb8:	003fda06 	br	1005b24 <__lo0bits+0x2c>

01005bbc <__mcmp>:
 1005bbc:	20800417 	ldw	r2,16(r4)
 1005bc0:	28c00417 	ldw	r3,16(r5)
 1005bc4:	10cfc83a 	sub	r7,r2,r3
 1005bc8:	38000c1e 	bne	r7,zero,1005bfc <__mcmp+0x40>
 1005bcc:	18c5883a 	add	r2,r3,r3
 1005bd0:	1085883a 	add	r2,r2,r2
 1005bd4:	10c00504 	addi	r3,r2,20
 1005bd8:	21000504 	addi	r4,r4,20
 1005bdc:	28cb883a 	add	r5,r5,r3
 1005be0:	2085883a 	add	r2,r4,r2
 1005be4:	10bfff04 	addi	r2,r2,-4
 1005be8:	297fff04 	addi	r5,r5,-4
 1005bec:	11800017 	ldw	r6,0(r2)
 1005bf0:	28c00017 	ldw	r3,0(r5)
 1005bf4:	30c0031e 	bne	r6,r3,1005c04 <__mcmp+0x48>
 1005bf8:	20bffa36 	bltu	r4,r2,1005be4 <__mcmp+0x28>
 1005bfc:	3805883a 	mov	r2,r7
 1005c00:	f800283a 	ret
 1005c04:	30c00336 	bltu	r6,r3,1005c14 <__mcmp+0x58>
 1005c08:	01c00044 	movi	r7,1
 1005c0c:	3805883a 	mov	r2,r7
 1005c10:	f800283a 	ret
 1005c14:	01ffffc4 	movi	r7,-1
 1005c18:	003ff806 	br	1005bfc <__mcmp+0x40>

01005c1c <__ulp>:
 1005c1c:	295ffc2c 	andhi	r5,r5,32752
 1005c20:	013f3034 	movhi	r4,64704
 1005c24:	290b883a 	add	r5,r5,r4
 1005c28:	0145c83a 	sub	r2,zero,r5
 1005c2c:	1007d53a 	srai	r3,r2,20
 1005c30:	000d883a 	mov	r6,zero
 1005c34:	0140040e 	bge	zero,r5,1005c48 <__ulp+0x2c>
 1005c38:	280f883a 	mov	r7,r5
 1005c3c:	3807883a 	mov	r3,r7
 1005c40:	3005883a 	mov	r2,r6
 1005c44:	f800283a 	ret
 1005c48:	008004c4 	movi	r2,19
 1005c4c:	193ffb04 	addi	r4,r3,-20
 1005c50:	10c00c0e 	bge	r2,r3,1005c84 <__ulp+0x68>
 1005c54:	008007c4 	movi	r2,31
 1005c58:	1107c83a 	sub	r3,r2,r4
 1005c5c:	00800784 	movi	r2,30
 1005c60:	01400044 	movi	r5,1
 1005c64:	11000216 	blt	r2,r4,1005c70 <__ulp+0x54>
 1005c68:	00800044 	movi	r2,1
 1005c6c:	10ca983a 	sll	r5,r2,r3
 1005c70:	000f883a 	mov	r7,zero
 1005c74:	280d883a 	mov	r6,r5
 1005c78:	3807883a 	mov	r3,r7
 1005c7c:	3005883a 	mov	r2,r6
 1005c80:	f800283a 	ret
 1005c84:	00800234 	movhi	r2,8
 1005c88:	10cfd83a 	sra	r7,r2,r3
 1005c8c:	000d883a 	mov	r6,zero
 1005c90:	3005883a 	mov	r2,r6
 1005c94:	3807883a 	mov	r3,r7
 1005c98:	f800283a 	ret

01005c9c <__b2d>:
 1005c9c:	20800417 	ldw	r2,16(r4)
 1005ca0:	defff904 	addi	sp,sp,-28
 1005ca4:	dd000415 	stw	r20,16(sp)
 1005ca8:	1085883a 	add	r2,r2,r2
 1005cac:	25000504 	addi	r20,r4,20
 1005cb0:	1085883a 	add	r2,r2,r2
 1005cb4:	dc000015 	stw	r16,0(sp)
 1005cb8:	a0a1883a 	add	r16,r20,r2
 1005cbc:	dd400515 	stw	r21,20(sp)
 1005cc0:	857fff17 	ldw	r21,-4(r16)
 1005cc4:	dc400115 	stw	r17,4(sp)
 1005cc8:	dfc00615 	stw	ra,24(sp)
 1005ccc:	a809883a 	mov	r4,r21
 1005cd0:	2823883a 	mov	r17,r5
 1005cd4:	dcc00315 	stw	r19,12(sp)
 1005cd8:	dc800215 	stw	r18,8(sp)
 1005cdc:	1005a880 	call	1005a88 <__hi0bits>
 1005ce0:	100b883a 	mov	r5,r2
 1005ce4:	00800804 	movi	r2,32
 1005ce8:	1145c83a 	sub	r2,r2,r5
 1005cec:	88800015 	stw	r2,0(r17)
 1005cf0:	00800284 	movi	r2,10
 1005cf4:	80ffff04 	addi	r3,r16,-4
 1005cf8:	11401416 	blt	r2,r5,1005d4c <__b2d+0xb0>
 1005cfc:	008002c4 	movi	r2,11
 1005d00:	1149c83a 	sub	r4,r2,r5
 1005d04:	a0c02736 	bltu	r20,r3,1005da4 <__b2d+0x108>
 1005d08:	000d883a 	mov	r6,zero
 1005d0c:	28800544 	addi	r2,r5,21
 1005d10:	a906d83a 	srl	r3,r21,r4
 1005d14:	a884983a 	sll	r2,r21,r2
 1005d18:	1ccffc34 	orhi	r19,r3,16368
 1005d1c:	11a4b03a 	or	r18,r2,r6
 1005d20:	9005883a 	mov	r2,r18
 1005d24:	9807883a 	mov	r3,r19
 1005d28:	dfc00617 	ldw	ra,24(sp)
 1005d2c:	dd400517 	ldw	r21,20(sp)
 1005d30:	dd000417 	ldw	r20,16(sp)
 1005d34:	dcc00317 	ldw	r19,12(sp)
 1005d38:	dc800217 	ldw	r18,8(sp)
 1005d3c:	dc400117 	ldw	r17,4(sp)
 1005d40:	dc000017 	ldw	r16,0(sp)
 1005d44:	dec00704 	addi	sp,sp,28
 1005d48:	f800283a 	ret
 1005d4c:	a0c00e36 	bltu	r20,r3,1005d88 <__b2d+0xec>
 1005d50:	293ffd44 	addi	r4,r5,-11
 1005d54:	000d883a 	mov	r6,zero
 1005d58:	20000f26 	beq	r4,zero,1005d98 <__b2d+0xfc>
 1005d5c:	00800804 	movi	r2,32
 1005d60:	110bc83a 	sub	r5,r2,r4
 1005d64:	a0c01236 	bltu	r20,r3,1005db0 <__b2d+0x114>
 1005d68:	000f883a 	mov	r7,zero
 1005d6c:	a904983a 	sll	r2,r21,r4
 1005d70:	3146d83a 	srl	r3,r6,r5
 1005d74:	3108983a 	sll	r4,r6,r4
 1005d78:	108ffc34 	orhi	r2,r2,16368
 1005d7c:	18a6b03a 	or	r19,r3,r2
 1005d80:	3924b03a 	or	r18,r7,r4
 1005d84:	003fe606 	br	1005d20 <__b2d+0x84>
 1005d88:	293ffd44 	addi	r4,r5,-11
 1005d8c:	81bffe17 	ldw	r6,-8(r16)
 1005d90:	80fffe04 	addi	r3,r16,-8
 1005d94:	203ff11e 	bne	r4,zero,1005d5c <__b2d+0xc0>
 1005d98:	accffc34 	orhi	r19,r21,16368
 1005d9c:	3025883a 	mov	r18,r6
 1005da0:	003fdf06 	br	1005d20 <__b2d+0x84>
 1005da4:	18bfff17 	ldw	r2,-4(r3)
 1005da8:	110cd83a 	srl	r6,r2,r4
 1005dac:	003fd706 	br	1005d0c <__b2d+0x70>
 1005db0:	18bfff17 	ldw	r2,-4(r3)
 1005db4:	114ed83a 	srl	r7,r2,r5
 1005db8:	003fec06 	br	1005d6c <__b2d+0xd0>

01005dbc <__ratio>:
 1005dbc:	defff904 	addi	sp,sp,-28
 1005dc0:	dc400215 	stw	r17,8(sp)
 1005dc4:	2823883a 	mov	r17,r5
 1005dc8:	d80b883a 	mov	r5,sp
 1005dcc:	dfc00615 	stw	ra,24(sp)
 1005dd0:	dd000515 	stw	r20,20(sp)
 1005dd4:	dcc00415 	stw	r19,16(sp)
 1005dd8:	dc800315 	stw	r18,12(sp)
 1005ddc:	2025883a 	mov	r18,r4
 1005de0:	1005c9c0 	call	1005c9c <__b2d>
 1005de4:	8809883a 	mov	r4,r17
 1005de8:	d9400104 	addi	r5,sp,4
 1005dec:	1027883a 	mov	r19,r2
 1005df0:	1829883a 	mov	r20,r3
 1005df4:	1005c9c0 	call	1005c9c <__b2d>
 1005df8:	89000417 	ldw	r4,16(r17)
 1005dfc:	91c00417 	ldw	r7,16(r18)
 1005e00:	d9800117 	ldw	r6,4(sp)
 1005e04:	180b883a 	mov	r5,r3
 1005e08:	390fc83a 	sub	r7,r7,r4
 1005e0c:	1009883a 	mov	r4,r2
 1005e10:	d8800017 	ldw	r2,0(sp)
 1005e14:	380e917a 	slli	r7,r7,5
 1005e18:	2011883a 	mov	r8,r4
 1005e1c:	1185c83a 	sub	r2,r2,r6
 1005e20:	11c5883a 	add	r2,r2,r7
 1005e24:	1006953a 	slli	r3,r2,20
 1005e28:	2813883a 	mov	r9,r5
 1005e2c:	00800d0e 	bge	zero,r2,1005e64 <__ratio+0xa8>
 1005e30:	1d29883a 	add	r20,r3,r20
 1005e34:	a00b883a 	mov	r5,r20
 1005e38:	480f883a 	mov	r7,r9
 1005e3c:	9809883a 	mov	r4,r19
 1005e40:	400d883a 	mov	r6,r8
 1005e44:	1008e780 	call	1008e78 <__divdf3>
 1005e48:	dfc00617 	ldw	ra,24(sp)
 1005e4c:	dd000517 	ldw	r20,20(sp)
 1005e50:	dcc00417 	ldw	r19,16(sp)
 1005e54:	dc800317 	ldw	r18,12(sp)
 1005e58:	dc400217 	ldw	r17,8(sp)
 1005e5c:	dec00704 	addi	sp,sp,28
 1005e60:	f800283a 	ret
 1005e64:	28d3c83a 	sub	r9,r5,r3
 1005e68:	003ff206 	br	1005e34 <__ratio+0x78>

01005e6c <_mprec_log10>:
 1005e6c:	defffe04 	addi	sp,sp,-8
 1005e70:	008005c4 	movi	r2,23
 1005e74:	dc000015 	stw	r16,0(sp)
 1005e78:	dfc00115 	stw	ra,4(sp)
 1005e7c:	2021883a 	mov	r16,r4
 1005e80:	11000c16 	blt	r2,r4,1005eb4 <_mprec_log10+0x48>
 1005e84:	200490fa 	slli	r2,r4,3
 1005e88:	00c04074 	movhi	r3,257
 1005e8c:	18f56e04 	addi	r3,r3,-10824
 1005e90:	10c5883a 	add	r2,r2,r3
 1005e94:	12400117 	ldw	r9,4(r2)
 1005e98:	12000017 	ldw	r8,0(r2)
 1005e9c:	4807883a 	mov	r3,r9
 1005ea0:	4005883a 	mov	r2,r8
 1005ea4:	dfc00117 	ldw	ra,4(sp)
 1005ea8:	dc000017 	ldw	r16,0(sp)
 1005eac:	dec00204 	addi	sp,sp,8
 1005eb0:	f800283a 	ret
 1005eb4:	0011883a 	mov	r8,zero
 1005eb8:	024ffc34 	movhi	r9,16368
 1005ebc:	0005883a 	mov	r2,zero
 1005ec0:	00d00934 	movhi	r3,16420
 1005ec4:	480b883a 	mov	r5,r9
 1005ec8:	4009883a 	mov	r4,r8
 1005ecc:	180f883a 	mov	r7,r3
 1005ed0:	100d883a 	mov	r6,r2
 1005ed4:	1008ab40 	call	1008ab4 <__muldf3>
 1005ed8:	843fffc4 	addi	r16,r16,-1
 1005edc:	1011883a 	mov	r8,r2
 1005ee0:	1813883a 	mov	r9,r3
 1005ee4:	803ff51e 	bne	r16,zero,1005ebc <_mprec_log10+0x50>
 1005ee8:	4005883a 	mov	r2,r8
 1005eec:	4807883a 	mov	r3,r9
 1005ef0:	dfc00117 	ldw	ra,4(sp)
 1005ef4:	dc000017 	ldw	r16,0(sp)
 1005ef8:	dec00204 	addi	sp,sp,8
 1005efc:	f800283a 	ret

01005f00 <__copybits>:
 1005f00:	297fffc4 	addi	r5,r5,-1
 1005f04:	30800417 	ldw	r2,16(r6)
 1005f08:	280bd17a 	srai	r5,r5,5
 1005f0c:	31800504 	addi	r6,r6,20
 1005f10:	1085883a 	add	r2,r2,r2
 1005f14:	294b883a 	add	r5,r5,r5
 1005f18:	294b883a 	add	r5,r5,r5
 1005f1c:	1085883a 	add	r2,r2,r2
 1005f20:	290b883a 	add	r5,r5,r4
 1005f24:	3087883a 	add	r3,r6,r2
 1005f28:	29400104 	addi	r5,r5,4
 1005f2c:	30c0052e 	bgeu	r6,r3,1005f44 <__copybits+0x44>
 1005f30:	30800017 	ldw	r2,0(r6)
 1005f34:	31800104 	addi	r6,r6,4
 1005f38:	20800015 	stw	r2,0(r4)
 1005f3c:	21000104 	addi	r4,r4,4
 1005f40:	30fffb36 	bltu	r6,r3,1005f30 <__copybits+0x30>
 1005f44:	2140032e 	bgeu	r4,r5,1005f54 <__copybits+0x54>
 1005f48:	20000015 	stw	zero,0(r4)
 1005f4c:	21000104 	addi	r4,r4,4
 1005f50:	217ffd36 	bltu	r4,r5,1005f48 <__copybits+0x48>
 1005f54:	f800283a 	ret

01005f58 <__any_on>:
 1005f58:	20800417 	ldw	r2,16(r4)
 1005f5c:	2807d17a 	srai	r3,r5,5
 1005f60:	21000504 	addi	r4,r4,20
 1005f64:	10c00d0e 	bge	r2,r3,1005f9c <__any_on+0x44>
 1005f68:	1085883a 	add	r2,r2,r2
 1005f6c:	1085883a 	add	r2,r2,r2
 1005f70:	208d883a 	add	r6,r4,r2
 1005f74:	2180182e 	bgeu	r4,r6,1005fd8 <__any_on+0x80>
 1005f78:	30bfff17 	ldw	r2,-4(r6)
 1005f7c:	30ffff04 	addi	r3,r6,-4
 1005f80:	1000041e 	bne	r2,zero,1005f94 <__any_on+0x3c>
 1005f84:	20c0142e 	bgeu	r4,r3,1005fd8 <__any_on+0x80>
 1005f88:	18ffff04 	addi	r3,r3,-4
 1005f8c:	18800017 	ldw	r2,0(r3)
 1005f90:	103ffc26 	beq	r2,zero,1005f84 <__any_on+0x2c>
 1005f94:	00800044 	movi	r2,1
 1005f98:	f800283a 	ret
 1005f9c:	18800a0e 	bge	r3,r2,1005fc8 <__any_on+0x70>
 1005fa0:	294007cc 	andi	r5,r5,31
 1005fa4:	28000826 	beq	r5,zero,1005fc8 <__any_on+0x70>
 1005fa8:	18c5883a 	add	r2,r3,r3
 1005fac:	1085883a 	add	r2,r2,r2
 1005fb0:	208d883a 	add	r6,r4,r2
 1005fb4:	30c00017 	ldw	r3,0(r6)
 1005fb8:	1944d83a 	srl	r2,r3,r5
 1005fbc:	1144983a 	sll	r2,r2,r5
 1005fc0:	18bff41e 	bne	r3,r2,1005f94 <__any_on+0x3c>
 1005fc4:	003feb06 	br	1005f74 <__any_on+0x1c>
 1005fc8:	18c5883a 	add	r2,r3,r3
 1005fcc:	1085883a 	add	r2,r2,r2
 1005fd0:	208d883a 	add	r6,r4,r2
 1005fd4:	003fe706 	br	1005f74 <__any_on+0x1c>
 1005fd8:	0005883a 	mov	r2,zero
 1005fdc:	f800283a 	ret

01005fe0 <_Balloc>:
 1005fe0:	20c01317 	ldw	r3,76(r4)
 1005fe4:	defffb04 	addi	sp,sp,-20
 1005fe8:	dcc00315 	stw	r19,12(sp)
 1005fec:	dc800215 	stw	r18,8(sp)
 1005ff0:	dfc00415 	stw	ra,16(sp)
 1005ff4:	2825883a 	mov	r18,r5
 1005ff8:	dc400115 	stw	r17,4(sp)
 1005ffc:	dc000015 	stw	r16,0(sp)
 1006000:	2027883a 	mov	r19,r4
 1006004:	01800404 	movi	r6,16
 1006008:	01400104 	movi	r5,4
 100600c:	18001726 	beq	r3,zero,100606c <_Balloc+0x8c>
 1006010:	01400044 	movi	r5,1
 1006014:	9485883a 	add	r2,r18,r18
 1006018:	2ca2983a 	sll	r17,r5,r18
 100601c:	1085883a 	add	r2,r2,r2
 1006020:	10c7883a 	add	r3,r2,r3
 1006024:	1c000017 	ldw	r16,0(r3)
 1006028:	8c4d883a 	add	r6,r17,r17
 100602c:	318d883a 	add	r6,r6,r6
 1006030:	9809883a 	mov	r4,r19
 1006034:	31800504 	addi	r6,r6,20
 1006038:	80001226 	beq	r16,zero,1006084 <_Balloc+0xa4>
 100603c:	80800017 	ldw	r2,0(r16)
 1006040:	18800015 	stw	r2,0(r3)
 1006044:	80000415 	stw	zero,16(r16)
 1006048:	80000315 	stw	zero,12(r16)
 100604c:	8005883a 	mov	r2,r16
 1006050:	dfc00417 	ldw	ra,16(sp)
 1006054:	dcc00317 	ldw	r19,12(sp)
 1006058:	dc800217 	ldw	r18,8(sp)
 100605c:	dc400117 	ldw	r17,4(sp)
 1006060:	dc000017 	ldw	r16,0(sp)
 1006064:	dec00504 	addi	sp,sp,20
 1006068:	f800283a 	ret
 100606c:	10074b40 	call	10074b4 <_calloc_r>
 1006070:	1007883a 	mov	r3,r2
 1006074:	0021883a 	mov	r16,zero
 1006078:	98801315 	stw	r2,76(r19)
 100607c:	103fe41e 	bne	r2,zero,1006010 <_Balloc+0x30>
 1006080:	003ff206 	br	100604c <_Balloc+0x6c>
 1006084:	10074b40 	call	10074b4 <_calloc_r>
 1006088:	103ff026 	beq	r2,zero,100604c <_Balloc+0x6c>
 100608c:	1021883a 	mov	r16,r2
 1006090:	14800115 	stw	r18,4(r2)
 1006094:	14400215 	stw	r17,8(r2)
 1006098:	003fea06 	br	1006044 <_Balloc+0x64>

0100609c <__d2b>:
 100609c:	defff504 	addi	sp,sp,-44
 10060a0:	dcc00515 	stw	r19,20(sp)
 10060a4:	04c00044 	movi	r19,1
 10060a8:	dc000215 	stw	r16,8(sp)
 10060ac:	2821883a 	mov	r16,r5
 10060b0:	980b883a 	mov	r5,r19
 10060b4:	ddc00915 	stw	r23,36(sp)
 10060b8:	dd800815 	stw	r22,32(sp)
 10060bc:	dd400715 	stw	r21,28(sp)
 10060c0:	dd000615 	stw	r20,24(sp)
 10060c4:	dc800415 	stw	r18,16(sp)
 10060c8:	dc400315 	stw	r17,12(sp)
 10060cc:	dfc00a15 	stw	ra,40(sp)
 10060d0:	3023883a 	mov	r17,r6
 10060d4:	382d883a 	mov	r22,r7
 10060d8:	ddc00b17 	ldw	r23,44(sp)
 10060dc:	1005fe00 	call	1005fe0 <_Balloc>
 10060e0:	1025883a 	mov	r18,r2
 10060e4:	00a00034 	movhi	r2,32768
 10060e8:	10bfffc4 	addi	r2,r2,-1
 10060ec:	8888703a 	and	r4,r17,r2
 10060f0:	202ad53a 	srli	r21,r4,20
 10060f4:	00800434 	movhi	r2,16
 10060f8:	10bfffc4 	addi	r2,r2,-1
 10060fc:	8886703a 	and	r3,r17,r2
 1006100:	a829003a 	cmpeq	r20,r21,zero
 1006104:	800b883a 	mov	r5,r16
 1006108:	d8c00115 	stw	r3,4(sp)
 100610c:	94000504 	addi	r16,r18,20
 1006110:	a000021e 	bne	r20,zero,100611c <__d2b+0x80>
 1006114:	18c00434 	orhi	r3,r3,16
 1006118:	d8c00115 	stw	r3,4(sp)
 100611c:	28002726 	beq	r5,zero,10061bc <__d2b+0x120>
 1006120:	d809883a 	mov	r4,sp
 1006124:	d9400015 	stw	r5,0(sp)
 1006128:	1005af80 	call	1005af8 <__lo0bits>
 100612c:	100d883a 	mov	r6,r2
 1006130:	10003526 	beq	r2,zero,1006208 <__d2b+0x16c>
 1006134:	d8c00117 	ldw	r3,4(sp)
 1006138:	00800804 	movi	r2,32
 100613c:	1185c83a 	sub	r2,r2,r6
 1006140:	d9000017 	ldw	r4,0(sp)
 1006144:	1886983a 	sll	r3,r3,r2
 1006148:	1906b03a 	or	r3,r3,r4
 100614c:	90c00515 	stw	r3,20(r18)
 1006150:	d8c00117 	ldw	r3,4(sp)
 1006154:	1986d83a 	srl	r3,r3,r6
 1006158:	d8c00115 	stw	r3,4(sp)
 100615c:	180b003a 	cmpeq	r5,r3,zero
 1006160:	00800084 	movi	r2,2
 1006164:	114bc83a 	sub	r5,r2,r5
 1006168:	80c00115 	stw	r3,4(r16)
 100616c:	91400415 	stw	r5,16(r18)
 1006170:	a0001a1e 	bne	r20,zero,10061dc <__d2b+0x140>
 1006174:	3545883a 	add	r2,r6,r21
 1006178:	10bef344 	addi	r2,r2,-1075
 100617c:	00c00d44 	movi	r3,53
 1006180:	b0800015 	stw	r2,0(r22)
 1006184:	1987c83a 	sub	r3,r3,r6
 1006188:	b8c00015 	stw	r3,0(r23)
 100618c:	9005883a 	mov	r2,r18
 1006190:	dfc00a17 	ldw	ra,40(sp)
 1006194:	ddc00917 	ldw	r23,36(sp)
 1006198:	dd800817 	ldw	r22,32(sp)
 100619c:	dd400717 	ldw	r21,28(sp)
 10061a0:	dd000617 	ldw	r20,24(sp)
 10061a4:	dcc00517 	ldw	r19,20(sp)
 10061a8:	dc800417 	ldw	r18,16(sp)
 10061ac:	dc400317 	ldw	r17,12(sp)
 10061b0:	dc000217 	ldw	r16,8(sp)
 10061b4:	dec00b04 	addi	sp,sp,44
 10061b8:	f800283a 	ret
 10061bc:	d9000104 	addi	r4,sp,4
 10061c0:	1005af80 	call	1005af8 <__lo0bits>
 10061c4:	11800804 	addi	r6,r2,32
 10061c8:	d8800117 	ldw	r2,4(sp)
 10061cc:	94c00415 	stw	r19,16(r18)
 10061d0:	980b883a 	mov	r5,r19
 10061d4:	90800515 	stw	r2,20(r18)
 10061d8:	a03fe626 	beq	r20,zero,1006174 <__d2b+0xd8>
 10061dc:	2945883a 	add	r2,r5,r5
 10061e0:	1085883a 	add	r2,r2,r2
 10061e4:	1405883a 	add	r2,r2,r16
 10061e8:	113fff17 	ldw	r4,-4(r2)
 10061ec:	30fef384 	addi	r3,r6,-1074
 10061f0:	2820917a 	slli	r16,r5,5
 10061f4:	b0c00015 	stw	r3,0(r22)
 10061f8:	1005a880 	call	1005a88 <__hi0bits>
 10061fc:	80a1c83a 	sub	r16,r16,r2
 1006200:	bc000015 	stw	r16,0(r23)
 1006204:	003fe106 	br	100618c <__d2b+0xf0>
 1006208:	d8800017 	ldw	r2,0(sp)
 100620c:	90800515 	stw	r2,20(r18)
 1006210:	d8c00117 	ldw	r3,4(sp)
 1006214:	003fd106 	br	100615c <__d2b+0xc0>

01006218 <__mdiff>:
 1006218:	defffb04 	addi	sp,sp,-20
 100621c:	dc000015 	stw	r16,0(sp)
 1006220:	2821883a 	mov	r16,r5
 1006224:	dc800215 	stw	r18,8(sp)
 1006228:	300b883a 	mov	r5,r6
 100622c:	2025883a 	mov	r18,r4
 1006230:	8009883a 	mov	r4,r16
 1006234:	dc400115 	stw	r17,4(sp)
 1006238:	dfc00415 	stw	ra,16(sp)
 100623c:	dcc00315 	stw	r19,12(sp)
 1006240:	3023883a 	mov	r17,r6
 1006244:	1005bbc0 	call	1005bbc <__mcmp>
 1006248:	10004226 	beq	r2,zero,1006354 <__mdiff+0x13c>
 100624c:	10005016 	blt	r2,zero,1006390 <__mdiff+0x178>
 1006250:	0027883a 	mov	r19,zero
 1006254:	81400117 	ldw	r5,4(r16)
 1006258:	9009883a 	mov	r4,r18
 100625c:	1005fe00 	call	1005fe0 <_Balloc>
 1006260:	1019883a 	mov	r12,r2
 1006264:	82800417 	ldw	r10,16(r16)
 1006268:	88800417 	ldw	r2,16(r17)
 100626c:	81800504 	addi	r6,r16,20
 1006270:	5287883a 	add	r3,r10,r10
 1006274:	1085883a 	add	r2,r2,r2
 1006278:	18c7883a 	add	r3,r3,r3
 100627c:	1085883a 	add	r2,r2,r2
 1006280:	8a000504 	addi	r8,r17,20
 1006284:	64c00315 	stw	r19,12(r12)
 1006288:	30db883a 	add	r13,r6,r3
 100628c:	4097883a 	add	r11,r8,r2
 1006290:	61c00504 	addi	r7,r12,20
 1006294:	0013883a 	mov	r9,zero
 1006298:	31000017 	ldw	r4,0(r6)
 100629c:	41400017 	ldw	r5,0(r8)
 10062a0:	42000104 	addi	r8,r8,4
 10062a4:	20bfffcc 	andi	r2,r4,65535
 10062a8:	28ffffcc 	andi	r3,r5,65535
 10062ac:	10c5c83a 	sub	r2,r2,r3
 10062b0:	1245883a 	add	r2,r2,r9
 10062b4:	2008d43a 	srli	r4,r4,16
 10062b8:	280ad43a 	srli	r5,r5,16
 10062bc:	1007d43a 	srai	r3,r2,16
 10062c0:	3880000d 	sth	r2,0(r7)
 10062c4:	2149c83a 	sub	r4,r4,r5
 10062c8:	20c9883a 	add	r4,r4,r3
 10062cc:	3900008d 	sth	r4,2(r7)
 10062d0:	31800104 	addi	r6,r6,4
 10062d4:	39c00104 	addi	r7,r7,4
 10062d8:	2013d43a 	srai	r9,r4,16
 10062dc:	42ffee36 	bltu	r8,r11,1006298 <__mdiff+0x80>
 10062e0:	33400c2e 	bgeu	r6,r13,1006314 <__mdiff+0xfc>
 10062e4:	30800017 	ldw	r2,0(r6)
 10062e8:	31800104 	addi	r6,r6,4
 10062ec:	10ffffcc 	andi	r3,r2,65535
 10062f0:	1a47883a 	add	r3,r3,r9
 10062f4:	1004d43a 	srli	r2,r2,16
 10062f8:	1809d43a 	srai	r4,r3,16
 10062fc:	38c0000d 	sth	r3,0(r7)
 1006300:	1105883a 	add	r2,r2,r4
 1006304:	3880008d 	sth	r2,2(r7)
 1006308:	1013d43a 	srai	r9,r2,16
 100630c:	39c00104 	addi	r7,r7,4
 1006310:	337ff436 	bltu	r6,r13,10062e4 <__mdiff+0xcc>
 1006314:	38bfff17 	ldw	r2,-4(r7)
 1006318:	38ffff04 	addi	r3,r7,-4
 100631c:	1000041e 	bne	r2,zero,1006330 <__mdiff+0x118>
 1006320:	18ffff04 	addi	r3,r3,-4
 1006324:	18800017 	ldw	r2,0(r3)
 1006328:	52bfffc4 	addi	r10,r10,-1
 100632c:	103ffc26 	beq	r2,zero,1006320 <__mdiff+0x108>
 1006330:	6005883a 	mov	r2,r12
 1006334:	62800415 	stw	r10,16(r12)
 1006338:	dfc00417 	ldw	ra,16(sp)
 100633c:	dcc00317 	ldw	r19,12(sp)
 1006340:	dc800217 	ldw	r18,8(sp)
 1006344:	dc400117 	ldw	r17,4(sp)
 1006348:	dc000017 	ldw	r16,0(sp)
 100634c:	dec00504 	addi	sp,sp,20
 1006350:	f800283a 	ret
 1006354:	9009883a 	mov	r4,r18
 1006358:	000b883a 	mov	r5,zero
 100635c:	1005fe00 	call	1005fe0 <_Balloc>
 1006360:	1019883a 	mov	r12,r2
 1006364:	00800044 	movi	r2,1
 1006368:	60800415 	stw	r2,16(r12)
 100636c:	6005883a 	mov	r2,r12
 1006370:	60000515 	stw	zero,20(r12)
 1006374:	dfc00417 	ldw	ra,16(sp)
 1006378:	dcc00317 	ldw	r19,12(sp)
 100637c:	dc800217 	ldw	r18,8(sp)
 1006380:	dc400117 	ldw	r17,4(sp)
 1006384:	dc000017 	ldw	r16,0(sp)
 1006388:	dec00504 	addi	sp,sp,20
 100638c:	f800283a 	ret
 1006390:	880d883a 	mov	r6,r17
 1006394:	04c00044 	movi	r19,1
 1006398:	8023883a 	mov	r17,r16
 100639c:	3021883a 	mov	r16,r6
 10063a0:	003fac06 	br	1006254 <__mdiff+0x3c>

010063a4 <__lshift>:
 10063a4:	defff904 	addi	sp,sp,-28
 10063a8:	28800417 	ldw	r2,16(r5)
 10063ac:	dc000015 	stw	r16,0(sp)
 10063b0:	3021d17a 	srai	r16,r6,5
 10063b4:	28c00217 	ldw	r3,8(r5)
 10063b8:	10800044 	addi	r2,r2,1
 10063bc:	dc400115 	stw	r17,4(sp)
 10063c0:	80a3883a 	add	r17,r16,r2
 10063c4:	dd400515 	stw	r21,20(sp)
 10063c8:	dd000415 	stw	r20,16(sp)
 10063cc:	dc800215 	stw	r18,8(sp)
 10063d0:	dfc00615 	stw	ra,24(sp)
 10063d4:	2825883a 	mov	r18,r5
 10063d8:	dcc00315 	stw	r19,12(sp)
 10063dc:	3029883a 	mov	r20,r6
 10063e0:	202b883a 	mov	r21,r4
 10063e4:	29400117 	ldw	r5,4(r5)
 10063e8:	1c40030e 	bge	r3,r17,10063f8 <__lshift+0x54>
 10063ec:	18c7883a 	add	r3,r3,r3
 10063f0:	29400044 	addi	r5,r5,1
 10063f4:	1c7ffd16 	blt	r3,r17,10063ec <__lshift+0x48>
 10063f8:	a809883a 	mov	r4,r21
 10063fc:	1005fe00 	call	1005fe0 <_Balloc>
 1006400:	1027883a 	mov	r19,r2
 1006404:	11400504 	addi	r5,r2,20
 1006408:	0400090e 	bge	zero,r16,1006430 <__lshift+0x8c>
 100640c:	2805883a 	mov	r2,r5
 1006410:	0007883a 	mov	r3,zero
 1006414:	18c00044 	addi	r3,r3,1
 1006418:	10000015 	stw	zero,0(r2)
 100641c:	10800104 	addi	r2,r2,4
 1006420:	80fffc1e 	bne	r16,r3,1006414 <__lshift+0x70>
 1006424:	8405883a 	add	r2,r16,r16
 1006428:	1085883a 	add	r2,r2,r2
 100642c:	288b883a 	add	r5,r5,r2
 1006430:	90800417 	ldw	r2,16(r18)
 1006434:	91000504 	addi	r4,r18,20
 1006438:	a18007cc 	andi	r6,r20,31
 100643c:	1085883a 	add	r2,r2,r2
 1006440:	1085883a 	add	r2,r2,r2
 1006444:	208f883a 	add	r7,r4,r2
 1006448:	30001e26 	beq	r6,zero,10064c4 <__lshift+0x120>
 100644c:	00800804 	movi	r2,32
 1006450:	1191c83a 	sub	r8,r2,r6
 1006454:	0007883a 	mov	r3,zero
 1006458:	20800017 	ldw	r2,0(r4)
 100645c:	1184983a 	sll	r2,r2,r6
 1006460:	1884b03a 	or	r2,r3,r2
 1006464:	28800015 	stw	r2,0(r5)
 1006468:	20c00017 	ldw	r3,0(r4)
 100646c:	21000104 	addi	r4,r4,4
 1006470:	29400104 	addi	r5,r5,4
 1006474:	1a06d83a 	srl	r3,r3,r8
 1006478:	21fff736 	bltu	r4,r7,1006458 <__lshift+0xb4>
 100647c:	28c00015 	stw	r3,0(r5)
 1006480:	18000126 	beq	r3,zero,1006488 <__lshift+0xe4>
 1006484:	8c400044 	addi	r17,r17,1
 1006488:	88bfffc4 	addi	r2,r17,-1
 100648c:	98800415 	stw	r2,16(r19)
 1006490:	a809883a 	mov	r4,r21
 1006494:	900b883a 	mov	r5,r18
 1006498:	1005a600 	call	1005a60 <_Bfree>
 100649c:	9805883a 	mov	r2,r19
 10064a0:	dfc00617 	ldw	ra,24(sp)
 10064a4:	dd400517 	ldw	r21,20(sp)
 10064a8:	dd000417 	ldw	r20,16(sp)
 10064ac:	dcc00317 	ldw	r19,12(sp)
 10064b0:	dc800217 	ldw	r18,8(sp)
 10064b4:	dc400117 	ldw	r17,4(sp)
 10064b8:	dc000017 	ldw	r16,0(sp)
 10064bc:	dec00704 	addi	sp,sp,28
 10064c0:	f800283a 	ret
 10064c4:	20800017 	ldw	r2,0(r4)
 10064c8:	21000104 	addi	r4,r4,4
 10064cc:	28800015 	stw	r2,0(r5)
 10064d0:	29400104 	addi	r5,r5,4
 10064d4:	21ffec2e 	bgeu	r4,r7,1006488 <__lshift+0xe4>
 10064d8:	20800017 	ldw	r2,0(r4)
 10064dc:	21000104 	addi	r4,r4,4
 10064e0:	28800015 	stw	r2,0(r5)
 10064e4:	29400104 	addi	r5,r5,4
 10064e8:	21fff636 	bltu	r4,r7,10064c4 <__lshift+0x120>
 10064ec:	003fe606 	br	1006488 <__lshift+0xe4>

010064f0 <__multiply>:
 10064f0:	defff004 	addi	sp,sp,-64
 10064f4:	dc800815 	stw	r18,32(sp)
 10064f8:	dc400715 	stw	r17,28(sp)
 10064fc:	2c800417 	ldw	r18,16(r5)
 1006500:	34400417 	ldw	r17,16(r6)
 1006504:	dcc00915 	stw	r19,36(sp)
 1006508:	dc000615 	stw	r16,24(sp)
 100650c:	dfc00f15 	stw	ra,60(sp)
 1006510:	df000e15 	stw	fp,56(sp)
 1006514:	ddc00d15 	stw	r23,52(sp)
 1006518:	dd800c15 	stw	r22,48(sp)
 100651c:	dd400b15 	stw	r21,44(sp)
 1006520:	dd000a15 	stw	r20,40(sp)
 1006524:	2821883a 	mov	r16,r5
 1006528:	3027883a 	mov	r19,r6
 100652c:	9440040e 	bge	r18,r17,1006540 <__multiply+0x50>
 1006530:	8825883a 	mov	r18,r17
 1006534:	2c400417 	ldw	r17,16(r5)
 1006538:	2827883a 	mov	r19,r5
 100653c:	3021883a 	mov	r16,r6
 1006540:	80800217 	ldw	r2,8(r16)
 1006544:	9447883a 	add	r3,r18,r17
 1006548:	d8c00415 	stw	r3,16(sp)
 100654c:	81400117 	ldw	r5,4(r16)
 1006550:	10c0010e 	bge	r2,r3,1006558 <__multiply+0x68>
 1006554:	29400044 	addi	r5,r5,1
 1006558:	1005fe00 	call	1005fe0 <_Balloc>
 100655c:	d8800515 	stw	r2,20(sp)
 1006560:	d9000417 	ldw	r4,16(sp)
 1006564:	d8c00517 	ldw	r3,20(sp)
 1006568:	2105883a 	add	r2,r4,r4
 100656c:	1085883a 	add	r2,r2,r2
 1006570:	19000504 	addi	r4,r3,20
 1006574:	2085883a 	add	r2,r4,r2
 1006578:	d8800315 	stw	r2,12(sp)
 100657c:	2080052e 	bgeu	r4,r2,1006594 <__multiply+0xa4>
 1006580:	2005883a 	mov	r2,r4
 1006584:	d8c00317 	ldw	r3,12(sp)
 1006588:	10000015 	stw	zero,0(r2)
 100658c:	10800104 	addi	r2,r2,4
 1006590:	10fffc36 	bltu	r2,r3,1006584 <__multiply+0x94>
 1006594:	8c45883a 	add	r2,r17,r17
 1006598:	9487883a 	add	r3,r18,r18
 100659c:	9dc00504 	addi	r23,r19,20
 10065a0:	1085883a 	add	r2,r2,r2
 10065a4:	84000504 	addi	r16,r16,20
 10065a8:	18c7883a 	add	r3,r3,r3
 10065ac:	b885883a 	add	r2,r23,r2
 10065b0:	dc000015 	stw	r16,0(sp)
 10065b4:	d8800215 	stw	r2,8(sp)
 10065b8:	80f9883a 	add	fp,r16,r3
 10065bc:	b880432e 	bgeu	r23,r2,10066cc <__multiply+0x1dc>
 10065c0:	d9000115 	stw	r4,4(sp)
 10065c4:	b9000017 	ldw	r4,0(r23)
 10065c8:	253fffcc 	andi	r20,r4,65535
 10065cc:	a0001a26 	beq	r20,zero,1006638 <__multiply+0x148>
 10065d0:	dcc00017 	ldw	r19,0(sp)
 10065d4:	dc800117 	ldw	r18,4(sp)
 10065d8:	002b883a 	mov	r21,zero
 10065dc:	9c400017 	ldw	r17,0(r19)
 10065e0:	94000017 	ldw	r16,0(r18)
 10065e4:	a009883a 	mov	r4,r20
 10065e8:	897fffcc 	andi	r5,r17,65535
 10065ec:	10098280 	call	1009828 <__mulsi3>
 10065f0:	880ad43a 	srli	r5,r17,16
 10065f4:	80ffffcc 	andi	r3,r16,65535
 10065f8:	a8c7883a 	add	r3,r21,r3
 10065fc:	a009883a 	mov	r4,r20
 1006600:	10e3883a 	add	r17,r2,r3
 1006604:	8020d43a 	srli	r16,r16,16
 1006608:	10098280 	call	1009828 <__mulsi3>
 100660c:	8806d43a 	srli	r3,r17,16
 1006610:	1405883a 	add	r2,r2,r16
 1006614:	9cc00104 	addi	r19,r19,4
 1006618:	1887883a 	add	r3,r3,r2
 100661c:	90c0008d 	sth	r3,2(r18)
 1006620:	9440000d 	sth	r17,0(r18)
 1006624:	182ad43a 	srli	r21,r3,16
 1006628:	94800104 	addi	r18,r18,4
 100662c:	9f3feb36 	bltu	r19,fp,10065dc <__multiply+0xec>
 1006630:	95400015 	stw	r21,0(r18)
 1006634:	b9000017 	ldw	r4,0(r23)
 1006638:	202ad43a 	srli	r21,r4,16
 100663c:	a8001c26 	beq	r21,zero,10066b0 <__multiply+0x1c0>
 1006640:	d9000117 	ldw	r4,4(sp)
 1006644:	dd000017 	ldw	r20,0(sp)
 1006648:	002d883a 	mov	r22,zero
 100664c:	24c00017 	ldw	r19,0(r4)
 1006650:	2025883a 	mov	r18,r4
 1006654:	9823883a 	mov	r17,r19
 1006658:	a4000017 	ldw	r16,0(r20)
 100665c:	a809883a 	mov	r4,r21
 1006660:	a5000104 	addi	r20,r20,4
 1006664:	817fffcc 	andi	r5,r16,65535
 1006668:	10098280 	call	1009828 <__mulsi3>
 100666c:	8806d43a 	srli	r3,r17,16
 1006670:	800ad43a 	srli	r5,r16,16
 1006674:	94c0000d 	sth	r19,0(r18)
 1006678:	b0c7883a 	add	r3,r22,r3
 100667c:	10e1883a 	add	r16,r2,r3
 1006680:	9400008d 	sth	r16,2(r18)
 1006684:	a809883a 	mov	r4,r21
 1006688:	94800104 	addi	r18,r18,4
 100668c:	10098280 	call	1009828 <__mulsi3>
 1006690:	94400017 	ldw	r17,0(r18)
 1006694:	8020d43a 	srli	r16,r16,16
 1006698:	88ffffcc 	andi	r3,r17,65535
 100669c:	10c5883a 	add	r2,r2,r3
 10066a0:	80a7883a 	add	r19,r16,r2
 10066a4:	982cd43a 	srli	r22,r19,16
 10066a8:	a73feb36 	bltu	r20,fp,1006658 <__multiply+0x168>
 10066ac:	94c00015 	stw	r19,0(r18)
 10066b0:	d8800217 	ldw	r2,8(sp)
 10066b4:	bdc00104 	addi	r23,r23,4
 10066b8:	b880042e 	bgeu	r23,r2,10066cc <__multiply+0x1dc>
 10066bc:	d8c00117 	ldw	r3,4(sp)
 10066c0:	18c00104 	addi	r3,r3,4
 10066c4:	d8c00115 	stw	r3,4(sp)
 10066c8:	003fbe06 	br	10065c4 <__multiply+0xd4>
 10066cc:	d9000417 	ldw	r4,16(sp)
 10066d0:	01000c0e 	bge	zero,r4,1006704 <__multiply+0x214>
 10066d4:	d8c00317 	ldw	r3,12(sp)
 10066d8:	18bfff17 	ldw	r2,-4(r3)
 10066dc:	18ffff04 	addi	r3,r3,-4
 10066e0:	10000326 	beq	r2,zero,10066f0 <__multiply+0x200>
 10066e4:	00000706 	br	1006704 <__multiply+0x214>
 10066e8:	18800017 	ldw	r2,0(r3)
 10066ec:	1000051e 	bne	r2,zero,1006704 <__multiply+0x214>
 10066f0:	d9000417 	ldw	r4,16(sp)
 10066f4:	18ffff04 	addi	r3,r3,-4
 10066f8:	213fffc4 	addi	r4,r4,-1
 10066fc:	d9000415 	stw	r4,16(sp)
 1006700:	203ff91e 	bne	r4,zero,10066e8 <__multiply+0x1f8>
 1006704:	d8800417 	ldw	r2,16(sp)
 1006708:	d8c00517 	ldw	r3,20(sp)
 100670c:	18800415 	stw	r2,16(r3)
 1006710:	1805883a 	mov	r2,r3
 1006714:	dfc00f17 	ldw	ra,60(sp)
 1006718:	df000e17 	ldw	fp,56(sp)
 100671c:	ddc00d17 	ldw	r23,52(sp)
 1006720:	dd800c17 	ldw	r22,48(sp)
 1006724:	dd400b17 	ldw	r21,44(sp)
 1006728:	dd000a17 	ldw	r20,40(sp)
 100672c:	dcc00917 	ldw	r19,36(sp)
 1006730:	dc800817 	ldw	r18,32(sp)
 1006734:	dc400717 	ldw	r17,28(sp)
 1006738:	dc000617 	ldw	r16,24(sp)
 100673c:	dec01004 	addi	sp,sp,64
 1006740:	f800283a 	ret

01006744 <__i2b>:
 1006744:	defffd04 	addi	sp,sp,-12
 1006748:	dc000015 	stw	r16,0(sp)
 100674c:	04000044 	movi	r16,1
 1006750:	dc800115 	stw	r18,4(sp)
 1006754:	2825883a 	mov	r18,r5
 1006758:	800b883a 	mov	r5,r16
 100675c:	dfc00215 	stw	ra,8(sp)
 1006760:	1005fe00 	call	1005fe0 <_Balloc>
 1006764:	14000415 	stw	r16,16(r2)
 1006768:	14800515 	stw	r18,20(r2)
 100676c:	dfc00217 	ldw	ra,8(sp)
 1006770:	dc800117 	ldw	r18,4(sp)
 1006774:	dc000017 	ldw	r16,0(sp)
 1006778:	dec00304 	addi	sp,sp,12
 100677c:	f800283a 	ret

01006780 <__multadd>:
 1006780:	defff604 	addi	sp,sp,-40
 1006784:	dd800615 	stw	r22,24(sp)
 1006788:	2d800417 	ldw	r22,16(r5)
 100678c:	df000815 	stw	fp,32(sp)
 1006790:	ddc00715 	stw	r23,28(sp)
 1006794:	dd400515 	stw	r21,20(sp)
 1006798:	dd000415 	stw	r20,16(sp)
 100679c:	dcc00315 	stw	r19,12(sp)
 10067a0:	dc800215 	stw	r18,8(sp)
 10067a4:	dfc00915 	stw	ra,36(sp)
 10067a8:	dc400115 	stw	r17,4(sp)
 10067ac:	dc000015 	stw	r16,0(sp)
 10067b0:	282f883a 	mov	r23,r5
 10067b4:	2039883a 	mov	fp,r4
 10067b8:	302b883a 	mov	r21,r6
 10067bc:	3829883a 	mov	r20,r7
 10067c0:	2c800504 	addi	r18,r5,20
 10067c4:	0027883a 	mov	r19,zero
 10067c8:	94400017 	ldw	r17,0(r18)
 10067cc:	a80b883a 	mov	r5,r21
 10067d0:	9cc00044 	addi	r19,r19,1
 10067d4:	893fffcc 	andi	r4,r17,65535
 10067d8:	10098280 	call	1009828 <__mulsi3>
 10067dc:	8808d43a 	srli	r4,r17,16
 10067e0:	1521883a 	add	r16,r2,r20
 10067e4:	a80b883a 	mov	r5,r21
 10067e8:	10098280 	call	1009828 <__mulsi3>
 10067ec:	8008d43a 	srli	r4,r16,16
 10067f0:	843fffcc 	andi	r16,r16,65535
 10067f4:	1105883a 	add	r2,r2,r4
 10067f8:	1006943a 	slli	r3,r2,16
 10067fc:	1028d43a 	srli	r20,r2,16
 1006800:	1c07883a 	add	r3,r3,r16
 1006804:	90c00015 	stw	r3,0(r18)
 1006808:	94800104 	addi	r18,r18,4
 100680c:	9dbfee16 	blt	r19,r22,10067c8 <__multadd+0x48>
 1006810:	a0000826 	beq	r20,zero,1006834 <__multadd+0xb4>
 1006814:	b8800217 	ldw	r2,8(r23)
 1006818:	b080130e 	bge	r22,r2,1006868 <__multadd+0xe8>
 100681c:	b585883a 	add	r2,r22,r22
 1006820:	1085883a 	add	r2,r2,r2
 1006824:	15c5883a 	add	r2,r2,r23
 1006828:	b0c00044 	addi	r3,r22,1
 100682c:	15000515 	stw	r20,20(r2)
 1006830:	b8c00415 	stw	r3,16(r23)
 1006834:	b805883a 	mov	r2,r23
 1006838:	dfc00917 	ldw	ra,36(sp)
 100683c:	df000817 	ldw	fp,32(sp)
 1006840:	ddc00717 	ldw	r23,28(sp)
 1006844:	dd800617 	ldw	r22,24(sp)
 1006848:	dd400517 	ldw	r21,20(sp)
 100684c:	dd000417 	ldw	r20,16(sp)
 1006850:	dcc00317 	ldw	r19,12(sp)
 1006854:	dc800217 	ldw	r18,8(sp)
 1006858:	dc400117 	ldw	r17,4(sp)
 100685c:	dc000017 	ldw	r16,0(sp)
 1006860:	dec00a04 	addi	sp,sp,40
 1006864:	f800283a 	ret
 1006868:	b9400117 	ldw	r5,4(r23)
 100686c:	e009883a 	mov	r4,fp
 1006870:	29400044 	addi	r5,r5,1
 1006874:	1005fe00 	call	1005fe0 <_Balloc>
 1006878:	b9800417 	ldw	r6,16(r23)
 100687c:	b9400304 	addi	r5,r23,12
 1006880:	11000304 	addi	r4,r2,12
 1006884:	318d883a 	add	r6,r6,r6
 1006888:	318d883a 	add	r6,r6,r6
 100688c:	31800204 	addi	r6,r6,8
 1006890:	1023883a 	mov	r17,r2
 1006894:	10058480 	call	1005848 <memcpy>
 1006898:	b80b883a 	mov	r5,r23
 100689c:	e009883a 	mov	r4,fp
 10068a0:	1005a600 	call	1005a60 <_Bfree>
 10068a4:	882f883a 	mov	r23,r17
 10068a8:	003fdc06 	br	100681c <__multadd+0x9c>

010068ac <__pow5mult>:
 10068ac:	defffa04 	addi	sp,sp,-24
 10068b0:	308000cc 	andi	r2,r6,3
 10068b4:	dd000415 	stw	r20,16(sp)
 10068b8:	dcc00315 	stw	r19,12(sp)
 10068bc:	dc000015 	stw	r16,0(sp)
 10068c0:	dfc00515 	stw	ra,20(sp)
 10068c4:	dc800215 	stw	r18,8(sp)
 10068c8:	dc400115 	stw	r17,4(sp)
 10068cc:	3021883a 	mov	r16,r6
 10068d0:	2027883a 	mov	r19,r4
 10068d4:	2829883a 	mov	r20,r5
 10068d8:	10002b1e 	bne	r2,zero,1006988 <__pow5mult+0xdc>
 10068dc:	8025d0ba 	srai	r18,r16,2
 10068e0:	90001b26 	beq	r18,zero,1006950 <__pow5mult+0xa4>
 10068e4:	9c001217 	ldw	r16,72(r19)
 10068e8:	8000081e 	bne	r16,zero,100690c <__pow5mult+0x60>
 10068ec:	00003006 	br	10069b0 <__pow5mult+0x104>
 10068f0:	800b883a 	mov	r5,r16
 10068f4:	800d883a 	mov	r6,r16
 10068f8:	9809883a 	mov	r4,r19
 10068fc:	90001426 	beq	r18,zero,1006950 <__pow5mult+0xa4>
 1006900:	80800017 	ldw	r2,0(r16)
 1006904:	10001b26 	beq	r2,zero,1006974 <__pow5mult+0xc8>
 1006908:	1021883a 	mov	r16,r2
 100690c:	9080004c 	andi	r2,r18,1
 1006910:	1005003a 	cmpeq	r2,r2,zero
 1006914:	9025d07a 	srai	r18,r18,1
 1006918:	800d883a 	mov	r6,r16
 100691c:	9809883a 	mov	r4,r19
 1006920:	a00b883a 	mov	r5,r20
 1006924:	103ff21e 	bne	r2,zero,10068f0 <__pow5mult+0x44>
 1006928:	10064f00 	call	10064f0 <__multiply>
 100692c:	a00b883a 	mov	r5,r20
 1006930:	9809883a 	mov	r4,r19
 1006934:	1023883a 	mov	r17,r2
 1006938:	1005a600 	call	1005a60 <_Bfree>
 100693c:	8829883a 	mov	r20,r17
 1006940:	800b883a 	mov	r5,r16
 1006944:	800d883a 	mov	r6,r16
 1006948:	9809883a 	mov	r4,r19
 100694c:	903fec1e 	bne	r18,zero,1006900 <__pow5mult+0x54>
 1006950:	a005883a 	mov	r2,r20
 1006954:	dfc00517 	ldw	ra,20(sp)
 1006958:	dd000417 	ldw	r20,16(sp)
 100695c:	dcc00317 	ldw	r19,12(sp)
 1006960:	dc800217 	ldw	r18,8(sp)
 1006964:	dc400117 	ldw	r17,4(sp)
 1006968:	dc000017 	ldw	r16,0(sp)
 100696c:	dec00604 	addi	sp,sp,24
 1006970:	f800283a 	ret
 1006974:	10064f00 	call	10064f0 <__multiply>
 1006978:	80800015 	stw	r2,0(r16)
 100697c:	1021883a 	mov	r16,r2
 1006980:	10000015 	stw	zero,0(r2)
 1006984:	003fe106 	br	100690c <__pow5mult+0x60>
 1006988:	1085883a 	add	r2,r2,r2
 100698c:	00c04074 	movhi	r3,257
 1006990:	18f5b404 	addi	r3,r3,-10544
 1006994:	1085883a 	add	r2,r2,r2
 1006998:	10c5883a 	add	r2,r2,r3
 100699c:	11bfff17 	ldw	r6,-4(r2)
 10069a0:	000f883a 	mov	r7,zero
 10069a4:	10067800 	call	1006780 <__multadd>
 10069a8:	1029883a 	mov	r20,r2
 10069ac:	003fcb06 	br	10068dc <__pow5mult+0x30>
 10069b0:	9809883a 	mov	r4,r19
 10069b4:	01409c44 	movi	r5,625
 10069b8:	10067440 	call	1006744 <__i2b>
 10069bc:	98801215 	stw	r2,72(r19)
 10069c0:	1021883a 	mov	r16,r2
 10069c4:	10000015 	stw	zero,0(r2)
 10069c8:	003fd006 	br	100690c <__pow5mult+0x60>

010069cc <__s2b>:
 10069cc:	defff904 	addi	sp,sp,-28
 10069d0:	dcc00315 	stw	r19,12(sp)
 10069d4:	dc800215 	stw	r18,8(sp)
 10069d8:	2827883a 	mov	r19,r5
 10069dc:	2025883a 	mov	r18,r4
 10069e0:	01400244 	movi	r5,9
 10069e4:	39000204 	addi	r4,r7,8
 10069e8:	dd000415 	stw	r20,16(sp)
 10069ec:	dc400115 	stw	r17,4(sp)
 10069f0:	dfc00615 	stw	ra,24(sp)
 10069f4:	dd400515 	stw	r21,20(sp)
 10069f8:	dc000015 	stw	r16,0(sp)
 10069fc:	3829883a 	mov	r20,r7
 1006a00:	3023883a 	mov	r17,r6
 1006a04:	10097580 	call	1009758 <__divsi3>
 1006a08:	00c00044 	movi	r3,1
 1006a0c:	1880350e 	bge	r3,r2,1006ae4 <__s2b+0x118>
 1006a10:	000b883a 	mov	r5,zero
 1006a14:	18c7883a 	add	r3,r3,r3
 1006a18:	29400044 	addi	r5,r5,1
 1006a1c:	18bffd16 	blt	r3,r2,1006a14 <__s2b+0x48>
 1006a20:	9009883a 	mov	r4,r18
 1006a24:	1005fe00 	call	1005fe0 <_Balloc>
 1006a28:	1011883a 	mov	r8,r2
 1006a2c:	d8800717 	ldw	r2,28(sp)
 1006a30:	00c00044 	movi	r3,1
 1006a34:	01800244 	movi	r6,9
 1006a38:	40800515 	stw	r2,20(r8)
 1006a3c:	40c00415 	stw	r3,16(r8)
 1006a40:	3440260e 	bge	r6,r17,1006adc <__s2b+0x110>
 1006a44:	3021883a 	mov	r16,r6
 1006a48:	99ab883a 	add	r21,r19,r6
 1006a4c:	9c05883a 	add	r2,r19,r16
 1006a50:	11c00007 	ldb	r7,0(r2)
 1006a54:	400b883a 	mov	r5,r8
 1006a58:	9009883a 	mov	r4,r18
 1006a5c:	39fff404 	addi	r7,r7,-48
 1006a60:	01800284 	movi	r6,10
 1006a64:	10067800 	call	1006780 <__multadd>
 1006a68:	84000044 	addi	r16,r16,1
 1006a6c:	1011883a 	mov	r8,r2
 1006a70:	8c3ff61e 	bne	r17,r16,1006a4c <__s2b+0x80>
 1006a74:	ac45883a 	add	r2,r21,r17
 1006a78:	117ffe04 	addi	r5,r2,-8
 1006a7c:	880d883a 	mov	r6,r17
 1006a80:	35000c0e 	bge	r6,r20,1006ab4 <__s2b+0xe8>
 1006a84:	a185c83a 	sub	r2,r20,r6
 1006a88:	2821883a 	mov	r16,r5
 1006a8c:	28a3883a 	add	r17,r5,r2
 1006a90:	81c00007 	ldb	r7,0(r16)
 1006a94:	400b883a 	mov	r5,r8
 1006a98:	9009883a 	mov	r4,r18
 1006a9c:	39fff404 	addi	r7,r7,-48
 1006aa0:	01800284 	movi	r6,10
 1006aa4:	10067800 	call	1006780 <__multadd>
 1006aa8:	84000044 	addi	r16,r16,1
 1006aac:	1011883a 	mov	r8,r2
 1006ab0:	847ff71e 	bne	r16,r17,1006a90 <__s2b+0xc4>
 1006ab4:	4005883a 	mov	r2,r8
 1006ab8:	dfc00617 	ldw	ra,24(sp)
 1006abc:	dd400517 	ldw	r21,20(sp)
 1006ac0:	dd000417 	ldw	r20,16(sp)
 1006ac4:	dcc00317 	ldw	r19,12(sp)
 1006ac8:	dc800217 	ldw	r18,8(sp)
 1006acc:	dc400117 	ldw	r17,4(sp)
 1006ad0:	dc000017 	ldw	r16,0(sp)
 1006ad4:	dec00704 	addi	sp,sp,28
 1006ad8:	f800283a 	ret
 1006adc:	99400284 	addi	r5,r19,10
 1006ae0:	003fe706 	br	1006a80 <__s2b+0xb4>
 1006ae4:	000b883a 	mov	r5,zero
 1006ae8:	003fcd06 	br	1006a20 <__s2b+0x54>

01006aec <_realloc_r>:
 1006aec:	defff404 	addi	sp,sp,-48
 1006af0:	dd800815 	stw	r22,32(sp)
 1006af4:	dc800415 	stw	r18,16(sp)
 1006af8:	dc400315 	stw	r17,12(sp)
 1006afc:	dfc00b15 	stw	ra,44(sp)
 1006b00:	df000a15 	stw	fp,40(sp)
 1006b04:	ddc00915 	stw	r23,36(sp)
 1006b08:	dd400715 	stw	r21,28(sp)
 1006b0c:	dd000615 	stw	r20,24(sp)
 1006b10:	dcc00515 	stw	r19,20(sp)
 1006b14:	dc000215 	stw	r16,8(sp)
 1006b18:	2825883a 	mov	r18,r5
 1006b1c:	3023883a 	mov	r17,r6
 1006b20:	202d883a 	mov	r22,r4
 1006b24:	2800c926 	beq	r5,zero,1006e4c <_realloc_r+0x360>
 1006b28:	100a5ac0 	call	100a5ac <__malloc_lock>
 1006b2c:	943ffe04 	addi	r16,r18,-8
 1006b30:	88c002c4 	addi	r3,r17,11
 1006b34:	00800584 	movi	r2,22
 1006b38:	82000117 	ldw	r8,4(r16)
 1006b3c:	10c01b2e 	bgeu	r2,r3,1006bac <_realloc_r+0xc0>
 1006b40:	00bffe04 	movi	r2,-8
 1006b44:	188e703a 	and	r7,r3,r2
 1006b48:	3839883a 	mov	fp,r7
 1006b4c:	38001a16 	blt	r7,zero,1006bb8 <_realloc_r+0xcc>
 1006b50:	e4401936 	bltu	fp,r17,1006bb8 <_realloc_r+0xcc>
 1006b54:	013fff04 	movi	r4,-4
 1006b58:	4126703a 	and	r19,r8,r4
 1006b5c:	99c02616 	blt	r19,r7,1006bf8 <_realloc_r+0x10c>
 1006b60:	802b883a 	mov	r21,r16
 1006b64:	9829883a 	mov	r20,r19
 1006b68:	84000204 	addi	r16,r16,8
 1006b6c:	a80f883a 	mov	r7,r21
 1006b70:	a70dc83a 	sub	r6,r20,fp
 1006b74:	008003c4 	movi	r2,15
 1006b78:	1180c136 	bltu	r2,r6,1006e80 <_realloc_r+0x394>
 1006b7c:	38800117 	ldw	r2,4(r7)
 1006b80:	a549883a 	add	r4,r20,r21
 1006b84:	1080004c 	andi	r2,r2,1
 1006b88:	a084b03a 	or	r2,r20,r2
 1006b8c:	38800115 	stw	r2,4(r7)
 1006b90:	20c00117 	ldw	r3,4(r4)
 1006b94:	18c00054 	ori	r3,r3,1
 1006b98:	20c00115 	stw	r3,4(r4)
 1006b9c:	b009883a 	mov	r4,r22
 1006ba0:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1006ba4:	8023883a 	mov	r17,r16
 1006ba8:	00000606 	br	1006bc4 <_realloc_r+0xd8>
 1006bac:	01c00404 	movi	r7,16
 1006bb0:	3839883a 	mov	fp,r7
 1006bb4:	e47fe72e 	bgeu	fp,r17,1006b54 <_realloc_r+0x68>
 1006bb8:	00800304 	movi	r2,12
 1006bbc:	0023883a 	mov	r17,zero
 1006bc0:	b0800015 	stw	r2,0(r22)
 1006bc4:	8805883a 	mov	r2,r17
 1006bc8:	dfc00b17 	ldw	ra,44(sp)
 1006bcc:	df000a17 	ldw	fp,40(sp)
 1006bd0:	ddc00917 	ldw	r23,36(sp)
 1006bd4:	dd800817 	ldw	r22,32(sp)
 1006bd8:	dd400717 	ldw	r21,28(sp)
 1006bdc:	dd000617 	ldw	r20,24(sp)
 1006be0:	dcc00517 	ldw	r19,20(sp)
 1006be4:	dc800417 	ldw	r18,16(sp)
 1006be8:	dc400317 	ldw	r17,12(sp)
 1006bec:	dc000217 	ldw	r16,8(sp)
 1006bf0:	dec00c04 	addi	sp,sp,48
 1006bf4:	f800283a 	ret
 1006bf8:	00804074 	movhi	r2,257
 1006bfc:	10b71004 	addi	r2,r2,-9152
 1006c00:	12400217 	ldw	r9,8(r2)
 1006c04:	84cd883a 	add	r6,r16,r19
 1006c08:	802b883a 	mov	r21,r16
 1006c0c:	3240b926 	beq	r6,r9,1006ef4 <_realloc_r+0x408>
 1006c10:	31400117 	ldw	r5,4(r6)
 1006c14:	00bfff84 	movi	r2,-2
 1006c18:	2884703a 	and	r2,r5,r2
 1006c1c:	1185883a 	add	r2,r2,r6
 1006c20:	10c00117 	ldw	r3,4(r2)
 1006c24:	18c0004c 	andi	r3,r3,1
 1006c28:	1807003a 	cmpeq	r3,r3,zero
 1006c2c:	1800a326 	beq	r3,zero,1006ebc <_realloc_r+0x3d0>
 1006c30:	2908703a 	and	r4,r5,r4
 1006c34:	9929883a 	add	r20,r19,r4
 1006c38:	a1c0a30e 	bge	r20,r7,1006ec8 <_realloc_r+0x3dc>
 1006c3c:	4080004c 	andi	r2,r8,1
 1006c40:	1000551e 	bne	r2,zero,1006d98 <_realloc_r+0x2ac>
 1006c44:	80800017 	ldw	r2,0(r16)
 1006c48:	80afc83a 	sub	r23,r16,r2
 1006c4c:	b8c00117 	ldw	r3,4(r23)
 1006c50:	00bfff04 	movi	r2,-4
 1006c54:	1884703a 	and	r2,r3,r2
 1006c58:	30002e26 	beq	r6,zero,1006d14 <_realloc_r+0x228>
 1006c5c:	3240b926 	beq	r6,r9,1006f44 <_realloc_r+0x458>
 1006c60:	98a9883a 	add	r20,r19,r2
 1006c64:	2509883a 	add	r4,r4,r20
 1006c68:	d9000015 	stw	r4,0(sp)
 1006c6c:	21c02a16 	blt	r4,r7,1006d18 <_realloc_r+0x22c>
 1006c70:	30800317 	ldw	r2,12(r6)
 1006c74:	30c00217 	ldw	r3,8(r6)
 1006c78:	01400904 	movi	r5,36
 1006c7c:	99bfff04 	addi	r6,r19,-4
 1006c80:	18800315 	stw	r2,12(r3)
 1006c84:	10c00215 	stw	r3,8(r2)
 1006c88:	b9000317 	ldw	r4,12(r23)
 1006c8c:	b8800217 	ldw	r2,8(r23)
 1006c90:	b82b883a 	mov	r21,r23
 1006c94:	bc000204 	addi	r16,r23,8
 1006c98:	20800215 	stw	r2,8(r4)
 1006c9c:	11000315 	stw	r4,12(r2)
 1006ca0:	2980e436 	bltu	r5,r6,1007034 <_realloc_r+0x548>
 1006ca4:	008004c4 	movi	r2,19
 1006ca8:	9009883a 	mov	r4,r18
 1006cac:	8011883a 	mov	r8,r16
 1006cb0:	11800f2e 	bgeu	r2,r6,1006cf0 <_realloc_r+0x204>
 1006cb4:	90800017 	ldw	r2,0(r18)
 1006cb8:	ba000404 	addi	r8,r23,16
 1006cbc:	91000204 	addi	r4,r18,8
 1006cc0:	b8800215 	stw	r2,8(r23)
 1006cc4:	90c00117 	ldw	r3,4(r18)
 1006cc8:	008006c4 	movi	r2,27
 1006ccc:	b8c00315 	stw	r3,12(r23)
 1006cd0:	1180072e 	bgeu	r2,r6,1006cf0 <_realloc_r+0x204>
 1006cd4:	90c00217 	ldw	r3,8(r18)
 1006cd8:	ba000604 	addi	r8,r23,24
 1006cdc:	91000404 	addi	r4,r18,16
 1006ce0:	b8c00415 	stw	r3,16(r23)
 1006ce4:	90800317 	ldw	r2,12(r18)
 1006ce8:	b8800515 	stw	r2,20(r23)
 1006cec:	3140e726 	beq	r6,r5,100708c <_realloc_r+0x5a0>
 1006cf0:	20800017 	ldw	r2,0(r4)
 1006cf4:	dd000017 	ldw	r20,0(sp)
 1006cf8:	b80f883a 	mov	r7,r23
 1006cfc:	40800015 	stw	r2,0(r8)
 1006d00:	20c00117 	ldw	r3,4(r4)
 1006d04:	40c00115 	stw	r3,4(r8)
 1006d08:	20800217 	ldw	r2,8(r4)
 1006d0c:	40800215 	stw	r2,8(r8)
 1006d10:	003f9706 	br	1006b70 <_realloc_r+0x84>
 1006d14:	98a9883a 	add	r20,r19,r2
 1006d18:	a1c01f16 	blt	r20,r7,1006d98 <_realloc_r+0x2ac>
 1006d1c:	b8c00317 	ldw	r3,12(r23)
 1006d20:	b8800217 	ldw	r2,8(r23)
 1006d24:	99bfff04 	addi	r6,r19,-4
 1006d28:	01400904 	movi	r5,36
 1006d2c:	b82b883a 	mov	r21,r23
 1006d30:	18800215 	stw	r2,8(r3)
 1006d34:	10c00315 	stw	r3,12(r2)
 1006d38:	bc000204 	addi	r16,r23,8
 1006d3c:	2980c336 	bltu	r5,r6,100704c <_realloc_r+0x560>
 1006d40:	008004c4 	movi	r2,19
 1006d44:	9009883a 	mov	r4,r18
 1006d48:	8011883a 	mov	r8,r16
 1006d4c:	11800f2e 	bgeu	r2,r6,1006d8c <_realloc_r+0x2a0>
 1006d50:	90800017 	ldw	r2,0(r18)
 1006d54:	ba000404 	addi	r8,r23,16
 1006d58:	91000204 	addi	r4,r18,8
 1006d5c:	b8800215 	stw	r2,8(r23)
 1006d60:	90c00117 	ldw	r3,4(r18)
 1006d64:	008006c4 	movi	r2,27
 1006d68:	b8c00315 	stw	r3,12(r23)
 1006d6c:	1180072e 	bgeu	r2,r6,1006d8c <_realloc_r+0x2a0>
 1006d70:	90c00217 	ldw	r3,8(r18)
 1006d74:	ba000604 	addi	r8,r23,24
 1006d78:	91000404 	addi	r4,r18,16
 1006d7c:	b8c00415 	stw	r3,16(r23)
 1006d80:	90800317 	ldw	r2,12(r18)
 1006d84:	b8800515 	stw	r2,20(r23)
 1006d88:	3140c726 	beq	r6,r5,10070a8 <_realloc_r+0x5bc>
 1006d8c:	20800017 	ldw	r2,0(r4)
 1006d90:	b80f883a 	mov	r7,r23
 1006d94:	003fd906 	br	1006cfc <_realloc_r+0x210>
 1006d98:	880b883a 	mov	r5,r17
 1006d9c:	b009883a 	mov	r4,r22
 1006da0:	10050240 	call	1005024 <_malloc_r>
 1006da4:	1023883a 	mov	r17,r2
 1006da8:	10002526 	beq	r2,zero,1006e40 <_realloc_r+0x354>
 1006dac:	80800117 	ldw	r2,4(r16)
 1006db0:	00ffff84 	movi	r3,-2
 1006db4:	893ffe04 	addi	r4,r17,-8
 1006db8:	10c4703a 	and	r2,r2,r3
 1006dbc:	8085883a 	add	r2,r16,r2
 1006dc0:	20809526 	beq	r4,r2,1007018 <_realloc_r+0x52c>
 1006dc4:	99bfff04 	addi	r6,r19,-4
 1006dc8:	01c00904 	movi	r7,36
 1006dcc:	39804536 	bltu	r7,r6,1006ee4 <_realloc_r+0x3f8>
 1006dd0:	008004c4 	movi	r2,19
 1006dd4:	9009883a 	mov	r4,r18
 1006dd8:	880b883a 	mov	r5,r17
 1006ddc:	11800f2e 	bgeu	r2,r6,1006e1c <_realloc_r+0x330>
 1006de0:	90800017 	ldw	r2,0(r18)
 1006de4:	89400204 	addi	r5,r17,8
 1006de8:	91000204 	addi	r4,r18,8
 1006dec:	88800015 	stw	r2,0(r17)
 1006df0:	90c00117 	ldw	r3,4(r18)
 1006df4:	008006c4 	movi	r2,27
 1006df8:	88c00115 	stw	r3,4(r17)
 1006dfc:	1180072e 	bgeu	r2,r6,1006e1c <_realloc_r+0x330>
 1006e00:	90c00217 	ldw	r3,8(r18)
 1006e04:	89400404 	addi	r5,r17,16
 1006e08:	91000404 	addi	r4,r18,16
 1006e0c:	88c00215 	stw	r3,8(r17)
 1006e10:	90800317 	ldw	r2,12(r18)
 1006e14:	88800315 	stw	r2,12(r17)
 1006e18:	31c09126 	beq	r6,r7,1007060 <_realloc_r+0x574>
 1006e1c:	20800017 	ldw	r2,0(r4)
 1006e20:	28800015 	stw	r2,0(r5)
 1006e24:	20c00117 	ldw	r3,4(r4)
 1006e28:	28c00115 	stw	r3,4(r5)
 1006e2c:	20800217 	ldw	r2,8(r4)
 1006e30:	28800215 	stw	r2,8(r5)
 1006e34:	900b883a 	mov	r5,r18
 1006e38:	b009883a 	mov	r4,r22
 1006e3c:	100449c0 	call	100449c <_free_r>
 1006e40:	b009883a 	mov	r4,r22
 1006e44:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1006e48:	003f5e06 	br	1006bc4 <_realloc_r+0xd8>
 1006e4c:	300b883a 	mov	r5,r6
 1006e50:	dfc00b17 	ldw	ra,44(sp)
 1006e54:	df000a17 	ldw	fp,40(sp)
 1006e58:	ddc00917 	ldw	r23,36(sp)
 1006e5c:	dd800817 	ldw	r22,32(sp)
 1006e60:	dd400717 	ldw	r21,28(sp)
 1006e64:	dd000617 	ldw	r20,24(sp)
 1006e68:	dcc00517 	ldw	r19,20(sp)
 1006e6c:	dc800417 	ldw	r18,16(sp)
 1006e70:	dc400317 	ldw	r17,12(sp)
 1006e74:	dc000217 	ldw	r16,8(sp)
 1006e78:	dec00c04 	addi	sp,sp,48
 1006e7c:	10050241 	jmpi	1005024 <_malloc_r>
 1006e80:	38800117 	ldw	r2,4(r7)
 1006e84:	e54b883a 	add	r5,fp,r21
 1006e88:	31000054 	ori	r4,r6,1
 1006e8c:	1080004c 	andi	r2,r2,1
 1006e90:	1704b03a 	or	r2,r2,fp
 1006e94:	38800115 	stw	r2,4(r7)
 1006e98:	29000115 	stw	r4,4(r5)
 1006e9c:	2987883a 	add	r3,r5,r6
 1006ea0:	18800117 	ldw	r2,4(r3)
 1006ea4:	29400204 	addi	r5,r5,8
 1006ea8:	b009883a 	mov	r4,r22
 1006eac:	10800054 	ori	r2,r2,1
 1006eb0:	18800115 	stw	r2,4(r3)
 1006eb4:	100449c0 	call	100449c <_free_r>
 1006eb8:	003f3806 	br	1006b9c <_realloc_r+0xb0>
 1006ebc:	000d883a 	mov	r6,zero
 1006ec0:	0009883a 	mov	r4,zero
 1006ec4:	003f5d06 	br	1006c3c <_realloc_r+0x150>
 1006ec8:	30c00217 	ldw	r3,8(r6)
 1006ecc:	30800317 	ldw	r2,12(r6)
 1006ed0:	800f883a 	mov	r7,r16
 1006ed4:	84000204 	addi	r16,r16,8
 1006ed8:	10c00215 	stw	r3,8(r2)
 1006edc:	18800315 	stw	r2,12(r3)
 1006ee0:	003f2306 	br	1006b70 <_realloc_r+0x84>
 1006ee4:	8809883a 	mov	r4,r17
 1006ee8:	900b883a 	mov	r5,r18
 1006eec:	10058e80 	call	10058e8 <memmove>
 1006ef0:	003fd006 	br	1006e34 <_realloc_r+0x348>
 1006ef4:	30800117 	ldw	r2,4(r6)
 1006ef8:	e0c00404 	addi	r3,fp,16
 1006efc:	1108703a 	and	r4,r2,r4
 1006f00:	9905883a 	add	r2,r19,r4
 1006f04:	10ff4d16 	blt	r2,r3,1006c3c <_realloc_r+0x150>
 1006f08:	1705c83a 	sub	r2,r2,fp
 1006f0c:	870b883a 	add	r5,r16,fp
 1006f10:	10800054 	ori	r2,r2,1
 1006f14:	28800115 	stw	r2,4(r5)
 1006f18:	80c00117 	ldw	r3,4(r16)
 1006f1c:	00804074 	movhi	r2,257
 1006f20:	10b71004 	addi	r2,r2,-9152
 1006f24:	b009883a 	mov	r4,r22
 1006f28:	18c0004c 	andi	r3,r3,1
 1006f2c:	e0c6b03a 	or	r3,fp,r3
 1006f30:	11400215 	stw	r5,8(r2)
 1006f34:	80c00115 	stw	r3,4(r16)
 1006f38:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1006f3c:	84400204 	addi	r17,r16,8
 1006f40:	003f2006 	br	1006bc4 <_realloc_r+0xd8>
 1006f44:	98a9883a 	add	r20,r19,r2
 1006f48:	2509883a 	add	r4,r4,r20
 1006f4c:	e0800404 	addi	r2,fp,16
 1006f50:	d9000115 	stw	r4,4(sp)
 1006f54:	20bf7016 	blt	r4,r2,1006d18 <_realloc_r+0x22c>
 1006f58:	b8c00317 	ldw	r3,12(r23)
 1006f5c:	b8800217 	ldw	r2,8(r23)
 1006f60:	99bfff04 	addi	r6,r19,-4
 1006f64:	01400904 	movi	r5,36
 1006f68:	18800215 	stw	r2,8(r3)
 1006f6c:	10c00315 	stw	r3,12(r2)
 1006f70:	bc400204 	addi	r17,r23,8
 1006f74:	29804136 	bltu	r5,r6,100707c <_realloc_r+0x590>
 1006f78:	008004c4 	movi	r2,19
 1006f7c:	9009883a 	mov	r4,r18
 1006f80:	880f883a 	mov	r7,r17
 1006f84:	11800f2e 	bgeu	r2,r6,1006fc4 <_realloc_r+0x4d8>
 1006f88:	90800017 	ldw	r2,0(r18)
 1006f8c:	b9c00404 	addi	r7,r23,16
 1006f90:	91000204 	addi	r4,r18,8
 1006f94:	b8800215 	stw	r2,8(r23)
 1006f98:	90c00117 	ldw	r3,4(r18)
 1006f9c:	008006c4 	movi	r2,27
 1006fa0:	b8c00315 	stw	r3,12(r23)
 1006fa4:	1180072e 	bgeu	r2,r6,1006fc4 <_realloc_r+0x4d8>
 1006fa8:	90c00217 	ldw	r3,8(r18)
 1006fac:	b9c00604 	addi	r7,r23,24
 1006fb0:	91000404 	addi	r4,r18,16
 1006fb4:	b8c00415 	stw	r3,16(r23)
 1006fb8:	90800317 	ldw	r2,12(r18)
 1006fbc:	b8800515 	stw	r2,20(r23)
 1006fc0:	31404026 	beq	r6,r5,10070c4 <_realloc_r+0x5d8>
 1006fc4:	20800017 	ldw	r2,0(r4)
 1006fc8:	38800015 	stw	r2,0(r7)
 1006fcc:	20c00117 	ldw	r3,4(r4)
 1006fd0:	38c00115 	stw	r3,4(r7)
 1006fd4:	20800217 	ldw	r2,8(r4)
 1006fd8:	38800215 	stw	r2,8(r7)
 1006fdc:	d8c00117 	ldw	r3,4(sp)
 1006fe0:	bf0b883a 	add	r5,r23,fp
 1006fe4:	b009883a 	mov	r4,r22
 1006fe8:	1f05c83a 	sub	r2,r3,fp
 1006fec:	10800054 	ori	r2,r2,1
 1006ff0:	28800115 	stw	r2,4(r5)
 1006ff4:	b8c00117 	ldw	r3,4(r23)
 1006ff8:	00804074 	movhi	r2,257
 1006ffc:	10b71004 	addi	r2,r2,-9152
 1007000:	11400215 	stw	r5,8(r2)
 1007004:	18c0004c 	andi	r3,r3,1
 1007008:	e0c6b03a 	or	r3,fp,r3
 100700c:	b8c00115 	stw	r3,4(r23)
 1007010:	100a5cc0 	call	100a5cc <__malloc_unlock>
 1007014:	003eeb06 	br	1006bc4 <_realloc_r+0xd8>
 1007018:	20800117 	ldw	r2,4(r4)
 100701c:	00ffff04 	movi	r3,-4
 1007020:	800f883a 	mov	r7,r16
 1007024:	10c4703a 	and	r2,r2,r3
 1007028:	98a9883a 	add	r20,r19,r2
 100702c:	84000204 	addi	r16,r16,8
 1007030:	003ecf06 	br	1006b70 <_realloc_r+0x84>
 1007034:	900b883a 	mov	r5,r18
 1007038:	8009883a 	mov	r4,r16
 100703c:	10058e80 	call	10058e8 <memmove>
 1007040:	dd000017 	ldw	r20,0(sp)
 1007044:	b80f883a 	mov	r7,r23
 1007048:	003ec906 	br	1006b70 <_realloc_r+0x84>
 100704c:	900b883a 	mov	r5,r18
 1007050:	8009883a 	mov	r4,r16
 1007054:	10058e80 	call	10058e8 <memmove>
 1007058:	b80f883a 	mov	r7,r23
 100705c:	003ec406 	br	1006b70 <_realloc_r+0x84>
 1007060:	90c00417 	ldw	r3,16(r18)
 1007064:	89400604 	addi	r5,r17,24
 1007068:	91000604 	addi	r4,r18,24
 100706c:	88c00415 	stw	r3,16(r17)
 1007070:	90800517 	ldw	r2,20(r18)
 1007074:	88800515 	stw	r2,20(r17)
 1007078:	003f6806 	br	1006e1c <_realloc_r+0x330>
 100707c:	900b883a 	mov	r5,r18
 1007080:	8809883a 	mov	r4,r17
 1007084:	10058e80 	call	10058e8 <memmove>
 1007088:	003fd406 	br	1006fdc <_realloc_r+0x4f0>
 100708c:	90c00417 	ldw	r3,16(r18)
 1007090:	91000604 	addi	r4,r18,24
 1007094:	ba000804 	addi	r8,r23,32
 1007098:	b8c00615 	stw	r3,24(r23)
 100709c:	90800517 	ldw	r2,20(r18)
 10070a0:	b8800715 	stw	r2,28(r23)
 10070a4:	003f1206 	br	1006cf0 <_realloc_r+0x204>
 10070a8:	90c00417 	ldw	r3,16(r18)
 10070ac:	91000604 	addi	r4,r18,24
 10070b0:	ba000804 	addi	r8,r23,32
 10070b4:	b8c00615 	stw	r3,24(r23)
 10070b8:	90800517 	ldw	r2,20(r18)
 10070bc:	b8800715 	stw	r2,28(r23)
 10070c0:	003f3206 	br	1006d8c <_realloc_r+0x2a0>
 10070c4:	90c00417 	ldw	r3,16(r18)
 10070c8:	91000604 	addi	r4,r18,24
 10070cc:	b9c00804 	addi	r7,r23,32
 10070d0:	b8c00615 	stw	r3,24(r23)
 10070d4:	90800517 	ldw	r2,20(r18)
 10070d8:	b8800715 	stw	r2,28(r23)
 10070dc:	003fb906 	br	1006fc4 <_realloc_r+0x4d8>

010070e0 <__isinfd>:
 10070e0:	200d883a 	mov	r6,r4
 10070e4:	0109c83a 	sub	r4,zero,r4
 10070e8:	2188b03a 	or	r4,r4,r6
 10070ec:	2008d7fa 	srli	r4,r4,31
 10070f0:	00a00034 	movhi	r2,32768
 10070f4:	10bfffc4 	addi	r2,r2,-1
 10070f8:	1144703a 	and	r2,r2,r5
 10070fc:	2088b03a 	or	r4,r4,r2
 1007100:	009ffc34 	movhi	r2,32752
 1007104:	1105c83a 	sub	r2,r2,r4
 1007108:	0087c83a 	sub	r3,zero,r2
 100710c:	10c4b03a 	or	r2,r2,r3
 1007110:	1004d7fa 	srli	r2,r2,31
 1007114:	00c00044 	movi	r3,1
 1007118:	1885c83a 	sub	r2,r3,r2
 100711c:	f800283a 	ret

01007120 <__isnand>:
 1007120:	200d883a 	mov	r6,r4
 1007124:	0109c83a 	sub	r4,zero,r4
 1007128:	2188b03a 	or	r4,r4,r6
 100712c:	2008d7fa 	srli	r4,r4,31
 1007130:	00a00034 	movhi	r2,32768
 1007134:	10bfffc4 	addi	r2,r2,-1
 1007138:	1144703a 	and	r2,r2,r5
 100713c:	2088b03a 	or	r4,r4,r2
 1007140:	009ffc34 	movhi	r2,32752
 1007144:	1105c83a 	sub	r2,r2,r4
 1007148:	1004d7fa 	srli	r2,r2,31
 100714c:	f800283a 	ret

01007150 <_sbrk_r>:
 1007150:	defffd04 	addi	sp,sp,-12
 1007154:	dc000015 	stw	r16,0(sp)
 1007158:	04004074 	movhi	r16,257
 100715c:	84035704 	addi	r16,r16,3420
 1007160:	dc400115 	stw	r17,4(sp)
 1007164:	80000015 	stw	zero,0(r16)
 1007168:	2023883a 	mov	r17,r4
 100716c:	2809883a 	mov	r4,r5
 1007170:	dfc00215 	stw	ra,8(sp)
 1007174:	100aa800 	call	100aa80 <sbrk>
 1007178:	1007883a 	mov	r3,r2
 100717c:	00bfffc4 	movi	r2,-1
 1007180:	18800626 	beq	r3,r2,100719c <_sbrk_r+0x4c>
 1007184:	1805883a 	mov	r2,r3
 1007188:	dfc00217 	ldw	ra,8(sp)
 100718c:	dc400117 	ldw	r17,4(sp)
 1007190:	dc000017 	ldw	r16,0(sp)
 1007194:	dec00304 	addi	sp,sp,12
 1007198:	f800283a 	ret
 100719c:	80800017 	ldw	r2,0(r16)
 10071a0:	103ff826 	beq	r2,zero,1007184 <_sbrk_r+0x34>
 10071a4:	88800015 	stw	r2,0(r17)
 10071a8:	1805883a 	mov	r2,r3
 10071ac:	dfc00217 	ldw	ra,8(sp)
 10071b0:	dc400117 	ldw	r17,4(sp)
 10071b4:	dc000017 	ldw	r16,0(sp)
 10071b8:	dec00304 	addi	sp,sp,12
 10071bc:	f800283a 	ret

010071c0 <__sclose>:
 10071c0:	2940038f 	ldh	r5,14(r5)
 10071c4:	100757c1 	jmpi	100757c <_close_r>

010071c8 <__sseek>:
 10071c8:	defffe04 	addi	sp,sp,-8
 10071cc:	dc000015 	stw	r16,0(sp)
 10071d0:	2821883a 	mov	r16,r5
 10071d4:	2940038f 	ldh	r5,14(r5)
 10071d8:	dfc00115 	stw	ra,4(sp)
 10071dc:	10077f40 	call	10077f4 <_lseek_r>
 10071e0:	1007883a 	mov	r3,r2
 10071e4:	00bfffc4 	movi	r2,-1
 10071e8:	18800926 	beq	r3,r2,1007210 <__sseek+0x48>
 10071ec:	8080030b 	ldhu	r2,12(r16)
 10071f0:	80c01415 	stw	r3,80(r16)
 10071f4:	10840014 	ori	r2,r2,4096
 10071f8:	8080030d 	sth	r2,12(r16)
 10071fc:	1805883a 	mov	r2,r3
 1007200:	dfc00117 	ldw	ra,4(sp)
 1007204:	dc000017 	ldw	r16,0(sp)
 1007208:	dec00204 	addi	sp,sp,8
 100720c:	f800283a 	ret
 1007210:	8080030b 	ldhu	r2,12(r16)
 1007214:	10bbffcc 	andi	r2,r2,61439
 1007218:	8080030d 	sth	r2,12(r16)
 100721c:	1805883a 	mov	r2,r3
 1007220:	dfc00117 	ldw	ra,4(sp)
 1007224:	dc000017 	ldw	r16,0(sp)
 1007228:	dec00204 	addi	sp,sp,8
 100722c:	f800283a 	ret

01007230 <__swrite>:
 1007230:	2880030b 	ldhu	r2,12(r5)
 1007234:	defffb04 	addi	sp,sp,-20
 1007238:	dcc00315 	stw	r19,12(sp)
 100723c:	1080400c 	andi	r2,r2,256
 1007240:	dc800215 	stw	r18,8(sp)
 1007244:	dc400115 	stw	r17,4(sp)
 1007248:	dc000015 	stw	r16,0(sp)
 100724c:	3027883a 	mov	r19,r6
 1007250:	3825883a 	mov	r18,r7
 1007254:	dfc00415 	stw	ra,16(sp)
 1007258:	2821883a 	mov	r16,r5
 100725c:	000d883a 	mov	r6,zero
 1007260:	01c00084 	movi	r7,2
 1007264:	2023883a 	mov	r17,r4
 1007268:	10000226 	beq	r2,zero,1007274 <__swrite+0x44>
 100726c:	2940038f 	ldh	r5,14(r5)
 1007270:	10077f40 	call	10077f4 <_lseek_r>
 1007274:	8080030b 	ldhu	r2,12(r16)
 1007278:	8140038f 	ldh	r5,14(r16)
 100727c:	8809883a 	mov	r4,r17
 1007280:	10bbffcc 	andi	r2,r2,61439
 1007284:	980d883a 	mov	r6,r19
 1007288:	900f883a 	mov	r7,r18
 100728c:	8080030d 	sth	r2,12(r16)
 1007290:	dfc00417 	ldw	ra,16(sp)
 1007294:	dcc00317 	ldw	r19,12(sp)
 1007298:	dc800217 	ldw	r18,8(sp)
 100729c:	dc400117 	ldw	r17,4(sp)
 10072a0:	dc000017 	ldw	r16,0(sp)
 10072a4:	dec00504 	addi	sp,sp,20
 10072a8:	100743c1 	jmpi	100743c <_write_r>

010072ac <__sread>:
 10072ac:	defffe04 	addi	sp,sp,-8
 10072b0:	dc000015 	stw	r16,0(sp)
 10072b4:	2821883a 	mov	r16,r5
 10072b8:	2940038f 	ldh	r5,14(r5)
 10072bc:	dfc00115 	stw	ra,4(sp)
 10072c0:	100786c0 	call	100786c <_read_r>
 10072c4:	1007883a 	mov	r3,r2
 10072c8:	10000816 	blt	r2,zero,10072ec <__sread+0x40>
 10072cc:	80801417 	ldw	r2,80(r16)
 10072d0:	10c5883a 	add	r2,r2,r3
 10072d4:	80801415 	stw	r2,80(r16)
 10072d8:	1805883a 	mov	r2,r3
 10072dc:	dfc00117 	ldw	ra,4(sp)
 10072e0:	dc000017 	ldw	r16,0(sp)
 10072e4:	dec00204 	addi	sp,sp,8
 10072e8:	f800283a 	ret
 10072ec:	8080030b 	ldhu	r2,12(r16)
 10072f0:	10bbffcc 	andi	r2,r2,61439
 10072f4:	8080030d 	sth	r2,12(r16)
 10072f8:	1805883a 	mov	r2,r3
 10072fc:	dfc00117 	ldw	ra,4(sp)
 1007300:	dc000017 	ldw	r16,0(sp)
 1007304:	dec00204 	addi	sp,sp,8
 1007308:	f800283a 	ret

0100730c <strcmp>:
 100730c:	2144b03a 	or	r2,r4,r5
 1007310:	108000cc 	andi	r2,r2,3
 1007314:	10001d1e 	bne	r2,zero,100738c <strcmp+0x80>
 1007318:	200f883a 	mov	r7,r4
 100731c:	28800017 	ldw	r2,0(r5)
 1007320:	21000017 	ldw	r4,0(r4)
 1007324:	280d883a 	mov	r6,r5
 1007328:	2080161e 	bne	r4,r2,1007384 <strcmp+0x78>
 100732c:	023fbff4 	movhi	r8,65279
 1007330:	423fbfc4 	addi	r8,r8,-257
 1007334:	2207883a 	add	r3,r4,r8
 1007338:	01602074 	movhi	r5,32897
 100733c:	29602004 	addi	r5,r5,-32640
 1007340:	1946703a 	and	r3,r3,r5
 1007344:	0104303a 	nor	r2,zero,r4
 1007348:	10c4703a 	and	r2,r2,r3
 100734c:	10001c1e 	bne	r2,zero,10073c0 <strcmp+0xb4>
 1007350:	4013883a 	mov	r9,r8
 1007354:	2811883a 	mov	r8,r5
 1007358:	00000106 	br	1007360 <strcmp+0x54>
 100735c:	1800181e 	bne	r3,zero,10073c0 <strcmp+0xb4>
 1007360:	39c00104 	addi	r7,r7,4
 1007364:	39000017 	ldw	r4,0(r7)
 1007368:	31800104 	addi	r6,r6,4
 100736c:	31400017 	ldw	r5,0(r6)
 1007370:	2245883a 	add	r2,r4,r9
 1007374:	1204703a 	and	r2,r2,r8
 1007378:	0106303a 	nor	r3,zero,r4
 100737c:	1886703a 	and	r3,r3,r2
 1007380:	217ff626 	beq	r4,r5,100735c <strcmp+0x50>
 1007384:	3809883a 	mov	r4,r7
 1007388:	300b883a 	mov	r5,r6
 100738c:	20c00007 	ldb	r3,0(r4)
 1007390:	1800051e 	bne	r3,zero,10073a8 <strcmp+0x9c>
 1007394:	00000606 	br	10073b0 <strcmp+0xa4>
 1007398:	21000044 	addi	r4,r4,1
 100739c:	20c00007 	ldb	r3,0(r4)
 10073a0:	29400044 	addi	r5,r5,1
 10073a4:	18000226 	beq	r3,zero,10073b0 <strcmp+0xa4>
 10073a8:	28800007 	ldb	r2,0(r5)
 10073ac:	18bffa26 	beq	r3,r2,1007398 <strcmp+0x8c>
 10073b0:	20c00003 	ldbu	r3,0(r4)
 10073b4:	28800003 	ldbu	r2,0(r5)
 10073b8:	1885c83a 	sub	r2,r3,r2
 10073bc:	f800283a 	ret
 10073c0:	0005883a 	mov	r2,zero
 10073c4:	f800283a 	ret

010073c8 <strlen>:
 10073c8:	208000cc 	andi	r2,r4,3
 10073cc:	2011883a 	mov	r8,r4
 10073d0:	1000161e 	bne	r2,zero,100742c <strlen+0x64>
 10073d4:	20c00017 	ldw	r3,0(r4)
 10073d8:	017fbff4 	movhi	r5,65279
 10073dc:	297fbfc4 	addi	r5,r5,-257
 10073e0:	01e02074 	movhi	r7,32897
 10073e4:	39e02004 	addi	r7,r7,-32640
 10073e8:	1945883a 	add	r2,r3,r5
 10073ec:	11c4703a 	and	r2,r2,r7
 10073f0:	00c6303a 	nor	r3,zero,r3
 10073f4:	1886703a 	and	r3,r3,r2
 10073f8:	18000c1e 	bne	r3,zero,100742c <strlen+0x64>
 10073fc:	280d883a 	mov	r6,r5
 1007400:	380b883a 	mov	r5,r7
 1007404:	21000104 	addi	r4,r4,4
 1007408:	20800017 	ldw	r2,0(r4)
 100740c:	1187883a 	add	r3,r2,r6
 1007410:	1946703a 	and	r3,r3,r5
 1007414:	0084303a 	nor	r2,zero,r2
 1007418:	10c4703a 	and	r2,r2,r3
 100741c:	103ff926 	beq	r2,zero,1007404 <strlen+0x3c>
 1007420:	20800007 	ldb	r2,0(r4)
 1007424:	10000326 	beq	r2,zero,1007434 <strlen+0x6c>
 1007428:	21000044 	addi	r4,r4,1
 100742c:	20800007 	ldb	r2,0(r4)
 1007430:	103ffd1e 	bne	r2,zero,1007428 <strlen+0x60>
 1007434:	2205c83a 	sub	r2,r4,r8
 1007438:	f800283a 	ret

0100743c <_write_r>:
 100743c:	defffd04 	addi	sp,sp,-12
 1007440:	dc000015 	stw	r16,0(sp)
 1007444:	04004074 	movhi	r16,257
 1007448:	84035704 	addi	r16,r16,3420
 100744c:	dc400115 	stw	r17,4(sp)
 1007450:	80000015 	stw	zero,0(r16)
 1007454:	2023883a 	mov	r17,r4
 1007458:	2809883a 	mov	r4,r5
 100745c:	300b883a 	mov	r5,r6
 1007460:	380d883a 	mov	r6,r7
 1007464:	dfc00215 	stw	ra,8(sp)
 1007468:	100ab3c0 	call	100ab3c <write>
 100746c:	1007883a 	mov	r3,r2
 1007470:	00bfffc4 	movi	r2,-1
 1007474:	18800626 	beq	r3,r2,1007490 <_write_r+0x54>
 1007478:	1805883a 	mov	r2,r3
 100747c:	dfc00217 	ldw	ra,8(sp)
 1007480:	dc400117 	ldw	r17,4(sp)
 1007484:	dc000017 	ldw	r16,0(sp)
 1007488:	dec00304 	addi	sp,sp,12
 100748c:	f800283a 	ret
 1007490:	80800017 	ldw	r2,0(r16)
 1007494:	103ff826 	beq	r2,zero,1007478 <_write_r+0x3c>
 1007498:	88800015 	stw	r2,0(r17)
 100749c:	1805883a 	mov	r2,r3
 10074a0:	dfc00217 	ldw	ra,8(sp)
 10074a4:	dc400117 	ldw	r17,4(sp)
 10074a8:	dc000017 	ldw	r16,0(sp)
 10074ac:	dec00304 	addi	sp,sp,12
 10074b0:	f800283a 	ret

010074b4 <_calloc_r>:
 10074b4:	defffe04 	addi	sp,sp,-8
 10074b8:	dc400015 	stw	r17,0(sp)
 10074bc:	2023883a 	mov	r17,r4
 10074c0:	2809883a 	mov	r4,r5
 10074c4:	300b883a 	mov	r5,r6
 10074c8:	dfc00115 	stw	ra,4(sp)
 10074cc:	10098280 	call	1009828 <__mulsi3>
 10074d0:	100b883a 	mov	r5,r2
 10074d4:	8809883a 	mov	r4,r17
 10074d8:	10050240 	call	1005024 <_malloc_r>
 10074dc:	1023883a 	mov	r17,r2
 10074e0:	01c00904 	movi	r7,36
 10074e4:	10000d26 	beq	r2,zero,100751c <_calloc_r+0x68>
 10074e8:	10ffff17 	ldw	r3,-4(r2)
 10074ec:	1009883a 	mov	r4,r2
 10074f0:	00bfff04 	movi	r2,-4
 10074f4:	1886703a 	and	r3,r3,r2
 10074f8:	1887883a 	add	r3,r3,r2
 10074fc:	180d883a 	mov	r6,r3
 1007500:	000b883a 	mov	r5,zero
 1007504:	38c01736 	bltu	r7,r3,1007564 <_calloc_r+0xb0>
 1007508:	008004c4 	movi	r2,19
 100750c:	10c00836 	bltu	r2,r3,1007530 <_calloc_r+0x7c>
 1007510:	20000215 	stw	zero,8(r4)
 1007514:	20000015 	stw	zero,0(r4)
 1007518:	20000115 	stw	zero,4(r4)
 100751c:	8805883a 	mov	r2,r17
 1007520:	dfc00117 	ldw	ra,4(sp)
 1007524:	dc400017 	ldw	r17,0(sp)
 1007528:	dec00204 	addi	sp,sp,8
 100752c:	f800283a 	ret
 1007530:	008006c4 	movi	r2,27
 1007534:	88000015 	stw	zero,0(r17)
 1007538:	88000115 	stw	zero,4(r17)
 100753c:	89000204 	addi	r4,r17,8
 1007540:	10fff32e 	bgeu	r2,r3,1007510 <_calloc_r+0x5c>
 1007544:	88000215 	stw	zero,8(r17)
 1007548:	88000315 	stw	zero,12(r17)
 100754c:	89000404 	addi	r4,r17,16
 1007550:	19ffef1e 	bne	r3,r7,1007510 <_calloc_r+0x5c>
 1007554:	89000604 	addi	r4,r17,24
 1007558:	88000415 	stw	zero,16(r17)
 100755c:	88000515 	stw	zero,20(r17)
 1007560:	003feb06 	br	1007510 <_calloc_r+0x5c>
 1007564:	10059c80 	call	10059c8 <memset>
 1007568:	8805883a 	mov	r2,r17
 100756c:	dfc00117 	ldw	ra,4(sp)
 1007570:	dc400017 	ldw	r17,0(sp)
 1007574:	dec00204 	addi	sp,sp,8
 1007578:	f800283a 	ret

0100757c <_close_r>:
 100757c:	defffd04 	addi	sp,sp,-12
 1007580:	dc000015 	stw	r16,0(sp)
 1007584:	04004074 	movhi	r16,257
 1007588:	84035704 	addi	r16,r16,3420
 100758c:	dc400115 	stw	r17,4(sp)
 1007590:	80000015 	stw	zero,0(r16)
 1007594:	2023883a 	mov	r17,r4
 1007598:	2809883a 	mov	r4,r5
 100759c:	dfc00215 	stw	ra,8(sp)
 10075a0:	1009f180 	call	1009f18 <close>
 10075a4:	1007883a 	mov	r3,r2
 10075a8:	00bfffc4 	movi	r2,-1
 10075ac:	18800626 	beq	r3,r2,10075c8 <_close_r+0x4c>
 10075b0:	1805883a 	mov	r2,r3
 10075b4:	dfc00217 	ldw	ra,8(sp)
 10075b8:	dc400117 	ldw	r17,4(sp)
 10075bc:	dc000017 	ldw	r16,0(sp)
 10075c0:	dec00304 	addi	sp,sp,12
 10075c4:	f800283a 	ret
 10075c8:	80800017 	ldw	r2,0(r16)
 10075cc:	103ff826 	beq	r2,zero,10075b0 <_close_r+0x34>
 10075d0:	88800015 	stw	r2,0(r17)
 10075d4:	1805883a 	mov	r2,r3
 10075d8:	dfc00217 	ldw	ra,8(sp)
 10075dc:	dc400117 	ldw	r17,4(sp)
 10075e0:	dc000017 	ldw	r16,0(sp)
 10075e4:	dec00304 	addi	sp,sp,12
 10075e8:	f800283a 	ret

010075ec <_fclose_r>:
 10075ec:	defffc04 	addi	sp,sp,-16
 10075f0:	dc400115 	stw	r17,4(sp)
 10075f4:	dc000015 	stw	r16,0(sp)
 10075f8:	dfc00315 	stw	ra,12(sp)
 10075fc:	dc800215 	stw	r18,8(sp)
 1007600:	2821883a 	mov	r16,r5
 1007604:	2023883a 	mov	r17,r4
 1007608:	28002926 	beq	r5,zero,10076b0 <_fclose_r+0xc4>
 100760c:	10040d40 	call	10040d4 <__sfp_lock_acquire>
 1007610:	88000226 	beq	r17,zero,100761c <_fclose_r+0x30>
 1007614:	88800e17 	ldw	r2,56(r17)
 1007618:	10002d26 	beq	r2,zero,10076d0 <_fclose_r+0xe4>
 100761c:	8080030f 	ldh	r2,12(r16)
 1007620:	10002226 	beq	r2,zero,10076ac <_fclose_r+0xc0>
 1007624:	8809883a 	mov	r4,r17
 1007628:	800b883a 	mov	r5,r16
 100762c:	1003e4c0 	call	1003e4c <_fflush_r>
 1007630:	1025883a 	mov	r18,r2
 1007634:	80800b17 	ldw	r2,44(r16)
 1007638:	10000426 	beq	r2,zero,100764c <_fclose_r+0x60>
 100763c:	81400717 	ldw	r5,28(r16)
 1007640:	8809883a 	mov	r4,r17
 1007644:	103ee83a 	callr	r2
 1007648:	10002a16 	blt	r2,zero,10076f4 <_fclose_r+0x108>
 100764c:	8080030b 	ldhu	r2,12(r16)
 1007650:	1080200c 	andi	r2,r2,128
 1007654:	1000231e 	bne	r2,zero,10076e4 <_fclose_r+0xf8>
 1007658:	81400c17 	ldw	r5,48(r16)
 100765c:	28000526 	beq	r5,zero,1007674 <_fclose_r+0x88>
 1007660:	80801004 	addi	r2,r16,64
 1007664:	28800226 	beq	r5,r2,1007670 <_fclose_r+0x84>
 1007668:	8809883a 	mov	r4,r17
 100766c:	100449c0 	call	100449c <_free_r>
 1007670:	80000c15 	stw	zero,48(r16)
 1007674:	81401117 	ldw	r5,68(r16)
 1007678:	28000326 	beq	r5,zero,1007688 <_fclose_r+0x9c>
 100767c:	8809883a 	mov	r4,r17
 1007680:	100449c0 	call	100449c <_free_r>
 1007684:	80001115 	stw	zero,68(r16)
 1007688:	8000030d 	sth	zero,12(r16)
 100768c:	10040d80 	call	10040d8 <__sfp_lock_release>
 1007690:	9005883a 	mov	r2,r18
 1007694:	dfc00317 	ldw	ra,12(sp)
 1007698:	dc800217 	ldw	r18,8(sp)
 100769c:	dc400117 	ldw	r17,4(sp)
 10076a0:	dc000017 	ldw	r16,0(sp)
 10076a4:	dec00404 	addi	sp,sp,16
 10076a8:	f800283a 	ret
 10076ac:	10040d80 	call	10040d8 <__sfp_lock_release>
 10076b0:	0025883a 	mov	r18,zero
 10076b4:	9005883a 	mov	r2,r18
 10076b8:	dfc00317 	ldw	ra,12(sp)
 10076bc:	dc800217 	ldw	r18,8(sp)
 10076c0:	dc400117 	ldw	r17,4(sp)
 10076c4:	dc000017 	ldw	r16,0(sp)
 10076c8:	dec00404 	addi	sp,sp,16
 10076cc:	f800283a 	ret
 10076d0:	8809883a 	mov	r4,r17
 10076d4:	10040e40 	call	10040e4 <__sinit>
 10076d8:	8080030f 	ldh	r2,12(r16)
 10076dc:	103fd11e 	bne	r2,zero,1007624 <_fclose_r+0x38>
 10076e0:	003ff206 	br	10076ac <_fclose_r+0xc0>
 10076e4:	81400417 	ldw	r5,16(r16)
 10076e8:	8809883a 	mov	r4,r17
 10076ec:	100449c0 	call	100449c <_free_r>
 10076f0:	003fd906 	br	1007658 <_fclose_r+0x6c>
 10076f4:	04bfffc4 	movi	r18,-1
 10076f8:	003fd406 	br	100764c <_fclose_r+0x60>

010076fc <fclose>:
 10076fc:	00804074 	movhi	r2,257
 1007700:	10bc9f04 	addi	r2,r2,-3460
 1007704:	200b883a 	mov	r5,r4
 1007708:	11000017 	ldw	r4,0(r2)
 100770c:	10075ec1 	jmpi	10075ec <_fclose_r>

01007710 <_fstat_r>:
 1007710:	defffd04 	addi	sp,sp,-12
 1007714:	dc000015 	stw	r16,0(sp)
 1007718:	04004074 	movhi	r16,257
 100771c:	84035704 	addi	r16,r16,3420
 1007720:	dc400115 	stw	r17,4(sp)
 1007724:	80000015 	stw	zero,0(r16)
 1007728:	2023883a 	mov	r17,r4
 100772c:	2809883a 	mov	r4,r5
 1007730:	300b883a 	mov	r5,r6
 1007734:	dfc00215 	stw	ra,8(sp)
 1007738:	100a0a40 	call	100a0a4 <fstat>
 100773c:	1007883a 	mov	r3,r2
 1007740:	00bfffc4 	movi	r2,-1
 1007744:	18800626 	beq	r3,r2,1007760 <_fstat_r+0x50>
 1007748:	1805883a 	mov	r2,r3
 100774c:	dfc00217 	ldw	ra,8(sp)
 1007750:	dc400117 	ldw	r17,4(sp)
 1007754:	dc000017 	ldw	r16,0(sp)
 1007758:	dec00304 	addi	sp,sp,12
 100775c:	f800283a 	ret
 1007760:	80800017 	ldw	r2,0(r16)
 1007764:	103ff826 	beq	r2,zero,1007748 <_fstat_r+0x38>
 1007768:	88800015 	stw	r2,0(r17)
 100776c:	1805883a 	mov	r2,r3
 1007770:	dfc00217 	ldw	ra,8(sp)
 1007774:	dc400117 	ldw	r17,4(sp)
 1007778:	dc000017 	ldw	r16,0(sp)
 100777c:	dec00304 	addi	sp,sp,12
 1007780:	f800283a 	ret

01007784 <_isatty_r>:
 1007784:	defffd04 	addi	sp,sp,-12
 1007788:	dc000015 	stw	r16,0(sp)
 100778c:	04004074 	movhi	r16,257
 1007790:	84035704 	addi	r16,r16,3420
 1007794:	dc400115 	stw	r17,4(sp)
 1007798:	80000015 	stw	zero,0(r16)
 100779c:	2023883a 	mov	r17,r4
 10077a0:	2809883a 	mov	r4,r5
 10077a4:	dfc00215 	stw	ra,8(sp)
 10077a8:	100a1dc0 	call	100a1dc <isatty>
 10077ac:	1007883a 	mov	r3,r2
 10077b0:	00bfffc4 	movi	r2,-1
 10077b4:	18800626 	beq	r3,r2,10077d0 <_isatty_r+0x4c>
 10077b8:	1805883a 	mov	r2,r3
 10077bc:	dfc00217 	ldw	ra,8(sp)
 10077c0:	dc400117 	ldw	r17,4(sp)
 10077c4:	dc000017 	ldw	r16,0(sp)
 10077c8:	dec00304 	addi	sp,sp,12
 10077cc:	f800283a 	ret
 10077d0:	80800017 	ldw	r2,0(r16)
 10077d4:	103ff826 	beq	r2,zero,10077b8 <_isatty_r+0x34>
 10077d8:	88800015 	stw	r2,0(r17)
 10077dc:	1805883a 	mov	r2,r3
 10077e0:	dfc00217 	ldw	ra,8(sp)
 10077e4:	dc400117 	ldw	r17,4(sp)
 10077e8:	dc000017 	ldw	r16,0(sp)
 10077ec:	dec00304 	addi	sp,sp,12
 10077f0:	f800283a 	ret

010077f4 <_lseek_r>:
 10077f4:	defffd04 	addi	sp,sp,-12
 10077f8:	dc000015 	stw	r16,0(sp)
 10077fc:	04004074 	movhi	r16,257
 1007800:	84035704 	addi	r16,r16,3420
 1007804:	dc400115 	stw	r17,4(sp)
 1007808:	80000015 	stw	zero,0(r16)
 100780c:	2023883a 	mov	r17,r4
 1007810:	2809883a 	mov	r4,r5
 1007814:	300b883a 	mov	r5,r6
 1007818:	380d883a 	mov	r6,r7
 100781c:	dfc00215 	stw	ra,8(sp)
 1007820:	100a3ec0 	call	100a3ec <lseek>
 1007824:	1007883a 	mov	r3,r2
 1007828:	00bfffc4 	movi	r2,-1
 100782c:	18800626 	beq	r3,r2,1007848 <_lseek_r+0x54>
 1007830:	1805883a 	mov	r2,r3
 1007834:	dfc00217 	ldw	ra,8(sp)
 1007838:	dc400117 	ldw	r17,4(sp)
 100783c:	dc000017 	ldw	r16,0(sp)
 1007840:	dec00304 	addi	sp,sp,12
 1007844:	f800283a 	ret
 1007848:	80800017 	ldw	r2,0(r16)
 100784c:	103ff826 	beq	r2,zero,1007830 <_lseek_r+0x3c>
 1007850:	88800015 	stw	r2,0(r17)
 1007854:	1805883a 	mov	r2,r3
 1007858:	dfc00217 	ldw	ra,8(sp)
 100785c:	dc400117 	ldw	r17,4(sp)
 1007860:	dc000017 	ldw	r16,0(sp)
 1007864:	dec00304 	addi	sp,sp,12
 1007868:	f800283a 	ret

0100786c <_read_r>:
 100786c:	defffd04 	addi	sp,sp,-12
 1007870:	dc000015 	stw	r16,0(sp)
 1007874:	04004074 	movhi	r16,257
 1007878:	84035704 	addi	r16,r16,3420
 100787c:	dc400115 	stw	r17,4(sp)
 1007880:	80000015 	stw	zero,0(r16)
 1007884:	2023883a 	mov	r17,r4
 1007888:	2809883a 	mov	r4,r5
 100788c:	300b883a 	mov	r5,r6
 1007890:	380d883a 	mov	r6,r7
 1007894:	dfc00215 	stw	ra,8(sp)
 1007898:	100a8840 	call	100a884 <read>
 100789c:	1007883a 	mov	r3,r2
 10078a0:	00bfffc4 	movi	r2,-1
 10078a4:	18800626 	beq	r3,r2,10078c0 <_read_r+0x54>
 10078a8:	1805883a 	mov	r2,r3
 10078ac:	dfc00217 	ldw	ra,8(sp)
 10078b0:	dc400117 	ldw	r17,4(sp)
 10078b4:	dc000017 	ldw	r16,0(sp)
 10078b8:	dec00304 	addi	sp,sp,12
 10078bc:	f800283a 	ret
 10078c0:	80800017 	ldw	r2,0(r16)
 10078c4:	103ff826 	beq	r2,zero,10078a8 <_read_r+0x3c>
 10078c8:	88800015 	stw	r2,0(r17)
 10078cc:	1805883a 	mov	r2,r3
 10078d0:	dfc00217 	ldw	ra,8(sp)
 10078d4:	dc400117 	ldw	r17,4(sp)
 10078d8:	dc000017 	ldw	r16,0(sp)
 10078dc:	dec00304 	addi	sp,sp,12
 10078e0:	f800283a 	ret

010078e4 <__udivdi3>:
 10078e4:	defff104 	addi	sp,sp,-60
 10078e8:	0015883a 	mov	r10,zero
 10078ec:	2005883a 	mov	r2,r4
 10078f0:	3011883a 	mov	r8,r6
 10078f4:	df000d15 	stw	fp,52(sp)
 10078f8:	dd400a15 	stw	r21,40(sp)
 10078fc:	dcc00815 	stw	r19,32(sp)
 1007900:	dfc00e15 	stw	ra,56(sp)
 1007904:	ddc00c15 	stw	r23,48(sp)
 1007908:	dd800b15 	stw	r22,44(sp)
 100790c:	dd000915 	stw	r20,36(sp)
 1007910:	dc800715 	stw	r18,28(sp)
 1007914:	dc400615 	stw	r17,24(sp)
 1007918:	dc000515 	stw	r16,20(sp)
 100791c:	da800315 	stw	r10,12(sp)
 1007920:	4027883a 	mov	r19,r8
 1007924:	1039883a 	mov	fp,r2
 1007928:	282b883a 	mov	r21,r5
 100792c:	da800415 	stw	r10,16(sp)
 1007930:	3800401e 	bne	r7,zero,1007a34 <__udivdi3+0x150>
 1007934:	2a006536 	bltu	r5,r8,1007acc <__udivdi3+0x1e8>
 1007938:	4000b526 	beq	r8,zero,1007c10 <__udivdi3+0x32c>
 100793c:	00bfffd4 	movui	r2,65535
 1007940:	14c0ad36 	bltu	r2,r19,1007bf8 <__udivdi3+0x314>
 1007944:	00803fc4 	movi	r2,255
 1007948:	14c15e36 	bltu	r2,r19,1007ec4 <__udivdi3+0x5e0>
 100794c:	000b883a 	mov	r5,zero
 1007950:	0005883a 	mov	r2,zero
 1007954:	9884d83a 	srl	r2,r19,r2
 1007958:	01004074 	movhi	r4,257
 100795c:	2135bc04 	addi	r4,r4,-10512
 1007960:	01800804 	movi	r6,32
 1007964:	1105883a 	add	r2,r2,r4
 1007968:	10c00003 	ldbu	r3,0(r2)
 100796c:	28c7883a 	add	r3,r5,r3
 1007970:	30e9c83a 	sub	r20,r6,r3
 1007974:	a0010a1e 	bne	r20,zero,1007da0 <__udivdi3+0x4bc>
 1007978:	982ed43a 	srli	r23,r19,16
 100797c:	acebc83a 	sub	r21,r21,r19
 1007980:	9dbfffcc 	andi	r22,r19,65535
 1007984:	05000044 	movi	r20,1
 1007988:	a809883a 	mov	r4,r21
 100798c:	b80b883a 	mov	r5,r23
 1007990:	10098180 	call	1009818 <__udivsi3>
 1007994:	100b883a 	mov	r5,r2
 1007998:	b009883a 	mov	r4,r22
 100799c:	1021883a 	mov	r16,r2
 10079a0:	10098280 	call	1009828 <__mulsi3>
 10079a4:	a809883a 	mov	r4,r21
 10079a8:	b80b883a 	mov	r5,r23
 10079ac:	1023883a 	mov	r17,r2
 10079b0:	10098200 	call	1009820 <__umodsi3>
 10079b4:	1004943a 	slli	r2,r2,16
 10079b8:	e006d43a 	srli	r3,fp,16
 10079bc:	10c4b03a 	or	r2,r2,r3
 10079c0:	1440042e 	bgeu	r2,r17,10079d4 <__udivdi3+0xf0>
 10079c4:	14c5883a 	add	r2,r2,r19
 10079c8:	843fffc4 	addi	r16,r16,-1
 10079cc:	14c00136 	bltu	r2,r19,10079d4 <__udivdi3+0xf0>
 10079d0:	14415c36 	bltu	r2,r17,1007f44 <__udivdi3+0x660>
 10079d4:	1463c83a 	sub	r17,r2,r17
 10079d8:	8809883a 	mov	r4,r17
 10079dc:	b80b883a 	mov	r5,r23
 10079e0:	10098180 	call	1009818 <__udivsi3>
 10079e4:	100b883a 	mov	r5,r2
 10079e8:	b009883a 	mov	r4,r22
 10079ec:	102b883a 	mov	r21,r2
 10079f0:	10098280 	call	1009828 <__mulsi3>
 10079f4:	8809883a 	mov	r4,r17
 10079f8:	b80b883a 	mov	r5,r23
 10079fc:	1025883a 	mov	r18,r2
 1007a00:	10098200 	call	1009820 <__umodsi3>
 1007a04:	1004943a 	slli	r2,r2,16
 1007a08:	e0ffffcc 	andi	r3,fp,65535
 1007a0c:	10c4b03a 	or	r2,r2,r3
 1007a10:	1480042e 	bgeu	r2,r18,1007a24 <__udivdi3+0x140>
 1007a14:	9885883a 	add	r2,r19,r2
 1007a18:	ad7fffc4 	addi	r21,r21,-1
 1007a1c:	14c00136 	bltu	r2,r19,1007a24 <__udivdi3+0x140>
 1007a20:	14813c36 	bltu	r2,r18,1007f14 <__udivdi3+0x630>
 1007a24:	8004943a 	slli	r2,r16,16
 1007a28:	a009883a 	mov	r4,r20
 1007a2c:	a884b03a 	or	r2,r21,r2
 1007a30:	00001506 	br	1007a88 <__udivdi3+0x1a4>
 1007a34:	380d883a 	mov	r6,r7
 1007a38:	29c06c36 	bltu	r5,r7,1007bec <__udivdi3+0x308>
 1007a3c:	00bfffd4 	movui	r2,65535
 1007a40:	11c06436 	bltu	r2,r7,1007bd4 <__udivdi3+0x2f0>
 1007a44:	00803fc4 	movi	r2,255
 1007a48:	11c11836 	bltu	r2,r7,1007eac <__udivdi3+0x5c8>
 1007a4c:	000b883a 	mov	r5,zero
 1007a50:	0005883a 	mov	r2,zero
 1007a54:	3084d83a 	srl	r2,r6,r2
 1007a58:	01004074 	movhi	r4,257
 1007a5c:	2135bc04 	addi	r4,r4,-10512
 1007a60:	01c00804 	movi	r7,32
 1007a64:	1105883a 	add	r2,r2,r4
 1007a68:	10c00003 	ldbu	r3,0(r2)
 1007a6c:	28c7883a 	add	r3,r5,r3
 1007a70:	38edc83a 	sub	r22,r7,r3
 1007a74:	b000731e 	bne	r22,zero,1007c44 <__udivdi3+0x360>
 1007a78:	35400136 	bltu	r6,r21,1007a80 <__udivdi3+0x19c>
 1007a7c:	e4c05b36 	bltu	fp,r19,1007bec <__udivdi3+0x308>
 1007a80:	00800044 	movi	r2,1
 1007a84:	0009883a 	mov	r4,zero
 1007a88:	d8800315 	stw	r2,12(sp)
 1007a8c:	d9400317 	ldw	r5,12(sp)
 1007a90:	d9000415 	stw	r4,16(sp)
 1007a94:	2007883a 	mov	r3,r4
 1007a98:	2805883a 	mov	r2,r5
 1007a9c:	dfc00e17 	ldw	ra,56(sp)
 1007aa0:	df000d17 	ldw	fp,52(sp)
 1007aa4:	ddc00c17 	ldw	r23,48(sp)
 1007aa8:	dd800b17 	ldw	r22,44(sp)
 1007aac:	dd400a17 	ldw	r21,40(sp)
 1007ab0:	dd000917 	ldw	r20,36(sp)
 1007ab4:	dcc00817 	ldw	r19,32(sp)
 1007ab8:	dc800717 	ldw	r18,28(sp)
 1007abc:	dc400617 	ldw	r17,24(sp)
 1007ac0:	dc000517 	ldw	r16,20(sp)
 1007ac4:	dec00f04 	addi	sp,sp,60
 1007ac8:	f800283a 	ret
 1007acc:	00bfffd4 	movui	r2,65535
 1007ad0:	12005636 	bltu	r2,r8,1007c2c <__udivdi3+0x348>
 1007ad4:	00803fc4 	movi	r2,255
 1007ad8:	12010036 	bltu	r2,r8,1007edc <__udivdi3+0x5f8>
 1007adc:	000b883a 	mov	r5,zero
 1007ae0:	0005883a 	mov	r2,zero
 1007ae4:	9884d83a 	srl	r2,r19,r2
 1007ae8:	01004074 	movhi	r4,257
 1007aec:	2135bc04 	addi	r4,r4,-10512
 1007af0:	01800804 	movi	r6,32
 1007af4:	1105883a 	add	r2,r2,r4
 1007af8:	10c00003 	ldbu	r3,0(r2)
 1007afc:	28c7883a 	add	r3,r5,r3
 1007b00:	30cbc83a 	sub	r5,r6,r3
 1007b04:	28000626 	beq	r5,zero,1007b20 <__udivdi3+0x23c>
 1007b08:	3145c83a 	sub	r2,r6,r5
 1007b0c:	e084d83a 	srl	r2,fp,r2
 1007b10:	a946983a 	sll	r3,r21,r5
 1007b14:	e178983a 	sll	fp,fp,r5
 1007b18:	9966983a 	sll	r19,r19,r5
 1007b1c:	18aab03a 	or	r21,r3,r2
 1007b20:	982ed43a 	srli	r23,r19,16
 1007b24:	a809883a 	mov	r4,r21
 1007b28:	9cbfffcc 	andi	r18,r19,65535
 1007b2c:	b80b883a 	mov	r5,r23
 1007b30:	10098180 	call	1009818 <__udivsi3>
 1007b34:	100b883a 	mov	r5,r2
 1007b38:	9009883a 	mov	r4,r18
 1007b3c:	1021883a 	mov	r16,r2
 1007b40:	10098280 	call	1009828 <__mulsi3>
 1007b44:	a809883a 	mov	r4,r21
 1007b48:	b80b883a 	mov	r5,r23
 1007b4c:	1023883a 	mov	r17,r2
 1007b50:	10098200 	call	1009820 <__umodsi3>
 1007b54:	1004943a 	slli	r2,r2,16
 1007b58:	e006d43a 	srli	r3,fp,16
 1007b5c:	10c4b03a 	or	r2,r2,r3
 1007b60:	1440042e 	bgeu	r2,r17,1007b74 <__udivdi3+0x290>
 1007b64:	14c5883a 	add	r2,r2,r19
 1007b68:	843fffc4 	addi	r16,r16,-1
 1007b6c:	14c00136 	bltu	r2,r19,1007b74 <__udivdi3+0x290>
 1007b70:	1440ea36 	bltu	r2,r17,1007f1c <__udivdi3+0x638>
 1007b74:	1463c83a 	sub	r17,r2,r17
 1007b78:	8809883a 	mov	r4,r17
 1007b7c:	b80b883a 	mov	r5,r23
 1007b80:	10098180 	call	1009818 <__udivsi3>
 1007b84:	100b883a 	mov	r5,r2
 1007b88:	9009883a 	mov	r4,r18
 1007b8c:	102b883a 	mov	r21,r2
 1007b90:	10098280 	call	1009828 <__mulsi3>
 1007b94:	8809883a 	mov	r4,r17
 1007b98:	b80b883a 	mov	r5,r23
 1007b9c:	1025883a 	mov	r18,r2
 1007ba0:	10098200 	call	1009820 <__umodsi3>
 1007ba4:	1004943a 	slli	r2,r2,16
 1007ba8:	e0ffffcc 	andi	r3,fp,65535
 1007bac:	10c4b03a 	or	r2,r2,r3
 1007bb0:	1480042e 	bgeu	r2,r18,1007bc4 <__udivdi3+0x2e0>
 1007bb4:	9885883a 	add	r2,r19,r2
 1007bb8:	ad7fffc4 	addi	r21,r21,-1
 1007bbc:	14c00136 	bltu	r2,r19,1007bc4 <__udivdi3+0x2e0>
 1007bc0:	1480d936 	bltu	r2,r18,1007f28 <__udivdi3+0x644>
 1007bc4:	8004943a 	slli	r2,r16,16
 1007bc8:	0009883a 	mov	r4,zero
 1007bcc:	a884b03a 	or	r2,r21,r2
 1007bd0:	003fad06 	br	1007a88 <__udivdi3+0x1a4>
 1007bd4:	00804034 	movhi	r2,256
 1007bd8:	10bfffc4 	addi	r2,r2,-1
 1007bdc:	11c0b636 	bltu	r2,r7,1007eb8 <__udivdi3+0x5d4>
 1007be0:	01400404 	movi	r5,16
 1007be4:	2805883a 	mov	r2,r5
 1007be8:	003f9a06 	br	1007a54 <__udivdi3+0x170>
 1007bec:	0005883a 	mov	r2,zero
 1007bf0:	0009883a 	mov	r4,zero
 1007bf4:	003fa406 	br	1007a88 <__udivdi3+0x1a4>
 1007bf8:	00804034 	movhi	r2,256
 1007bfc:	10bfffc4 	addi	r2,r2,-1
 1007c00:	14c0b336 	bltu	r2,r19,1007ed0 <__udivdi3+0x5ec>
 1007c04:	01400404 	movi	r5,16
 1007c08:	2805883a 	mov	r2,r5
 1007c0c:	003f5106 	br	1007954 <__udivdi3+0x70>
 1007c10:	01000044 	movi	r4,1
 1007c14:	000b883a 	mov	r5,zero
 1007c18:	10098180 	call	1009818 <__udivsi3>
 1007c1c:	1027883a 	mov	r19,r2
 1007c20:	00bfffd4 	movui	r2,65535
 1007c24:	14fff436 	bltu	r2,r19,1007bf8 <__udivdi3+0x314>
 1007c28:	003f4606 	br	1007944 <__udivdi3+0x60>
 1007c2c:	00804034 	movhi	r2,256
 1007c30:	10bfffc4 	addi	r2,r2,-1
 1007c34:	1200ac36 	bltu	r2,r8,1007ee8 <__udivdi3+0x604>
 1007c38:	01400404 	movi	r5,16
 1007c3c:	2805883a 	mov	r2,r5
 1007c40:	003fa806 	br	1007ae4 <__udivdi3+0x200>
 1007c44:	3d85c83a 	sub	r2,r7,r22
 1007c48:	3588983a 	sll	r4,r6,r22
 1007c4c:	9886d83a 	srl	r3,r19,r2
 1007c50:	a8a2d83a 	srl	r17,r21,r2
 1007c54:	e084d83a 	srl	r2,fp,r2
 1007c58:	20eeb03a 	or	r23,r4,r3
 1007c5c:	b824d43a 	srli	r18,r23,16
 1007c60:	ad86983a 	sll	r3,r21,r22
 1007c64:	8809883a 	mov	r4,r17
 1007c68:	900b883a 	mov	r5,r18
 1007c6c:	1886b03a 	or	r3,r3,r2
 1007c70:	d8c00115 	stw	r3,4(sp)
 1007c74:	bc3fffcc 	andi	r16,r23,65535
 1007c78:	10098180 	call	1009818 <__udivsi3>
 1007c7c:	100b883a 	mov	r5,r2
 1007c80:	8009883a 	mov	r4,r16
 1007c84:	1029883a 	mov	r20,r2
 1007c88:	10098280 	call	1009828 <__mulsi3>
 1007c8c:	900b883a 	mov	r5,r18
 1007c90:	8809883a 	mov	r4,r17
 1007c94:	102b883a 	mov	r21,r2
 1007c98:	10098200 	call	1009820 <__umodsi3>
 1007c9c:	d9400117 	ldw	r5,4(sp)
 1007ca0:	1004943a 	slli	r2,r2,16
 1007ca4:	9da6983a 	sll	r19,r19,r22
 1007ca8:	2806d43a 	srli	r3,r5,16
 1007cac:	10c4b03a 	or	r2,r2,r3
 1007cb0:	1540032e 	bgeu	r2,r21,1007cc0 <__udivdi3+0x3dc>
 1007cb4:	15c5883a 	add	r2,r2,r23
 1007cb8:	a53fffc4 	addi	r20,r20,-1
 1007cbc:	15c0912e 	bgeu	r2,r23,1007f04 <__udivdi3+0x620>
 1007cc0:	1563c83a 	sub	r17,r2,r21
 1007cc4:	8809883a 	mov	r4,r17
 1007cc8:	900b883a 	mov	r5,r18
 1007ccc:	10098180 	call	1009818 <__udivsi3>
 1007cd0:	100b883a 	mov	r5,r2
 1007cd4:	8009883a 	mov	r4,r16
 1007cd8:	102b883a 	mov	r21,r2
 1007cdc:	10098280 	call	1009828 <__mulsi3>
 1007ce0:	8809883a 	mov	r4,r17
 1007ce4:	900b883a 	mov	r5,r18
 1007ce8:	1021883a 	mov	r16,r2
 1007cec:	10098200 	call	1009820 <__umodsi3>
 1007cf0:	da800117 	ldw	r10,4(sp)
 1007cf4:	1004943a 	slli	r2,r2,16
 1007cf8:	50ffffcc 	andi	r3,r10,65535
 1007cfc:	10c6b03a 	or	r3,r2,r3
 1007d00:	1c00032e 	bgeu	r3,r16,1007d10 <__udivdi3+0x42c>
 1007d04:	1dc7883a 	add	r3,r3,r23
 1007d08:	ad7fffc4 	addi	r21,r21,-1
 1007d0c:	1dc0792e 	bgeu	r3,r23,1007ef4 <__udivdi3+0x610>
 1007d10:	a004943a 	slli	r2,r20,16
 1007d14:	982ed43a 	srli	r23,r19,16
 1007d18:	9cffffcc 	andi	r19,r19,65535
 1007d1c:	a8a4b03a 	or	r18,r21,r2
 1007d20:	947fffcc 	andi	r17,r18,65535
 1007d24:	902ad43a 	srli	r21,r18,16
 1007d28:	8809883a 	mov	r4,r17
 1007d2c:	980b883a 	mov	r5,r19
 1007d30:	1c21c83a 	sub	r16,r3,r16
 1007d34:	10098280 	call	1009828 <__mulsi3>
 1007d38:	8809883a 	mov	r4,r17
 1007d3c:	b80b883a 	mov	r5,r23
 1007d40:	1029883a 	mov	r20,r2
 1007d44:	10098280 	call	1009828 <__mulsi3>
 1007d48:	980b883a 	mov	r5,r19
 1007d4c:	a809883a 	mov	r4,r21
 1007d50:	1023883a 	mov	r17,r2
 1007d54:	10098280 	call	1009828 <__mulsi3>
 1007d58:	a809883a 	mov	r4,r21
 1007d5c:	b80b883a 	mov	r5,r23
 1007d60:	1027883a 	mov	r19,r2
 1007d64:	10098280 	call	1009828 <__mulsi3>
 1007d68:	1009883a 	mov	r4,r2
 1007d6c:	a004d43a 	srli	r2,r20,16
 1007d70:	8ce3883a 	add	r17,r17,r19
 1007d74:	1447883a 	add	r3,r2,r17
 1007d78:	1cc0022e 	bgeu	r3,r19,1007d84 <__udivdi3+0x4a0>
 1007d7c:	00800074 	movhi	r2,1
 1007d80:	2089883a 	add	r4,r4,r2
 1007d84:	1804d43a 	srli	r2,r3,16
 1007d88:	2085883a 	add	r2,r4,r2
 1007d8c:	80804436 	bltu	r16,r2,1007ea0 <__udivdi3+0x5bc>
 1007d90:	80803e26 	beq	r16,r2,1007e8c <__udivdi3+0x5a8>
 1007d94:	9005883a 	mov	r2,r18
 1007d98:	0009883a 	mov	r4,zero
 1007d9c:	003f3a06 	br	1007a88 <__udivdi3+0x1a4>
 1007da0:	9d26983a 	sll	r19,r19,r20
 1007da4:	3505c83a 	sub	r2,r6,r20
 1007da8:	a8a2d83a 	srl	r17,r21,r2
 1007dac:	982ed43a 	srli	r23,r19,16
 1007db0:	e084d83a 	srl	r2,fp,r2
 1007db4:	ad06983a 	sll	r3,r21,r20
 1007db8:	8809883a 	mov	r4,r17
 1007dbc:	b80b883a 	mov	r5,r23
 1007dc0:	1886b03a 	or	r3,r3,r2
 1007dc4:	d8c00015 	stw	r3,0(sp)
 1007dc8:	9dbfffcc 	andi	r22,r19,65535
 1007dcc:	10098180 	call	1009818 <__udivsi3>
 1007dd0:	100b883a 	mov	r5,r2
 1007dd4:	b009883a 	mov	r4,r22
 1007dd8:	d8800215 	stw	r2,8(sp)
 1007ddc:	10098280 	call	1009828 <__mulsi3>
 1007de0:	8809883a 	mov	r4,r17
 1007de4:	b80b883a 	mov	r5,r23
 1007de8:	102b883a 	mov	r21,r2
 1007dec:	10098200 	call	1009820 <__umodsi3>
 1007df0:	d9000017 	ldw	r4,0(sp)
 1007df4:	1004943a 	slli	r2,r2,16
 1007df8:	2006d43a 	srli	r3,r4,16
 1007dfc:	10c4b03a 	or	r2,r2,r3
 1007e00:	1540052e 	bgeu	r2,r21,1007e18 <__udivdi3+0x534>
 1007e04:	d9400217 	ldw	r5,8(sp)
 1007e08:	14c5883a 	add	r2,r2,r19
 1007e0c:	297fffc4 	addi	r5,r5,-1
 1007e10:	d9400215 	stw	r5,8(sp)
 1007e14:	14c0462e 	bgeu	r2,r19,1007f30 <__udivdi3+0x64c>
 1007e18:	1563c83a 	sub	r17,r2,r21
 1007e1c:	8809883a 	mov	r4,r17
 1007e20:	b80b883a 	mov	r5,r23
 1007e24:	10098180 	call	1009818 <__udivsi3>
 1007e28:	100b883a 	mov	r5,r2
 1007e2c:	b009883a 	mov	r4,r22
 1007e30:	1025883a 	mov	r18,r2
 1007e34:	10098280 	call	1009828 <__mulsi3>
 1007e38:	8809883a 	mov	r4,r17
 1007e3c:	b80b883a 	mov	r5,r23
 1007e40:	1021883a 	mov	r16,r2
 1007e44:	10098200 	call	1009820 <__umodsi3>
 1007e48:	da800017 	ldw	r10,0(sp)
 1007e4c:	1004943a 	slli	r2,r2,16
 1007e50:	50ffffcc 	andi	r3,r10,65535
 1007e54:	10c6b03a 	or	r3,r2,r3
 1007e58:	1c00062e 	bgeu	r3,r16,1007e74 <__udivdi3+0x590>
 1007e5c:	1cc7883a 	add	r3,r3,r19
 1007e60:	94bfffc4 	addi	r18,r18,-1
 1007e64:	1cc00336 	bltu	r3,r19,1007e74 <__udivdi3+0x590>
 1007e68:	1c00022e 	bgeu	r3,r16,1007e74 <__udivdi3+0x590>
 1007e6c:	94bfffc4 	addi	r18,r18,-1
 1007e70:	1cc7883a 	add	r3,r3,r19
 1007e74:	d9000217 	ldw	r4,8(sp)
 1007e78:	e538983a 	sll	fp,fp,r20
 1007e7c:	1c2bc83a 	sub	r21,r3,r16
 1007e80:	2004943a 	slli	r2,r4,16
 1007e84:	90a8b03a 	or	r20,r18,r2
 1007e88:	003ebf06 	br	1007988 <__udivdi3+0xa4>
 1007e8c:	1804943a 	slli	r2,r3,16
 1007e90:	e588983a 	sll	r4,fp,r22
 1007e94:	a0ffffcc 	andi	r3,r20,65535
 1007e98:	10c5883a 	add	r2,r2,r3
 1007e9c:	20bfbd2e 	bgeu	r4,r2,1007d94 <__udivdi3+0x4b0>
 1007ea0:	90bfffc4 	addi	r2,r18,-1
 1007ea4:	0009883a 	mov	r4,zero
 1007ea8:	003ef706 	br	1007a88 <__udivdi3+0x1a4>
 1007eac:	01400204 	movi	r5,8
 1007eb0:	2805883a 	mov	r2,r5
 1007eb4:	003ee706 	br	1007a54 <__udivdi3+0x170>
 1007eb8:	01400604 	movi	r5,24
 1007ebc:	2805883a 	mov	r2,r5
 1007ec0:	003ee406 	br	1007a54 <__udivdi3+0x170>
 1007ec4:	01400204 	movi	r5,8
 1007ec8:	2805883a 	mov	r2,r5
 1007ecc:	003ea106 	br	1007954 <__udivdi3+0x70>
 1007ed0:	01400604 	movi	r5,24
 1007ed4:	2805883a 	mov	r2,r5
 1007ed8:	003e9e06 	br	1007954 <__udivdi3+0x70>
 1007edc:	01400204 	movi	r5,8
 1007ee0:	2805883a 	mov	r2,r5
 1007ee4:	003eff06 	br	1007ae4 <__udivdi3+0x200>
 1007ee8:	01400604 	movi	r5,24
 1007eec:	2805883a 	mov	r2,r5
 1007ef0:	003efc06 	br	1007ae4 <__udivdi3+0x200>
 1007ef4:	1c3f862e 	bgeu	r3,r16,1007d10 <__udivdi3+0x42c>
 1007ef8:	1dc7883a 	add	r3,r3,r23
 1007efc:	ad7fffc4 	addi	r21,r21,-1
 1007f00:	003f8306 	br	1007d10 <__udivdi3+0x42c>
 1007f04:	157f6e2e 	bgeu	r2,r21,1007cc0 <__udivdi3+0x3dc>
 1007f08:	a53fffc4 	addi	r20,r20,-1
 1007f0c:	15c5883a 	add	r2,r2,r23
 1007f10:	003f6b06 	br	1007cc0 <__udivdi3+0x3dc>
 1007f14:	ad7fffc4 	addi	r21,r21,-1
 1007f18:	003ec206 	br	1007a24 <__udivdi3+0x140>
 1007f1c:	843fffc4 	addi	r16,r16,-1
 1007f20:	14c5883a 	add	r2,r2,r19
 1007f24:	003f1306 	br	1007b74 <__udivdi3+0x290>
 1007f28:	ad7fffc4 	addi	r21,r21,-1
 1007f2c:	003f2506 	br	1007bc4 <__udivdi3+0x2e0>
 1007f30:	157fb92e 	bgeu	r2,r21,1007e18 <__udivdi3+0x534>
 1007f34:	297fffc4 	addi	r5,r5,-1
 1007f38:	14c5883a 	add	r2,r2,r19
 1007f3c:	d9400215 	stw	r5,8(sp)
 1007f40:	003fb506 	br	1007e18 <__udivdi3+0x534>
 1007f44:	843fffc4 	addi	r16,r16,-1
 1007f48:	14c5883a 	add	r2,r2,r19
 1007f4c:	003ea106 	br	10079d4 <__udivdi3+0xf0>

01007f50 <__umoddi3>:
 1007f50:	defff004 	addi	sp,sp,-64
 1007f54:	3011883a 	mov	r8,r6
 1007f58:	000d883a 	mov	r6,zero
 1007f5c:	dd400b15 	stw	r21,44(sp)
 1007f60:	dcc00915 	stw	r19,36(sp)
 1007f64:	dc000615 	stw	r16,24(sp)
 1007f68:	dfc00f15 	stw	ra,60(sp)
 1007f6c:	df000e15 	stw	fp,56(sp)
 1007f70:	ddc00d15 	stw	r23,52(sp)
 1007f74:	dd800c15 	stw	r22,48(sp)
 1007f78:	dd000a15 	stw	r20,40(sp)
 1007f7c:	dc800815 	stw	r18,32(sp)
 1007f80:	dc400715 	stw	r17,28(sp)
 1007f84:	2817883a 	mov	r11,r5
 1007f88:	d9800415 	stw	r6,16(sp)
 1007f8c:	4027883a 	mov	r19,r8
 1007f90:	d9800515 	stw	r6,20(sp)
 1007f94:	2021883a 	mov	r16,r4
 1007f98:	282b883a 	mov	r21,r5
 1007f9c:	38002c1e 	bne	r7,zero,1008050 <__umoddi3+0x100>
 1007fa0:	2a005636 	bltu	r5,r8,10080fc <__umoddi3+0x1ac>
 1007fa4:	40009a26 	beq	r8,zero,1008210 <__umoddi3+0x2c0>
 1007fa8:	00bfffd4 	movui	r2,65535
 1007fac:	14c09236 	bltu	r2,r19,10081f8 <__umoddi3+0x2a8>
 1007fb0:	00803fc4 	movi	r2,255
 1007fb4:	14c15c36 	bltu	r2,r19,1008528 <__umoddi3+0x5d8>
 1007fb8:	000b883a 	mov	r5,zero
 1007fbc:	0005883a 	mov	r2,zero
 1007fc0:	9884d83a 	srl	r2,r19,r2
 1007fc4:	01004074 	movhi	r4,257
 1007fc8:	2135bc04 	addi	r4,r4,-10512
 1007fcc:	01800804 	movi	r6,32
 1007fd0:	1105883a 	add	r2,r2,r4
 1007fd4:	10c00003 	ldbu	r3,0(r2)
 1007fd8:	28c7883a 	add	r3,r5,r3
 1007fdc:	30e5c83a 	sub	r18,r6,r3
 1007fe0:	9000a41e 	bne	r18,zero,1008274 <__umoddi3+0x324>
 1007fe4:	982ed43a 	srli	r23,r19,16
 1007fe8:	acebc83a 	sub	r21,r21,r19
 1007fec:	9d3fffcc 	andi	r20,r19,65535
 1007ff0:	002d883a 	mov	r22,zero
 1007ff4:	a809883a 	mov	r4,r21
 1007ff8:	b80b883a 	mov	r5,r23
 1007ffc:	10098180 	call	1009818 <__udivsi3>
 1008000:	100b883a 	mov	r5,r2
 1008004:	a009883a 	mov	r4,r20
 1008008:	10098280 	call	1009828 <__mulsi3>
 100800c:	a809883a 	mov	r4,r21
 1008010:	b80b883a 	mov	r5,r23
 1008014:	1023883a 	mov	r17,r2
 1008018:	10098200 	call	1009820 <__umodsi3>
 100801c:	1004943a 	slli	r2,r2,16
 1008020:	8006d43a 	srli	r3,r16,16
 1008024:	10c4b03a 	or	r2,r2,r3
 1008028:	1440032e 	bgeu	r2,r17,1008038 <__umoddi3+0xe8>
 100802c:	14c5883a 	add	r2,r2,r19
 1008030:	14c00136 	bltu	r2,r19,1008038 <__umoddi3+0xe8>
 1008034:	14415836 	bltu	r2,r17,1008598 <__umoddi3+0x648>
 1008038:	1463c83a 	sub	r17,r2,r17
 100803c:	8809883a 	mov	r4,r17
 1008040:	b80b883a 	mov	r5,r23
 1008044:	10098180 	call	1009818 <__udivsi3>
 1008048:	a009883a 	mov	r4,r20
 100804c:	00005306 	br	100819c <__umoddi3+0x24c>
 1008050:	380d883a 	mov	r6,r7
 1008054:	29c0132e 	bgeu	r5,r7,10080a4 <__umoddi3+0x154>
 1008058:	d9000415 	stw	r4,16(sp)
 100805c:	d9400515 	stw	r5,20(sp)
 1008060:	d9400417 	ldw	r5,16(sp)
 1008064:	5813883a 	mov	r9,r11
 1008068:	2811883a 	mov	r8,r5
 100806c:	4005883a 	mov	r2,r8
 1008070:	4807883a 	mov	r3,r9
 1008074:	dfc00f17 	ldw	ra,60(sp)
 1008078:	df000e17 	ldw	fp,56(sp)
 100807c:	ddc00d17 	ldw	r23,52(sp)
 1008080:	dd800c17 	ldw	r22,48(sp)
 1008084:	dd400b17 	ldw	r21,44(sp)
 1008088:	dd000a17 	ldw	r20,40(sp)
 100808c:	dcc00917 	ldw	r19,36(sp)
 1008090:	dc800817 	ldw	r18,32(sp)
 1008094:	dc400717 	ldw	r17,28(sp)
 1008098:	dc000617 	ldw	r16,24(sp)
 100809c:	dec01004 	addi	sp,sp,64
 10080a0:	f800283a 	ret
 10080a4:	00bfffd4 	movui	r2,65535
 10080a8:	11c06636 	bltu	r2,r7,1008244 <__umoddi3+0x2f4>
 10080ac:	00803fc4 	movi	r2,255
 10080b0:	11c12036 	bltu	r2,r7,1008534 <__umoddi3+0x5e4>
 10080b4:	000b883a 	mov	r5,zero
 10080b8:	0005883a 	mov	r2,zero
 10080bc:	3084d83a 	srl	r2,r6,r2
 10080c0:	01004074 	movhi	r4,257
 10080c4:	2135bc04 	addi	r4,r4,-10512
 10080c8:	01c00804 	movi	r7,32
 10080cc:	1105883a 	add	r2,r2,r4
 10080d0:	10c00003 	ldbu	r3,0(r2)
 10080d4:	28c7883a 	add	r3,r5,r3
 10080d8:	38e5c83a 	sub	r18,r7,r3
 10080dc:	9000941e 	bne	r18,zero,1008330 <__umoddi3+0x3e0>
 10080e0:	35405e36 	bltu	r6,r21,100825c <__umoddi3+0x30c>
 10080e4:	84c05d2e 	bgeu	r16,r19,100825c <__umoddi3+0x30c>
 10080e8:	8011883a 	mov	r8,r16
 10080ec:	a813883a 	mov	r9,r21
 10080f0:	dc000415 	stw	r16,16(sp)
 10080f4:	dd400515 	stw	r21,20(sp)
 10080f8:	003fdc06 	br	100806c <__umoddi3+0x11c>
 10080fc:	00bfffd4 	movui	r2,65535
 1008100:	12004a36 	bltu	r2,r8,100822c <__umoddi3+0x2dc>
 1008104:	00803fc4 	movi	r2,255
 1008108:	12010d36 	bltu	r2,r8,1008540 <__umoddi3+0x5f0>
 100810c:	000b883a 	mov	r5,zero
 1008110:	0005883a 	mov	r2,zero
 1008114:	9884d83a 	srl	r2,r19,r2
 1008118:	01004074 	movhi	r4,257
 100811c:	2135bc04 	addi	r4,r4,-10512
 1008120:	01800804 	movi	r6,32
 1008124:	1105883a 	add	r2,r2,r4
 1008128:	10c00003 	ldbu	r3,0(r2)
 100812c:	28c7883a 	add	r3,r5,r3
 1008130:	30c7c83a 	sub	r3,r6,r3
 1008134:	1800dc1e 	bne	r3,zero,10084a8 <__umoddi3+0x558>
 1008138:	002d883a 	mov	r22,zero
 100813c:	982ed43a 	srli	r23,r19,16
 1008140:	a809883a 	mov	r4,r21
 1008144:	9cbfffcc 	andi	r18,r19,65535
 1008148:	b80b883a 	mov	r5,r23
 100814c:	10098180 	call	1009818 <__udivsi3>
 1008150:	100b883a 	mov	r5,r2
 1008154:	9009883a 	mov	r4,r18
 1008158:	10098280 	call	1009828 <__mulsi3>
 100815c:	a809883a 	mov	r4,r21
 1008160:	b80b883a 	mov	r5,r23
 1008164:	1023883a 	mov	r17,r2
 1008168:	10098200 	call	1009820 <__umodsi3>
 100816c:	1004943a 	slli	r2,r2,16
 1008170:	8006d43a 	srli	r3,r16,16
 1008174:	10c4b03a 	or	r2,r2,r3
 1008178:	1440032e 	bgeu	r2,r17,1008188 <__umoddi3+0x238>
 100817c:	14c5883a 	add	r2,r2,r19
 1008180:	14c00136 	bltu	r2,r19,1008188 <__umoddi3+0x238>
 1008184:	14410236 	bltu	r2,r17,1008590 <__umoddi3+0x640>
 1008188:	1463c83a 	sub	r17,r2,r17
 100818c:	8809883a 	mov	r4,r17
 1008190:	b80b883a 	mov	r5,r23
 1008194:	10098180 	call	1009818 <__udivsi3>
 1008198:	9009883a 	mov	r4,r18
 100819c:	100b883a 	mov	r5,r2
 10081a0:	10098280 	call	1009828 <__mulsi3>
 10081a4:	8809883a 	mov	r4,r17
 10081a8:	b80b883a 	mov	r5,r23
 10081ac:	102b883a 	mov	r21,r2
 10081b0:	10098200 	call	1009820 <__umodsi3>
 10081b4:	1004943a 	slli	r2,r2,16
 10081b8:	80ffffcc 	andi	r3,r16,65535
 10081bc:	10c4b03a 	or	r2,r2,r3
 10081c0:	1540042e 	bgeu	r2,r21,10081d4 <__umoddi3+0x284>
 10081c4:	14c5883a 	add	r2,r2,r19
 10081c8:	14c00236 	bltu	r2,r19,10081d4 <__umoddi3+0x284>
 10081cc:	1540012e 	bgeu	r2,r21,10081d4 <__umoddi3+0x284>
 10081d0:	14c5883a 	add	r2,r2,r19
 10081d4:	1545c83a 	sub	r2,r2,r21
 10081d8:	1584d83a 	srl	r2,r2,r22
 10081dc:	0013883a 	mov	r9,zero
 10081e0:	d8800415 	stw	r2,16(sp)
 10081e4:	d8c00417 	ldw	r3,16(sp)
 10081e8:	0005883a 	mov	r2,zero
 10081ec:	d8800515 	stw	r2,20(sp)
 10081f0:	1811883a 	mov	r8,r3
 10081f4:	003f9d06 	br	100806c <__umoddi3+0x11c>
 10081f8:	00804034 	movhi	r2,256
 10081fc:	10bfffc4 	addi	r2,r2,-1
 1008200:	14c0c636 	bltu	r2,r19,100851c <__umoddi3+0x5cc>
 1008204:	01400404 	movi	r5,16
 1008208:	2805883a 	mov	r2,r5
 100820c:	003f6c06 	br	1007fc0 <__umoddi3+0x70>
 1008210:	01000044 	movi	r4,1
 1008214:	000b883a 	mov	r5,zero
 1008218:	10098180 	call	1009818 <__udivsi3>
 100821c:	1027883a 	mov	r19,r2
 1008220:	00bfffd4 	movui	r2,65535
 1008224:	14fff436 	bltu	r2,r19,10081f8 <__umoddi3+0x2a8>
 1008228:	003f6106 	br	1007fb0 <__umoddi3+0x60>
 100822c:	00804034 	movhi	r2,256
 1008230:	10bfffc4 	addi	r2,r2,-1
 1008234:	1200c536 	bltu	r2,r8,100854c <__umoddi3+0x5fc>
 1008238:	01400404 	movi	r5,16
 100823c:	2805883a 	mov	r2,r5
 1008240:	003fb406 	br	1008114 <__umoddi3+0x1c4>
 1008244:	00804034 	movhi	r2,256
 1008248:	10bfffc4 	addi	r2,r2,-1
 100824c:	11c0c236 	bltu	r2,r7,1008558 <__umoddi3+0x608>
 1008250:	01400404 	movi	r5,16
 1008254:	2805883a 	mov	r2,r5
 1008258:	003f9806 	br	10080bc <__umoddi3+0x16c>
 100825c:	84c9c83a 	sub	r4,r16,r19
 1008260:	8105803a 	cmpltu	r2,r16,r4
 1008264:	a987c83a 	sub	r3,r21,r6
 1008268:	18abc83a 	sub	r21,r3,r2
 100826c:	2021883a 	mov	r16,r4
 1008270:	003f9d06 	br	10080e8 <__umoddi3+0x198>
 1008274:	9ca6983a 	sll	r19,r19,r18
 1008278:	3485c83a 	sub	r2,r6,r18
 100827c:	a8a2d83a 	srl	r17,r21,r2
 1008280:	982ed43a 	srli	r23,r19,16
 1008284:	ac86983a 	sll	r3,r21,r18
 1008288:	8084d83a 	srl	r2,r16,r2
 100828c:	8809883a 	mov	r4,r17
 1008290:	b80b883a 	mov	r5,r23
 1008294:	18b8b03a 	or	fp,r3,r2
 1008298:	9d3fffcc 	andi	r20,r19,65535
 100829c:	10098180 	call	1009818 <__udivsi3>
 10082a0:	100b883a 	mov	r5,r2
 10082a4:	a009883a 	mov	r4,r20
 10082a8:	10098280 	call	1009828 <__mulsi3>
 10082ac:	8809883a 	mov	r4,r17
 10082b0:	b80b883a 	mov	r5,r23
 10082b4:	102b883a 	mov	r21,r2
 10082b8:	10098200 	call	1009820 <__umodsi3>
 10082bc:	1004943a 	slli	r2,r2,16
 10082c0:	e006d43a 	srli	r3,fp,16
 10082c4:	902d883a 	mov	r22,r18
 10082c8:	10c4b03a 	or	r2,r2,r3
 10082cc:	1540022e 	bgeu	r2,r21,10082d8 <__umoddi3+0x388>
 10082d0:	14c5883a 	add	r2,r2,r19
 10082d4:	14c0ab2e 	bgeu	r2,r19,1008584 <__umoddi3+0x634>
 10082d8:	1563c83a 	sub	r17,r2,r21
 10082dc:	8809883a 	mov	r4,r17
 10082e0:	b80b883a 	mov	r5,r23
 10082e4:	10098180 	call	1009818 <__udivsi3>
 10082e8:	100b883a 	mov	r5,r2
 10082ec:	a009883a 	mov	r4,r20
 10082f0:	10098280 	call	1009828 <__mulsi3>
 10082f4:	8809883a 	mov	r4,r17
 10082f8:	b80b883a 	mov	r5,r23
 10082fc:	102b883a 	mov	r21,r2
 1008300:	10098200 	call	1009820 <__umodsi3>
 1008304:	1004943a 	slli	r2,r2,16
 1008308:	e0ffffcc 	andi	r3,fp,65535
 100830c:	10c4b03a 	or	r2,r2,r3
 1008310:	1540042e 	bgeu	r2,r21,1008324 <__umoddi3+0x3d4>
 1008314:	14c5883a 	add	r2,r2,r19
 1008318:	14c00236 	bltu	r2,r19,1008324 <__umoddi3+0x3d4>
 100831c:	1540012e 	bgeu	r2,r21,1008324 <__umoddi3+0x3d4>
 1008320:	14c5883a 	add	r2,r2,r19
 1008324:	84a0983a 	sll	r16,r16,r18
 1008328:	156bc83a 	sub	r21,r2,r21
 100832c:	003f3106 	br	1007ff4 <__umoddi3+0xa4>
 1008330:	3c8fc83a 	sub	r7,r7,r18
 1008334:	3486983a 	sll	r3,r6,r18
 1008338:	99c4d83a 	srl	r2,r19,r7
 100833c:	a9e2d83a 	srl	r17,r21,r7
 1008340:	ac8c983a 	sll	r6,r21,r18
 1008344:	18acb03a 	or	r22,r3,r2
 1008348:	b02ed43a 	srli	r23,r22,16
 100834c:	81c4d83a 	srl	r2,r16,r7
 1008350:	8809883a 	mov	r4,r17
 1008354:	b80b883a 	mov	r5,r23
 1008358:	308cb03a 	or	r6,r6,r2
 100835c:	d9c00315 	stw	r7,12(sp)
 1008360:	d9800215 	stw	r6,8(sp)
 1008364:	b53fffcc 	andi	r20,r22,65535
 1008368:	10098180 	call	1009818 <__udivsi3>
 100836c:	100b883a 	mov	r5,r2
 1008370:	a009883a 	mov	r4,r20
 1008374:	1039883a 	mov	fp,r2
 1008378:	10098280 	call	1009828 <__mulsi3>
 100837c:	8809883a 	mov	r4,r17
 1008380:	b80b883a 	mov	r5,r23
 1008384:	102b883a 	mov	r21,r2
 1008388:	10098200 	call	1009820 <__umodsi3>
 100838c:	d9000217 	ldw	r4,8(sp)
 1008390:	1004943a 	slli	r2,r2,16
 1008394:	9ca6983a 	sll	r19,r19,r18
 1008398:	2006d43a 	srli	r3,r4,16
 100839c:	84a0983a 	sll	r16,r16,r18
 10083a0:	dcc00015 	stw	r19,0(sp)
 10083a4:	10c4b03a 	or	r2,r2,r3
 10083a8:	dc000115 	stw	r16,4(sp)
 10083ac:	1540032e 	bgeu	r2,r21,10083bc <__umoddi3+0x46c>
 10083b0:	1585883a 	add	r2,r2,r22
 10083b4:	e73fffc4 	addi	fp,fp,-1
 10083b8:	15806e2e 	bgeu	r2,r22,1008574 <__umoddi3+0x624>
 10083bc:	1563c83a 	sub	r17,r2,r21
 10083c0:	8809883a 	mov	r4,r17
 10083c4:	b80b883a 	mov	r5,r23
 10083c8:	10098180 	call	1009818 <__udivsi3>
 10083cc:	100b883a 	mov	r5,r2
 10083d0:	a009883a 	mov	r4,r20
 10083d4:	1021883a 	mov	r16,r2
 10083d8:	10098280 	call	1009828 <__mulsi3>
 10083dc:	b80b883a 	mov	r5,r23
 10083e0:	8809883a 	mov	r4,r17
 10083e4:	1029883a 	mov	r20,r2
 10083e8:	10098200 	call	1009820 <__umodsi3>
 10083ec:	d9400217 	ldw	r5,8(sp)
 10083f0:	1004943a 	slli	r2,r2,16
 10083f4:	28ffffcc 	andi	r3,r5,65535
 10083f8:	10c4b03a 	or	r2,r2,r3
 10083fc:	1500032e 	bgeu	r2,r20,100840c <__umoddi3+0x4bc>
 1008400:	1585883a 	add	r2,r2,r22
 1008404:	843fffc4 	addi	r16,r16,-1
 1008408:	1580562e 	bgeu	r2,r22,1008564 <__umoddi3+0x614>
 100840c:	d9800017 	ldw	r6,0(sp)
 1008410:	e022943a 	slli	r17,fp,16
 1008414:	302ed43a 	srli	r23,r6,16
 1008418:	8462b03a 	or	r17,r16,r17
 100841c:	34ffffcc 	andi	r19,r6,65535
 1008420:	882ad43a 	srli	r21,r17,16
 1008424:	8c7fffcc 	andi	r17,r17,65535
 1008428:	8809883a 	mov	r4,r17
 100842c:	980b883a 	mov	r5,r19
 1008430:	1521c83a 	sub	r16,r2,r20
 1008434:	10098280 	call	1009828 <__mulsi3>
 1008438:	8809883a 	mov	r4,r17
 100843c:	b80b883a 	mov	r5,r23
 1008440:	1029883a 	mov	r20,r2
 1008444:	10098280 	call	1009828 <__mulsi3>
 1008448:	980b883a 	mov	r5,r19
 100844c:	a809883a 	mov	r4,r21
 1008450:	1023883a 	mov	r17,r2
 1008454:	10098280 	call	1009828 <__mulsi3>
 1008458:	a809883a 	mov	r4,r21
 100845c:	b80b883a 	mov	r5,r23
 1008460:	1027883a 	mov	r19,r2
 1008464:	10098280 	call	1009828 <__mulsi3>
 1008468:	100b883a 	mov	r5,r2
 100846c:	a004d43a 	srli	r2,r20,16
 1008470:	8ce3883a 	add	r17,r17,r19
 1008474:	1449883a 	add	r4,r2,r17
 1008478:	24c0022e 	bgeu	r4,r19,1008484 <__umoddi3+0x534>
 100847c:	00800074 	movhi	r2,1
 1008480:	288b883a 	add	r5,r5,r2
 1008484:	2004d43a 	srli	r2,r4,16
 1008488:	2008943a 	slli	r4,r4,16
 100848c:	a0ffffcc 	andi	r3,r20,65535
 1008490:	288d883a 	add	r6,r5,r2
 1008494:	20c9883a 	add	r4,r4,r3
 1008498:	81800b36 	bltu	r16,r6,10084c8 <__umoddi3+0x578>
 100849c:	81804026 	beq	r16,r6,10085a0 <__umoddi3+0x650>
 10084a0:	818dc83a 	sub	r6,r16,r6
 10084a4:	00000f06 	br	10084e4 <__umoddi3+0x594>
 10084a8:	30c5c83a 	sub	r2,r6,r3
 10084ac:	182d883a 	mov	r22,r3
 10084b0:	8084d83a 	srl	r2,r16,r2
 10084b4:	a8c6983a 	sll	r3,r21,r3
 10084b8:	9da6983a 	sll	r19,r19,r22
 10084bc:	85a0983a 	sll	r16,r16,r22
 10084c0:	18aab03a 	or	r21,r3,r2
 10084c4:	003f1d06 	br	100813c <__umoddi3+0x1ec>
 10084c8:	d8c00017 	ldw	r3,0(sp)
 10084cc:	20c5c83a 	sub	r2,r4,r3
 10084d0:	2089803a 	cmpltu	r4,r4,r2
 10084d4:	3587c83a 	sub	r3,r6,r22
 10084d8:	1907c83a 	sub	r3,r3,r4
 10084dc:	80cdc83a 	sub	r6,r16,r3
 10084e0:	1009883a 	mov	r4,r2
 10084e4:	d9400117 	ldw	r5,4(sp)
 10084e8:	2905c83a 	sub	r2,r5,r4
 10084ec:	2887803a 	cmpltu	r3,r5,r2
 10084f0:	30c7c83a 	sub	r3,r6,r3
 10084f4:	d9800317 	ldw	r6,12(sp)
 10084f8:	1484d83a 	srl	r2,r2,r18
 10084fc:	1988983a 	sll	r4,r3,r6
 1008500:	1c86d83a 	srl	r3,r3,r18
 1008504:	2088b03a 	or	r4,r4,r2
 1008508:	2011883a 	mov	r8,r4
 100850c:	1813883a 	mov	r9,r3
 1008510:	d9000415 	stw	r4,16(sp)
 1008514:	d8c00515 	stw	r3,20(sp)
 1008518:	003ed406 	br	100806c <__umoddi3+0x11c>
 100851c:	01400604 	movi	r5,24
 1008520:	2805883a 	mov	r2,r5
 1008524:	003ea606 	br	1007fc0 <__umoddi3+0x70>
 1008528:	01400204 	movi	r5,8
 100852c:	2805883a 	mov	r2,r5
 1008530:	003ea306 	br	1007fc0 <__umoddi3+0x70>
 1008534:	01400204 	movi	r5,8
 1008538:	2805883a 	mov	r2,r5
 100853c:	003edf06 	br	10080bc <__umoddi3+0x16c>
 1008540:	01400204 	movi	r5,8
 1008544:	2805883a 	mov	r2,r5
 1008548:	003ef206 	br	1008114 <__umoddi3+0x1c4>
 100854c:	01400604 	movi	r5,24
 1008550:	2805883a 	mov	r2,r5
 1008554:	003eef06 	br	1008114 <__umoddi3+0x1c4>
 1008558:	01400604 	movi	r5,24
 100855c:	2805883a 	mov	r2,r5
 1008560:	003ed606 	br	10080bc <__umoddi3+0x16c>
 1008564:	153fa92e 	bgeu	r2,r20,100840c <__umoddi3+0x4bc>
 1008568:	843fffc4 	addi	r16,r16,-1
 100856c:	1585883a 	add	r2,r2,r22
 1008570:	003fa606 	br	100840c <__umoddi3+0x4bc>
 1008574:	157f912e 	bgeu	r2,r21,10083bc <__umoddi3+0x46c>
 1008578:	e73fffc4 	addi	fp,fp,-1
 100857c:	1585883a 	add	r2,r2,r22
 1008580:	003f8e06 	br	10083bc <__umoddi3+0x46c>
 1008584:	157f542e 	bgeu	r2,r21,10082d8 <__umoddi3+0x388>
 1008588:	14c5883a 	add	r2,r2,r19
 100858c:	003f5206 	br	10082d8 <__umoddi3+0x388>
 1008590:	14c5883a 	add	r2,r2,r19
 1008594:	003efc06 	br	1008188 <__umoddi3+0x238>
 1008598:	14c5883a 	add	r2,r2,r19
 100859c:	003ea606 	br	1008038 <__umoddi3+0xe8>
 10085a0:	d8800117 	ldw	r2,4(sp)
 10085a4:	113fc836 	bltu	r2,r4,10084c8 <__umoddi3+0x578>
 10085a8:	000d883a 	mov	r6,zero
 10085ac:	003fcd06 	br	10084e4 <__umoddi3+0x594>

010085b0 <_fpadd_parts>:
 10085b0:	defff804 	addi	sp,sp,-32
 10085b4:	dcc00315 	stw	r19,12(sp)
 10085b8:	2027883a 	mov	r19,r4
 10085bc:	21000017 	ldw	r4,0(r4)
 10085c0:	00c00044 	movi	r3,1
 10085c4:	dd400515 	stw	r21,20(sp)
 10085c8:	dd000415 	stw	r20,16(sp)
 10085cc:	ddc00715 	stw	r23,28(sp)
 10085d0:	dd800615 	stw	r22,24(sp)
 10085d4:	dc800215 	stw	r18,8(sp)
 10085d8:	dc400115 	stw	r17,4(sp)
 10085dc:	dc000015 	stw	r16,0(sp)
 10085e0:	282b883a 	mov	r21,r5
 10085e4:	3029883a 	mov	r20,r6
 10085e8:	1900632e 	bgeu	r3,r4,1008778 <_fpadd_parts+0x1c8>
 10085ec:	28800017 	ldw	r2,0(r5)
 10085f0:	1880812e 	bgeu	r3,r2,10087f8 <_fpadd_parts+0x248>
 10085f4:	00c00104 	movi	r3,4
 10085f8:	20c0dc26 	beq	r4,r3,100896c <_fpadd_parts+0x3bc>
 10085fc:	10c07e26 	beq	r2,r3,10087f8 <_fpadd_parts+0x248>
 1008600:	00c00084 	movi	r3,2
 1008604:	10c06726 	beq	r2,r3,10087a4 <_fpadd_parts+0x1f4>
 1008608:	20c07b26 	beq	r4,r3,10087f8 <_fpadd_parts+0x248>
 100860c:	9dc00217 	ldw	r23,8(r19)
 1008610:	28c00217 	ldw	r3,8(r5)
 1008614:	9c400317 	ldw	r17,12(r19)
 1008618:	2bc00317 	ldw	r15,12(r5)
 100861c:	b8cdc83a 	sub	r6,r23,r3
 1008620:	9c800417 	ldw	r18,16(r19)
 1008624:	2c000417 	ldw	r16,16(r5)
 1008628:	3009883a 	mov	r4,r6
 100862c:	30009716 	blt	r6,zero,100888c <_fpadd_parts+0x2dc>
 1008630:	00800fc4 	movi	r2,63
 1008634:	11806b16 	blt	r2,r6,10087e4 <_fpadd_parts+0x234>
 1008638:	0100a40e 	bge	zero,r4,10088cc <_fpadd_parts+0x31c>
 100863c:	35bff804 	addi	r22,r6,-32
 1008640:	b000bc16 	blt	r22,zero,1008934 <_fpadd_parts+0x384>
 1008644:	8596d83a 	srl	r11,r16,r22
 1008648:	0019883a 	mov	r12,zero
 100864c:	0013883a 	mov	r9,zero
 1008650:	01000044 	movi	r4,1
 1008654:	0015883a 	mov	r10,zero
 1008658:	b000be16 	blt	r22,zero,1008954 <_fpadd_parts+0x3a4>
 100865c:	2590983a 	sll	r8,r4,r22
 1008660:	000f883a 	mov	r7,zero
 1008664:	00bfffc4 	movi	r2,-1
 1008668:	3889883a 	add	r4,r7,r2
 100866c:	408b883a 	add	r5,r8,r2
 1008670:	21cd803a 	cmpltu	r6,r4,r7
 1008674:	314b883a 	add	r5,r6,r5
 1008678:	7904703a 	and	r2,r15,r4
 100867c:	8146703a 	and	r3,r16,r5
 1008680:	10c4b03a 	or	r2,r2,r3
 1008684:	10000226 	beq	r2,zero,1008690 <_fpadd_parts+0xe0>
 1008688:	02400044 	movi	r9,1
 100868c:	0015883a 	mov	r10,zero
 1008690:	5a5eb03a 	or	r15,r11,r9
 1008694:	62a0b03a 	or	r16,r12,r10
 1008698:	99400117 	ldw	r5,4(r19)
 100869c:	a8800117 	ldw	r2,4(r21)
 10086a0:	28806e26 	beq	r5,r2,100885c <_fpadd_parts+0x2ac>
 10086a4:	28006626 	beq	r5,zero,1008840 <_fpadd_parts+0x290>
 10086a8:	7c45c83a 	sub	r2,r15,r17
 10086ac:	7889803a 	cmpltu	r4,r15,r2
 10086b0:	8487c83a 	sub	r3,r16,r18
 10086b4:	1909c83a 	sub	r4,r3,r4
 10086b8:	100d883a 	mov	r6,r2
 10086bc:	200f883a 	mov	r7,r4
 10086c0:	38007716 	blt	r7,zero,10088a0 <_fpadd_parts+0x2f0>
 10086c4:	a5c00215 	stw	r23,8(r20)
 10086c8:	a1c00415 	stw	r7,16(r20)
 10086cc:	a0000115 	stw	zero,4(r20)
 10086d0:	a1800315 	stw	r6,12(r20)
 10086d4:	a2000317 	ldw	r8,12(r20)
 10086d8:	a2400417 	ldw	r9,16(r20)
 10086dc:	00bfffc4 	movi	r2,-1
 10086e0:	408b883a 	add	r5,r8,r2
 10086e4:	2a09803a 	cmpltu	r4,r5,r8
 10086e8:	488d883a 	add	r6,r9,r2
 10086ec:	01c40034 	movhi	r7,4096
 10086f0:	39ffffc4 	addi	r7,r7,-1
 10086f4:	218d883a 	add	r6,r4,r6
 10086f8:	39801736 	bltu	r7,r6,1008758 <_fpadd_parts+0x1a8>
 10086fc:	31c06526 	beq	r6,r7,1008894 <_fpadd_parts+0x2e4>
 1008700:	a3000217 	ldw	r12,8(r20)
 1008704:	4209883a 	add	r4,r8,r8
 1008708:	00bfffc4 	movi	r2,-1
 100870c:	220f803a 	cmpltu	r7,r4,r8
 1008710:	4a4b883a 	add	r5,r9,r9
 1008714:	394f883a 	add	r7,r7,r5
 1008718:	2095883a 	add	r10,r4,r2
 100871c:	3897883a 	add	r11,r7,r2
 1008720:	510d803a 	cmpltu	r6,r10,r4
 1008724:	6099883a 	add	r12,r12,r2
 1008728:	32d7883a 	add	r11,r6,r11
 100872c:	00840034 	movhi	r2,4096
 1008730:	10bfffc4 	addi	r2,r2,-1
 1008734:	2011883a 	mov	r8,r4
 1008738:	3813883a 	mov	r9,r7
 100873c:	a1000315 	stw	r4,12(r20)
 1008740:	a1c00415 	stw	r7,16(r20)
 1008744:	a3000215 	stw	r12,8(r20)
 1008748:	12c00336 	bltu	r2,r11,1008758 <_fpadd_parts+0x1a8>
 100874c:	58bfed1e 	bne	r11,r2,1008704 <_fpadd_parts+0x154>
 1008750:	00bfff84 	movi	r2,-2
 1008754:	12bfeb2e 	bgeu	r2,r10,1008704 <_fpadd_parts+0x154>
 1008758:	a2800417 	ldw	r10,16(r20)
 100875c:	008000c4 	movi	r2,3
 1008760:	00c80034 	movhi	r3,8192
 1008764:	18ffffc4 	addi	r3,r3,-1
 1008768:	a2400317 	ldw	r9,12(r20)
 100876c:	a0800015 	stw	r2,0(r20)
 1008770:	1a802336 	bltu	r3,r10,1008800 <_fpadd_parts+0x250>
 1008774:	a027883a 	mov	r19,r20
 1008778:	9805883a 	mov	r2,r19
 100877c:	ddc00717 	ldw	r23,28(sp)
 1008780:	dd800617 	ldw	r22,24(sp)
 1008784:	dd400517 	ldw	r21,20(sp)
 1008788:	dd000417 	ldw	r20,16(sp)
 100878c:	dcc00317 	ldw	r19,12(sp)
 1008790:	dc800217 	ldw	r18,8(sp)
 1008794:	dc400117 	ldw	r17,4(sp)
 1008798:	dc000017 	ldw	r16,0(sp)
 100879c:	dec00804 	addi	sp,sp,32
 10087a0:	f800283a 	ret
 10087a4:	20fff41e 	bne	r4,r3,1008778 <_fpadd_parts+0x1c8>
 10087a8:	31000015 	stw	r4,0(r6)
 10087ac:	98800117 	ldw	r2,4(r19)
 10087b0:	30800115 	stw	r2,4(r6)
 10087b4:	98c00217 	ldw	r3,8(r19)
 10087b8:	30c00215 	stw	r3,8(r6)
 10087bc:	98800317 	ldw	r2,12(r19)
 10087c0:	30800315 	stw	r2,12(r6)
 10087c4:	98c00417 	ldw	r3,16(r19)
 10087c8:	30c00415 	stw	r3,16(r6)
 10087cc:	98800117 	ldw	r2,4(r19)
 10087d0:	28c00117 	ldw	r3,4(r5)
 10087d4:	3027883a 	mov	r19,r6
 10087d8:	10c4703a 	and	r2,r2,r3
 10087dc:	30800115 	stw	r2,4(r6)
 10087e0:	003fe506 	br	1008778 <_fpadd_parts+0x1c8>
 10087e4:	1dc02616 	blt	r3,r23,1008880 <_fpadd_parts+0x2d0>
 10087e8:	0023883a 	mov	r17,zero
 10087ec:	182f883a 	mov	r23,r3
 10087f0:	0025883a 	mov	r18,zero
 10087f4:	003fa806 	br	1008698 <_fpadd_parts+0xe8>
 10087f8:	a827883a 	mov	r19,r21
 10087fc:	003fde06 	br	1008778 <_fpadd_parts+0x1c8>
 1008800:	01800044 	movi	r6,1
 1008804:	500497fa 	slli	r2,r10,31
 1008808:	4808d07a 	srli	r4,r9,1
 100880c:	518ad83a 	srl	r5,r10,r6
 1008810:	a2000217 	ldw	r8,8(r20)
 1008814:	1108b03a 	or	r4,r2,r4
 1008818:	0007883a 	mov	r3,zero
 100881c:	4984703a 	and	r2,r9,r6
 1008820:	208cb03a 	or	r6,r4,r2
 1008824:	28ceb03a 	or	r7,r5,r3
 1008828:	42000044 	addi	r8,r8,1
 100882c:	a027883a 	mov	r19,r20
 1008830:	a1c00415 	stw	r7,16(r20)
 1008834:	a2000215 	stw	r8,8(r20)
 1008838:	a1800315 	stw	r6,12(r20)
 100883c:	003fce06 	br	1008778 <_fpadd_parts+0x1c8>
 1008840:	8bc5c83a 	sub	r2,r17,r15
 1008844:	8889803a 	cmpltu	r4,r17,r2
 1008848:	9407c83a 	sub	r3,r18,r16
 100884c:	1909c83a 	sub	r4,r3,r4
 1008850:	100d883a 	mov	r6,r2
 1008854:	200f883a 	mov	r7,r4
 1008858:	003f9906 	br	10086c0 <_fpadd_parts+0x110>
 100885c:	7c45883a 	add	r2,r15,r17
 1008860:	13c9803a 	cmpltu	r4,r2,r15
 1008864:	8487883a 	add	r3,r16,r18
 1008868:	20c9883a 	add	r4,r4,r3
 100886c:	a1400115 	stw	r5,4(r20)
 1008870:	a5c00215 	stw	r23,8(r20)
 1008874:	a0800315 	stw	r2,12(r20)
 1008878:	a1000415 	stw	r4,16(r20)
 100887c:	003fb606 	br	1008758 <_fpadd_parts+0x1a8>
 1008880:	001f883a 	mov	r15,zero
 1008884:	0021883a 	mov	r16,zero
 1008888:	003f8306 	br	1008698 <_fpadd_parts+0xe8>
 100888c:	018dc83a 	sub	r6,zero,r6
 1008890:	003f6706 	br	1008630 <_fpadd_parts+0x80>
 1008894:	00bfff84 	movi	r2,-2
 1008898:	117faf36 	bltu	r2,r5,1008758 <_fpadd_parts+0x1a8>
 100889c:	003f9806 	br	1008700 <_fpadd_parts+0x150>
 10088a0:	0005883a 	mov	r2,zero
 10088a4:	1189c83a 	sub	r4,r2,r6
 10088a8:	1105803a 	cmpltu	r2,r2,r4
 10088ac:	01cbc83a 	sub	r5,zero,r7
 10088b0:	2885c83a 	sub	r2,r5,r2
 10088b4:	01800044 	movi	r6,1
 10088b8:	a1800115 	stw	r6,4(r20)
 10088bc:	a5c00215 	stw	r23,8(r20)
 10088c0:	a1000315 	stw	r4,12(r20)
 10088c4:	a0800415 	stw	r2,16(r20)
 10088c8:	003f8206 	br	10086d4 <_fpadd_parts+0x124>
 10088cc:	203f7226 	beq	r4,zero,1008698 <_fpadd_parts+0xe8>
 10088d0:	35bff804 	addi	r22,r6,-32
 10088d4:	b9af883a 	add	r23,r23,r6
 10088d8:	b0003116 	blt	r22,zero,10089a0 <_fpadd_parts+0x3f0>
 10088dc:	959ad83a 	srl	r13,r18,r22
 10088e0:	001d883a 	mov	r14,zero
 10088e4:	000f883a 	mov	r7,zero
 10088e8:	01000044 	movi	r4,1
 10088ec:	0011883a 	mov	r8,zero
 10088f0:	b0002516 	blt	r22,zero,1008988 <_fpadd_parts+0x3d8>
 10088f4:	2594983a 	sll	r10,r4,r22
 10088f8:	0013883a 	mov	r9,zero
 10088fc:	00bfffc4 	movi	r2,-1
 1008900:	4889883a 	add	r4,r9,r2
 1008904:	508b883a 	add	r5,r10,r2
 1008908:	224d803a 	cmpltu	r6,r4,r9
 100890c:	314b883a 	add	r5,r6,r5
 1008910:	8904703a 	and	r2,r17,r4
 1008914:	9146703a 	and	r3,r18,r5
 1008918:	10c4b03a 	or	r2,r2,r3
 100891c:	10000226 	beq	r2,zero,1008928 <_fpadd_parts+0x378>
 1008920:	01c00044 	movi	r7,1
 1008924:	0011883a 	mov	r8,zero
 1008928:	69e2b03a 	or	r17,r13,r7
 100892c:	7224b03a 	or	r18,r14,r8
 1008930:	003f5906 	br	1008698 <_fpadd_parts+0xe8>
 1008934:	8407883a 	add	r3,r16,r16
 1008938:	008007c4 	movi	r2,31
 100893c:	1185c83a 	sub	r2,r2,r6
 1008940:	1886983a 	sll	r3,r3,r2
 1008944:	7996d83a 	srl	r11,r15,r6
 1008948:	8198d83a 	srl	r12,r16,r6
 100894c:	1ad6b03a 	or	r11,r3,r11
 1008950:	003f3e06 	br	100864c <_fpadd_parts+0x9c>
 1008954:	2006d07a 	srli	r3,r4,1
 1008958:	008007c4 	movi	r2,31
 100895c:	1185c83a 	sub	r2,r2,r6
 1008960:	1890d83a 	srl	r8,r3,r2
 1008964:	218e983a 	sll	r7,r4,r6
 1008968:	003f3e06 	br	1008664 <_fpadd_parts+0xb4>
 100896c:	113f821e 	bne	r2,r4,1008778 <_fpadd_parts+0x1c8>
 1008970:	28c00117 	ldw	r3,4(r5)
 1008974:	98800117 	ldw	r2,4(r19)
 1008978:	10ff7f26 	beq	r2,r3,1008778 <_fpadd_parts+0x1c8>
 100897c:	04c04074 	movhi	r19,257
 1008980:	9cf5b704 	addi	r19,r19,-10532
 1008984:	003f7c06 	br	1008778 <_fpadd_parts+0x1c8>
 1008988:	2006d07a 	srli	r3,r4,1
 100898c:	008007c4 	movi	r2,31
 1008990:	1185c83a 	sub	r2,r2,r6
 1008994:	1894d83a 	srl	r10,r3,r2
 1008998:	2192983a 	sll	r9,r4,r6
 100899c:	003fd706 	br	10088fc <_fpadd_parts+0x34c>
 10089a0:	9487883a 	add	r3,r18,r18
 10089a4:	008007c4 	movi	r2,31
 10089a8:	1185c83a 	sub	r2,r2,r6
 10089ac:	1886983a 	sll	r3,r3,r2
 10089b0:	899ad83a 	srl	r13,r17,r6
 10089b4:	919cd83a 	srl	r14,r18,r6
 10089b8:	1b5ab03a 	or	r13,r3,r13
 10089bc:	003fc906 	br	10088e4 <_fpadd_parts+0x334>

010089c0 <__subdf3>:
 10089c0:	deffea04 	addi	sp,sp,-88
 10089c4:	dcc01415 	stw	r19,80(sp)
 10089c8:	dcc00404 	addi	r19,sp,16
 10089cc:	2011883a 	mov	r8,r4
 10089d0:	2813883a 	mov	r9,r5
 10089d4:	dc401315 	stw	r17,76(sp)
 10089d8:	d809883a 	mov	r4,sp
 10089dc:	980b883a 	mov	r5,r19
 10089e0:	dc400904 	addi	r17,sp,36
 10089e4:	dfc01515 	stw	ra,84(sp)
 10089e8:	da400115 	stw	r9,4(sp)
 10089ec:	d9c00315 	stw	r7,12(sp)
 10089f0:	da000015 	stw	r8,0(sp)
 10089f4:	d9800215 	stw	r6,8(sp)
 10089f8:	1009d180 	call	1009d18 <__unpack_d>
 10089fc:	d9000204 	addi	r4,sp,8
 1008a00:	880b883a 	mov	r5,r17
 1008a04:	1009d180 	call	1009d18 <__unpack_d>
 1008a08:	d8800a17 	ldw	r2,40(sp)
 1008a0c:	880b883a 	mov	r5,r17
 1008a10:	9809883a 	mov	r4,r19
 1008a14:	d9800e04 	addi	r6,sp,56
 1008a18:	1080005c 	xori	r2,r2,1
 1008a1c:	d8800a15 	stw	r2,40(sp)
 1008a20:	10085b00 	call	10085b0 <_fpadd_parts>
 1008a24:	1009883a 	mov	r4,r2
 1008a28:	1009a040 	call	1009a04 <__pack_d>
 1008a2c:	dfc01517 	ldw	ra,84(sp)
 1008a30:	dcc01417 	ldw	r19,80(sp)
 1008a34:	dc401317 	ldw	r17,76(sp)
 1008a38:	dec01604 	addi	sp,sp,88
 1008a3c:	f800283a 	ret

01008a40 <__adddf3>:
 1008a40:	deffea04 	addi	sp,sp,-88
 1008a44:	dcc01415 	stw	r19,80(sp)
 1008a48:	dcc00404 	addi	r19,sp,16
 1008a4c:	2011883a 	mov	r8,r4
 1008a50:	2813883a 	mov	r9,r5
 1008a54:	dc401315 	stw	r17,76(sp)
 1008a58:	d809883a 	mov	r4,sp
 1008a5c:	980b883a 	mov	r5,r19
 1008a60:	dc400904 	addi	r17,sp,36
 1008a64:	dfc01515 	stw	ra,84(sp)
 1008a68:	da400115 	stw	r9,4(sp)
 1008a6c:	d9c00315 	stw	r7,12(sp)
 1008a70:	da000015 	stw	r8,0(sp)
 1008a74:	d9800215 	stw	r6,8(sp)
 1008a78:	1009d180 	call	1009d18 <__unpack_d>
 1008a7c:	d9000204 	addi	r4,sp,8
 1008a80:	880b883a 	mov	r5,r17
 1008a84:	1009d180 	call	1009d18 <__unpack_d>
 1008a88:	d9800e04 	addi	r6,sp,56
 1008a8c:	9809883a 	mov	r4,r19
 1008a90:	880b883a 	mov	r5,r17
 1008a94:	10085b00 	call	10085b0 <_fpadd_parts>
 1008a98:	1009883a 	mov	r4,r2
 1008a9c:	1009a040 	call	1009a04 <__pack_d>
 1008aa0:	dfc01517 	ldw	ra,84(sp)
 1008aa4:	dcc01417 	ldw	r19,80(sp)
 1008aa8:	dc401317 	ldw	r17,76(sp)
 1008aac:	dec01604 	addi	sp,sp,88
 1008ab0:	f800283a 	ret

01008ab4 <__muldf3>:
 1008ab4:	deffe004 	addi	sp,sp,-128
 1008ab8:	dc401815 	stw	r17,96(sp)
 1008abc:	dc400404 	addi	r17,sp,16
 1008ac0:	2011883a 	mov	r8,r4
 1008ac4:	2813883a 	mov	r9,r5
 1008ac8:	dc001715 	stw	r16,92(sp)
 1008acc:	d809883a 	mov	r4,sp
 1008ad0:	880b883a 	mov	r5,r17
 1008ad4:	dc000904 	addi	r16,sp,36
 1008ad8:	dfc01f15 	stw	ra,124(sp)
 1008adc:	da400115 	stw	r9,4(sp)
 1008ae0:	d9c00315 	stw	r7,12(sp)
 1008ae4:	da000015 	stw	r8,0(sp)
 1008ae8:	d9800215 	stw	r6,8(sp)
 1008aec:	ddc01e15 	stw	r23,120(sp)
 1008af0:	dd801d15 	stw	r22,116(sp)
 1008af4:	dd401c15 	stw	r21,112(sp)
 1008af8:	dd001b15 	stw	r20,108(sp)
 1008afc:	dcc01a15 	stw	r19,104(sp)
 1008b00:	dc801915 	stw	r18,100(sp)
 1008b04:	1009d180 	call	1009d18 <__unpack_d>
 1008b08:	d9000204 	addi	r4,sp,8
 1008b0c:	800b883a 	mov	r5,r16
 1008b10:	1009d180 	call	1009d18 <__unpack_d>
 1008b14:	d9000417 	ldw	r4,16(sp)
 1008b18:	00800044 	movi	r2,1
 1008b1c:	1100102e 	bgeu	r2,r4,1008b60 <__muldf3+0xac>
 1008b20:	d8c00917 	ldw	r3,36(sp)
 1008b24:	10c0062e 	bgeu	r2,r3,1008b40 <__muldf3+0x8c>
 1008b28:	00800104 	movi	r2,4
 1008b2c:	20800a26 	beq	r4,r2,1008b58 <__muldf3+0xa4>
 1008b30:	1880cc26 	beq	r3,r2,1008e64 <__muldf3+0x3b0>
 1008b34:	00800084 	movi	r2,2
 1008b38:	20800926 	beq	r4,r2,1008b60 <__muldf3+0xac>
 1008b3c:	1880191e 	bne	r3,r2,1008ba4 <__muldf3+0xf0>
 1008b40:	d8c00a17 	ldw	r3,40(sp)
 1008b44:	d8800517 	ldw	r2,20(sp)
 1008b48:	8009883a 	mov	r4,r16
 1008b4c:	10c4c03a 	cmpne	r2,r2,r3
 1008b50:	d8800a15 	stw	r2,40(sp)
 1008b54:	00000706 	br	1008b74 <__muldf3+0xc0>
 1008b58:	00800084 	movi	r2,2
 1008b5c:	1880c326 	beq	r3,r2,1008e6c <__muldf3+0x3b8>
 1008b60:	d8800517 	ldw	r2,20(sp)
 1008b64:	d8c00a17 	ldw	r3,40(sp)
 1008b68:	8809883a 	mov	r4,r17
 1008b6c:	10c4c03a 	cmpne	r2,r2,r3
 1008b70:	d8800515 	stw	r2,20(sp)
 1008b74:	1009a040 	call	1009a04 <__pack_d>
 1008b78:	dfc01f17 	ldw	ra,124(sp)
 1008b7c:	ddc01e17 	ldw	r23,120(sp)
 1008b80:	dd801d17 	ldw	r22,116(sp)
 1008b84:	dd401c17 	ldw	r21,112(sp)
 1008b88:	dd001b17 	ldw	r20,108(sp)
 1008b8c:	dcc01a17 	ldw	r19,104(sp)
 1008b90:	dc801917 	ldw	r18,100(sp)
 1008b94:	dc401817 	ldw	r17,96(sp)
 1008b98:	dc001717 	ldw	r16,92(sp)
 1008b9c:	dec02004 	addi	sp,sp,128
 1008ba0:	f800283a 	ret
 1008ba4:	dd800717 	ldw	r22,28(sp)
 1008ba8:	dc800c17 	ldw	r18,48(sp)
 1008bac:	002b883a 	mov	r21,zero
 1008bb0:	0023883a 	mov	r17,zero
 1008bb4:	a80b883a 	mov	r5,r21
 1008bb8:	b00d883a 	mov	r6,r22
 1008bbc:	880f883a 	mov	r7,r17
 1008bc0:	ddc00817 	ldw	r23,32(sp)
 1008bc4:	dcc00d17 	ldw	r19,52(sp)
 1008bc8:	9009883a 	mov	r4,r18
 1008bcc:	10098600 	call	1009860 <__muldi3>
 1008bd0:	001b883a 	mov	r13,zero
 1008bd4:	680f883a 	mov	r7,r13
 1008bd8:	b009883a 	mov	r4,r22
 1008bdc:	000b883a 	mov	r5,zero
 1008be0:	980d883a 	mov	r6,r19
 1008be4:	b82d883a 	mov	r22,r23
 1008be8:	002f883a 	mov	r23,zero
 1008bec:	db401615 	stw	r13,88(sp)
 1008bf0:	d8801315 	stw	r2,76(sp)
 1008bf4:	d8c01415 	stw	r3,80(sp)
 1008bf8:	dcc01515 	stw	r19,84(sp)
 1008bfc:	10098600 	call	1009860 <__muldi3>
 1008c00:	b00d883a 	mov	r6,r22
 1008c04:	000b883a 	mov	r5,zero
 1008c08:	9009883a 	mov	r4,r18
 1008c0c:	b80f883a 	mov	r7,r23
 1008c10:	1021883a 	mov	r16,r2
 1008c14:	1823883a 	mov	r17,r3
 1008c18:	10098600 	call	1009860 <__muldi3>
 1008c1c:	8085883a 	add	r2,r16,r2
 1008c20:	140d803a 	cmpltu	r6,r2,r16
 1008c24:	88c7883a 	add	r3,r17,r3
 1008c28:	30cd883a 	add	r6,r6,r3
 1008c2c:	1029883a 	mov	r20,r2
 1008c30:	302b883a 	mov	r21,r6
 1008c34:	da801317 	ldw	r10,76(sp)
 1008c38:	dac01417 	ldw	r11,80(sp)
 1008c3c:	db001517 	ldw	r12,84(sp)
 1008c40:	db401617 	ldw	r13,88(sp)
 1008c44:	3440612e 	bgeu	r6,r17,1008dcc <__muldf3+0x318>
 1008c48:	0009883a 	mov	r4,zero
 1008c4c:	5105883a 	add	r2,r10,r4
 1008c50:	128d803a 	cmpltu	r6,r2,r10
 1008c54:	5d07883a 	add	r3,r11,r20
 1008c58:	30cd883a 	add	r6,r6,r3
 1008c5c:	0021883a 	mov	r16,zero
 1008c60:	04400044 	movi	r17,1
 1008c64:	1025883a 	mov	r18,r2
 1008c68:	3027883a 	mov	r19,r6
 1008c6c:	32c06236 	bltu	r6,r11,1008df8 <__muldf3+0x344>
 1008c70:	59807a26 	beq	r11,r6,1008e5c <__muldf3+0x3a8>
 1008c74:	680b883a 	mov	r5,r13
 1008c78:	b80f883a 	mov	r7,r23
 1008c7c:	6009883a 	mov	r4,r12
 1008c80:	b00d883a 	mov	r6,r22
 1008c84:	10098600 	call	1009860 <__muldi3>
 1008c88:	1009883a 	mov	r4,r2
 1008c8c:	000f883a 	mov	r7,zero
 1008c90:	1545883a 	add	r2,r2,r21
 1008c94:	1111803a 	cmpltu	r8,r2,r4
 1008c98:	19c7883a 	add	r3,r3,r7
 1008c9c:	40c7883a 	add	r3,r8,r3
 1008ca0:	88cb883a 	add	r5,r17,r3
 1008ca4:	d8c00617 	ldw	r3,24(sp)
 1008ca8:	8089883a 	add	r4,r16,r2
 1008cac:	d8800b17 	ldw	r2,44(sp)
 1008cb0:	18c00104 	addi	r3,r3,4
 1008cb4:	240d803a 	cmpltu	r6,r4,r16
 1008cb8:	10c7883a 	add	r3,r2,r3
 1008cbc:	2013883a 	mov	r9,r4
 1008cc0:	d8800a17 	ldw	r2,40(sp)
 1008cc4:	d9000517 	ldw	r4,20(sp)
 1008cc8:	314d883a 	add	r6,r6,r5
 1008ccc:	3015883a 	mov	r10,r6
 1008cd0:	2088c03a 	cmpne	r4,r4,r2
 1008cd4:	00880034 	movhi	r2,8192
 1008cd8:	10bfffc4 	addi	r2,r2,-1
 1008cdc:	d9000f15 	stw	r4,60(sp)
 1008ce0:	d8c01015 	stw	r3,64(sp)
 1008ce4:	1180162e 	bgeu	r2,r6,1008d40 <__muldf3+0x28c>
 1008ce8:	1811883a 	mov	r8,r3
 1008cec:	101f883a 	mov	r15,r2
 1008cf0:	980497fa 	slli	r2,r19,31
 1008cf4:	9016d07a 	srli	r11,r18,1
 1008cf8:	500697fa 	slli	r3,r10,31
 1008cfc:	480cd07a 	srli	r6,r9,1
 1008d00:	500ed07a 	srli	r7,r10,1
 1008d04:	12d6b03a 	or	r11,r2,r11
 1008d08:	00800044 	movi	r2,1
 1008d0c:	198cb03a 	or	r6,r3,r6
 1008d10:	4888703a 	and	r4,r9,r2
 1008d14:	9818d07a 	srli	r12,r19,1
 1008d18:	001b883a 	mov	r13,zero
 1008d1c:	03a00034 	movhi	r14,32768
 1008d20:	3013883a 	mov	r9,r6
 1008d24:	3815883a 	mov	r10,r7
 1008d28:	4091883a 	add	r8,r8,r2
 1008d2c:	20000226 	beq	r4,zero,1008d38 <__muldf3+0x284>
 1008d30:	5b64b03a 	or	r18,r11,r13
 1008d34:	63a6b03a 	or	r19,r12,r14
 1008d38:	7abfed36 	bltu	r15,r10,1008cf0 <__muldf3+0x23c>
 1008d3c:	da001015 	stw	r8,64(sp)
 1008d40:	00840034 	movhi	r2,4096
 1008d44:	10bfffc4 	addi	r2,r2,-1
 1008d48:	12801436 	bltu	r2,r10,1008d9c <__muldf3+0x2e8>
 1008d4c:	da001017 	ldw	r8,64(sp)
 1008d50:	101f883a 	mov	r15,r2
 1008d54:	4a45883a 	add	r2,r9,r9
 1008d58:	124d803a 	cmpltu	r6,r2,r9
 1008d5c:	5287883a 	add	r3,r10,r10
 1008d60:	9497883a 	add	r11,r18,r18
 1008d64:	5c8f803a 	cmpltu	r7,r11,r18
 1008d68:	9cd9883a 	add	r12,r19,r19
 1008d6c:	01000044 	movi	r4,1
 1008d70:	30cd883a 	add	r6,r6,r3
 1008d74:	3b0f883a 	add	r7,r7,r12
 1008d78:	423fffc4 	addi	r8,r8,-1
 1008d7c:	1013883a 	mov	r9,r2
 1008d80:	3015883a 	mov	r10,r6
 1008d84:	111ab03a 	or	r13,r2,r4
 1008d88:	98003016 	blt	r19,zero,1008e4c <__muldf3+0x398>
 1008d8c:	5825883a 	mov	r18,r11
 1008d90:	3827883a 	mov	r19,r7
 1008d94:	7abfef2e 	bgeu	r15,r10,1008d54 <__muldf3+0x2a0>
 1008d98:	da001015 	stw	r8,64(sp)
 1008d9c:	00803fc4 	movi	r2,255
 1008da0:	488e703a 	and	r7,r9,r2
 1008da4:	00802004 	movi	r2,128
 1008da8:	0007883a 	mov	r3,zero
 1008dac:	0011883a 	mov	r8,zero
 1008db0:	38801826 	beq	r7,r2,1008e14 <__muldf3+0x360>
 1008db4:	008000c4 	movi	r2,3
 1008db8:	d9000e04 	addi	r4,sp,56
 1008dbc:	da801215 	stw	r10,72(sp)
 1008dc0:	d8800e15 	stw	r2,56(sp)
 1008dc4:	da401115 	stw	r9,68(sp)
 1008dc8:	003f6a06 	br	1008b74 <__muldf3+0xc0>
 1008dcc:	89802126 	beq	r17,r6,1008e54 <__muldf3+0x3a0>
 1008dd0:	0009883a 	mov	r4,zero
 1008dd4:	5105883a 	add	r2,r10,r4
 1008dd8:	128d803a 	cmpltu	r6,r2,r10
 1008ddc:	5d07883a 	add	r3,r11,r20
 1008de0:	30cd883a 	add	r6,r6,r3
 1008de4:	0021883a 	mov	r16,zero
 1008de8:	0023883a 	mov	r17,zero
 1008dec:	1025883a 	mov	r18,r2
 1008df0:	3027883a 	mov	r19,r6
 1008df4:	32ff9e2e 	bgeu	r6,r11,1008c70 <__muldf3+0x1bc>
 1008df8:	00800044 	movi	r2,1
 1008dfc:	8089883a 	add	r4,r16,r2
 1008e00:	240d803a 	cmpltu	r6,r4,r16
 1008e04:	344d883a 	add	r6,r6,r17
 1008e08:	2021883a 	mov	r16,r4
 1008e0c:	3023883a 	mov	r17,r6
 1008e10:	003f9806 	br	1008c74 <__muldf3+0x1c0>
 1008e14:	403fe71e 	bne	r8,zero,1008db4 <__muldf3+0x300>
 1008e18:	01004004 	movi	r4,256
 1008e1c:	4904703a 	and	r2,r9,r4
 1008e20:	10c4b03a 	or	r2,r2,r3
 1008e24:	103fe31e 	bne	r2,zero,1008db4 <__muldf3+0x300>
 1008e28:	94c4b03a 	or	r2,r18,r19
 1008e2c:	103fe126 	beq	r2,zero,1008db4 <__muldf3+0x300>
 1008e30:	49c5883a 	add	r2,r9,r7
 1008e34:	1251803a 	cmpltu	r8,r2,r9
 1008e38:	4291883a 	add	r8,r8,r10
 1008e3c:	013fc004 	movi	r4,-256
 1008e40:	1112703a 	and	r9,r2,r4
 1008e44:	4015883a 	mov	r10,r8
 1008e48:	003fda06 	br	1008db4 <__muldf3+0x300>
 1008e4c:	6813883a 	mov	r9,r13
 1008e50:	003fce06 	br	1008d8c <__muldf3+0x2d8>
 1008e54:	143f7c36 	bltu	r2,r16,1008c48 <__muldf3+0x194>
 1008e58:	003fdd06 	br	1008dd0 <__muldf3+0x31c>
 1008e5c:	12bf852e 	bgeu	r2,r10,1008c74 <__muldf3+0x1c0>
 1008e60:	003fe506 	br	1008df8 <__muldf3+0x344>
 1008e64:	00800084 	movi	r2,2
 1008e68:	20bf351e 	bne	r4,r2,1008b40 <__muldf3+0x8c>
 1008e6c:	01004074 	movhi	r4,257
 1008e70:	2135b704 	addi	r4,r4,-10532
 1008e74:	003f3f06 	br	1008b74 <__muldf3+0xc0>

01008e78 <__divdf3>:
 1008e78:	deffed04 	addi	sp,sp,-76
 1008e7c:	dcc01115 	stw	r19,68(sp)
 1008e80:	dcc00404 	addi	r19,sp,16
 1008e84:	2011883a 	mov	r8,r4
 1008e88:	2813883a 	mov	r9,r5
 1008e8c:	dc000e15 	stw	r16,56(sp)
 1008e90:	d809883a 	mov	r4,sp
 1008e94:	980b883a 	mov	r5,r19
 1008e98:	dc000904 	addi	r16,sp,36
 1008e9c:	dfc01215 	stw	ra,72(sp)
 1008ea0:	da400115 	stw	r9,4(sp)
 1008ea4:	d9c00315 	stw	r7,12(sp)
 1008ea8:	da000015 	stw	r8,0(sp)
 1008eac:	d9800215 	stw	r6,8(sp)
 1008eb0:	dc801015 	stw	r18,64(sp)
 1008eb4:	dc400f15 	stw	r17,60(sp)
 1008eb8:	1009d180 	call	1009d18 <__unpack_d>
 1008ebc:	d9000204 	addi	r4,sp,8
 1008ec0:	800b883a 	mov	r5,r16
 1008ec4:	1009d180 	call	1009d18 <__unpack_d>
 1008ec8:	d9000417 	ldw	r4,16(sp)
 1008ecc:	00800044 	movi	r2,1
 1008ed0:	11000b2e 	bgeu	r2,r4,1008f00 <__divdf3+0x88>
 1008ed4:	d9400917 	ldw	r5,36(sp)
 1008ed8:	1140762e 	bgeu	r2,r5,10090b4 <__divdf3+0x23c>
 1008edc:	d8800517 	ldw	r2,20(sp)
 1008ee0:	d8c00a17 	ldw	r3,40(sp)
 1008ee4:	01800104 	movi	r6,4
 1008ee8:	10c4f03a 	xor	r2,r2,r3
 1008eec:	d8800515 	stw	r2,20(sp)
 1008ef0:	21800226 	beq	r4,r6,1008efc <__divdf3+0x84>
 1008ef4:	00800084 	movi	r2,2
 1008ef8:	2080141e 	bne	r4,r2,1008f4c <__divdf3+0xd4>
 1008efc:	29000926 	beq	r5,r4,1008f24 <__divdf3+0xac>
 1008f00:	9809883a 	mov	r4,r19
 1008f04:	1009a040 	call	1009a04 <__pack_d>
 1008f08:	dfc01217 	ldw	ra,72(sp)
 1008f0c:	dcc01117 	ldw	r19,68(sp)
 1008f10:	dc801017 	ldw	r18,64(sp)
 1008f14:	dc400f17 	ldw	r17,60(sp)
 1008f18:	dc000e17 	ldw	r16,56(sp)
 1008f1c:	dec01304 	addi	sp,sp,76
 1008f20:	f800283a 	ret
 1008f24:	01004074 	movhi	r4,257
 1008f28:	2135b704 	addi	r4,r4,-10532
 1008f2c:	1009a040 	call	1009a04 <__pack_d>
 1008f30:	dfc01217 	ldw	ra,72(sp)
 1008f34:	dcc01117 	ldw	r19,68(sp)
 1008f38:	dc801017 	ldw	r18,64(sp)
 1008f3c:	dc400f17 	ldw	r17,60(sp)
 1008f40:	dc000e17 	ldw	r16,56(sp)
 1008f44:	dec01304 	addi	sp,sp,76
 1008f48:	f800283a 	ret
 1008f4c:	29805b26 	beq	r5,r6,10090bc <__divdf3+0x244>
 1008f50:	28802d26 	beq	r5,r2,1009008 <__divdf3+0x190>
 1008f54:	d8c00617 	ldw	r3,24(sp)
 1008f58:	d8800b17 	ldw	r2,44(sp)
 1008f5c:	d9c00817 	ldw	r7,32(sp)
 1008f60:	dc400d17 	ldw	r17,52(sp)
 1008f64:	188bc83a 	sub	r5,r3,r2
 1008f68:	d9800717 	ldw	r6,28(sp)
 1008f6c:	dc000c17 	ldw	r16,48(sp)
 1008f70:	d9400615 	stw	r5,24(sp)
 1008f74:	3c403836 	bltu	r7,r17,1009058 <__divdf3+0x1e0>
 1008f78:	89c03626 	beq	r17,r7,1009054 <__divdf3+0x1dc>
 1008f7c:	0015883a 	mov	r10,zero
 1008f80:	001d883a 	mov	r14,zero
 1008f84:	02c40034 	movhi	r11,4096
 1008f88:	001f883a 	mov	r15,zero
 1008f8c:	003f883a 	mov	ra,zero
 1008f90:	04800f44 	movi	r18,61
 1008f94:	00000f06 	br	1008fd4 <__divdf3+0x15c>
 1008f98:	601d883a 	mov	r14,r12
 1008f9c:	681f883a 	mov	r15,r13
 1008fa0:	400d883a 	mov	r6,r8
 1008fa4:	100f883a 	mov	r7,r2
 1008fa8:	3191883a 	add	r8,r6,r6
 1008fac:	5808d07a 	srli	r4,r11,1
 1008fb0:	4185803a 	cmpltu	r2,r8,r6
 1008fb4:	39d3883a 	add	r9,r7,r7
 1008fb8:	28c6b03a 	or	r3,r5,r3
 1008fbc:	1245883a 	add	r2,r2,r9
 1008fc0:	1815883a 	mov	r10,r3
 1008fc4:	2017883a 	mov	r11,r4
 1008fc8:	400d883a 	mov	r6,r8
 1008fcc:	100f883a 	mov	r7,r2
 1008fd0:	fc801726 	beq	ra,r18,1009030 <__divdf3+0x1b8>
 1008fd4:	580a97fa 	slli	r5,r11,31
 1008fd8:	5006d07a 	srli	r3,r10,1
 1008fdc:	ffc00044 	addi	ra,ra,1
 1008fe0:	3c7ff136 	bltu	r7,r17,1008fa8 <__divdf3+0x130>
 1008fe4:	3411c83a 	sub	r8,r6,r16
 1008fe8:	3205803a 	cmpltu	r2,r6,r8
 1008fec:	3c53c83a 	sub	r9,r7,r17
 1008ff0:	7298b03a 	or	r12,r14,r10
 1008ff4:	7adab03a 	or	r13,r15,r11
 1008ff8:	4885c83a 	sub	r2,r9,r2
 1008ffc:	89ffe61e 	bne	r17,r7,1008f98 <__divdf3+0x120>
 1009000:	343fe936 	bltu	r6,r16,1008fa8 <__divdf3+0x130>
 1009004:	003fe406 	br	1008f98 <__divdf3+0x120>
 1009008:	9809883a 	mov	r4,r19
 100900c:	d9800415 	stw	r6,16(sp)
 1009010:	1009a040 	call	1009a04 <__pack_d>
 1009014:	dfc01217 	ldw	ra,72(sp)
 1009018:	dcc01117 	ldw	r19,68(sp)
 100901c:	dc801017 	ldw	r18,64(sp)
 1009020:	dc400f17 	ldw	r17,60(sp)
 1009024:	dc000e17 	ldw	r16,56(sp)
 1009028:	dec01304 	addi	sp,sp,76
 100902c:	f800283a 	ret
 1009030:	00803fc4 	movi	r2,255
 1009034:	7090703a 	and	r8,r14,r2
 1009038:	00802004 	movi	r2,128
 100903c:	0007883a 	mov	r3,zero
 1009040:	0013883a 	mov	r9,zero
 1009044:	40800d26 	beq	r8,r2,100907c <__divdf3+0x204>
 1009048:	dbc00815 	stw	r15,32(sp)
 100904c:	db800715 	stw	r14,28(sp)
 1009050:	003fab06 	br	1008f00 <__divdf3+0x88>
 1009054:	343fc92e 	bgeu	r6,r16,1008f7c <__divdf3+0x104>
 1009058:	3185883a 	add	r2,r6,r6
 100905c:	1189803a 	cmpltu	r4,r2,r6
 1009060:	39c7883a 	add	r3,r7,r7
 1009064:	20c9883a 	add	r4,r4,r3
 1009068:	297fffc4 	addi	r5,r5,-1
 100906c:	100d883a 	mov	r6,r2
 1009070:	200f883a 	mov	r7,r4
 1009074:	d9400615 	stw	r5,24(sp)
 1009078:	003fc006 	br	1008f7c <__divdf3+0x104>
 100907c:	483ff21e 	bne	r9,zero,1009048 <__divdf3+0x1d0>
 1009080:	01004004 	movi	r4,256
 1009084:	7104703a 	and	r2,r14,r4
 1009088:	10c4b03a 	or	r2,r2,r3
 100908c:	103fee1e 	bne	r2,zero,1009048 <__divdf3+0x1d0>
 1009090:	31c4b03a 	or	r2,r6,r7
 1009094:	103fec26 	beq	r2,zero,1009048 <__divdf3+0x1d0>
 1009098:	7205883a 	add	r2,r14,r8
 100909c:	1391803a 	cmpltu	r8,r2,r14
 10090a0:	43d1883a 	add	r8,r8,r15
 10090a4:	013fc004 	movi	r4,-256
 10090a8:	111c703a 	and	r14,r2,r4
 10090ac:	401f883a 	mov	r15,r8
 10090b0:	003fe506 	br	1009048 <__divdf3+0x1d0>
 10090b4:	8009883a 	mov	r4,r16
 10090b8:	003f9206 	br	1008f04 <__divdf3+0x8c>
 10090bc:	9809883a 	mov	r4,r19
 10090c0:	d8000715 	stw	zero,28(sp)
 10090c4:	d8000815 	stw	zero,32(sp)
 10090c8:	d8000615 	stw	zero,24(sp)
 10090cc:	003f8d06 	br	1008f04 <__divdf3+0x8c>

010090d0 <__eqdf2>:
 10090d0:	deffef04 	addi	sp,sp,-68
 10090d4:	dc400f15 	stw	r17,60(sp)
 10090d8:	dc400404 	addi	r17,sp,16
 10090dc:	2005883a 	mov	r2,r4
 10090e0:	2807883a 	mov	r3,r5
 10090e4:	dc000e15 	stw	r16,56(sp)
 10090e8:	d809883a 	mov	r4,sp
 10090ec:	880b883a 	mov	r5,r17
 10090f0:	dc000904 	addi	r16,sp,36
 10090f4:	d8c00115 	stw	r3,4(sp)
 10090f8:	d8800015 	stw	r2,0(sp)
 10090fc:	d9800215 	stw	r6,8(sp)
 1009100:	dfc01015 	stw	ra,64(sp)
 1009104:	d9c00315 	stw	r7,12(sp)
 1009108:	1009d180 	call	1009d18 <__unpack_d>
 100910c:	d9000204 	addi	r4,sp,8
 1009110:	800b883a 	mov	r5,r16
 1009114:	1009d180 	call	1009d18 <__unpack_d>
 1009118:	d8800417 	ldw	r2,16(sp)
 100911c:	00c00044 	movi	r3,1
 1009120:	180d883a 	mov	r6,r3
 1009124:	1880062e 	bgeu	r3,r2,1009140 <__eqdf2+0x70>
 1009128:	d8800917 	ldw	r2,36(sp)
 100912c:	8809883a 	mov	r4,r17
 1009130:	800b883a 	mov	r5,r16
 1009134:	1880022e 	bgeu	r3,r2,1009140 <__eqdf2+0x70>
 1009138:	1009e500 	call	1009e50 <__fpcmp_parts_d>
 100913c:	100d883a 	mov	r6,r2
 1009140:	3005883a 	mov	r2,r6
 1009144:	dfc01017 	ldw	ra,64(sp)
 1009148:	dc400f17 	ldw	r17,60(sp)
 100914c:	dc000e17 	ldw	r16,56(sp)
 1009150:	dec01104 	addi	sp,sp,68
 1009154:	f800283a 	ret

01009158 <__nedf2>:
 1009158:	deffef04 	addi	sp,sp,-68
 100915c:	dc400f15 	stw	r17,60(sp)
 1009160:	dc400404 	addi	r17,sp,16
 1009164:	2005883a 	mov	r2,r4
 1009168:	2807883a 	mov	r3,r5
 100916c:	dc000e15 	stw	r16,56(sp)
 1009170:	d809883a 	mov	r4,sp
 1009174:	880b883a 	mov	r5,r17
 1009178:	dc000904 	addi	r16,sp,36
 100917c:	d8c00115 	stw	r3,4(sp)
 1009180:	d8800015 	stw	r2,0(sp)
 1009184:	d9800215 	stw	r6,8(sp)
 1009188:	dfc01015 	stw	ra,64(sp)
 100918c:	d9c00315 	stw	r7,12(sp)
 1009190:	1009d180 	call	1009d18 <__unpack_d>
 1009194:	d9000204 	addi	r4,sp,8
 1009198:	800b883a 	mov	r5,r16
 100919c:	1009d180 	call	1009d18 <__unpack_d>
 10091a0:	d8800417 	ldw	r2,16(sp)
 10091a4:	00c00044 	movi	r3,1
 10091a8:	180d883a 	mov	r6,r3
 10091ac:	1880062e 	bgeu	r3,r2,10091c8 <__nedf2+0x70>
 10091b0:	d8800917 	ldw	r2,36(sp)
 10091b4:	8809883a 	mov	r4,r17
 10091b8:	800b883a 	mov	r5,r16
 10091bc:	1880022e 	bgeu	r3,r2,10091c8 <__nedf2+0x70>
 10091c0:	1009e500 	call	1009e50 <__fpcmp_parts_d>
 10091c4:	100d883a 	mov	r6,r2
 10091c8:	3005883a 	mov	r2,r6
 10091cc:	dfc01017 	ldw	ra,64(sp)
 10091d0:	dc400f17 	ldw	r17,60(sp)
 10091d4:	dc000e17 	ldw	r16,56(sp)
 10091d8:	dec01104 	addi	sp,sp,68
 10091dc:	f800283a 	ret

010091e0 <__gtdf2>:
 10091e0:	deffef04 	addi	sp,sp,-68
 10091e4:	dc400f15 	stw	r17,60(sp)
 10091e8:	dc400404 	addi	r17,sp,16
 10091ec:	2005883a 	mov	r2,r4
 10091f0:	2807883a 	mov	r3,r5
 10091f4:	dc000e15 	stw	r16,56(sp)
 10091f8:	d809883a 	mov	r4,sp
 10091fc:	880b883a 	mov	r5,r17
 1009200:	dc000904 	addi	r16,sp,36
 1009204:	d8c00115 	stw	r3,4(sp)
 1009208:	d8800015 	stw	r2,0(sp)
 100920c:	d9800215 	stw	r6,8(sp)
 1009210:	dfc01015 	stw	ra,64(sp)
 1009214:	d9c00315 	stw	r7,12(sp)
 1009218:	1009d180 	call	1009d18 <__unpack_d>
 100921c:	d9000204 	addi	r4,sp,8
 1009220:	800b883a 	mov	r5,r16
 1009224:	1009d180 	call	1009d18 <__unpack_d>
 1009228:	d8800417 	ldw	r2,16(sp)
 100922c:	00c00044 	movi	r3,1
 1009230:	01bfffc4 	movi	r6,-1
 1009234:	1880062e 	bgeu	r3,r2,1009250 <__gtdf2+0x70>
 1009238:	d8800917 	ldw	r2,36(sp)
 100923c:	8809883a 	mov	r4,r17
 1009240:	800b883a 	mov	r5,r16
 1009244:	1880022e 	bgeu	r3,r2,1009250 <__gtdf2+0x70>
 1009248:	1009e500 	call	1009e50 <__fpcmp_parts_d>
 100924c:	100d883a 	mov	r6,r2
 1009250:	3005883a 	mov	r2,r6
 1009254:	dfc01017 	ldw	ra,64(sp)
 1009258:	dc400f17 	ldw	r17,60(sp)
 100925c:	dc000e17 	ldw	r16,56(sp)
 1009260:	dec01104 	addi	sp,sp,68
 1009264:	f800283a 	ret

01009268 <__gedf2>:
 1009268:	deffef04 	addi	sp,sp,-68
 100926c:	dc400f15 	stw	r17,60(sp)
 1009270:	dc400404 	addi	r17,sp,16
 1009274:	2005883a 	mov	r2,r4
 1009278:	2807883a 	mov	r3,r5
 100927c:	dc000e15 	stw	r16,56(sp)
 1009280:	d809883a 	mov	r4,sp
 1009284:	880b883a 	mov	r5,r17
 1009288:	dc000904 	addi	r16,sp,36
 100928c:	d8c00115 	stw	r3,4(sp)
 1009290:	d8800015 	stw	r2,0(sp)
 1009294:	d9800215 	stw	r6,8(sp)
 1009298:	dfc01015 	stw	ra,64(sp)
 100929c:	d9c00315 	stw	r7,12(sp)
 10092a0:	1009d180 	call	1009d18 <__unpack_d>
 10092a4:	d9000204 	addi	r4,sp,8
 10092a8:	800b883a 	mov	r5,r16
 10092ac:	1009d180 	call	1009d18 <__unpack_d>
 10092b0:	d8800417 	ldw	r2,16(sp)
 10092b4:	00c00044 	movi	r3,1
 10092b8:	01bfffc4 	movi	r6,-1
 10092bc:	1880062e 	bgeu	r3,r2,10092d8 <__gedf2+0x70>
 10092c0:	d8800917 	ldw	r2,36(sp)
 10092c4:	8809883a 	mov	r4,r17
 10092c8:	800b883a 	mov	r5,r16
 10092cc:	1880022e 	bgeu	r3,r2,10092d8 <__gedf2+0x70>
 10092d0:	1009e500 	call	1009e50 <__fpcmp_parts_d>
 10092d4:	100d883a 	mov	r6,r2
 10092d8:	3005883a 	mov	r2,r6
 10092dc:	dfc01017 	ldw	ra,64(sp)
 10092e0:	dc400f17 	ldw	r17,60(sp)
 10092e4:	dc000e17 	ldw	r16,56(sp)
 10092e8:	dec01104 	addi	sp,sp,68
 10092ec:	f800283a 	ret

010092f0 <__ltdf2>:
 10092f0:	deffef04 	addi	sp,sp,-68
 10092f4:	dc400f15 	stw	r17,60(sp)
 10092f8:	dc400404 	addi	r17,sp,16
 10092fc:	2005883a 	mov	r2,r4
 1009300:	2807883a 	mov	r3,r5
 1009304:	dc000e15 	stw	r16,56(sp)
 1009308:	d809883a 	mov	r4,sp
 100930c:	880b883a 	mov	r5,r17
 1009310:	dc000904 	addi	r16,sp,36
 1009314:	d8c00115 	stw	r3,4(sp)
 1009318:	d8800015 	stw	r2,0(sp)
 100931c:	d9800215 	stw	r6,8(sp)
 1009320:	dfc01015 	stw	ra,64(sp)
 1009324:	d9c00315 	stw	r7,12(sp)
 1009328:	1009d180 	call	1009d18 <__unpack_d>
 100932c:	d9000204 	addi	r4,sp,8
 1009330:	800b883a 	mov	r5,r16
 1009334:	1009d180 	call	1009d18 <__unpack_d>
 1009338:	d8800417 	ldw	r2,16(sp)
 100933c:	00c00044 	movi	r3,1
 1009340:	180d883a 	mov	r6,r3
 1009344:	1880062e 	bgeu	r3,r2,1009360 <__ltdf2+0x70>
 1009348:	d8800917 	ldw	r2,36(sp)
 100934c:	8809883a 	mov	r4,r17
 1009350:	800b883a 	mov	r5,r16
 1009354:	1880022e 	bgeu	r3,r2,1009360 <__ltdf2+0x70>
 1009358:	1009e500 	call	1009e50 <__fpcmp_parts_d>
 100935c:	100d883a 	mov	r6,r2
 1009360:	3005883a 	mov	r2,r6
 1009364:	dfc01017 	ldw	ra,64(sp)
 1009368:	dc400f17 	ldw	r17,60(sp)
 100936c:	dc000e17 	ldw	r16,56(sp)
 1009370:	dec01104 	addi	sp,sp,68
 1009374:	f800283a 	ret

01009378 <__floatsidf>:
 1009378:	2006d7fa 	srli	r3,r4,31
 100937c:	defff604 	addi	sp,sp,-40
 1009380:	008000c4 	movi	r2,3
 1009384:	dfc00915 	stw	ra,36(sp)
 1009388:	dcc00815 	stw	r19,32(sp)
 100938c:	dc800715 	stw	r18,28(sp)
 1009390:	dc400615 	stw	r17,24(sp)
 1009394:	dc000515 	stw	r16,20(sp)
 1009398:	d8800015 	stw	r2,0(sp)
 100939c:	d8c00115 	stw	r3,4(sp)
 10093a0:	20000f1e 	bne	r4,zero,10093e0 <__floatsidf+0x68>
 10093a4:	00800084 	movi	r2,2
 10093a8:	d8800015 	stw	r2,0(sp)
 10093ac:	d809883a 	mov	r4,sp
 10093b0:	1009a040 	call	1009a04 <__pack_d>
 10093b4:	1009883a 	mov	r4,r2
 10093b8:	180b883a 	mov	r5,r3
 10093bc:	2005883a 	mov	r2,r4
 10093c0:	2807883a 	mov	r3,r5
 10093c4:	dfc00917 	ldw	ra,36(sp)
 10093c8:	dcc00817 	ldw	r19,32(sp)
 10093cc:	dc800717 	ldw	r18,28(sp)
 10093d0:	dc400617 	ldw	r17,24(sp)
 10093d4:	dc000517 	ldw	r16,20(sp)
 10093d8:	dec00a04 	addi	sp,sp,40
 10093dc:	f800283a 	ret
 10093e0:	00800f04 	movi	r2,60
 10093e4:	1807003a 	cmpeq	r3,r3,zero
 10093e8:	d8800215 	stw	r2,8(sp)
 10093ec:	18001126 	beq	r3,zero,1009434 <__floatsidf+0xbc>
 10093f0:	0027883a 	mov	r19,zero
 10093f4:	2025883a 	mov	r18,r4
 10093f8:	d9000315 	stw	r4,12(sp)
 10093fc:	dcc00415 	stw	r19,16(sp)
 1009400:	10099840 	call	1009984 <__clzsi2>
 1009404:	11000744 	addi	r4,r2,29
 1009408:	013fe80e 	bge	zero,r4,10093ac <__floatsidf+0x34>
 100940c:	10bfff44 	addi	r2,r2,-3
 1009410:	10000c16 	blt	r2,zero,1009444 <__floatsidf+0xcc>
 1009414:	90a2983a 	sll	r17,r18,r2
 1009418:	0021883a 	mov	r16,zero
 100941c:	d8800217 	ldw	r2,8(sp)
 1009420:	dc400415 	stw	r17,16(sp)
 1009424:	dc000315 	stw	r16,12(sp)
 1009428:	1105c83a 	sub	r2,r2,r4
 100942c:	d8800215 	stw	r2,8(sp)
 1009430:	003fde06 	br	10093ac <__floatsidf+0x34>
 1009434:	00a00034 	movhi	r2,32768
 1009438:	20800a26 	beq	r4,r2,1009464 <__floatsidf+0xec>
 100943c:	0109c83a 	sub	r4,zero,r4
 1009440:	003feb06 	br	10093f0 <__floatsidf+0x78>
 1009444:	9006d07a 	srli	r3,r18,1
 1009448:	008007c4 	movi	r2,31
 100944c:	1105c83a 	sub	r2,r2,r4
 1009450:	1886d83a 	srl	r3,r3,r2
 1009454:	9922983a 	sll	r17,r19,r4
 1009458:	9120983a 	sll	r16,r18,r4
 100945c:	1c62b03a 	or	r17,r3,r17
 1009460:	003fee06 	br	100941c <__floatsidf+0xa4>
 1009464:	0009883a 	mov	r4,zero
 1009468:	01707834 	movhi	r5,49632
 100946c:	003fd306 	br	10093bc <__floatsidf+0x44>

01009470 <__fixdfsi>:
 1009470:	defff804 	addi	sp,sp,-32
 1009474:	2005883a 	mov	r2,r4
 1009478:	2807883a 	mov	r3,r5
 100947c:	d809883a 	mov	r4,sp
 1009480:	d9400204 	addi	r5,sp,8
 1009484:	d8c00115 	stw	r3,4(sp)
 1009488:	d8800015 	stw	r2,0(sp)
 100948c:	dfc00715 	stw	ra,28(sp)
 1009490:	1009d180 	call	1009d18 <__unpack_d>
 1009494:	d8c00217 	ldw	r3,8(sp)
 1009498:	00800084 	movi	r2,2
 100949c:	1880051e 	bne	r3,r2,10094b4 <__fixdfsi+0x44>
 10094a0:	0007883a 	mov	r3,zero
 10094a4:	1805883a 	mov	r2,r3
 10094a8:	dfc00717 	ldw	ra,28(sp)
 10094ac:	dec00804 	addi	sp,sp,32
 10094b0:	f800283a 	ret
 10094b4:	00800044 	movi	r2,1
 10094b8:	10fff92e 	bgeu	r2,r3,10094a0 <__fixdfsi+0x30>
 10094bc:	00800104 	movi	r2,4
 10094c0:	18800426 	beq	r3,r2,10094d4 <__fixdfsi+0x64>
 10094c4:	d8c00417 	ldw	r3,16(sp)
 10094c8:	183ff516 	blt	r3,zero,10094a0 <__fixdfsi+0x30>
 10094cc:	00800784 	movi	r2,30
 10094d0:	10c0080e 	bge	r2,r3,10094f4 <__fixdfsi+0x84>
 10094d4:	d8800317 	ldw	r2,12(sp)
 10094d8:	1000121e 	bne	r2,zero,1009524 <__fixdfsi+0xb4>
 10094dc:	00e00034 	movhi	r3,32768
 10094e0:	18ffffc4 	addi	r3,r3,-1
 10094e4:	1805883a 	mov	r2,r3
 10094e8:	dfc00717 	ldw	ra,28(sp)
 10094ec:	dec00804 	addi	sp,sp,32
 10094f0:	f800283a 	ret
 10094f4:	00800f04 	movi	r2,60
 10094f8:	10d1c83a 	sub	r8,r2,r3
 10094fc:	40bff804 	addi	r2,r8,-32
 1009500:	d9800517 	ldw	r6,20(sp)
 1009504:	d9c00617 	ldw	r7,24(sp)
 1009508:	10000816 	blt	r2,zero,100952c <__fixdfsi+0xbc>
 100950c:	3888d83a 	srl	r4,r7,r2
 1009510:	d8800317 	ldw	r2,12(sp)
 1009514:	2007883a 	mov	r3,r4
 1009518:	103fe226 	beq	r2,zero,10094a4 <__fixdfsi+0x34>
 100951c:	0107c83a 	sub	r3,zero,r4
 1009520:	003fe006 	br	10094a4 <__fixdfsi+0x34>
 1009524:	00e00034 	movhi	r3,32768
 1009528:	003fde06 	br	10094a4 <__fixdfsi+0x34>
 100952c:	39c7883a 	add	r3,r7,r7
 1009530:	008007c4 	movi	r2,31
 1009534:	1205c83a 	sub	r2,r2,r8
 1009538:	1886983a 	sll	r3,r3,r2
 100953c:	3208d83a 	srl	r4,r6,r8
 1009540:	1908b03a 	or	r4,r3,r4
 1009544:	003ff206 	br	1009510 <__fixdfsi+0xa0>

01009548 <__floatunsidf>:
 1009548:	defff204 	addi	sp,sp,-56
 100954c:	dfc00d15 	stw	ra,52(sp)
 1009550:	ddc00c15 	stw	r23,48(sp)
 1009554:	dd800b15 	stw	r22,44(sp)
 1009558:	dd400a15 	stw	r21,40(sp)
 100955c:	dd000915 	stw	r20,36(sp)
 1009560:	dcc00815 	stw	r19,32(sp)
 1009564:	dc800715 	stw	r18,28(sp)
 1009568:	dc400615 	stw	r17,24(sp)
 100956c:	dc000515 	stw	r16,20(sp)
 1009570:	d8000115 	stw	zero,4(sp)
 1009574:	20000f1e 	bne	r4,zero,10095b4 <__floatunsidf+0x6c>
 1009578:	00800084 	movi	r2,2
 100957c:	d8800015 	stw	r2,0(sp)
 1009580:	d809883a 	mov	r4,sp
 1009584:	1009a040 	call	1009a04 <__pack_d>
 1009588:	dfc00d17 	ldw	ra,52(sp)
 100958c:	ddc00c17 	ldw	r23,48(sp)
 1009590:	dd800b17 	ldw	r22,44(sp)
 1009594:	dd400a17 	ldw	r21,40(sp)
 1009598:	dd000917 	ldw	r20,36(sp)
 100959c:	dcc00817 	ldw	r19,32(sp)
 10095a0:	dc800717 	ldw	r18,28(sp)
 10095a4:	dc400617 	ldw	r17,24(sp)
 10095a8:	dc000517 	ldw	r16,20(sp)
 10095ac:	dec00e04 	addi	sp,sp,56
 10095b0:	f800283a 	ret
 10095b4:	008000c4 	movi	r2,3
 10095b8:	00c00f04 	movi	r3,60
 10095bc:	002f883a 	mov	r23,zero
 10095c0:	202d883a 	mov	r22,r4
 10095c4:	d8800015 	stw	r2,0(sp)
 10095c8:	d8c00215 	stw	r3,8(sp)
 10095cc:	d9000315 	stw	r4,12(sp)
 10095d0:	ddc00415 	stw	r23,16(sp)
 10095d4:	10099840 	call	1009984 <__clzsi2>
 10095d8:	12400744 	addi	r9,r2,29
 10095dc:	48000b16 	blt	r9,zero,100960c <__floatunsidf+0xc4>
 10095e0:	483fe726 	beq	r9,zero,1009580 <__floatunsidf+0x38>
 10095e4:	10bfff44 	addi	r2,r2,-3
 10095e8:	10002e16 	blt	r2,zero,10096a4 <__floatunsidf+0x15c>
 10095ec:	b0a2983a 	sll	r17,r22,r2
 10095f0:	0021883a 	mov	r16,zero
 10095f4:	d8800217 	ldw	r2,8(sp)
 10095f8:	dc400415 	stw	r17,16(sp)
 10095fc:	dc000315 	stw	r16,12(sp)
 1009600:	1245c83a 	sub	r2,r2,r9
 1009604:	d8800215 	stw	r2,8(sp)
 1009608:	003fdd06 	br	1009580 <__floatunsidf+0x38>
 100960c:	0255c83a 	sub	r10,zero,r9
 1009610:	51bff804 	addi	r6,r10,-32
 1009614:	30001b16 	blt	r6,zero,1009684 <__floatunsidf+0x13c>
 1009618:	b9a8d83a 	srl	r20,r23,r6
 100961c:	002b883a 	mov	r21,zero
 1009620:	000f883a 	mov	r7,zero
 1009624:	01000044 	movi	r4,1
 1009628:	0011883a 	mov	r8,zero
 100962c:	30002516 	blt	r6,zero,10096c4 <__floatunsidf+0x17c>
 1009630:	21a6983a 	sll	r19,r4,r6
 1009634:	0025883a 	mov	r18,zero
 1009638:	00bfffc4 	movi	r2,-1
 100963c:	9089883a 	add	r4,r18,r2
 1009640:	988b883a 	add	r5,r19,r2
 1009644:	248d803a 	cmpltu	r6,r4,r18
 1009648:	314b883a 	add	r5,r6,r5
 100964c:	b104703a 	and	r2,r22,r4
 1009650:	b946703a 	and	r3,r23,r5
 1009654:	10c4b03a 	or	r2,r2,r3
 1009658:	10000226 	beq	r2,zero,1009664 <__floatunsidf+0x11c>
 100965c:	01c00044 	movi	r7,1
 1009660:	0011883a 	mov	r8,zero
 1009664:	d9000217 	ldw	r4,8(sp)
 1009668:	a1c4b03a 	or	r2,r20,r7
 100966c:	aa06b03a 	or	r3,r21,r8
 1009670:	2249c83a 	sub	r4,r4,r9
 1009674:	d8c00415 	stw	r3,16(sp)
 1009678:	d9000215 	stw	r4,8(sp)
 100967c:	d8800315 	stw	r2,12(sp)
 1009680:	003fbf06 	br	1009580 <__floatunsidf+0x38>
 1009684:	bdc7883a 	add	r3,r23,r23
 1009688:	008007c4 	movi	r2,31
 100968c:	1285c83a 	sub	r2,r2,r10
 1009690:	1886983a 	sll	r3,r3,r2
 1009694:	b2a8d83a 	srl	r20,r22,r10
 1009698:	baaad83a 	srl	r21,r23,r10
 100969c:	1d28b03a 	or	r20,r3,r20
 10096a0:	003fdf06 	br	1009620 <__floatunsidf+0xd8>
 10096a4:	b006d07a 	srli	r3,r22,1
 10096a8:	008007c4 	movi	r2,31
 10096ac:	1245c83a 	sub	r2,r2,r9
 10096b0:	1886d83a 	srl	r3,r3,r2
 10096b4:	ba62983a 	sll	r17,r23,r9
 10096b8:	b260983a 	sll	r16,r22,r9
 10096bc:	1c62b03a 	or	r17,r3,r17
 10096c0:	003fcc06 	br	10095f4 <__floatunsidf+0xac>
 10096c4:	2006d07a 	srli	r3,r4,1
 10096c8:	008007c4 	movi	r2,31
 10096cc:	1285c83a 	sub	r2,r2,r10
 10096d0:	18a6d83a 	srl	r19,r3,r2
 10096d4:	22a4983a 	sll	r18,r4,r10
 10096d8:	003fd706 	br	1009638 <__floatunsidf+0xf0>

010096dc <udivmodsi4>:
 10096dc:	29001b2e 	bgeu	r5,r4,100974c <udivmodsi4+0x70>
 10096e0:	28001a16 	blt	r5,zero,100974c <udivmodsi4+0x70>
 10096e4:	00800044 	movi	r2,1
 10096e8:	0007883a 	mov	r3,zero
 10096ec:	01c007c4 	movi	r7,31
 10096f0:	00000306 	br	1009700 <udivmodsi4+0x24>
 10096f4:	19c01326 	beq	r3,r7,1009744 <udivmodsi4+0x68>
 10096f8:	18c00044 	addi	r3,r3,1
 10096fc:	28000416 	blt	r5,zero,1009710 <udivmodsi4+0x34>
 1009700:	294b883a 	add	r5,r5,r5
 1009704:	1085883a 	add	r2,r2,r2
 1009708:	293ffa36 	bltu	r5,r4,10096f4 <udivmodsi4+0x18>
 100970c:	10000d26 	beq	r2,zero,1009744 <udivmodsi4+0x68>
 1009710:	0007883a 	mov	r3,zero
 1009714:	21400236 	bltu	r4,r5,1009720 <udivmodsi4+0x44>
 1009718:	2149c83a 	sub	r4,r4,r5
 100971c:	1886b03a 	or	r3,r3,r2
 1009720:	1004d07a 	srli	r2,r2,1
 1009724:	280ad07a 	srli	r5,r5,1
 1009728:	103ffa1e 	bne	r2,zero,1009714 <udivmodsi4+0x38>
 100972c:	30000226 	beq	r6,zero,1009738 <udivmodsi4+0x5c>
 1009730:	2005883a 	mov	r2,r4
 1009734:	f800283a 	ret
 1009738:	1809883a 	mov	r4,r3
 100973c:	2005883a 	mov	r2,r4
 1009740:	f800283a 	ret
 1009744:	0007883a 	mov	r3,zero
 1009748:	003ff806 	br	100972c <udivmodsi4+0x50>
 100974c:	00800044 	movi	r2,1
 1009750:	0007883a 	mov	r3,zero
 1009754:	003fef06 	br	1009714 <udivmodsi4+0x38>

01009758 <__divsi3>:
 1009758:	defffe04 	addi	sp,sp,-8
 100975c:	dc000015 	stw	r16,0(sp)
 1009760:	dfc00115 	stw	ra,4(sp)
 1009764:	0021883a 	mov	r16,zero
 1009768:	20000c16 	blt	r4,zero,100979c <__divsi3+0x44>
 100976c:	000d883a 	mov	r6,zero
 1009770:	28000e16 	blt	r5,zero,10097ac <__divsi3+0x54>
 1009774:	10096dc0 	call	10096dc <udivmodsi4>
 1009778:	1007883a 	mov	r3,r2
 100977c:	8005003a 	cmpeq	r2,r16,zero
 1009780:	1000011e 	bne	r2,zero,1009788 <__divsi3+0x30>
 1009784:	00c7c83a 	sub	r3,zero,r3
 1009788:	1805883a 	mov	r2,r3
 100978c:	dfc00117 	ldw	ra,4(sp)
 1009790:	dc000017 	ldw	r16,0(sp)
 1009794:	dec00204 	addi	sp,sp,8
 1009798:	f800283a 	ret
 100979c:	0109c83a 	sub	r4,zero,r4
 10097a0:	04000044 	movi	r16,1
 10097a4:	000d883a 	mov	r6,zero
 10097a8:	283ff20e 	bge	r5,zero,1009774 <__divsi3+0x1c>
 10097ac:	014bc83a 	sub	r5,zero,r5
 10097b0:	8021003a 	cmpeq	r16,r16,zero
 10097b4:	003fef06 	br	1009774 <__divsi3+0x1c>

010097b8 <__modsi3>:
 10097b8:	deffff04 	addi	sp,sp,-4
 10097bc:	dfc00015 	stw	ra,0(sp)
 10097c0:	01800044 	movi	r6,1
 10097c4:	2807883a 	mov	r3,r5
 10097c8:	20000416 	blt	r4,zero,10097dc <__modsi3+0x24>
 10097cc:	28000c16 	blt	r5,zero,1009800 <__modsi3+0x48>
 10097d0:	dfc00017 	ldw	ra,0(sp)
 10097d4:	dec00104 	addi	sp,sp,4
 10097d8:	10096dc1 	jmpi	10096dc <udivmodsi4>
 10097dc:	0109c83a 	sub	r4,zero,r4
 10097e0:	28000b16 	blt	r5,zero,1009810 <__modsi3+0x58>
 10097e4:	180b883a 	mov	r5,r3
 10097e8:	01800044 	movi	r6,1
 10097ec:	10096dc0 	call	10096dc <udivmodsi4>
 10097f0:	0085c83a 	sub	r2,zero,r2
 10097f4:	dfc00017 	ldw	ra,0(sp)
 10097f8:	dec00104 	addi	sp,sp,4
 10097fc:	f800283a 	ret
 1009800:	014bc83a 	sub	r5,zero,r5
 1009804:	dfc00017 	ldw	ra,0(sp)
 1009808:	dec00104 	addi	sp,sp,4
 100980c:	10096dc1 	jmpi	10096dc <udivmodsi4>
 1009810:	0147c83a 	sub	r3,zero,r5
 1009814:	003ff306 	br	10097e4 <__modsi3+0x2c>

01009818 <__udivsi3>:
 1009818:	000d883a 	mov	r6,zero
 100981c:	10096dc1 	jmpi	10096dc <udivmodsi4>

01009820 <__umodsi3>:
 1009820:	01800044 	movi	r6,1
 1009824:	10096dc1 	jmpi	10096dc <udivmodsi4>

01009828 <__mulsi3>:
 1009828:	20000a26 	beq	r4,zero,1009854 <__mulsi3+0x2c>
 100982c:	0007883a 	mov	r3,zero
 1009830:	2080004c 	andi	r2,r4,1
 1009834:	1005003a 	cmpeq	r2,r2,zero
 1009838:	2008d07a 	srli	r4,r4,1
 100983c:	1000011e 	bne	r2,zero,1009844 <__mulsi3+0x1c>
 1009840:	1947883a 	add	r3,r3,r5
 1009844:	294b883a 	add	r5,r5,r5
 1009848:	203ff91e 	bne	r4,zero,1009830 <__mulsi3+0x8>
 100984c:	1805883a 	mov	r2,r3
 1009850:	f800283a 	ret
 1009854:	0007883a 	mov	r3,zero
 1009858:	1805883a 	mov	r2,r3
 100985c:	f800283a 	ret

01009860 <__muldi3>:
 1009860:	defff204 	addi	sp,sp,-56
 1009864:	df000c15 	stw	fp,48(sp)
 1009868:	3038d43a 	srli	fp,r6,16
 100986c:	dd000815 	stw	r20,32(sp)
 1009870:	dc400515 	stw	r17,20(sp)
 1009874:	2028d43a 	srli	r20,r4,16
 1009878:	247fffcc 	andi	r17,r4,65535
 100987c:	dc000415 	stw	r16,16(sp)
 1009880:	343fffcc 	andi	r16,r6,65535
 1009884:	dcc00715 	stw	r19,28(sp)
 1009888:	d9000015 	stw	r4,0(sp)
 100988c:	2827883a 	mov	r19,r5
 1009890:	8809883a 	mov	r4,r17
 1009894:	d9400115 	stw	r5,4(sp)
 1009898:	800b883a 	mov	r5,r16
 100989c:	d9800215 	stw	r6,8(sp)
 10098a0:	dfc00d15 	stw	ra,52(sp)
 10098a4:	d9c00315 	stw	r7,12(sp)
 10098a8:	dd800a15 	stw	r22,40(sp)
 10098ac:	dd400915 	stw	r21,36(sp)
 10098b0:	302d883a 	mov	r22,r6
 10098b4:	ddc00b15 	stw	r23,44(sp)
 10098b8:	dc800615 	stw	r18,24(sp)
 10098bc:	10098280 	call	1009828 <__mulsi3>
 10098c0:	8809883a 	mov	r4,r17
 10098c4:	e00b883a 	mov	r5,fp
 10098c8:	102b883a 	mov	r21,r2
 10098cc:	10098280 	call	1009828 <__mulsi3>
 10098d0:	800b883a 	mov	r5,r16
 10098d4:	a009883a 	mov	r4,r20
 10098d8:	1023883a 	mov	r17,r2
 10098dc:	10098280 	call	1009828 <__mulsi3>
 10098e0:	a009883a 	mov	r4,r20
 10098e4:	e00b883a 	mov	r5,fp
 10098e8:	1021883a 	mov	r16,r2
 10098ec:	10098280 	call	1009828 <__mulsi3>
 10098f0:	a8ffffcc 	andi	r3,r21,65535
 10098f4:	a82ad43a 	srli	r21,r21,16
 10098f8:	8c23883a 	add	r17,r17,r16
 10098fc:	1011883a 	mov	r8,r2
 1009900:	ac6b883a 	add	r21,r21,r17
 1009904:	a804943a 	slli	r2,r21,16
 1009908:	b009883a 	mov	r4,r22
 100990c:	980b883a 	mov	r5,r19
 1009910:	10c7883a 	add	r3,r2,r3
 1009914:	a812d43a 	srli	r9,r21,16
 1009918:	180d883a 	mov	r6,r3
 100991c:	ac00022e 	bgeu	r21,r16,1009928 <__muldi3+0xc8>
 1009920:	00800074 	movhi	r2,1
 1009924:	4091883a 	add	r8,r8,r2
 1009928:	4267883a 	add	r19,r8,r9
 100992c:	302d883a 	mov	r22,r6
 1009930:	10098280 	call	1009828 <__mulsi3>
 1009934:	d9400317 	ldw	r5,12(sp)
 1009938:	d9000017 	ldw	r4,0(sp)
 100993c:	1023883a 	mov	r17,r2
 1009940:	10098280 	call	1009828 <__mulsi3>
 1009944:	14cb883a 	add	r5,r2,r19
 1009948:	894b883a 	add	r5,r17,r5
 100994c:	b005883a 	mov	r2,r22
 1009950:	2807883a 	mov	r3,r5
 1009954:	dfc00d17 	ldw	ra,52(sp)
 1009958:	df000c17 	ldw	fp,48(sp)
 100995c:	ddc00b17 	ldw	r23,44(sp)
 1009960:	dd800a17 	ldw	r22,40(sp)
 1009964:	dd400917 	ldw	r21,36(sp)
 1009968:	dd000817 	ldw	r20,32(sp)
 100996c:	dcc00717 	ldw	r19,28(sp)
 1009970:	dc800617 	ldw	r18,24(sp)
 1009974:	dc400517 	ldw	r17,20(sp)
 1009978:	dc000417 	ldw	r16,16(sp)
 100997c:	dec00e04 	addi	sp,sp,56
 1009980:	f800283a 	ret

01009984 <__clzsi2>:
 1009984:	00bfffd4 	movui	r2,65535
 1009988:	11000e36 	bltu	r2,r4,10099c4 <__clzsi2+0x40>
 100998c:	00803fc4 	movi	r2,255
 1009990:	01400204 	movi	r5,8
 1009994:	0007883a 	mov	r3,zero
 1009998:	11001036 	bltu	r2,r4,10099dc <__clzsi2+0x58>
 100999c:	000b883a 	mov	r5,zero
 10099a0:	20c6d83a 	srl	r3,r4,r3
 10099a4:	00804074 	movhi	r2,257
 10099a8:	10b5bc04 	addi	r2,r2,-10512
 10099ac:	1887883a 	add	r3,r3,r2
 10099b0:	18800003 	ldbu	r2,0(r3)
 10099b4:	00c00804 	movi	r3,32
 10099b8:	2885883a 	add	r2,r5,r2
 10099bc:	1885c83a 	sub	r2,r3,r2
 10099c0:	f800283a 	ret
 10099c4:	01400404 	movi	r5,16
 10099c8:	00804034 	movhi	r2,256
 10099cc:	10bfffc4 	addi	r2,r2,-1
 10099d0:	2807883a 	mov	r3,r5
 10099d4:	113ff22e 	bgeu	r2,r4,10099a0 <__clzsi2+0x1c>
 10099d8:	01400604 	movi	r5,24
 10099dc:	2807883a 	mov	r3,r5
 10099e0:	20c6d83a 	srl	r3,r4,r3
 10099e4:	00804074 	movhi	r2,257
 10099e8:	10b5bc04 	addi	r2,r2,-10512
 10099ec:	1887883a 	add	r3,r3,r2
 10099f0:	18800003 	ldbu	r2,0(r3)
 10099f4:	00c00804 	movi	r3,32
 10099f8:	2885883a 	add	r2,r5,r2
 10099fc:	1885c83a 	sub	r2,r3,r2
 1009a00:	f800283a 	ret

01009a04 <__pack_d>:
 1009a04:	20c00017 	ldw	r3,0(r4)
 1009a08:	defffd04 	addi	sp,sp,-12
 1009a0c:	dc000015 	stw	r16,0(sp)
 1009a10:	dc800215 	stw	r18,8(sp)
 1009a14:	dc400115 	stw	r17,4(sp)
 1009a18:	00800044 	movi	r2,1
 1009a1c:	22000317 	ldw	r8,12(r4)
 1009a20:	001f883a 	mov	r15,zero
 1009a24:	22400417 	ldw	r9,16(r4)
 1009a28:	24000117 	ldw	r16,4(r4)
 1009a2c:	10c0552e 	bgeu	r2,r3,1009b84 <__pack_d+0x180>
 1009a30:	00800104 	movi	r2,4
 1009a34:	18804f26 	beq	r3,r2,1009b74 <__pack_d+0x170>
 1009a38:	00800084 	movi	r2,2
 1009a3c:	18800226 	beq	r3,r2,1009a48 <__pack_d+0x44>
 1009a40:	4244b03a 	or	r2,r8,r9
 1009a44:	10001a1e 	bne	r2,zero,1009ab0 <__pack_d+0xac>
 1009a48:	000d883a 	mov	r6,zero
 1009a4c:	000f883a 	mov	r7,zero
 1009a50:	0011883a 	mov	r8,zero
 1009a54:	00800434 	movhi	r2,16
 1009a58:	10bfffc4 	addi	r2,r2,-1
 1009a5c:	301d883a 	mov	r14,r6
 1009a60:	3884703a 	and	r2,r7,r2
 1009a64:	400a953a 	slli	r5,r8,20
 1009a68:	79bffc2c 	andhi	r6,r15,65520
 1009a6c:	308cb03a 	or	r6,r6,r2
 1009a70:	00e00434 	movhi	r3,32784
 1009a74:	18ffffc4 	addi	r3,r3,-1
 1009a78:	800497fa 	slli	r2,r16,31
 1009a7c:	30c6703a 	and	r3,r6,r3
 1009a80:	1946b03a 	or	r3,r3,r5
 1009a84:	01600034 	movhi	r5,32768
 1009a88:	297fffc4 	addi	r5,r5,-1
 1009a8c:	194a703a 	and	r5,r3,r5
 1009a90:	288ab03a 	or	r5,r5,r2
 1009a94:	2807883a 	mov	r3,r5
 1009a98:	7005883a 	mov	r2,r14
 1009a9c:	dc800217 	ldw	r18,8(sp)
 1009aa0:	dc400117 	ldw	r17,4(sp)
 1009aa4:	dc000017 	ldw	r16,0(sp)
 1009aa8:	dec00304 	addi	sp,sp,12
 1009aac:	f800283a 	ret
 1009ab0:	21000217 	ldw	r4,8(r4)
 1009ab4:	00bf0084 	movi	r2,-1022
 1009ab8:	20803f16 	blt	r4,r2,1009bb8 <__pack_d+0x1b4>
 1009abc:	0080ffc4 	movi	r2,1023
 1009ac0:	11002c16 	blt	r2,r4,1009b74 <__pack_d+0x170>
 1009ac4:	00803fc4 	movi	r2,255
 1009ac8:	408c703a 	and	r6,r8,r2
 1009acc:	00802004 	movi	r2,128
 1009ad0:	0007883a 	mov	r3,zero
 1009ad4:	000f883a 	mov	r7,zero
 1009ad8:	2280ffc4 	addi	r10,r4,1023
 1009adc:	30801e26 	beq	r6,r2,1009b58 <__pack_d+0x154>
 1009ae0:	00801fc4 	movi	r2,127
 1009ae4:	4089883a 	add	r4,r8,r2
 1009ae8:	220d803a 	cmpltu	r6,r4,r8
 1009aec:	324d883a 	add	r6,r6,r9
 1009af0:	2011883a 	mov	r8,r4
 1009af4:	3013883a 	mov	r9,r6
 1009af8:	00880034 	movhi	r2,8192
 1009afc:	10bfffc4 	addi	r2,r2,-1
 1009b00:	12400d36 	bltu	r2,r9,1009b38 <__pack_d+0x134>
 1009b04:	4804963a 	slli	r2,r9,24
 1009b08:	400cd23a 	srli	r6,r8,8
 1009b0c:	480ed23a 	srli	r7,r9,8
 1009b10:	013fffc4 	movi	r4,-1
 1009b14:	118cb03a 	or	r6,r2,r6
 1009b18:	01400434 	movhi	r5,16
 1009b1c:	297fffc4 	addi	r5,r5,-1
 1009b20:	3104703a 	and	r2,r6,r4
 1009b24:	3946703a 	and	r3,r7,r5
 1009b28:	5201ffcc 	andi	r8,r10,2047
 1009b2c:	100d883a 	mov	r6,r2
 1009b30:	180f883a 	mov	r7,r3
 1009b34:	003fc706 	br	1009a54 <__pack_d+0x50>
 1009b38:	480897fa 	slli	r4,r9,31
 1009b3c:	4004d07a 	srli	r2,r8,1
 1009b40:	4806d07a 	srli	r3,r9,1
 1009b44:	52800044 	addi	r10,r10,1
 1009b48:	2084b03a 	or	r2,r4,r2
 1009b4c:	1011883a 	mov	r8,r2
 1009b50:	1813883a 	mov	r9,r3
 1009b54:	003feb06 	br	1009b04 <__pack_d+0x100>
 1009b58:	383fe11e 	bne	r7,zero,1009ae0 <__pack_d+0xdc>
 1009b5c:	01004004 	movi	r4,256
 1009b60:	4104703a 	and	r2,r8,r4
 1009b64:	10c4b03a 	or	r2,r2,r3
 1009b68:	103fe326 	beq	r2,zero,1009af8 <__pack_d+0xf4>
 1009b6c:	3005883a 	mov	r2,r6
 1009b70:	003fdc06 	br	1009ae4 <__pack_d+0xe0>
 1009b74:	000d883a 	mov	r6,zero
 1009b78:	000f883a 	mov	r7,zero
 1009b7c:	0201ffc4 	movi	r8,2047
 1009b80:	003fb406 	br	1009a54 <__pack_d+0x50>
 1009b84:	0005883a 	mov	r2,zero
 1009b88:	00c00234 	movhi	r3,8
 1009b8c:	408cb03a 	or	r6,r8,r2
 1009b90:	48ceb03a 	or	r7,r9,r3
 1009b94:	013fffc4 	movi	r4,-1
 1009b98:	01400434 	movhi	r5,16
 1009b9c:	297fffc4 	addi	r5,r5,-1
 1009ba0:	3104703a 	and	r2,r6,r4
 1009ba4:	3946703a 	and	r3,r7,r5
 1009ba8:	100d883a 	mov	r6,r2
 1009bac:	180f883a 	mov	r7,r3
 1009bb0:	0201ffc4 	movi	r8,2047
 1009bb4:	003fa706 	br	1009a54 <__pack_d+0x50>
 1009bb8:	1109c83a 	sub	r4,r2,r4
 1009bbc:	00800e04 	movi	r2,56
 1009bc0:	11004316 	blt	r2,r4,1009cd0 <__pack_d+0x2cc>
 1009bc4:	21fff804 	addi	r7,r4,-32
 1009bc8:	38004516 	blt	r7,zero,1009ce0 <__pack_d+0x2dc>
 1009bcc:	49d8d83a 	srl	r12,r9,r7
 1009bd0:	001b883a 	mov	r13,zero
 1009bd4:	0023883a 	mov	r17,zero
 1009bd8:	01400044 	movi	r5,1
 1009bdc:	0025883a 	mov	r18,zero
 1009be0:	38004716 	blt	r7,zero,1009d00 <__pack_d+0x2fc>
 1009be4:	29d6983a 	sll	r11,r5,r7
 1009be8:	0015883a 	mov	r10,zero
 1009bec:	00bfffc4 	movi	r2,-1
 1009bf0:	5089883a 	add	r4,r10,r2
 1009bf4:	588b883a 	add	r5,r11,r2
 1009bf8:	228d803a 	cmpltu	r6,r4,r10
 1009bfc:	314b883a 	add	r5,r6,r5
 1009c00:	4104703a 	and	r2,r8,r4
 1009c04:	4946703a 	and	r3,r9,r5
 1009c08:	10c4b03a 	or	r2,r2,r3
 1009c0c:	10000226 	beq	r2,zero,1009c18 <__pack_d+0x214>
 1009c10:	04400044 	movi	r17,1
 1009c14:	0025883a 	mov	r18,zero
 1009c18:	00803fc4 	movi	r2,255
 1009c1c:	644eb03a 	or	r7,r12,r17
 1009c20:	3892703a 	and	r9,r7,r2
 1009c24:	00802004 	movi	r2,128
 1009c28:	6c90b03a 	or	r8,r13,r18
 1009c2c:	0015883a 	mov	r10,zero
 1009c30:	48801626 	beq	r9,r2,1009c8c <__pack_d+0x288>
 1009c34:	01001fc4 	movi	r4,127
 1009c38:	3905883a 	add	r2,r7,r4
 1009c3c:	11cd803a 	cmpltu	r6,r2,r7
 1009c40:	320d883a 	add	r6,r6,r8
 1009c44:	100f883a 	mov	r7,r2
 1009c48:	00840034 	movhi	r2,4096
 1009c4c:	10bfffc4 	addi	r2,r2,-1
 1009c50:	3011883a 	mov	r8,r6
 1009c54:	0007883a 	mov	r3,zero
 1009c58:	11801b36 	bltu	r2,r6,1009cc8 <__pack_d+0x2c4>
 1009c5c:	4004963a 	slli	r2,r8,24
 1009c60:	3808d23a 	srli	r4,r7,8
 1009c64:	400ad23a 	srli	r5,r8,8
 1009c68:	1813883a 	mov	r9,r3
 1009c6c:	1108b03a 	or	r4,r2,r4
 1009c70:	00bfffc4 	movi	r2,-1
 1009c74:	00c00434 	movhi	r3,16
 1009c78:	18ffffc4 	addi	r3,r3,-1
 1009c7c:	208c703a 	and	r6,r4,r2
 1009c80:	28ce703a 	and	r7,r5,r3
 1009c84:	4a01ffcc 	andi	r8,r9,2047
 1009c88:	003f7206 	br	1009a54 <__pack_d+0x50>
 1009c8c:	503fe91e 	bne	r10,zero,1009c34 <__pack_d+0x230>
 1009c90:	01004004 	movi	r4,256
 1009c94:	3904703a 	and	r2,r7,r4
 1009c98:	0007883a 	mov	r3,zero
 1009c9c:	10c4b03a 	or	r2,r2,r3
 1009ca0:	10000626 	beq	r2,zero,1009cbc <__pack_d+0x2b8>
 1009ca4:	3a45883a 	add	r2,r7,r9
 1009ca8:	11cd803a 	cmpltu	r6,r2,r7
 1009cac:	320d883a 	add	r6,r6,r8
 1009cb0:	100f883a 	mov	r7,r2
 1009cb4:	3011883a 	mov	r8,r6
 1009cb8:	0007883a 	mov	r3,zero
 1009cbc:	00840034 	movhi	r2,4096
 1009cc0:	10bfffc4 	addi	r2,r2,-1
 1009cc4:	123fe52e 	bgeu	r2,r8,1009c5c <__pack_d+0x258>
 1009cc8:	00c00044 	movi	r3,1
 1009ccc:	003fe306 	br	1009c5c <__pack_d+0x258>
 1009cd0:	0009883a 	mov	r4,zero
 1009cd4:	0013883a 	mov	r9,zero
 1009cd8:	000b883a 	mov	r5,zero
 1009cdc:	003fe406 	br	1009c70 <__pack_d+0x26c>
 1009ce0:	4a47883a 	add	r3,r9,r9
 1009ce4:	008007c4 	movi	r2,31
 1009ce8:	1105c83a 	sub	r2,r2,r4
 1009cec:	1886983a 	sll	r3,r3,r2
 1009cf0:	4118d83a 	srl	r12,r8,r4
 1009cf4:	491ad83a 	srl	r13,r9,r4
 1009cf8:	1b18b03a 	or	r12,r3,r12
 1009cfc:	003fb506 	br	1009bd4 <__pack_d+0x1d0>
 1009d00:	2806d07a 	srli	r3,r5,1
 1009d04:	008007c4 	movi	r2,31
 1009d08:	1105c83a 	sub	r2,r2,r4
 1009d0c:	1896d83a 	srl	r11,r3,r2
 1009d10:	2914983a 	sll	r10,r5,r4
 1009d14:	003fb506 	br	1009bec <__pack_d+0x1e8>

01009d18 <__unpack_d>:
 1009d18:	20c00117 	ldw	r3,4(r4)
 1009d1c:	22400017 	ldw	r9,0(r4)
 1009d20:	00800434 	movhi	r2,16
 1009d24:	10bfffc4 	addi	r2,r2,-1
 1009d28:	1808d53a 	srli	r4,r3,20
 1009d2c:	180cd7fa 	srli	r6,r3,31
 1009d30:	1894703a 	and	r10,r3,r2
 1009d34:	2201ffcc 	andi	r8,r4,2047
 1009d38:	281b883a 	mov	r13,r5
 1009d3c:	4817883a 	mov	r11,r9
 1009d40:	29800115 	stw	r6,4(r5)
 1009d44:	5019883a 	mov	r12,r10
 1009d48:	40001e1e 	bne	r8,zero,1009dc4 <__unpack_d+0xac>
 1009d4c:	4a84b03a 	or	r2,r9,r10
 1009d50:	10001926 	beq	r2,zero,1009db8 <__unpack_d+0xa0>
 1009d54:	4804d63a 	srli	r2,r9,24
 1009d58:	500c923a 	slli	r6,r10,8
 1009d5c:	013f0084 	movi	r4,-1022
 1009d60:	00c40034 	movhi	r3,4096
 1009d64:	18ffffc4 	addi	r3,r3,-1
 1009d68:	118cb03a 	or	r6,r2,r6
 1009d6c:	008000c4 	movi	r2,3
 1009d70:	480a923a 	slli	r5,r9,8
 1009d74:	68800015 	stw	r2,0(r13)
 1009d78:	69000215 	stw	r4,8(r13)
 1009d7c:	19800b36 	bltu	r3,r6,1009dac <__unpack_d+0x94>
 1009d80:	200f883a 	mov	r7,r4
 1009d84:	1811883a 	mov	r8,r3
 1009d88:	2945883a 	add	r2,r5,r5
 1009d8c:	1149803a 	cmpltu	r4,r2,r5
 1009d90:	3187883a 	add	r3,r6,r6
 1009d94:	20c9883a 	add	r4,r4,r3
 1009d98:	100b883a 	mov	r5,r2
 1009d9c:	200d883a 	mov	r6,r4
 1009da0:	39ffffc4 	addi	r7,r7,-1
 1009da4:	413ff82e 	bgeu	r8,r4,1009d88 <__unpack_d+0x70>
 1009da8:	69c00215 	stw	r7,8(r13)
 1009dac:	69800415 	stw	r6,16(r13)
 1009db0:	69400315 	stw	r5,12(r13)
 1009db4:	f800283a 	ret
 1009db8:	00800084 	movi	r2,2
 1009dbc:	28800015 	stw	r2,0(r5)
 1009dc0:	f800283a 	ret
 1009dc4:	0081ffc4 	movi	r2,2047
 1009dc8:	40800f26 	beq	r8,r2,1009e08 <__unpack_d+0xf0>
 1009dcc:	480cd63a 	srli	r6,r9,24
 1009dd0:	5006923a 	slli	r3,r10,8
 1009dd4:	4804923a 	slli	r2,r9,8
 1009dd8:	0009883a 	mov	r4,zero
 1009ddc:	30c6b03a 	or	r3,r6,r3
 1009de0:	01440034 	movhi	r5,4096
 1009de4:	110cb03a 	or	r6,r2,r4
 1009de8:	423f0044 	addi	r8,r8,-1023
 1009dec:	194eb03a 	or	r7,r3,r5
 1009df0:	008000c4 	movi	r2,3
 1009df4:	69c00415 	stw	r7,16(r13)
 1009df8:	6a000215 	stw	r8,8(r13)
 1009dfc:	68800015 	stw	r2,0(r13)
 1009e00:	69800315 	stw	r6,12(r13)
 1009e04:	f800283a 	ret
 1009e08:	4a84b03a 	or	r2,r9,r10
 1009e0c:	1000031e 	bne	r2,zero,1009e1c <__unpack_d+0x104>
 1009e10:	00800104 	movi	r2,4
 1009e14:	28800015 	stw	r2,0(r5)
 1009e18:	f800283a 	ret
 1009e1c:	0009883a 	mov	r4,zero
 1009e20:	01400234 	movhi	r5,8
 1009e24:	4904703a 	and	r2,r9,r4
 1009e28:	5146703a 	and	r3,r10,r5
 1009e2c:	10c4b03a 	or	r2,r2,r3
 1009e30:	10000526 	beq	r2,zero,1009e48 <__unpack_d+0x130>
 1009e34:	00800044 	movi	r2,1
 1009e38:	68800015 	stw	r2,0(r13)
 1009e3c:	6b000415 	stw	r12,16(r13)
 1009e40:	6ac00315 	stw	r11,12(r13)
 1009e44:	f800283a 	ret
 1009e48:	68000015 	stw	zero,0(r13)
 1009e4c:	003ffb06 	br	1009e3c <__unpack_d+0x124>

01009e50 <__fpcmp_parts_d>:
 1009e50:	21800017 	ldw	r6,0(r4)
 1009e54:	00c00044 	movi	r3,1
 1009e58:	19800a2e 	bgeu	r3,r6,1009e84 <__fpcmp_parts_d+0x34>
 1009e5c:	28800017 	ldw	r2,0(r5)
 1009e60:	1880082e 	bgeu	r3,r2,1009e84 <__fpcmp_parts_d+0x34>
 1009e64:	00c00104 	movi	r3,4
 1009e68:	30c02626 	beq	r6,r3,1009f04 <__fpcmp_parts_d+0xb4>
 1009e6c:	10c02226 	beq	r2,r3,1009ef8 <__fpcmp_parts_d+0xa8>
 1009e70:	00c00084 	movi	r3,2
 1009e74:	30c00526 	beq	r6,r3,1009e8c <__fpcmp_parts_d+0x3c>
 1009e78:	10c0071e 	bne	r2,r3,1009e98 <__fpcmp_parts_d+0x48>
 1009e7c:	20800117 	ldw	r2,4(r4)
 1009e80:	1000091e 	bne	r2,zero,1009ea8 <__fpcmp_parts_d+0x58>
 1009e84:	00800044 	movi	r2,1
 1009e88:	f800283a 	ret
 1009e8c:	10c01a1e 	bne	r2,r3,1009ef8 <__fpcmp_parts_d+0xa8>
 1009e90:	0005883a 	mov	r2,zero
 1009e94:	f800283a 	ret
 1009e98:	22000117 	ldw	r8,4(r4)
 1009e9c:	28800117 	ldw	r2,4(r5)
 1009ea0:	40800326 	beq	r8,r2,1009eb0 <__fpcmp_parts_d+0x60>
 1009ea4:	403ff726 	beq	r8,zero,1009e84 <__fpcmp_parts_d+0x34>
 1009ea8:	00bfffc4 	movi	r2,-1
 1009eac:	f800283a 	ret
 1009eb0:	20c00217 	ldw	r3,8(r4)
 1009eb4:	28800217 	ldw	r2,8(r5)
 1009eb8:	10fffa16 	blt	r2,r3,1009ea4 <__fpcmp_parts_d+0x54>
 1009ebc:	18800916 	blt	r3,r2,1009ee4 <__fpcmp_parts_d+0x94>
 1009ec0:	21c00417 	ldw	r7,16(r4)
 1009ec4:	28c00417 	ldw	r3,16(r5)
 1009ec8:	21800317 	ldw	r6,12(r4)
 1009ecc:	28800317 	ldw	r2,12(r5)
 1009ed0:	19fff436 	bltu	r3,r7,1009ea4 <__fpcmp_parts_d+0x54>
 1009ed4:	38c00526 	beq	r7,r3,1009eec <__fpcmp_parts_d+0x9c>
 1009ed8:	38c00236 	bltu	r7,r3,1009ee4 <__fpcmp_parts_d+0x94>
 1009edc:	19ffec1e 	bne	r3,r7,1009e90 <__fpcmp_parts_d+0x40>
 1009ee0:	30bfeb2e 	bgeu	r6,r2,1009e90 <__fpcmp_parts_d+0x40>
 1009ee4:	403fe71e 	bne	r8,zero,1009e84 <__fpcmp_parts_d+0x34>
 1009ee8:	003fef06 	br	1009ea8 <__fpcmp_parts_d+0x58>
 1009eec:	11bffa2e 	bgeu	r2,r6,1009ed8 <__fpcmp_parts_d+0x88>
 1009ef0:	403fe426 	beq	r8,zero,1009e84 <__fpcmp_parts_d+0x34>
 1009ef4:	003fec06 	br	1009ea8 <__fpcmp_parts_d+0x58>
 1009ef8:	28800117 	ldw	r2,4(r5)
 1009efc:	103fe11e 	bne	r2,zero,1009e84 <__fpcmp_parts_d+0x34>
 1009f00:	003fe906 	br	1009ea8 <__fpcmp_parts_d+0x58>
 1009f04:	11bfdd1e 	bne	r2,r6,1009e7c <__fpcmp_parts_d+0x2c>
 1009f08:	28c00117 	ldw	r3,4(r5)
 1009f0c:	20800117 	ldw	r2,4(r4)
 1009f10:	1885c83a 	sub	r2,r3,r2
 1009f14:	f800283a 	ret

01009f18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1009f18:	defff804 	addi	sp,sp,-32
 1009f1c:	dfc00715 	stw	ra,28(sp)
 1009f20:	df000615 	stw	fp,24(sp)
 1009f24:	df000604 	addi	fp,sp,24
 1009f28:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1009f2c:	e0bffc17 	ldw	r2,-16(fp)
 1009f30:	1004803a 	cmplt	r2,r2,zero
 1009f34:	1000091e 	bne	r2,zero,1009f5c <close+0x44>
 1009f38:	e13ffc17 	ldw	r4,-16(fp)
 1009f3c:	01400304 	movi	r5,12
 1009f40:	10098280 	call	1009828 <__mulsi3>
 1009f44:	1007883a 	mov	r3,r2
 1009f48:	00804074 	movhi	r2,257
 1009f4c:	10b81c04 	addi	r2,r2,-8080
 1009f50:	1887883a 	add	r3,r3,r2
 1009f54:	e0ffff15 	stw	r3,-4(fp)
 1009f58:	00000106 	br	1009f60 <close+0x48>
 1009f5c:	e03fff15 	stw	zero,-4(fp)
 1009f60:	e0bfff17 	ldw	r2,-4(fp)
 1009f64:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1009f68:	e0bffb17 	ldw	r2,-20(fp)
 1009f6c:	1005003a 	cmpeq	r2,r2,zero
 1009f70:	10001d1e 	bne	r2,zero,1009fe8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1009f74:	e0bffb17 	ldw	r2,-20(fp)
 1009f78:	10800017 	ldw	r2,0(r2)
 1009f7c:	10800417 	ldw	r2,16(r2)
 1009f80:	1005003a 	cmpeq	r2,r2,zero
 1009f84:	1000071e 	bne	r2,zero,1009fa4 <close+0x8c>
 1009f88:	e0bffb17 	ldw	r2,-20(fp)
 1009f8c:	10800017 	ldw	r2,0(r2)
 1009f90:	10800417 	ldw	r2,16(r2)
 1009f94:	e13ffb17 	ldw	r4,-20(fp)
 1009f98:	103ee83a 	callr	r2
 1009f9c:	e0bffe15 	stw	r2,-8(fp)
 1009fa0:	00000106 	br	1009fa8 <close+0x90>
 1009fa4:	e03ffe15 	stw	zero,-8(fp)
 1009fa8:	e0bffe17 	ldw	r2,-8(fp)
 1009fac:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1009fb0:	e13ffc17 	ldw	r4,-16(fp)
 1009fb4:	100aa080 	call	100aa08 <alt_release_fd>
    if (rval < 0)
 1009fb8:	e0bffa17 	ldw	r2,-24(fp)
 1009fbc:	1004403a 	cmpge	r2,r2,zero
 1009fc0:	1000071e 	bne	r2,zero,1009fe0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1009fc4:	100a0180 	call	100a018 <alt_get_errno>
 1009fc8:	e0fffa17 	ldw	r3,-24(fp)
 1009fcc:	00c7c83a 	sub	r3,zero,r3
 1009fd0:	10c00015 	stw	r3,0(r2)
      return -1;
 1009fd4:	00bfffc4 	movi	r2,-1
 1009fd8:	e0bffd15 	stw	r2,-12(fp)
 1009fdc:	00000806 	br	100a000 <close+0xe8>
    }
    return 0;
 1009fe0:	e03ffd15 	stw	zero,-12(fp)
 1009fe4:	00000606 	br	100a000 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009fe8:	100a0180 	call	100a018 <alt_get_errno>
 1009fec:	1007883a 	mov	r3,r2
 1009ff0:	00801444 	movi	r2,81
 1009ff4:	18800015 	stw	r2,0(r3)
    return -1;
 1009ff8:	00bfffc4 	movi	r2,-1
 1009ffc:	e0bffd15 	stw	r2,-12(fp)
 100a000:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a004:	e037883a 	mov	sp,fp
 100a008:	dfc00117 	ldw	ra,4(sp)
 100a00c:	df000017 	ldw	fp,0(sp)
 100a010:	dec00204 	addi	sp,sp,8
 100a014:	f800283a 	ret

0100a018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a018:	defffd04 	addi	sp,sp,-12
 100a01c:	dfc00215 	stw	ra,8(sp)
 100a020:	df000115 	stw	fp,4(sp)
 100a024:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a028:	00804074 	movhi	r2,257
 100a02c:	10bcaa04 	addi	r2,r2,-3416
 100a030:	10800017 	ldw	r2,0(r2)
 100a034:	1005003a 	cmpeq	r2,r2,zero
 100a038:	1000061e 	bne	r2,zero,100a054 <alt_get_errno+0x3c>
 100a03c:	00804074 	movhi	r2,257
 100a040:	10bcaa04 	addi	r2,r2,-3416
 100a044:	10800017 	ldw	r2,0(r2)
 100a048:	103ee83a 	callr	r2
 100a04c:	e0bfff15 	stw	r2,-4(fp)
 100a050:	00000306 	br	100a060 <alt_get_errno+0x48>
 100a054:	00804074 	movhi	r2,257
 100a058:	10835704 	addi	r2,r2,3420
 100a05c:	e0bfff15 	stw	r2,-4(fp)
 100a060:	e0bfff17 	ldw	r2,-4(fp)
}
 100a064:	e037883a 	mov	sp,fp
 100a068:	dfc00117 	ldw	ra,4(sp)
 100a06c:	df000017 	ldw	fp,0(sp)
 100a070:	dec00204 	addi	sp,sp,8
 100a074:	f800283a 	ret

0100a078 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a078:	defffc04 	addi	sp,sp,-16
 100a07c:	df000315 	stw	fp,12(sp)
 100a080:	df000304 	addi	fp,sp,12
 100a084:	e13ffd15 	stw	r4,-12(fp)
 100a088:	e17ffe15 	stw	r5,-8(fp)
 100a08c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a090:	e0bfff17 	ldw	r2,-4(fp)
}
 100a094:	e037883a 	mov	sp,fp
 100a098:	df000017 	ldw	fp,0(sp)
 100a09c:	dec00104 	addi	sp,sp,4
 100a0a0:	f800283a 	ret

0100a0a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a0a4:	defff904 	addi	sp,sp,-28
 100a0a8:	dfc00615 	stw	ra,24(sp)
 100a0ac:	df000515 	stw	fp,20(sp)
 100a0b0:	df000504 	addi	fp,sp,20
 100a0b4:	e13ffc15 	stw	r4,-16(fp)
 100a0b8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a0bc:	e0bffc17 	ldw	r2,-16(fp)
 100a0c0:	1004803a 	cmplt	r2,r2,zero
 100a0c4:	1000091e 	bne	r2,zero,100a0ec <fstat+0x48>
 100a0c8:	e13ffc17 	ldw	r4,-16(fp)
 100a0cc:	01400304 	movi	r5,12
 100a0d0:	10098280 	call	1009828 <__mulsi3>
 100a0d4:	1007883a 	mov	r3,r2
 100a0d8:	00804074 	movhi	r2,257
 100a0dc:	10b81c04 	addi	r2,r2,-8080
 100a0e0:	1887883a 	add	r3,r3,r2
 100a0e4:	e0ffff15 	stw	r3,-4(fp)
 100a0e8:	00000106 	br	100a0f0 <fstat+0x4c>
 100a0ec:	e03fff15 	stw	zero,-4(fp)
 100a0f0:	e0bfff17 	ldw	r2,-4(fp)
 100a0f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a0f8:	e0bffb17 	ldw	r2,-20(fp)
 100a0fc:	1005003a 	cmpeq	r2,r2,zero
 100a100:	1000121e 	bne	r2,zero,100a14c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a104:	e0bffb17 	ldw	r2,-20(fp)
 100a108:	10800017 	ldw	r2,0(r2)
 100a10c:	10800817 	ldw	r2,32(r2)
 100a110:	1005003a 	cmpeq	r2,r2,zero
 100a114:	1000081e 	bne	r2,zero,100a138 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100a118:	e0bffb17 	ldw	r2,-20(fp)
 100a11c:	10800017 	ldw	r2,0(r2)
 100a120:	10800817 	ldw	r2,32(r2)
 100a124:	e13ffb17 	ldw	r4,-20(fp)
 100a128:	e17ffd17 	ldw	r5,-12(fp)
 100a12c:	103ee83a 	callr	r2
 100a130:	e0bffe15 	stw	r2,-8(fp)
 100a134:	00000b06 	br	100a164 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a138:	e0fffd17 	ldw	r3,-12(fp)
 100a13c:	00880004 	movi	r2,8192
 100a140:	18800115 	stw	r2,4(r3)
      return 0;
 100a144:	e03ffe15 	stw	zero,-8(fp)
 100a148:	00000606 	br	100a164 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a14c:	100a17c0 	call	100a17c <alt_get_errno>
 100a150:	1007883a 	mov	r3,r2
 100a154:	00801444 	movi	r2,81
 100a158:	18800015 	stw	r2,0(r3)
    return -1;
 100a15c:	00bfffc4 	movi	r2,-1
 100a160:	e0bffe15 	stw	r2,-8(fp)
 100a164:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a168:	e037883a 	mov	sp,fp
 100a16c:	dfc00117 	ldw	ra,4(sp)
 100a170:	df000017 	ldw	fp,0(sp)
 100a174:	dec00204 	addi	sp,sp,8
 100a178:	f800283a 	ret

0100a17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a17c:	defffd04 	addi	sp,sp,-12
 100a180:	dfc00215 	stw	ra,8(sp)
 100a184:	df000115 	stw	fp,4(sp)
 100a188:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a18c:	00804074 	movhi	r2,257
 100a190:	10bcaa04 	addi	r2,r2,-3416
 100a194:	10800017 	ldw	r2,0(r2)
 100a198:	1005003a 	cmpeq	r2,r2,zero
 100a19c:	1000061e 	bne	r2,zero,100a1b8 <alt_get_errno+0x3c>
 100a1a0:	00804074 	movhi	r2,257
 100a1a4:	10bcaa04 	addi	r2,r2,-3416
 100a1a8:	10800017 	ldw	r2,0(r2)
 100a1ac:	103ee83a 	callr	r2
 100a1b0:	e0bfff15 	stw	r2,-4(fp)
 100a1b4:	00000306 	br	100a1c4 <alt_get_errno+0x48>
 100a1b8:	00804074 	movhi	r2,257
 100a1bc:	10835704 	addi	r2,r2,3420
 100a1c0:	e0bfff15 	stw	r2,-4(fp)
 100a1c4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a1c8:	e037883a 	mov	sp,fp
 100a1cc:	dfc00117 	ldw	ra,4(sp)
 100a1d0:	df000017 	ldw	fp,0(sp)
 100a1d4:	dec00204 	addi	sp,sp,8
 100a1d8:	f800283a 	ret

0100a1dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a1dc:	deffeb04 	addi	sp,sp,-84
 100a1e0:	dfc01415 	stw	ra,80(sp)
 100a1e4:	df001315 	stw	fp,76(sp)
 100a1e8:	df001304 	addi	fp,sp,76
 100a1ec:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a1f0:	e0bffd17 	ldw	r2,-12(fp)
 100a1f4:	1004803a 	cmplt	r2,r2,zero
 100a1f8:	1000091e 	bne	r2,zero,100a220 <isatty+0x44>
 100a1fc:	e13ffd17 	ldw	r4,-12(fp)
 100a200:	01400304 	movi	r5,12
 100a204:	10098280 	call	1009828 <__mulsi3>
 100a208:	1007883a 	mov	r3,r2
 100a20c:	00804074 	movhi	r2,257
 100a210:	10b81c04 	addi	r2,r2,-8080
 100a214:	1887883a 	add	r3,r3,r2
 100a218:	e0ffff15 	stw	r3,-4(fp)
 100a21c:	00000106 	br	100a224 <isatty+0x48>
 100a220:	e03fff15 	stw	zero,-4(fp)
 100a224:	e0bfff17 	ldw	r2,-4(fp)
 100a228:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a22c:	e0bfed17 	ldw	r2,-76(fp)
 100a230:	1005003a 	cmpeq	r2,r2,zero
 100a234:	10000f1e 	bne	r2,zero,100a274 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a238:	e0bfed17 	ldw	r2,-76(fp)
 100a23c:	10800017 	ldw	r2,0(r2)
 100a240:	10800817 	ldw	r2,32(r2)
 100a244:	1004c03a 	cmpne	r2,r2,zero
 100a248:	1000031e 	bne	r2,zero,100a258 <isatty+0x7c>
    {
      return 1;
 100a24c:	00800044 	movi	r2,1
 100a250:	e0bffe15 	stw	r2,-8(fp)
 100a254:	00000c06 	br	100a288 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100a258:	e17fee04 	addi	r5,fp,-72
 100a25c:	e13ffd17 	ldw	r4,-12(fp)
 100a260:	100a0a40 	call	100a0a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100a264:	e0bfef17 	ldw	r2,-68(fp)
 100a268:	10880020 	cmpeqi	r2,r2,8192
 100a26c:	e0bffe15 	stw	r2,-8(fp)
 100a270:	00000506 	br	100a288 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a274:	100a2a00 	call	100a2a0 <alt_get_errno>
 100a278:	1007883a 	mov	r3,r2
 100a27c:	00801444 	movi	r2,81
 100a280:	18800015 	stw	r2,0(r3)
    return 0;
 100a284:	e03ffe15 	stw	zero,-8(fp)
 100a288:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a28c:	e037883a 	mov	sp,fp
 100a290:	dfc00117 	ldw	ra,4(sp)
 100a294:	df000017 	ldw	fp,0(sp)
 100a298:	dec00204 	addi	sp,sp,8
 100a29c:	f800283a 	ret

0100a2a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a2a0:	defffd04 	addi	sp,sp,-12
 100a2a4:	dfc00215 	stw	ra,8(sp)
 100a2a8:	df000115 	stw	fp,4(sp)
 100a2ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a2b0:	00804074 	movhi	r2,257
 100a2b4:	10bcaa04 	addi	r2,r2,-3416
 100a2b8:	10800017 	ldw	r2,0(r2)
 100a2bc:	1005003a 	cmpeq	r2,r2,zero
 100a2c0:	1000061e 	bne	r2,zero,100a2dc <alt_get_errno+0x3c>
 100a2c4:	00804074 	movhi	r2,257
 100a2c8:	10bcaa04 	addi	r2,r2,-3416
 100a2cc:	10800017 	ldw	r2,0(r2)
 100a2d0:	103ee83a 	callr	r2
 100a2d4:	e0bfff15 	stw	r2,-4(fp)
 100a2d8:	00000306 	br	100a2e8 <alt_get_errno+0x48>
 100a2dc:	00804074 	movhi	r2,257
 100a2e0:	10835704 	addi	r2,r2,3420
 100a2e4:	e0bfff15 	stw	r2,-4(fp)
 100a2e8:	e0bfff17 	ldw	r2,-4(fp)
}
 100a2ec:	e037883a 	mov	sp,fp
 100a2f0:	dfc00117 	ldw	ra,4(sp)
 100a2f4:	df000017 	ldw	fp,0(sp)
 100a2f8:	dec00204 	addi	sp,sp,8
 100a2fc:	f800283a 	ret

0100a300 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a300:	defffe04 	addi	sp,sp,-8
 100a304:	dfc00115 	stw	ra,4(sp)
 100a308:	df000015 	stw	fp,0(sp)
 100a30c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a310:	01004074 	movhi	r4,257
 100a314:	213caf04 	addi	r4,r4,-3396
 100a318:	01404074 	movhi	r5,257
 100a31c:	29760d04 	addi	r5,r5,-10188
 100a320:	01804074 	movhi	r6,257
 100a324:	31bcaf04 	addi	r6,r6,-3396
 100a328:	100a3800 	call	100a380 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a32c:	01004034 	movhi	r4,256
 100a330:	21000804 	addi	r4,r4,32
 100a334:	01404034 	movhi	r5,256
 100a338:	29400804 	addi	r5,r5,32
 100a33c:	01804034 	movhi	r6,256
 100a340:	31806d04 	addi	r6,r6,436
 100a344:	100a3800 	call	100a380 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a348:	01004074 	movhi	r4,257
 100a34c:	21351a04 	addi	r4,r4,-11160
 100a350:	01404074 	movhi	r5,257
 100a354:	29751a04 	addi	r5,r5,-11160
 100a358:	01804074 	movhi	r6,257
 100a35c:	31b60d04 	addi	r6,r6,-10188
 100a360:	100a3800 	call	100a380 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a364:	100beb80 	call	100beb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a368:	100c1440 	call	100c144 <alt_icache_flush_all>
}
 100a36c:	e037883a 	mov	sp,fp
 100a370:	dfc00117 	ldw	ra,4(sp)
 100a374:	df000017 	ldw	fp,0(sp)
 100a378:	dec00204 	addi	sp,sp,8
 100a37c:	f800283a 	ret

0100a380 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a380:	defffc04 	addi	sp,sp,-16
 100a384:	df000315 	stw	fp,12(sp)
 100a388:	df000304 	addi	fp,sp,12
 100a38c:	e13ffd15 	stw	r4,-12(fp)
 100a390:	e17ffe15 	stw	r5,-8(fp)
 100a394:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a398:	e0fffe17 	ldw	r3,-8(fp)
 100a39c:	e0bffd17 	ldw	r2,-12(fp)
 100a3a0:	18800e26 	beq	r3,r2,100a3dc <alt_load_section+0x5c>
  {
    while( to != end )
 100a3a4:	00000a06 	br	100a3d0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a3a8:	e0bffd17 	ldw	r2,-12(fp)
 100a3ac:	10c00017 	ldw	r3,0(r2)
 100a3b0:	e0bffe17 	ldw	r2,-8(fp)
 100a3b4:	10c00015 	stw	r3,0(r2)
 100a3b8:	e0bffe17 	ldw	r2,-8(fp)
 100a3bc:	10800104 	addi	r2,r2,4
 100a3c0:	e0bffe15 	stw	r2,-8(fp)
 100a3c4:	e0bffd17 	ldw	r2,-12(fp)
 100a3c8:	10800104 	addi	r2,r2,4
 100a3cc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a3d0:	e0fffe17 	ldw	r3,-8(fp)
 100a3d4:	e0bfff17 	ldw	r2,-4(fp)
 100a3d8:	18bff31e 	bne	r3,r2,100a3a8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a3dc:	e037883a 	mov	sp,fp
 100a3e0:	df000017 	ldw	fp,0(sp)
 100a3e4:	dec00104 	addi	sp,sp,4
 100a3e8:	f800283a 	ret

0100a3ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a3ec:	defff804 	addi	sp,sp,-32
 100a3f0:	dfc00715 	stw	ra,28(sp)
 100a3f4:	df000615 	stw	fp,24(sp)
 100a3f8:	df000604 	addi	fp,sp,24
 100a3fc:	e13ffc15 	stw	r4,-16(fp)
 100a400:	e17ffd15 	stw	r5,-12(fp)
 100a404:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a408:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a40c:	e0bffc17 	ldw	r2,-16(fp)
 100a410:	1004803a 	cmplt	r2,r2,zero
 100a414:	1000091e 	bne	r2,zero,100a43c <lseek+0x50>
 100a418:	e13ffc17 	ldw	r4,-16(fp)
 100a41c:	01400304 	movi	r5,12
 100a420:	10098280 	call	1009828 <__mulsi3>
 100a424:	1007883a 	mov	r3,r2
 100a428:	00804074 	movhi	r2,257
 100a42c:	10b81c04 	addi	r2,r2,-8080
 100a430:	1887883a 	add	r3,r3,r2
 100a434:	e0ffff15 	stw	r3,-4(fp)
 100a438:	00000106 	br	100a440 <lseek+0x54>
 100a43c:	e03fff15 	stw	zero,-4(fp)
 100a440:	e0bfff17 	ldw	r2,-4(fp)
 100a444:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a448:	e0bffb17 	ldw	r2,-20(fp)
 100a44c:	1005003a 	cmpeq	r2,r2,zero
 100a450:	1000111e 	bne	r2,zero,100a498 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a454:	e0bffb17 	ldw	r2,-20(fp)
 100a458:	10800017 	ldw	r2,0(r2)
 100a45c:	10800717 	ldw	r2,28(r2)
 100a460:	1005003a 	cmpeq	r2,r2,zero
 100a464:	1000091e 	bne	r2,zero,100a48c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a468:	e0bffb17 	ldw	r2,-20(fp)
 100a46c:	10800017 	ldw	r2,0(r2)
 100a470:	10800717 	ldw	r2,28(r2)
 100a474:	e13ffb17 	ldw	r4,-20(fp)
 100a478:	e17ffd17 	ldw	r5,-12(fp)
 100a47c:	e1bffe17 	ldw	r6,-8(fp)
 100a480:	103ee83a 	callr	r2
 100a484:	e0bffa15 	stw	r2,-24(fp)
 100a488:	00000506 	br	100a4a0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a48c:	00bfde84 	movi	r2,-134
 100a490:	e0bffa15 	stw	r2,-24(fp)
 100a494:	00000206 	br	100a4a0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a498:	00bfebc4 	movi	r2,-81
 100a49c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a4a0:	e0bffa17 	ldw	r2,-24(fp)
 100a4a4:	1004403a 	cmpge	r2,r2,zero
 100a4a8:	1000071e 	bne	r2,zero,100a4c8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100a4ac:	100a4e00 	call	100a4e0 <alt_get_errno>
 100a4b0:	1007883a 	mov	r3,r2
 100a4b4:	e0bffa17 	ldw	r2,-24(fp)
 100a4b8:	0085c83a 	sub	r2,zero,r2
 100a4bc:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a4c0:	00bfffc4 	movi	r2,-1
 100a4c4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a4c8:	e0bffa17 	ldw	r2,-24(fp)
}
 100a4cc:	e037883a 	mov	sp,fp
 100a4d0:	dfc00117 	ldw	ra,4(sp)
 100a4d4:	df000017 	ldw	fp,0(sp)
 100a4d8:	dec00204 	addi	sp,sp,8
 100a4dc:	f800283a 	ret

0100a4e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a4e0:	defffd04 	addi	sp,sp,-12
 100a4e4:	dfc00215 	stw	ra,8(sp)
 100a4e8:	df000115 	stw	fp,4(sp)
 100a4ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a4f0:	00804074 	movhi	r2,257
 100a4f4:	10bcaa04 	addi	r2,r2,-3416
 100a4f8:	10800017 	ldw	r2,0(r2)
 100a4fc:	1005003a 	cmpeq	r2,r2,zero
 100a500:	1000061e 	bne	r2,zero,100a51c <alt_get_errno+0x3c>
 100a504:	00804074 	movhi	r2,257
 100a508:	10bcaa04 	addi	r2,r2,-3416
 100a50c:	10800017 	ldw	r2,0(r2)
 100a510:	103ee83a 	callr	r2
 100a514:	e0bfff15 	stw	r2,-4(fp)
 100a518:	00000306 	br	100a528 <alt_get_errno+0x48>
 100a51c:	00804074 	movhi	r2,257
 100a520:	10835704 	addi	r2,r2,3420
 100a524:	e0bfff15 	stw	r2,-4(fp)
 100a528:	e0bfff17 	ldw	r2,-4(fp)
}
 100a52c:	e037883a 	mov	sp,fp
 100a530:	dfc00117 	ldw	ra,4(sp)
 100a534:	df000017 	ldw	fp,0(sp)
 100a538:	dec00204 	addi	sp,sp,8
 100a53c:	f800283a 	ret

0100a540 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a540:	defffd04 	addi	sp,sp,-12
 100a544:	dfc00215 	stw	ra,8(sp)
 100a548:	df000115 	stw	fp,4(sp)
 100a54c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a550:	0009883a 	mov	r4,zero
 100a554:	100acc00 	call	100acc0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a558:	100acf40 	call	100acf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a55c:	01004074 	movhi	r4,257
 100a560:	2135ff04 	addi	r4,r4,-10244
 100a564:	01404074 	movhi	r5,257
 100a568:	2975ff04 	addi	r5,r5,-10244
 100a56c:	01804074 	movhi	r6,257
 100a570:	31b5ff04 	addi	r6,r6,-10244
 100a574:	100c5180 	call	100c518 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a578:	100bfe80 	call	100bfe8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a57c:	01004074 	movhi	r4,257
 100a580:	21301304 	addi	r4,r4,-16308
 100a584:	100ccb80 	call	100ccb8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a588:	d126b917 	ldw	r4,-25884(gp)
 100a58c:	d166ba17 	ldw	r5,-25880(gp)
 100a590:	d1a6bb17 	ldw	r6,-25876(gp)
 100a594:	10003940 	call	1000394 <main>
 100a598:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a59c:	01000044 	movi	r4,1
 100a5a0:	1009f180 	call	1009f18 <close>
  exit (result);
 100a5a4:	e13fff17 	ldw	r4,-4(fp)
 100a5a8:	100cccc0 	call	100cccc <exit>

0100a5ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100a5ac:	defffe04 	addi	sp,sp,-8
 100a5b0:	df000115 	stw	fp,4(sp)
 100a5b4:	df000104 	addi	fp,sp,4
 100a5b8:	e13fff15 	stw	r4,-4(fp)
}
 100a5bc:	e037883a 	mov	sp,fp
 100a5c0:	df000017 	ldw	fp,0(sp)
 100a5c4:	dec00104 	addi	sp,sp,4
 100a5c8:	f800283a 	ret

0100a5cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100a5cc:	defffe04 	addi	sp,sp,-8
 100a5d0:	df000115 	stw	fp,4(sp)
 100a5d4:	df000104 	addi	fp,sp,4
 100a5d8:	e13fff15 	stw	r4,-4(fp)
}
 100a5dc:	e037883a 	mov	sp,fp
 100a5e0:	df000017 	ldw	fp,0(sp)
 100a5e4:	dec00104 	addi	sp,sp,4
 100a5e8:	f800283a 	ret

0100a5ec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 100a5ec:	defff204 	addi	sp,sp,-56
 100a5f0:	dfc00a15 	stw	ra,40(sp)
 100a5f4:	df000915 	stw	fp,36(sp)
 100a5f8:	df000904 	addi	fp,sp,36
 100a5fc:	e1400215 	stw	r5,8(fp)
 100a600:	e1800315 	stw	r6,12(fp)
 100a604:	e1c00415 	stw	r7,16(fp)
 100a608:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 100a60c:	e0800204 	addi	r2,fp,8
 100a610:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 100a614:	e0bfff17 	ldw	r2,-4(fp)
 100a618:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
 100a61c:	00007806 	br	100a800 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 100a620:	e0bffc07 	ldb	r2,-16(fp)
 100a624:	10800960 	cmpeqi	r2,r2,37
 100a628:	1000031e 	bne	r2,zero,100a638 <alt_printf+0x4c>
        {
            alt_putchar(c);
 100a62c:	e13ffc07 	ldb	r4,-16(fp)
 100a630:	100a8440 	call	100a844 <alt_putchar>
 100a634:	00007206 	br	100a800 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 100a638:	e0bffd17 	ldw	r2,-12(fp)
 100a63c:	10800003 	ldbu	r2,0(r2)
 100a640:	e0bffc05 	stb	r2,-16(fp)
 100a644:	e0bffc07 	ldb	r2,-16(fp)
 100a648:	1004c03a 	cmpne	r2,r2,zero
 100a64c:	1007883a 	mov	r3,r2
 100a650:	e0bffd17 	ldw	r2,-12(fp)
 100a654:	10800044 	addi	r2,r2,1
 100a658:	e0bffd15 	stw	r2,-12(fp)
 100a65c:	18803fcc 	andi	r2,r3,255
 100a660:	1005003a 	cmpeq	r2,r2,zero
 100a664:	1000721e 	bne	r2,zero,100a830 <alt_printf+0x244>
            {
                if (c == '%')
 100a668:	e0bffc07 	ldb	r2,-16(fp)
 100a66c:	10800958 	cmpnei	r2,r2,37
 100a670:	1000031e 	bne	r2,zero,100a680 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 100a674:	e13ffc07 	ldb	r4,-16(fp)
 100a678:	100a8440 	call	100a844 <alt_putchar>
 100a67c:	00006006 	br	100a800 <alt_printf+0x214>
                } 
                else if (c == 'c')
 100a680:	e0bffc07 	ldb	r2,-16(fp)
 100a684:	108018d8 	cmpnei	r2,r2,99
 100a688:	1000091e 	bne	r2,zero,100a6b0 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
 100a68c:	e0fffe17 	ldw	r3,-8(fp)
 100a690:	18800104 	addi	r2,r3,4
 100a694:	e0bffe15 	stw	r2,-8(fp)
 100a698:	1805883a 	mov	r2,r3
 100a69c:	10800017 	ldw	r2,0(r2)
 100a6a0:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
 100a6a4:	e13ffb17 	ldw	r4,-20(fp)
 100a6a8:	100a8440 	call	100a844 <alt_putchar>
 100a6ac:	00005406 	br	100a800 <alt_printf+0x214>
                }
                else if (c == 'x')
 100a6b0:	e0bffc07 	ldb	r2,-16(fp)
 100a6b4:	10801e18 	cmpnei	r2,r2,120
 100a6b8:	1000371e 	bne	r2,zero,100a798 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 100a6bc:	e0fffe17 	ldw	r3,-8(fp)
 100a6c0:	18800104 	addi	r2,r3,4
 100a6c4:	e0bffe15 	stw	r2,-8(fp)
 100a6c8:	1805883a 	mov	r2,r3
 100a6cc:	10800017 	ldw	r2,0(r2)
 100a6d0:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 100a6d4:	e0bffa17 	ldw	r2,-24(fp)
 100a6d8:	1004c03a 	cmpne	r2,r2,zero
 100a6dc:	1000031e 	bne	r2,zero,100a6ec <alt_printf+0x100>
                    {
                        alt_putchar('0');
 100a6e0:	01000c04 	movi	r4,48
 100a6e4:	100a8440 	call	100a844 <alt_putchar>
                        continue;
 100a6e8:	00004506 	br	100a800 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 100a6ec:	00800704 	movi	r2,28
 100a6f0:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
 100a6f4:	00000306 	br	100a704 <alt_printf+0x118>
                        digit_shift -= 4;
 100a6f8:	e0bff817 	ldw	r2,-32(fp)
 100a6fc:	10bfff04 	addi	r2,r2,-4
 100a700:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 100a704:	00c003c4 	movi	r3,15
 100a708:	e0bff817 	ldw	r2,-32(fp)
 100a70c:	1884983a 	sll	r2,r3,r2
 100a710:	1007883a 	mov	r3,r2
 100a714:	e0bffa17 	ldw	r2,-24(fp)
 100a718:	1884703a 	and	r2,r3,r2
 100a71c:	1005003a 	cmpeq	r2,r2,zero
 100a720:	103ff51e 	bne	r2,zero,100a6f8 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 100a724:	00001806 	br	100a788 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 100a728:	00c003c4 	movi	r3,15
 100a72c:	e0bff817 	ldw	r2,-32(fp)
 100a730:	1884983a 	sll	r2,r3,r2
 100a734:	1007883a 	mov	r3,r2
 100a738:	e0bffa17 	ldw	r2,-24(fp)
 100a73c:	1886703a 	and	r3,r3,r2
 100a740:	e0bff817 	ldw	r2,-32(fp)
 100a744:	1884d83a 	srl	r2,r3,r2
 100a748:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
 100a74c:	e0bff917 	ldw	r2,-28(fp)
 100a750:	108002a8 	cmpgeui	r2,r2,10
 100a754:	1000041e 	bne	r2,zero,100a768 <alt_printf+0x17c>
                            c = '0' + digit;
 100a758:	e0bff917 	ldw	r2,-28(fp)
 100a75c:	10800c04 	addi	r2,r2,48
 100a760:	e0bffc05 	stb	r2,-16(fp)
 100a764:	00000306 	br	100a774 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
 100a768:	e0bff917 	ldw	r2,-28(fp)
 100a76c:	108015c4 	addi	r2,r2,87
 100a770:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
 100a774:	e13ffc07 	ldb	r4,-16(fp)
 100a778:	100a8440 	call	100a844 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 100a77c:	e0bff817 	ldw	r2,-32(fp)
 100a780:	10bfff04 	addi	r2,r2,-4
 100a784:	e0bff815 	stw	r2,-32(fp)
 100a788:	e0bff817 	ldw	r2,-32(fp)
 100a78c:	1004403a 	cmpge	r2,r2,zero
 100a790:	103fe51e 	bne	r2,zero,100a728 <alt_printf+0x13c>
 100a794:	00001a06 	br	100a800 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 100a798:	e0bffc07 	ldb	r2,-16(fp)
 100a79c:	10801cd8 	cmpnei	r2,r2,115
 100a7a0:	1000171e 	bne	r2,zero,100a800 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 100a7a4:	e0fffe17 	ldw	r3,-8(fp)
 100a7a8:	18800104 	addi	r2,r3,4
 100a7ac:	e0bffe15 	stw	r2,-8(fp)
 100a7b0:	1805883a 	mov	r2,r3
 100a7b4:	10800017 	ldw	r2,0(r2)
 100a7b8:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
 100a7bc:	00000906 	br	100a7e4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
 100a7c0:	e0bff717 	ldw	r2,-36(fp)
 100a7c4:	10800003 	ldbu	r2,0(r2)
 100a7c8:	11003fcc 	andi	r4,r2,255
 100a7cc:	2100201c 	xori	r4,r4,128
 100a7d0:	213fe004 	addi	r4,r4,-128
 100a7d4:	e0bff717 	ldw	r2,-36(fp)
 100a7d8:	10800044 	addi	r2,r2,1
 100a7dc:	e0bff715 	stw	r2,-36(fp)
 100a7e0:	100a8440 	call	100a844 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 100a7e4:	e0bff717 	ldw	r2,-36(fp)
 100a7e8:	10800003 	ldbu	r2,0(r2)
 100a7ec:	10803fcc 	andi	r2,r2,255
 100a7f0:	1080201c 	xori	r2,r2,128
 100a7f4:	10bfe004 	addi	r2,r2,-128
 100a7f8:	1004c03a 	cmpne	r2,r2,zero
 100a7fc:	103ff01e 	bne	r2,zero,100a7c0 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 100a800:	e0bffd17 	ldw	r2,-12(fp)
 100a804:	10800003 	ldbu	r2,0(r2)
 100a808:	e0bffc05 	stb	r2,-16(fp)
 100a80c:	e0bffc07 	ldb	r2,-16(fp)
 100a810:	1004c03a 	cmpne	r2,r2,zero
 100a814:	1007883a 	mov	r3,r2
 100a818:	e0bffd17 	ldw	r2,-12(fp)
 100a81c:	10800044 	addi	r2,r2,1
 100a820:	e0bffd15 	stw	r2,-12(fp)
 100a824:	18803fcc 	andi	r2,r3,255
 100a828:	1004c03a 	cmpne	r2,r2,zero
 100a82c:	103f7c1e 	bne	r2,zero,100a620 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
 100a830:	e037883a 	mov	sp,fp
 100a834:	dfc00117 	ldw	ra,4(sp)
 100a838:	df000017 	ldw	fp,0(sp)
 100a83c:	dec00504 	addi	sp,sp,20
 100a840:	f800283a 	ret

0100a844 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 100a844:	defffd04 	addi	sp,sp,-12
 100a848:	dfc00215 	stw	ra,8(sp)
 100a84c:	df000115 	stw	fp,4(sp)
 100a850:	df000104 	addi	fp,sp,4
 100a854:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 100a858:	00804074 	movhi	r2,257
 100a85c:	10bc9f04 	addi	r2,r2,-3460
 100a860:	10800017 	ldw	r2,0(r2)
 100a864:	11400217 	ldw	r5,8(r2)
 100a868:	e13fff17 	ldw	r4,-4(fp)
 100a86c:	100cd780 	call	100cd78 <putc>
#endif
}
 100a870:	e037883a 	mov	sp,fp
 100a874:	dfc00117 	ldw	ra,4(sp)
 100a878:	df000017 	ldw	fp,0(sp)
 100a87c:	dec00204 	addi	sp,sp,8
 100a880:	f800283a 	ret

0100a884 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a884:	defff704 	addi	sp,sp,-36
 100a888:	dfc00815 	stw	ra,32(sp)
 100a88c:	df000715 	stw	fp,28(sp)
 100a890:	df000704 	addi	fp,sp,28
 100a894:	e13ffb15 	stw	r4,-20(fp)
 100a898:	e17ffc15 	stw	r5,-16(fp)
 100a89c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a8a0:	e0bffb17 	ldw	r2,-20(fp)
 100a8a4:	1004803a 	cmplt	r2,r2,zero
 100a8a8:	1000091e 	bne	r2,zero,100a8d0 <read+0x4c>
 100a8ac:	e13ffb17 	ldw	r4,-20(fp)
 100a8b0:	01400304 	movi	r5,12
 100a8b4:	10098280 	call	1009828 <__mulsi3>
 100a8b8:	1007883a 	mov	r3,r2
 100a8bc:	00804074 	movhi	r2,257
 100a8c0:	10b81c04 	addi	r2,r2,-8080
 100a8c4:	1887883a 	add	r3,r3,r2
 100a8c8:	e0ffff15 	stw	r3,-4(fp)
 100a8cc:	00000106 	br	100a8d4 <read+0x50>
 100a8d0:	e03fff15 	stw	zero,-4(fp)
 100a8d4:	e0bfff17 	ldw	r2,-4(fp)
 100a8d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a8dc:	e0bffa17 	ldw	r2,-24(fp)
 100a8e0:	1005003a 	cmpeq	r2,r2,zero
 100a8e4:	1000241e 	bne	r2,zero,100a978 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a8e8:	e0bffa17 	ldw	r2,-24(fp)
 100a8ec:	10800217 	ldw	r2,8(r2)
 100a8f0:	108000cc 	andi	r2,r2,3
 100a8f4:	10800060 	cmpeqi	r2,r2,1
 100a8f8:	10001a1e 	bne	r2,zero,100a964 <read+0xe0>
 100a8fc:	e0bffa17 	ldw	r2,-24(fp)
 100a900:	10800017 	ldw	r2,0(r2)
 100a904:	10800517 	ldw	r2,20(r2)
 100a908:	1005003a 	cmpeq	r2,r2,zero
 100a90c:	1000151e 	bne	r2,zero,100a964 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a910:	e0bffa17 	ldw	r2,-24(fp)
 100a914:	10800017 	ldw	r2,0(r2)
 100a918:	10800517 	ldw	r2,20(r2)
 100a91c:	e17ffc17 	ldw	r5,-16(fp)
 100a920:	e1bffd17 	ldw	r6,-12(fp)
 100a924:	e13ffa17 	ldw	r4,-24(fp)
 100a928:	103ee83a 	callr	r2
 100a92c:	e0bff915 	stw	r2,-28(fp)
 100a930:	e0bff917 	ldw	r2,-28(fp)
 100a934:	1004403a 	cmpge	r2,r2,zero
 100a938:	1000071e 	bne	r2,zero,100a958 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100a93c:	100a9a80 	call	100a9a8 <alt_get_errno>
 100a940:	e0fff917 	ldw	r3,-28(fp)
 100a944:	00c7c83a 	sub	r3,zero,r3
 100a948:	10c00015 	stw	r3,0(r2)
          return -1;
 100a94c:	00bfffc4 	movi	r2,-1
 100a950:	e0bffe15 	stw	r2,-8(fp)
 100a954:	00000e06 	br	100a990 <read+0x10c>
        }
        return rval;
 100a958:	e0bff917 	ldw	r2,-28(fp)
 100a95c:	e0bffe15 	stw	r2,-8(fp)
 100a960:	00000b06 	br	100a990 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a964:	100a9a80 	call	100a9a8 <alt_get_errno>
 100a968:	1007883a 	mov	r3,r2
 100a96c:	00800344 	movi	r2,13
 100a970:	18800015 	stw	r2,0(r3)
 100a974:	00000406 	br	100a988 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a978:	100a9a80 	call	100a9a8 <alt_get_errno>
 100a97c:	1007883a 	mov	r3,r2
 100a980:	00801444 	movi	r2,81
 100a984:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a988:	00bfffc4 	movi	r2,-1
 100a98c:	e0bffe15 	stw	r2,-8(fp)
 100a990:	e0bffe17 	ldw	r2,-8(fp)
}
 100a994:	e037883a 	mov	sp,fp
 100a998:	dfc00117 	ldw	ra,4(sp)
 100a99c:	df000017 	ldw	fp,0(sp)
 100a9a0:	dec00204 	addi	sp,sp,8
 100a9a4:	f800283a 	ret

0100a9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a9a8:	defffd04 	addi	sp,sp,-12
 100a9ac:	dfc00215 	stw	ra,8(sp)
 100a9b0:	df000115 	stw	fp,4(sp)
 100a9b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a9b8:	00804074 	movhi	r2,257
 100a9bc:	10bcaa04 	addi	r2,r2,-3416
 100a9c0:	10800017 	ldw	r2,0(r2)
 100a9c4:	1005003a 	cmpeq	r2,r2,zero
 100a9c8:	1000061e 	bne	r2,zero,100a9e4 <alt_get_errno+0x3c>
 100a9cc:	00804074 	movhi	r2,257
 100a9d0:	10bcaa04 	addi	r2,r2,-3416
 100a9d4:	10800017 	ldw	r2,0(r2)
 100a9d8:	103ee83a 	callr	r2
 100a9dc:	e0bfff15 	stw	r2,-4(fp)
 100a9e0:	00000306 	br	100a9f0 <alt_get_errno+0x48>
 100a9e4:	00804074 	movhi	r2,257
 100a9e8:	10835704 	addi	r2,r2,3420
 100a9ec:	e0bfff15 	stw	r2,-4(fp)
 100a9f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100a9f4:	e037883a 	mov	sp,fp
 100a9f8:	dfc00117 	ldw	ra,4(sp)
 100a9fc:	df000017 	ldw	fp,0(sp)
 100aa00:	dec00204 	addi	sp,sp,8
 100aa04:	f800283a 	ret

0100aa08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100aa08:	defffc04 	addi	sp,sp,-16
 100aa0c:	dfc00315 	stw	ra,12(sp)
 100aa10:	df000215 	stw	fp,8(sp)
 100aa14:	dc000115 	stw	r16,4(sp)
 100aa18:	df000104 	addi	fp,sp,4
 100aa1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100aa20:	e0bfff17 	ldw	r2,-4(fp)
 100aa24:	108000d0 	cmplti	r2,r2,3
 100aa28:	10000f1e 	bne	r2,zero,100aa68 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100aa2c:	e13fff17 	ldw	r4,-4(fp)
 100aa30:	04004074 	movhi	r16,257
 100aa34:	84381c04 	addi	r16,r16,-8080
 100aa38:	01400304 	movi	r5,12
 100aa3c:	10098280 	call	1009828 <__mulsi3>
 100aa40:	1405883a 	add	r2,r2,r16
 100aa44:	10800204 	addi	r2,r2,8
 100aa48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100aa4c:	e13fff17 	ldw	r4,-4(fp)
 100aa50:	04004074 	movhi	r16,257
 100aa54:	84381c04 	addi	r16,r16,-8080
 100aa58:	01400304 	movi	r5,12
 100aa5c:	10098280 	call	1009828 <__mulsi3>
 100aa60:	1405883a 	add	r2,r2,r16
 100aa64:	10000015 	stw	zero,0(r2)
  }
}
 100aa68:	e037883a 	mov	sp,fp
 100aa6c:	dfc00217 	ldw	ra,8(sp)
 100aa70:	df000117 	ldw	fp,4(sp)
 100aa74:	dc000017 	ldw	r16,0(sp)
 100aa78:	dec00304 	addi	sp,sp,12
 100aa7c:	f800283a 	ret

0100aa80 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100aa80:	defff804 	addi	sp,sp,-32
 100aa84:	df000715 	stw	fp,28(sp)
 100aa88:	df000704 	addi	fp,sp,28
 100aa8c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100aa90:	0005303a 	rdctl	r2,status
 100aa94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100aa98:	e0fffb17 	ldw	r3,-20(fp)
 100aa9c:	00bfff84 	movi	r2,-2
 100aaa0:	1884703a 	and	r2,r3,r2
 100aaa4:	1001703a 	wrctl	status,r2
  
  return context;
 100aaa8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100aaac:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100aab0:	d0a00c17 	ldw	r2,-32720(gp)
 100aab4:	10c000c4 	addi	r3,r2,3
 100aab8:	00bfff04 	movi	r2,-4
 100aabc:	1884703a 	and	r2,r3,r2
 100aac0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100aac4:	d0e00c17 	ldw	r3,-32720(gp)
 100aac8:	e0bffe17 	ldw	r2,-8(fp)
 100aacc:	1887883a 	add	r3,r3,r2
 100aad0:	00806034 	movhi	r2,384
 100aad4:	10800004 	addi	r2,r2,0
 100aad8:	10c0072e 	bgeu	r2,r3,100aaf8 <sbrk+0x78>
 100aadc:	e0bffd17 	ldw	r2,-12(fp)
 100aae0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100aae4:	e0bffa17 	ldw	r2,-24(fp)
 100aae8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100aaec:	00bfffc4 	movi	r2,-1
 100aaf0:	e0bfff15 	stw	r2,-4(fp)
 100aaf4:	00000c06 	br	100ab28 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100aaf8:	d0a00c17 	ldw	r2,-32720(gp)
 100aafc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100ab00:	d0e00c17 	ldw	r3,-32720(gp)
 100ab04:	e0bffe17 	ldw	r2,-8(fp)
 100ab08:	1885883a 	add	r2,r3,r2
 100ab0c:	d0a00c15 	stw	r2,-32720(gp)
 100ab10:	e0bffd17 	ldw	r2,-12(fp)
 100ab14:	e0bff915 	stw	r2,-28(fp)
 100ab18:	e0bff917 	ldw	r2,-28(fp)
 100ab1c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100ab20:	e0bffc17 	ldw	r2,-16(fp)
 100ab24:	e0bfff15 	stw	r2,-4(fp)
 100ab28:	e0bfff17 	ldw	r2,-4(fp)
} 
 100ab2c:	e037883a 	mov	sp,fp
 100ab30:	df000017 	ldw	fp,0(sp)
 100ab34:	dec00104 	addi	sp,sp,4
 100ab38:	f800283a 	ret

0100ab3c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100ab3c:	defff704 	addi	sp,sp,-36
 100ab40:	dfc00815 	stw	ra,32(sp)
 100ab44:	df000715 	stw	fp,28(sp)
 100ab48:	df000704 	addi	fp,sp,28
 100ab4c:	e13ffb15 	stw	r4,-20(fp)
 100ab50:	e17ffc15 	stw	r5,-16(fp)
 100ab54:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100ab58:	e0bffb17 	ldw	r2,-20(fp)
 100ab5c:	1004803a 	cmplt	r2,r2,zero
 100ab60:	1000091e 	bne	r2,zero,100ab88 <write+0x4c>
 100ab64:	e13ffb17 	ldw	r4,-20(fp)
 100ab68:	01400304 	movi	r5,12
 100ab6c:	10098280 	call	1009828 <__mulsi3>
 100ab70:	1007883a 	mov	r3,r2
 100ab74:	00804074 	movhi	r2,257
 100ab78:	10b81c04 	addi	r2,r2,-8080
 100ab7c:	1887883a 	add	r3,r3,r2
 100ab80:	e0ffff15 	stw	r3,-4(fp)
 100ab84:	00000106 	br	100ab8c <write+0x50>
 100ab88:	e03fff15 	stw	zero,-4(fp)
 100ab8c:	e0bfff17 	ldw	r2,-4(fp)
 100ab90:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100ab94:	e0bffa17 	ldw	r2,-24(fp)
 100ab98:	1005003a 	cmpeq	r2,r2,zero
 100ab9c:	1000241e 	bne	r2,zero,100ac30 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100aba0:	e0bffa17 	ldw	r2,-24(fp)
 100aba4:	10800217 	ldw	r2,8(r2)
 100aba8:	108000cc 	andi	r2,r2,3
 100abac:	1005003a 	cmpeq	r2,r2,zero
 100abb0:	10001a1e 	bne	r2,zero,100ac1c <write+0xe0>
 100abb4:	e0bffa17 	ldw	r2,-24(fp)
 100abb8:	10800017 	ldw	r2,0(r2)
 100abbc:	10800617 	ldw	r2,24(r2)
 100abc0:	1005003a 	cmpeq	r2,r2,zero
 100abc4:	1000151e 	bne	r2,zero,100ac1c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100abc8:	e0bffa17 	ldw	r2,-24(fp)
 100abcc:	10800017 	ldw	r2,0(r2)
 100abd0:	10800617 	ldw	r2,24(r2)
 100abd4:	e17ffc17 	ldw	r5,-16(fp)
 100abd8:	e1bffd17 	ldw	r6,-12(fp)
 100abdc:	e13ffa17 	ldw	r4,-24(fp)
 100abe0:	103ee83a 	callr	r2
 100abe4:	e0bff915 	stw	r2,-28(fp)
 100abe8:	e0bff917 	ldw	r2,-28(fp)
 100abec:	1004403a 	cmpge	r2,r2,zero
 100abf0:	1000071e 	bne	r2,zero,100ac10 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100abf4:	100ac600 	call	100ac60 <alt_get_errno>
 100abf8:	e0fff917 	ldw	r3,-28(fp)
 100abfc:	00c7c83a 	sub	r3,zero,r3
 100ac00:	10c00015 	stw	r3,0(r2)
        return -1;
 100ac04:	00bfffc4 	movi	r2,-1
 100ac08:	e0bffe15 	stw	r2,-8(fp)
 100ac0c:	00000e06 	br	100ac48 <write+0x10c>
      }
      return rval;
 100ac10:	e0bff917 	ldw	r2,-28(fp)
 100ac14:	e0bffe15 	stw	r2,-8(fp)
 100ac18:	00000b06 	br	100ac48 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100ac1c:	100ac600 	call	100ac60 <alt_get_errno>
 100ac20:	1007883a 	mov	r3,r2
 100ac24:	00800344 	movi	r2,13
 100ac28:	18800015 	stw	r2,0(r3)
 100ac2c:	00000406 	br	100ac40 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100ac30:	100ac600 	call	100ac60 <alt_get_errno>
 100ac34:	1007883a 	mov	r3,r2
 100ac38:	00801444 	movi	r2,81
 100ac3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100ac40:	00bfffc4 	movi	r2,-1
 100ac44:	e0bffe15 	stw	r2,-8(fp)
 100ac48:	e0bffe17 	ldw	r2,-8(fp)
}
 100ac4c:	e037883a 	mov	sp,fp
 100ac50:	dfc00117 	ldw	ra,4(sp)
 100ac54:	df000017 	ldw	fp,0(sp)
 100ac58:	dec00204 	addi	sp,sp,8
 100ac5c:	f800283a 	ret

0100ac60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ac60:	defffd04 	addi	sp,sp,-12
 100ac64:	dfc00215 	stw	ra,8(sp)
 100ac68:	df000115 	stw	fp,4(sp)
 100ac6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100ac70:	00804074 	movhi	r2,257
 100ac74:	10bcaa04 	addi	r2,r2,-3416
 100ac78:	10800017 	ldw	r2,0(r2)
 100ac7c:	1005003a 	cmpeq	r2,r2,zero
 100ac80:	1000061e 	bne	r2,zero,100ac9c <alt_get_errno+0x3c>
 100ac84:	00804074 	movhi	r2,257
 100ac88:	10bcaa04 	addi	r2,r2,-3416
 100ac8c:	10800017 	ldw	r2,0(r2)
 100ac90:	103ee83a 	callr	r2
 100ac94:	e0bfff15 	stw	r2,-4(fp)
 100ac98:	00000306 	br	100aca8 <alt_get_errno+0x48>
 100ac9c:	00804074 	movhi	r2,257
 100aca0:	10835704 	addi	r2,r2,3420
 100aca4:	e0bfff15 	stw	r2,-4(fp)
 100aca8:	e0bfff17 	ldw	r2,-4(fp)
}
 100acac:	e037883a 	mov	sp,fp
 100acb0:	dfc00117 	ldw	ra,4(sp)
 100acb4:	df000017 	ldw	fp,0(sp)
 100acb8:	dec00204 	addi	sp,sp,8
 100acbc:	f800283a 	ret

0100acc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100acc0:	defffd04 	addi	sp,sp,-12
 100acc4:	dfc00215 	stw	ra,8(sp)
 100acc8:	df000115 	stw	fp,4(sp)
 100accc:	df000104 	addi	fp,sp,4
 100acd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 100acd4:	100ca180 	call	100ca18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100acd8:	00800044 	movi	r2,1
 100acdc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100ace0:	e037883a 	mov	sp,fp
 100ace4:	dfc00117 	ldw	ra,4(sp)
 100ace8:	df000017 	ldw	fp,0(sp)
 100acec:	dec00204 	addi	sp,sp,8
 100acf0:	f800283a 	ret

0100acf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100acf4:	defffe04 	addi	sp,sp,-8
 100acf8:	dfc00115 	stw	ra,4(sp)
 100acfc:	df000015 	stw	fp,0(sp)
 100ad00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 100ad04:	01004074 	movhi	r4,257
 100ad08:	21388604 	addi	r4,r4,-7656
 100ad0c:	000b883a 	mov	r5,zero
 100ad10:	01800144 	movi	r6,5
 100ad14:	100aed00 	call	100aed0 <altera_avalon_jtag_uart_init>
 100ad18:	01004074 	movhi	r4,257
 100ad1c:	21387c04 	addi	r4,r4,-7696
 100ad20:	100ad500 	call	100ad50 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100ad24:	01004074 	movhi	r4,257
 100ad28:	213c9404 	addi	r4,r4,-3504
 100ad2c:	100b8e40 	call	100b8e4 <alt_up_character_lcd_init>
 100ad30:	01004074 	movhi	r4,257
 100ad34:	213c9404 	addi	r4,r4,-3504
 100ad38:	100ad500 	call	100ad50 <alt_dev_reg>
}
 100ad3c:	e037883a 	mov	sp,fp
 100ad40:	dfc00117 	ldw	ra,4(sp)
 100ad44:	df000017 	ldw	fp,0(sp)
 100ad48:	dec00204 	addi	sp,sp,8
 100ad4c:	f800283a 	ret

0100ad50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100ad50:	defffd04 	addi	sp,sp,-12
 100ad54:	dfc00215 	stw	ra,8(sp)
 100ad58:	df000115 	stw	fp,4(sp)
 100ad5c:	df000104 	addi	fp,sp,4
 100ad60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100ad64:	e13fff17 	ldw	r4,-4(fp)
 100ad68:	01404074 	movhi	r5,257
 100ad6c:	297ca704 	addi	r5,r5,-3428
 100ad70:	100bed40 	call	100bed4 <alt_dev_llist_insert>
}
 100ad74:	e037883a 	mov	sp,fp
 100ad78:	dfc00117 	ldw	ra,4(sp)
 100ad7c:	df000017 	ldw	fp,0(sp)
 100ad80:	dec00204 	addi	sp,sp,8
 100ad84:	f800283a 	ret

0100ad88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100ad88:	defffa04 	addi	sp,sp,-24
 100ad8c:	dfc00515 	stw	ra,20(sp)
 100ad90:	df000415 	stw	fp,16(sp)
 100ad94:	df000404 	addi	fp,sp,16
 100ad98:	e13ffd15 	stw	r4,-12(fp)
 100ad9c:	e17ffe15 	stw	r5,-8(fp)
 100ada0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100ada4:	e0bffd17 	ldw	r2,-12(fp)
 100ada8:	10800017 	ldw	r2,0(r2)
 100adac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100adb0:	e0bffc17 	ldw	r2,-16(fp)
 100adb4:	11000a04 	addi	r4,r2,40
 100adb8:	e0bffd17 	ldw	r2,-12(fp)
 100adbc:	11c00217 	ldw	r7,8(r2)
 100adc0:	e17ffe17 	ldw	r5,-8(fp)
 100adc4:	e1bfff17 	ldw	r6,-4(fp)
 100adc8:	100b3d00 	call	100b3d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100adcc:	e037883a 	mov	sp,fp
 100add0:	dfc00117 	ldw	ra,4(sp)
 100add4:	df000017 	ldw	fp,0(sp)
 100add8:	dec00204 	addi	sp,sp,8
 100addc:	f800283a 	ret

0100ade0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100ade0:	defffa04 	addi	sp,sp,-24
 100ade4:	dfc00515 	stw	ra,20(sp)
 100ade8:	df000415 	stw	fp,16(sp)
 100adec:	df000404 	addi	fp,sp,16
 100adf0:	e13ffd15 	stw	r4,-12(fp)
 100adf4:	e17ffe15 	stw	r5,-8(fp)
 100adf8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100adfc:	e0bffd17 	ldw	r2,-12(fp)
 100ae00:	10800017 	ldw	r2,0(r2)
 100ae04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100ae08:	e0bffc17 	ldw	r2,-16(fp)
 100ae0c:	11000a04 	addi	r4,r2,40
 100ae10:	e0bffd17 	ldw	r2,-12(fp)
 100ae14:	11c00217 	ldw	r7,8(r2)
 100ae18:	e17ffe17 	ldw	r5,-8(fp)
 100ae1c:	e1bfff17 	ldw	r6,-4(fp)
 100ae20:	100b5f40 	call	100b5f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100ae24:	e037883a 	mov	sp,fp
 100ae28:	dfc00117 	ldw	ra,4(sp)
 100ae2c:	df000017 	ldw	fp,0(sp)
 100ae30:	dec00204 	addi	sp,sp,8
 100ae34:	f800283a 	ret

0100ae38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100ae38:	defffc04 	addi	sp,sp,-16
 100ae3c:	dfc00315 	stw	ra,12(sp)
 100ae40:	df000215 	stw	fp,8(sp)
 100ae44:	df000204 	addi	fp,sp,8
 100ae48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100ae4c:	e0bfff17 	ldw	r2,-4(fp)
 100ae50:	10800017 	ldw	r2,0(r2)
 100ae54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100ae58:	e0bffe17 	ldw	r2,-8(fp)
 100ae5c:	11000a04 	addi	r4,r2,40
 100ae60:	e0bfff17 	ldw	r2,-4(fp)
 100ae64:	11400217 	ldw	r5,8(r2)
 100ae68:	100b2680 	call	100b268 <altera_avalon_jtag_uart_close>
}
 100ae6c:	e037883a 	mov	sp,fp
 100ae70:	dfc00117 	ldw	ra,4(sp)
 100ae74:	df000017 	ldw	fp,0(sp)
 100ae78:	dec00204 	addi	sp,sp,8
 100ae7c:	f800283a 	ret

0100ae80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100ae80:	defffa04 	addi	sp,sp,-24
 100ae84:	dfc00515 	stw	ra,20(sp)
 100ae88:	df000415 	stw	fp,16(sp)
 100ae8c:	df000404 	addi	fp,sp,16
 100ae90:	e13ffd15 	stw	r4,-12(fp)
 100ae94:	e17ffe15 	stw	r5,-8(fp)
 100ae98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100ae9c:	e0bffd17 	ldw	r2,-12(fp)
 100aea0:	10800017 	ldw	r2,0(r2)
 100aea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100aea8:	e0bffc17 	ldw	r2,-16(fp)
 100aeac:	11000a04 	addi	r4,r2,40
 100aeb0:	e17ffe17 	ldw	r5,-8(fp)
 100aeb4:	e1bfff17 	ldw	r6,-4(fp)
 100aeb8:	100b2dc0 	call	100b2dc <altera_avalon_jtag_uart_ioctl>
}
 100aebc:	e037883a 	mov	sp,fp
 100aec0:	dfc00117 	ldw	ra,4(sp)
 100aec4:	df000017 	ldw	fp,0(sp)
 100aec8:	dec00204 	addi	sp,sp,8
 100aecc:	f800283a 	ret

0100aed0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100aed0:	defffa04 	addi	sp,sp,-24
 100aed4:	dfc00515 	stw	ra,20(sp)
 100aed8:	df000415 	stw	fp,16(sp)
 100aedc:	df000404 	addi	fp,sp,16
 100aee0:	e13ffd15 	stw	r4,-12(fp)
 100aee4:	e17ffe15 	stw	r5,-8(fp)
 100aee8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100aeec:	e0fffd17 	ldw	r3,-12(fp)
 100aef0:	00800044 	movi	r2,1
 100aef4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100aef8:	e0bffd17 	ldw	r2,-12(fp)
 100aefc:	10800017 	ldw	r2,0(r2)
 100af00:	11000104 	addi	r4,r2,4
 100af04:	e0bffd17 	ldw	r2,-12(fp)
 100af08:	10800817 	ldw	r2,32(r2)
 100af0c:	1007883a 	mov	r3,r2
 100af10:	2005883a 	mov	r2,r4
 100af14:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100af18:	e13ffe17 	ldw	r4,-8(fp)
 100af1c:	e17fff17 	ldw	r5,-4(fp)
 100af20:	d8000015 	stw	zero,0(sp)
 100af24:	01804074 	movhi	r6,257
 100af28:	31abe404 	addi	r6,r6,-20592
 100af2c:	e1fffd17 	ldw	r7,-12(fp)
 100af30:	100c1740 	call	100c174 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100af34:	e0bffd17 	ldw	r2,-12(fp)
 100af38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100af3c:	e0bffd17 	ldw	r2,-12(fp)
 100af40:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100af44:	00804074 	movhi	r2,257
 100af48:	10835c04 	addi	r2,r2,3440
 100af4c:	10800017 	ldw	r2,0(r2)
 100af50:	100b883a 	mov	r5,r2
 100af54:	01804074 	movhi	r6,257
 100af58:	31ac6e04 	addi	r6,r6,-20040
 100af5c:	e1fffd17 	ldw	r7,-12(fp)
 100af60:	100bd640 	call	100bd64 <alt_alarm_start>
 100af64:	1004403a 	cmpge	r2,r2,zero
 100af68:	1000041e 	bne	r2,zero,100af7c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100af6c:	e0fffd17 	ldw	r3,-12(fp)
 100af70:	00a00034 	movhi	r2,32768
 100af74:	10bfffc4 	addi	r2,r2,-1
 100af78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100af7c:	e037883a 	mov	sp,fp
 100af80:	dfc00117 	ldw	ra,4(sp)
 100af84:	df000017 	ldw	fp,0(sp)
 100af88:	dec00204 	addi	sp,sp,8
 100af8c:	f800283a 	ret

0100af90 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100af90:	defff804 	addi	sp,sp,-32
 100af94:	df000715 	stw	fp,28(sp)
 100af98:	df000704 	addi	fp,sp,28
 100af9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100afa0:	e0bfff17 	ldw	r2,-4(fp)
 100afa4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100afa8:	e0bffe17 	ldw	r2,-8(fp)
 100afac:	10800017 	ldw	r2,0(r2)
 100afb0:	e0bffd15 	stw	r2,-12(fp)
 100afb4:	00000006 	br	100afb8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100afb8:	e0bffd17 	ldw	r2,-12(fp)
 100afbc:	10800104 	addi	r2,r2,4
 100afc0:	10800037 	ldwio	r2,0(r2)
 100afc4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100afc8:	e0bffc17 	ldw	r2,-16(fp)
 100afcc:	1080c00c 	andi	r2,r2,768
 100afd0:	1005003a 	cmpeq	r2,r2,zero
 100afd4:	1000741e 	bne	r2,zero,100b1a8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100afd8:	e0bffc17 	ldw	r2,-16(fp)
 100afdc:	1080400c 	andi	r2,r2,256
 100afe0:	1005003a 	cmpeq	r2,r2,zero
 100afe4:	1000351e 	bne	r2,zero,100b0bc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100afe8:	00800074 	movhi	r2,1
 100afec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100aff0:	e0bffe17 	ldw	r2,-8(fp)
 100aff4:	10800a17 	ldw	r2,40(r2)
 100aff8:	10800044 	addi	r2,r2,1
 100affc:	1081ffcc 	andi	r2,r2,2047
 100b000:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100b004:	e0bffe17 	ldw	r2,-8(fp)
 100b008:	10c00b17 	ldw	r3,44(r2)
 100b00c:	e0bffa17 	ldw	r2,-24(fp)
 100b010:	18801626 	beq	r3,r2,100b06c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100b014:	e0bffd17 	ldw	r2,-12(fp)
 100b018:	10800037 	ldwio	r2,0(r2)
 100b01c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100b020:	e0bffb17 	ldw	r2,-20(fp)
 100b024:	10a0000c 	andi	r2,r2,32768
 100b028:	1005003a 	cmpeq	r2,r2,zero
 100b02c:	10000f1e 	bne	r2,zero,100b06c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100b030:	e0bffe17 	ldw	r2,-8(fp)
 100b034:	10c00a17 	ldw	r3,40(r2)
 100b038:	e0bffb17 	ldw	r2,-20(fp)
 100b03c:	1009883a 	mov	r4,r2
 100b040:	e0bffe17 	ldw	r2,-8(fp)
 100b044:	1885883a 	add	r2,r3,r2
 100b048:	10800e04 	addi	r2,r2,56
 100b04c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b050:	e0bffe17 	ldw	r2,-8(fp)
 100b054:	10800a17 	ldw	r2,40(r2)
 100b058:	10800044 	addi	r2,r2,1
 100b05c:	10c1ffcc 	andi	r3,r2,2047
 100b060:	e0bffe17 	ldw	r2,-8(fp)
 100b064:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100b068:	003fe106 	br	100aff0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100b06c:	e0bffb17 	ldw	r2,-20(fp)
 100b070:	10bfffec 	andhi	r2,r2,65535
 100b074:	1005003a 	cmpeq	r2,r2,zero
 100b078:	1000101e 	bne	r2,zero,100b0bc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b07c:	e0bffe17 	ldw	r2,-8(fp)
 100b080:	10c00817 	ldw	r3,32(r2)
 100b084:	00bfff84 	movi	r2,-2
 100b088:	1886703a 	and	r3,r3,r2
 100b08c:	e0bffe17 	ldw	r2,-8(fp)
 100b090:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100b094:	e0bffd17 	ldw	r2,-12(fp)
 100b098:	11000104 	addi	r4,r2,4
 100b09c:	e0bffe17 	ldw	r2,-8(fp)
 100b0a0:	10800817 	ldw	r2,32(r2)
 100b0a4:	1007883a 	mov	r3,r2
 100b0a8:	2005883a 	mov	r2,r4
 100b0ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100b0b0:	e0bffd17 	ldw	r2,-12(fp)
 100b0b4:	10800104 	addi	r2,r2,4
 100b0b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100b0bc:	e0bffc17 	ldw	r2,-16(fp)
 100b0c0:	1080800c 	andi	r2,r2,512
 100b0c4:	1005003a 	cmpeq	r2,r2,zero
 100b0c8:	103fbb1e 	bne	r2,zero,100afb8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100b0cc:	e0bffc17 	ldw	r2,-16(fp)
 100b0d0:	10bfffec 	andhi	r2,r2,65535
 100b0d4:	1004d43a 	srli	r2,r2,16
 100b0d8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100b0dc:	00001506 	br	100b134 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100b0e0:	e13ffd17 	ldw	r4,-12(fp)
 100b0e4:	e0bffe17 	ldw	r2,-8(fp)
 100b0e8:	10c00d17 	ldw	r3,52(r2)
 100b0ec:	e0bffe17 	ldw	r2,-8(fp)
 100b0f0:	1885883a 	add	r2,r3,r2
 100b0f4:	10820e04 	addi	r2,r2,2104
 100b0f8:	10800003 	ldbu	r2,0(r2)
 100b0fc:	10c03fcc 	andi	r3,r2,255
 100b100:	18c0201c 	xori	r3,r3,128
 100b104:	18ffe004 	addi	r3,r3,-128
 100b108:	2005883a 	mov	r2,r4
 100b10c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b110:	e0bffe17 	ldw	r2,-8(fp)
 100b114:	10800d17 	ldw	r2,52(r2)
 100b118:	10800044 	addi	r2,r2,1
 100b11c:	10c1ffcc 	andi	r3,r2,2047
 100b120:	e0bffe17 	ldw	r2,-8(fp)
 100b124:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100b128:	e0bff917 	ldw	r2,-28(fp)
 100b12c:	10bfffc4 	addi	r2,r2,-1
 100b130:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100b134:	e0bff917 	ldw	r2,-28(fp)
 100b138:	1005003a 	cmpeq	r2,r2,zero
 100b13c:	1000051e 	bne	r2,zero,100b154 <altera_avalon_jtag_uart_irq+0x1c4>
 100b140:	e0bffe17 	ldw	r2,-8(fp)
 100b144:	10c00d17 	ldw	r3,52(r2)
 100b148:	e0bffe17 	ldw	r2,-8(fp)
 100b14c:	10800c17 	ldw	r2,48(r2)
 100b150:	18bfe31e 	bne	r3,r2,100b0e0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100b154:	e0bff917 	ldw	r2,-28(fp)
 100b158:	1005003a 	cmpeq	r2,r2,zero
 100b15c:	103f961e 	bne	r2,zero,100afb8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100b160:	e0bffe17 	ldw	r2,-8(fp)
 100b164:	10c00817 	ldw	r3,32(r2)
 100b168:	00bfff44 	movi	r2,-3
 100b16c:	1886703a 	and	r3,r3,r2
 100b170:	e0bffe17 	ldw	r2,-8(fp)
 100b174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b178:	e0bffe17 	ldw	r2,-8(fp)
 100b17c:	10800017 	ldw	r2,0(r2)
 100b180:	11000104 	addi	r4,r2,4
 100b184:	e0bffe17 	ldw	r2,-8(fp)
 100b188:	10800817 	ldw	r2,32(r2)
 100b18c:	1007883a 	mov	r3,r2
 100b190:	2005883a 	mov	r2,r4
 100b194:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100b198:	e0bffd17 	ldw	r2,-12(fp)
 100b19c:	10800104 	addi	r2,r2,4
 100b1a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100b1a4:	003f8406 	br	100afb8 <altera_avalon_jtag_uart_irq+0x28>
}
 100b1a8:	e037883a 	mov	sp,fp
 100b1ac:	df000017 	ldw	fp,0(sp)
 100b1b0:	dec00104 	addi	sp,sp,4
 100b1b4:	f800283a 	ret

0100b1b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100b1b8:	defffc04 	addi	sp,sp,-16
 100b1bc:	df000315 	stw	fp,12(sp)
 100b1c0:	df000304 	addi	fp,sp,12
 100b1c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100b1c8:	e0bfff17 	ldw	r2,-4(fp)
 100b1cc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100b1d0:	e0bffe17 	ldw	r2,-8(fp)
 100b1d4:	10800017 	ldw	r2,0(r2)
 100b1d8:	10800104 	addi	r2,r2,4
 100b1dc:	10800037 	ldwio	r2,0(r2)
 100b1e0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100b1e4:	e0bffd17 	ldw	r2,-12(fp)
 100b1e8:	1081000c 	andi	r2,r2,1024
 100b1ec:	1005003a 	cmpeq	r2,r2,zero
 100b1f0:	10000c1e 	bne	r2,zero,100b224 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100b1f4:	e0bffe17 	ldw	r2,-8(fp)
 100b1f8:	10800017 	ldw	r2,0(r2)
 100b1fc:	11000104 	addi	r4,r2,4
 100b200:	e0bffe17 	ldw	r2,-8(fp)
 100b204:	10800817 	ldw	r2,32(r2)
 100b208:	10810014 	ori	r2,r2,1024
 100b20c:	1007883a 	mov	r3,r2
 100b210:	2005883a 	mov	r2,r4
 100b214:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100b218:	e0bffe17 	ldw	r2,-8(fp)
 100b21c:	10000915 	stw	zero,36(r2)
 100b220:	00000a06 	br	100b24c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100b224:	e0bffe17 	ldw	r2,-8(fp)
 100b228:	10c00917 	ldw	r3,36(r2)
 100b22c:	00a00034 	movhi	r2,32768
 100b230:	10bfff04 	addi	r2,r2,-4
 100b234:	10c00536 	bltu	r2,r3,100b24c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100b238:	e0bffe17 	ldw	r2,-8(fp)
 100b23c:	10800917 	ldw	r2,36(r2)
 100b240:	10c00044 	addi	r3,r2,1
 100b244:	e0bffe17 	ldw	r2,-8(fp)
 100b248:	10c00915 	stw	r3,36(r2)
 100b24c:	00804074 	movhi	r2,257
 100b250:	10835c04 	addi	r2,r2,3440
 100b254:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100b258:	e037883a 	mov	sp,fp
 100b25c:	df000017 	ldw	fp,0(sp)
 100b260:	dec00104 	addi	sp,sp,4
 100b264:	f800283a 	ret

0100b268 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100b268:	defffc04 	addi	sp,sp,-16
 100b26c:	df000315 	stw	fp,12(sp)
 100b270:	df000304 	addi	fp,sp,12
 100b274:	e13ffd15 	stw	r4,-12(fp)
 100b278:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100b27c:	00000706 	br	100b29c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100b280:	e0bffe17 	ldw	r2,-8(fp)
 100b284:	1090000c 	andi	r2,r2,16384
 100b288:	1005003a 	cmpeq	r2,r2,zero
 100b28c:	1000031e 	bne	r2,zero,100b29c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100b290:	00bffd44 	movi	r2,-11
 100b294:	e0bfff15 	stw	r2,-4(fp)
 100b298:	00000b06 	br	100b2c8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100b29c:	e0bffd17 	ldw	r2,-12(fp)
 100b2a0:	10c00d17 	ldw	r3,52(r2)
 100b2a4:	e0bffd17 	ldw	r2,-12(fp)
 100b2a8:	10800c17 	ldw	r2,48(r2)
 100b2ac:	18800526 	beq	r3,r2,100b2c4 <altera_avalon_jtag_uart_close+0x5c>
 100b2b0:	e0bffd17 	ldw	r2,-12(fp)
 100b2b4:	10c00917 	ldw	r3,36(r2)
 100b2b8:	e0bffd17 	ldw	r2,-12(fp)
 100b2bc:	10800117 	ldw	r2,4(r2)
 100b2c0:	18bfef36 	bltu	r3,r2,100b280 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100b2c4:	e03fff15 	stw	zero,-4(fp)
 100b2c8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b2cc:	e037883a 	mov	sp,fp
 100b2d0:	df000017 	ldw	fp,0(sp)
 100b2d4:	dec00104 	addi	sp,sp,4
 100b2d8:	f800283a 	ret

0100b2dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100b2dc:	defff804 	addi	sp,sp,-32
 100b2e0:	df000715 	stw	fp,28(sp)
 100b2e4:	df000704 	addi	fp,sp,28
 100b2e8:	e13ffb15 	stw	r4,-20(fp)
 100b2ec:	e17ffc15 	stw	r5,-16(fp)
 100b2f0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100b2f4:	00bff9c4 	movi	r2,-25
 100b2f8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100b2fc:	e0bffc17 	ldw	r2,-16(fp)
 100b300:	e0bfff15 	stw	r2,-4(fp)
 100b304:	e0ffff17 	ldw	r3,-4(fp)
 100b308:	189a8060 	cmpeqi	r2,r3,27137
 100b30c:	1000041e 	bne	r2,zero,100b320 <altera_avalon_jtag_uart_ioctl+0x44>
 100b310:	e0ffff17 	ldw	r3,-4(fp)
 100b314:	189a80a0 	cmpeqi	r2,r3,27138
 100b318:	10001b1e 	bne	r2,zero,100b388 <altera_avalon_jtag_uart_ioctl+0xac>
 100b31c:	00002706 	br	100b3bc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100b320:	e0bffb17 	ldw	r2,-20(fp)
 100b324:	10c00117 	ldw	r3,4(r2)
 100b328:	00a00034 	movhi	r2,32768
 100b32c:	10bfffc4 	addi	r2,r2,-1
 100b330:	18802226 	beq	r3,r2,100b3bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100b334:	e0bffd17 	ldw	r2,-12(fp)
 100b338:	10800017 	ldw	r2,0(r2)
 100b33c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100b340:	e0bff917 	ldw	r2,-28(fp)
 100b344:	10800090 	cmplti	r2,r2,2
 100b348:	1000071e 	bne	r2,zero,100b368 <altera_avalon_jtag_uart_ioctl+0x8c>
 100b34c:	e0fff917 	ldw	r3,-28(fp)
 100b350:	00a00034 	movhi	r2,32768
 100b354:	10bfffc4 	addi	r2,r2,-1
 100b358:	18800326 	beq	r3,r2,100b368 <altera_avalon_jtag_uart_ioctl+0x8c>
 100b35c:	e0bff917 	ldw	r2,-28(fp)
 100b360:	e0bffe15 	stw	r2,-8(fp)
 100b364:	00000306 	br	100b374 <altera_avalon_jtag_uart_ioctl+0x98>
 100b368:	00e00034 	movhi	r3,32768
 100b36c:	18ffff84 	addi	r3,r3,-2
 100b370:	e0fffe15 	stw	r3,-8(fp)
 100b374:	e0bffb17 	ldw	r2,-20(fp)
 100b378:	e0fffe17 	ldw	r3,-8(fp)
 100b37c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100b380:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100b384:	00000d06 	br	100b3bc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100b388:	e0bffb17 	ldw	r2,-20(fp)
 100b38c:	10c00117 	ldw	r3,4(r2)
 100b390:	00a00034 	movhi	r2,32768
 100b394:	10bfffc4 	addi	r2,r2,-1
 100b398:	18800826 	beq	r3,r2,100b3bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100b39c:	e13ffd17 	ldw	r4,-12(fp)
 100b3a0:	e0bffb17 	ldw	r2,-20(fp)
 100b3a4:	10c00917 	ldw	r3,36(r2)
 100b3a8:	e0bffb17 	ldw	r2,-20(fp)
 100b3ac:	10800117 	ldw	r2,4(r2)
 100b3b0:	1885803a 	cmpltu	r2,r3,r2
 100b3b4:	20800015 	stw	r2,0(r4)
      rc = 0;
 100b3b8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100b3bc:	e0bffa17 	ldw	r2,-24(fp)
}
 100b3c0:	e037883a 	mov	sp,fp
 100b3c4:	df000017 	ldw	fp,0(sp)
 100b3c8:	dec00104 	addi	sp,sp,4
 100b3cc:	f800283a 	ret

0100b3d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100b3d0:	defff204 	addi	sp,sp,-56
 100b3d4:	dfc00d15 	stw	ra,52(sp)
 100b3d8:	df000c15 	stw	fp,48(sp)
 100b3dc:	df000c04 	addi	fp,sp,48
 100b3e0:	e13ffb15 	stw	r4,-20(fp)
 100b3e4:	e17ffc15 	stw	r5,-16(fp)
 100b3e8:	e1bffd15 	stw	r6,-12(fp)
 100b3ec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100b3f0:	e0bffc17 	ldw	r2,-16(fp)
 100b3f4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100b3f8:	00004806 	br	100b51c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100b3fc:	e0bffb17 	ldw	r2,-20(fp)
 100b400:	10800a17 	ldw	r2,40(r2)
 100b404:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100b408:	e0bffb17 	ldw	r2,-20(fp)
 100b40c:	10800b17 	ldw	r2,44(r2)
 100b410:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100b414:	e0fff717 	ldw	r3,-36(fp)
 100b418:	e0bff617 	ldw	r2,-40(fp)
 100b41c:	18800536 	bltu	r3,r2,100b434 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100b420:	e0bff717 	ldw	r2,-36(fp)
 100b424:	e0fff617 	ldw	r3,-40(fp)
 100b428:	10c5c83a 	sub	r2,r2,r3
 100b42c:	e0bff815 	stw	r2,-32(fp)
 100b430:	00000406 	br	100b444 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100b434:	00820004 	movi	r2,2048
 100b438:	e0fff617 	ldw	r3,-40(fp)
 100b43c:	10c5c83a 	sub	r2,r2,r3
 100b440:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b444:	e0bff817 	ldw	r2,-32(fp)
 100b448:	1005003a 	cmpeq	r2,r2,zero
 100b44c:	10001f1e 	bne	r2,zero,100b4cc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100b450:	e0fffd17 	ldw	r3,-12(fp)
 100b454:	e0bff817 	ldw	r2,-32(fp)
 100b458:	1880022e 	bgeu	r3,r2,100b464 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100b45c:	e0bffd17 	ldw	r2,-12(fp)
 100b460:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100b464:	e0bffb17 	ldw	r2,-20(fp)
 100b468:	10c00e04 	addi	r3,r2,56
 100b46c:	e0bff617 	ldw	r2,-40(fp)
 100b470:	1887883a 	add	r3,r3,r2
 100b474:	e0bffa17 	ldw	r2,-24(fp)
 100b478:	1009883a 	mov	r4,r2
 100b47c:	180b883a 	mov	r5,r3
 100b480:	e1bff817 	ldw	r6,-32(fp)
 100b484:	10058480 	call	1005848 <memcpy>
      ptr   += n;
 100b488:	e0fff817 	ldw	r3,-32(fp)
 100b48c:	e0bffa17 	ldw	r2,-24(fp)
 100b490:	10c5883a 	add	r2,r2,r3
 100b494:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100b498:	e0fffd17 	ldw	r3,-12(fp)
 100b49c:	e0bff817 	ldw	r2,-32(fp)
 100b4a0:	1885c83a 	sub	r2,r3,r2
 100b4a4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b4a8:	e0fff617 	ldw	r3,-40(fp)
 100b4ac:	e0bff817 	ldw	r2,-32(fp)
 100b4b0:	1885883a 	add	r2,r3,r2
 100b4b4:	10c1ffcc 	andi	r3,r2,2047
 100b4b8:	e0bffb17 	ldw	r2,-20(fp)
 100b4bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100b4c0:	e0bffd17 	ldw	r2,-12(fp)
 100b4c4:	10800048 	cmpgei	r2,r2,1
 100b4c8:	103fcc1e 	bne	r2,zero,100b3fc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100b4cc:	e0fffa17 	ldw	r3,-24(fp)
 100b4d0:	e0bffc17 	ldw	r2,-16(fp)
 100b4d4:	1880141e 	bne	r3,r2,100b528 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100b4d8:	e0bffe17 	ldw	r2,-8(fp)
 100b4dc:	1090000c 	andi	r2,r2,16384
 100b4e0:	1004c03a 	cmpne	r2,r2,zero
 100b4e4:	1000101e 	bne	r2,zero,100b528 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100b4e8:	e0bffb17 	ldw	r2,-20(fp)
 100b4ec:	10c00a17 	ldw	r3,40(r2)
 100b4f0:	e0bff717 	ldw	r2,-36(fp)
 100b4f4:	1880051e 	bne	r3,r2,100b50c <altera_avalon_jtag_uart_read+0x13c>
 100b4f8:	e0bffb17 	ldw	r2,-20(fp)
 100b4fc:	10c00917 	ldw	r3,36(r2)
 100b500:	e0bffb17 	ldw	r2,-20(fp)
 100b504:	10800117 	ldw	r2,4(r2)
 100b508:	18bff736 	bltu	r3,r2,100b4e8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100b50c:	e0bffb17 	ldw	r2,-20(fp)
 100b510:	10c00a17 	ldw	r3,40(r2)
 100b514:	e0bff717 	ldw	r2,-36(fp)
 100b518:	18800326 	beq	r3,r2,100b528 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100b51c:	e0bffd17 	ldw	r2,-12(fp)
 100b520:	10800048 	cmpgei	r2,r2,1
 100b524:	103fb51e 	bne	r2,zero,100b3fc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100b528:	e0fffa17 	ldw	r3,-24(fp)
 100b52c:	e0bffc17 	ldw	r2,-16(fp)
 100b530:	18801926 	beq	r3,r2,100b598 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b534:	0005303a 	rdctl	r2,status
 100b538:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b53c:	e0fff517 	ldw	r3,-44(fp)
 100b540:	00bfff84 	movi	r2,-2
 100b544:	1884703a 	and	r2,r3,r2
 100b548:	1001703a 	wrctl	status,r2
  
  return context;
 100b54c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100b550:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b554:	e0bffb17 	ldw	r2,-20(fp)
 100b558:	10800817 	ldw	r2,32(r2)
 100b55c:	10c00054 	ori	r3,r2,1
 100b560:	e0bffb17 	ldw	r2,-20(fp)
 100b564:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b568:	e0bffb17 	ldw	r2,-20(fp)
 100b56c:	10800017 	ldw	r2,0(r2)
 100b570:	11000104 	addi	r4,r2,4
 100b574:	e0bffb17 	ldw	r2,-20(fp)
 100b578:	10800817 	ldw	r2,32(r2)
 100b57c:	1007883a 	mov	r3,r2
 100b580:	2005883a 	mov	r2,r4
 100b584:	10c00035 	stwio	r3,0(r2)
 100b588:	e0bff917 	ldw	r2,-28(fp)
 100b58c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b590:	e0bff417 	ldw	r2,-48(fp)
 100b594:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100b598:	e0fffa17 	ldw	r3,-24(fp)
 100b59c:	e0bffc17 	ldw	r2,-16(fp)
 100b5a0:	18800526 	beq	r3,r2,100b5b8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100b5a4:	e0fffa17 	ldw	r3,-24(fp)
 100b5a8:	e0bffc17 	ldw	r2,-16(fp)
 100b5ac:	1887c83a 	sub	r3,r3,r2
 100b5b0:	e0ffff15 	stw	r3,-4(fp)
 100b5b4:	00000906 	br	100b5dc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100b5b8:	e0bffe17 	ldw	r2,-8(fp)
 100b5bc:	1090000c 	andi	r2,r2,16384
 100b5c0:	1005003a 	cmpeq	r2,r2,zero
 100b5c4:	1000031e 	bne	r2,zero,100b5d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100b5c8:	00bffd44 	movi	r2,-11
 100b5cc:	e0bfff15 	stw	r2,-4(fp)
 100b5d0:	00000206 	br	100b5dc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100b5d4:	00bffec4 	movi	r2,-5
 100b5d8:	e0bfff15 	stw	r2,-4(fp)
 100b5dc:	e0bfff17 	ldw	r2,-4(fp)
}
 100b5e0:	e037883a 	mov	sp,fp
 100b5e4:	dfc00117 	ldw	ra,4(sp)
 100b5e8:	df000017 	ldw	fp,0(sp)
 100b5ec:	dec00204 	addi	sp,sp,8
 100b5f0:	f800283a 	ret

0100b5f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100b5f4:	defff204 	addi	sp,sp,-56
 100b5f8:	dfc00d15 	stw	ra,52(sp)
 100b5fc:	df000c15 	stw	fp,48(sp)
 100b600:	df000c04 	addi	fp,sp,48
 100b604:	e13ffb15 	stw	r4,-20(fp)
 100b608:	e17ffc15 	stw	r5,-16(fp)
 100b60c:	e1bffd15 	stw	r6,-12(fp)
 100b610:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100b614:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100b618:	e0bffc17 	ldw	r2,-16(fp)
 100b61c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b620:	00003a06 	br	100b70c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100b624:	e0bffb17 	ldw	r2,-20(fp)
 100b628:	10800c17 	ldw	r2,48(r2)
 100b62c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100b630:	e0bffb17 	ldw	r2,-20(fp)
 100b634:	10800d17 	ldw	r2,52(r2)
 100b638:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100b63c:	e0fffa17 	ldw	r3,-24(fp)
 100b640:	e0bff917 	ldw	r2,-28(fp)
 100b644:	1880062e 	bgeu	r3,r2,100b660 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100b648:	e0fff917 	ldw	r3,-28(fp)
 100b64c:	e0bffa17 	ldw	r2,-24(fp)
 100b650:	1885c83a 	sub	r2,r3,r2
 100b654:	10bfffc4 	addi	r2,r2,-1
 100b658:	e0bff815 	stw	r2,-32(fp)
 100b65c:	00000c06 	br	100b690 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100b660:	e0bff917 	ldw	r2,-28(fp)
 100b664:	1005003a 	cmpeq	r2,r2,zero
 100b668:	1000051e 	bne	r2,zero,100b680 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100b66c:	00820004 	movi	r2,2048
 100b670:	e0fffa17 	ldw	r3,-24(fp)
 100b674:	10c5c83a 	sub	r2,r2,r3
 100b678:	e0bff815 	stw	r2,-32(fp)
 100b67c:	00000406 	br	100b690 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100b680:	0081ffc4 	movi	r2,2047
 100b684:	e0fffa17 	ldw	r3,-24(fp)
 100b688:	10c5c83a 	sub	r2,r2,r3
 100b68c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b690:	e0bff817 	ldw	r2,-32(fp)
 100b694:	1005003a 	cmpeq	r2,r2,zero
 100b698:	10001f1e 	bne	r2,zero,100b718 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100b69c:	e0fffd17 	ldw	r3,-12(fp)
 100b6a0:	e0bff817 	ldw	r2,-32(fp)
 100b6a4:	1880022e 	bgeu	r3,r2,100b6b0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100b6a8:	e0bffd17 	ldw	r2,-12(fp)
 100b6ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100b6b0:	e0bffb17 	ldw	r2,-20(fp)
 100b6b4:	10c20e04 	addi	r3,r2,2104
 100b6b8:	e0bffa17 	ldw	r2,-24(fp)
 100b6bc:	1885883a 	add	r2,r3,r2
 100b6c0:	e0fffc17 	ldw	r3,-16(fp)
 100b6c4:	1009883a 	mov	r4,r2
 100b6c8:	180b883a 	mov	r5,r3
 100b6cc:	e1bff817 	ldw	r6,-32(fp)
 100b6d0:	10058480 	call	1005848 <memcpy>
      ptr   += n;
 100b6d4:	e0fff817 	ldw	r3,-32(fp)
 100b6d8:	e0bffc17 	ldw	r2,-16(fp)
 100b6dc:	10c5883a 	add	r2,r2,r3
 100b6e0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100b6e4:	e0fffd17 	ldw	r3,-12(fp)
 100b6e8:	e0bff817 	ldw	r2,-32(fp)
 100b6ec:	1885c83a 	sub	r2,r3,r2
 100b6f0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b6f4:	e0fffa17 	ldw	r3,-24(fp)
 100b6f8:	e0bff817 	ldw	r2,-32(fp)
 100b6fc:	1885883a 	add	r2,r3,r2
 100b700:	10c1ffcc 	andi	r3,r2,2047
 100b704:	e0bffb17 	ldw	r2,-20(fp)
 100b708:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b70c:	e0bffd17 	ldw	r2,-12(fp)
 100b710:	10800048 	cmpgei	r2,r2,1
 100b714:	103fc31e 	bne	r2,zero,100b624 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b718:	0005303a 	rdctl	r2,status
 100b71c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b720:	e0fff517 	ldw	r3,-44(fp)
 100b724:	00bfff84 	movi	r2,-2
 100b728:	1884703a 	and	r2,r3,r2
 100b72c:	1001703a 	wrctl	status,r2
  
  return context;
 100b730:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100b734:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100b738:	e0bffb17 	ldw	r2,-20(fp)
 100b73c:	10800817 	ldw	r2,32(r2)
 100b740:	10c00094 	ori	r3,r2,2
 100b744:	e0bffb17 	ldw	r2,-20(fp)
 100b748:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b74c:	e0bffb17 	ldw	r2,-20(fp)
 100b750:	10800017 	ldw	r2,0(r2)
 100b754:	11000104 	addi	r4,r2,4
 100b758:	e0bffb17 	ldw	r2,-20(fp)
 100b75c:	10800817 	ldw	r2,32(r2)
 100b760:	1007883a 	mov	r3,r2
 100b764:	2005883a 	mov	r2,r4
 100b768:	10c00035 	stwio	r3,0(r2)
 100b76c:	e0bff717 	ldw	r2,-36(fp)
 100b770:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b774:	e0bff417 	ldw	r2,-48(fp)
 100b778:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100b77c:	e0bffd17 	ldw	r2,-12(fp)
 100b780:	10800050 	cmplti	r2,r2,1
 100b784:	1000111e 	bne	r2,zero,100b7cc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100b788:	e0bffe17 	ldw	r2,-8(fp)
 100b78c:	1090000c 	andi	r2,r2,16384
 100b790:	1004c03a 	cmpne	r2,r2,zero
 100b794:	1000101e 	bne	r2,zero,100b7d8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100b798:	e0bffb17 	ldw	r2,-20(fp)
 100b79c:	10c00d17 	ldw	r3,52(r2)
 100b7a0:	e0bff917 	ldw	r2,-28(fp)
 100b7a4:	1880051e 	bne	r3,r2,100b7bc <altera_avalon_jtag_uart_write+0x1c8>
 100b7a8:	e0bffb17 	ldw	r2,-20(fp)
 100b7ac:	10c00917 	ldw	r3,36(r2)
 100b7b0:	e0bffb17 	ldw	r2,-20(fp)
 100b7b4:	10800117 	ldw	r2,4(r2)
 100b7b8:	18bff736 	bltu	r3,r2,100b798 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100b7bc:	e0bffb17 	ldw	r2,-20(fp)
 100b7c0:	10c00d17 	ldw	r3,52(r2)
 100b7c4:	e0bff917 	ldw	r2,-28(fp)
 100b7c8:	18800326 	beq	r3,r2,100b7d8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 100b7cc:	e0bffd17 	ldw	r2,-12(fp)
 100b7d0:	10800048 	cmpgei	r2,r2,1
 100b7d4:	103fcd1e 	bne	r2,zero,100b70c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100b7d8:	e0fffc17 	ldw	r3,-16(fp)
 100b7dc:	e0bff617 	ldw	r2,-40(fp)
 100b7e0:	18800526 	beq	r3,r2,100b7f8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100b7e4:	e0fffc17 	ldw	r3,-16(fp)
 100b7e8:	e0bff617 	ldw	r2,-40(fp)
 100b7ec:	1887c83a 	sub	r3,r3,r2
 100b7f0:	e0ffff15 	stw	r3,-4(fp)
 100b7f4:	00000906 	br	100b81c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100b7f8:	e0bffe17 	ldw	r2,-8(fp)
 100b7fc:	1090000c 	andi	r2,r2,16384
 100b800:	1005003a 	cmpeq	r2,r2,zero
 100b804:	1000031e 	bne	r2,zero,100b814 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100b808:	00bffd44 	movi	r2,-11
 100b80c:	e0bfff15 	stw	r2,-4(fp)
 100b810:	00000206 	br	100b81c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 100b814:	00bffec4 	movi	r2,-5
 100b818:	e0bfff15 	stw	r2,-4(fp)
 100b81c:	e0bfff17 	ldw	r2,-4(fp)
}
 100b820:	e037883a 	mov	sp,fp
 100b824:	dfc00117 	ldw	ra,4(sp)
 100b828:	df000017 	ldw	fp,0(sp)
 100b82c:	dec00204 	addi	sp,sp,8
 100b830:	f800283a 	ret

0100b834 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100b834:	defffc04 	addi	sp,sp,-16
 100b838:	df000315 	stw	fp,12(sp)
 100b83c:	df000304 	addi	fp,sp,12
 100b840:	e13ffe15 	stw	r4,-8(fp)
 100b844:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100b848:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100b84c:	e0bfff17 	ldw	r2,-4(fp)
 100b850:	1004c03a 	cmpne	r2,r2,zero
 100b854:	1000061e 	bne	r2,zero,100b870 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100b858:	e0bffe17 	ldw	r2,-8(fp)
 100b85c:	1007883a 	mov	r3,r2
 100b860:	e0bffd03 	ldbu	r2,-12(fp)
 100b864:	10c4b03a 	or	r2,r2,r3
 100b868:	e0bffd05 	stb	r2,-12(fp)
 100b86c:	00000806 	br	100b890 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100b870:	e0bffe17 	ldw	r2,-8(fp)
 100b874:	1007883a 	mov	r3,r2
 100b878:	e0bffd03 	ldbu	r2,-12(fp)
 100b87c:	10c4b03a 	or	r2,r2,r3
 100b880:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100b884:	e0bffd03 	ldbu	r2,-12(fp)
 100b888:	10801014 	ori	r2,r2,64
 100b88c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100b890:	e0fffd03 	ldbu	r3,-12(fp)
 100b894:	00bfe004 	movi	r2,-128
 100b898:	1884b03a 	or	r2,r3,r2
 100b89c:	10803fcc 	andi	r2,r2,255
}
 100b8a0:	e037883a 	mov	sp,fp
 100b8a4:	df000017 	ldw	fp,0(sp)
 100b8a8:	dec00104 	addi	sp,sp,4
 100b8ac:	f800283a 	ret

0100b8b0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100b8b0:	defffd04 	addi	sp,sp,-12
 100b8b4:	df000215 	stw	fp,8(sp)
 100b8b8:	df000204 	addi	fp,sp,8
 100b8bc:	e13ffe15 	stw	r4,-8(fp)
 100b8c0:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100b8c4:	e0bffe17 	ldw	r2,-8(fp)
 100b8c8:	10800a17 	ldw	r2,40(r2)
 100b8cc:	e0ffff03 	ldbu	r3,-4(fp)
 100b8d0:	10c00025 	stbio	r3,0(r2)
}
 100b8d4:	e037883a 	mov	sp,fp
 100b8d8:	df000017 	ldw	fp,0(sp)
 100b8dc:	dec00104 	addi	sp,sp,4
 100b8e0:	f800283a 	ret

0100b8e4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100b8e4:	defffe04 	addi	sp,sp,-8
 100b8e8:	df000115 	stw	fp,4(sp)
 100b8ec:	df000104 	addi	fp,sp,4
 100b8f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100b8f4:	e0bfff17 	ldw	r2,-4(fp)
 100b8f8:	10800a17 	ldw	r2,40(r2)
 100b8fc:	1007883a 	mov	r3,r2
 100b900:	00800044 	movi	r2,1
 100b904:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100b908:	e037883a 	mov	sp,fp
 100b90c:	df000017 	ldw	fp,0(sp)
 100b910:	dec00104 	addi	sp,sp,4
 100b914:	f800283a 	ret

0100b918 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100b918:	defffc04 	addi	sp,sp,-16
 100b91c:	dfc00315 	stw	ra,12(sp)
 100b920:	df000215 	stw	fp,8(sp)
 100b924:	df000204 	addi	fp,sp,8
 100b928:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100b92c:	e13fff17 	ldw	r4,-4(fp)
 100b930:	01404074 	movhi	r5,257
 100b934:	297ca704 	addi	r5,r5,-3428
 100b938:	100c0b00 	call	100c0b0 <alt_find_dev>
 100b93c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100b940:	e0bffe17 	ldw	r2,-8(fp)
}
 100b944:	e037883a 	mov	sp,fp
 100b948:	dfc00117 	ldw	ra,4(sp)
 100b94c:	df000017 	ldw	fp,0(sp)
 100b950:	dec00204 	addi	sp,sp,8
 100b954:	f800283a 	ret

0100b958 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100b958:	defffb04 	addi	sp,sp,-20
 100b95c:	df000415 	stw	fp,16(sp)
 100b960:	df000404 	addi	fp,sp,16
 100b964:	e13ffd15 	stw	r4,-12(fp)
 100b968:	e17ffe15 	stw	r5,-8(fp)
 100b96c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100b970:	e03ffc15 	stw	zero,-16(fp)
 100b974:	00000f06 	br	100b9b4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100b978:	e0bffd17 	ldw	r2,-12(fp)
 100b97c:	10800a17 	ldw	r2,40(r2)
 100b980:	11000044 	addi	r4,r2,1
 100b984:	e0fffc17 	ldw	r3,-16(fp)
 100b988:	e0bffe17 	ldw	r2,-8(fp)
 100b98c:	1885883a 	add	r2,r3,r2
 100b990:	10800003 	ldbu	r2,0(r2)
 100b994:	10c03fcc 	andi	r3,r2,255
 100b998:	18c0201c 	xori	r3,r3,128
 100b99c:	18ffe004 	addi	r3,r3,-128
 100b9a0:	2005883a 	mov	r2,r4
 100b9a4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100b9a8:	e0bffc17 	ldw	r2,-16(fp)
 100b9ac:	10800044 	addi	r2,r2,1
 100b9b0:	e0bffc15 	stw	r2,-16(fp)
 100b9b4:	e0fffc17 	ldw	r3,-16(fp)
 100b9b8:	e0bfff17 	ldw	r2,-4(fp)
 100b9bc:	18bfee36 	bltu	r3,r2,100b978 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100b9c0:	e037883a 	mov	sp,fp
 100b9c4:	df000017 	ldw	fp,0(sp)
 100b9c8:	dec00104 	addi	sp,sp,4
 100b9cc:	f800283a 	ret

0100b9d0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100b9d0:	defffd04 	addi	sp,sp,-12
 100b9d4:	df000215 	stw	fp,8(sp)
 100b9d8:	df000204 	addi	fp,sp,8
 100b9dc:	e13ffe15 	stw	r4,-8(fp)
 100b9e0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100b9e4:	00000d06 	br	100ba1c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100b9e8:	e0bffe17 	ldw	r2,-8(fp)
 100b9ec:	10800a17 	ldw	r2,40(r2)
 100b9f0:	11000044 	addi	r4,r2,1
 100b9f4:	e0bfff17 	ldw	r2,-4(fp)
 100b9f8:	10800003 	ldbu	r2,0(r2)
 100b9fc:	10c03fcc 	andi	r3,r2,255
 100ba00:	18c0201c 	xori	r3,r3,128
 100ba04:	18ffe004 	addi	r3,r3,-128
 100ba08:	2005883a 	mov	r2,r4
 100ba0c:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100ba10:	e0bfff17 	ldw	r2,-4(fp)
 100ba14:	10800044 	addi	r2,r2,1
 100ba18:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100ba1c:	e0bfff17 	ldw	r2,-4(fp)
 100ba20:	10800003 	ldbu	r2,0(r2)
 100ba24:	10803fcc 	andi	r2,r2,255
 100ba28:	1080201c 	xori	r2,r2,128
 100ba2c:	10bfe004 	addi	r2,r2,-128
 100ba30:	1004c03a 	cmpne	r2,r2,zero
 100ba34:	103fec1e 	bne	r2,zero,100b9e8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100ba38:	e037883a 	mov	sp,fp
 100ba3c:	df000017 	ldw	fp,0(sp)
 100ba40:	dec00104 	addi	sp,sp,4
 100ba44:	f800283a 	ret

0100ba48 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100ba48:	defffb04 	addi	sp,sp,-20
 100ba4c:	dfc00415 	stw	ra,16(sp)
 100ba50:	df000315 	stw	fp,12(sp)
 100ba54:	df000304 	addi	fp,sp,12
 100ba58:	e13ffd15 	stw	r4,-12(fp)
 100ba5c:	e17ffe15 	stw	r5,-8(fp)
 100ba60:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100ba64:	e0bffd17 	ldw	r2,-12(fp)
 100ba68:	10800017 	ldw	r2,0(r2)
 100ba6c:	1009883a 	mov	r4,r2
 100ba70:	e1bfff17 	ldw	r6,-4(fp)
 100ba74:	e17ffe17 	ldw	r5,-8(fp)
 100ba78:	100b9580 	call	100b958 <alt_up_character_lcd_write>
	return 0;
 100ba7c:	0005883a 	mov	r2,zero
}
 100ba80:	e037883a 	mov	sp,fp
 100ba84:	dfc00117 	ldw	ra,4(sp)
 100ba88:	df000017 	ldw	fp,0(sp)
 100ba8c:	dec00204 	addi	sp,sp,8
 100ba90:	f800283a 	ret

0100ba94 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100ba94:	defff904 	addi	sp,sp,-28
 100ba98:	dfc00615 	stw	ra,24(sp)
 100ba9c:	df000515 	stw	fp,20(sp)
 100baa0:	df000504 	addi	fp,sp,20
 100baa4:	e13ffc15 	stw	r4,-16(fp)
 100baa8:	e17ffd15 	stw	r5,-12(fp)
 100baac:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100bab0:	e0bffd17 	ldw	r2,-12(fp)
 100bab4:	10800a28 	cmpgeui	r2,r2,40
 100bab8:	1000031e 	bne	r2,zero,100bac8 <alt_up_character_lcd_set_cursor_pos+0x34>
 100babc:	e0bffe17 	ldw	r2,-8(fp)
 100bac0:	108000b0 	cmpltui	r2,r2,2
 100bac4:	1000031e 	bne	r2,zero,100bad4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100bac8:	00bfffc4 	movi	r2,-1
 100bacc:	e0bfff15 	stw	r2,-4(fp)
 100bad0:	00000806 	br	100baf4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100bad4:	e13ffd17 	ldw	r4,-12(fp)
 100bad8:	e17ffe17 	ldw	r5,-8(fp)
 100badc:	100b8340 	call	100b834 <get_DDRAM_addr>
 100bae0:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100bae4:	e17ffb03 	ldbu	r5,-20(fp)
 100bae8:	e13ffc17 	ldw	r4,-16(fp)
 100baec:	100b8b00 	call	100b8b0 <alt_up_character_lcd_send_cmd>
	return 0;
 100baf0:	e03fff15 	stw	zero,-4(fp)
 100baf4:	e0bfff17 	ldw	r2,-4(fp)
}
 100baf8:	e037883a 	mov	sp,fp
 100bafc:	dfc00117 	ldw	ra,4(sp)
 100bb00:	df000017 	ldw	fp,0(sp)
 100bb04:	dec00204 	addi	sp,sp,8
 100bb08:	f800283a 	ret

0100bb0c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100bb0c:	defff904 	addi	sp,sp,-28
 100bb10:	dfc00615 	stw	ra,24(sp)
 100bb14:	df000515 	stw	fp,20(sp)
 100bb18:	df000504 	addi	fp,sp,20
 100bb1c:	e13ffc15 	stw	r4,-16(fp)
 100bb20:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100bb24:	e0bffd17 	ldw	r2,-12(fp)
 100bb28:	1005003a 	cmpeq	r2,r2,zero
 100bb2c:	10001e1e 	bne	r2,zero,100bba8 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100bb30:	e0bffd17 	ldw	r2,-12(fp)
 100bb34:	10800050 	cmplti	r2,r2,1
 100bb38:	1000031e 	bne	r2,zero,100bb48 <alt_up_character_lcd_shift_cursor+0x3c>
 100bb3c:	00800504 	movi	r2,20
 100bb40:	e0bfff05 	stb	r2,-4(fp)
 100bb44:	00000206 	br	100bb50 <alt_up_character_lcd_shift_cursor+0x44>
 100bb48:	00c00404 	movi	r3,16
 100bb4c:	e0ffff05 	stb	r3,-4(fp)
 100bb50:	e0bfff03 	ldbu	r2,-4(fp)
 100bb54:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100bb58:	e0fffd17 	ldw	r3,-12(fp)
 100bb5c:	e0fffe15 	stw	r3,-8(fp)
 100bb60:	e0fffe17 	ldw	r3,-8(fp)
 100bb64:	1804403a 	cmpge	r2,r3,zero
 100bb68:	1000031e 	bne	r2,zero,100bb78 <alt_up_character_lcd_shift_cursor+0x6c>
 100bb6c:	e0bffe17 	ldw	r2,-8(fp)
 100bb70:	0085c83a 	sub	r2,zero,r2
 100bb74:	e0bffe15 	stw	r2,-8(fp)
 100bb78:	e0fffe17 	ldw	r3,-8(fp)
 100bb7c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100bb80:	00000306 	br	100bb90 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100bb84:	e17ffb43 	ldbu	r5,-19(fp)
 100bb88:	e13ffc17 	ldw	r4,-16(fp)
 100bb8c:	100b8b00 	call	100b8b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100bb90:	e0bffb03 	ldbu	r2,-20(fp)
 100bb94:	10bfffc4 	addi	r2,r2,-1
 100bb98:	e0bffb05 	stb	r2,-20(fp)
 100bb9c:	e0bffb03 	ldbu	r2,-20(fp)
 100bba0:	10803fd8 	cmpnei	r2,r2,255
 100bba4:	103ff71e 	bne	r2,zero,100bb84 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100bba8:	e037883a 	mov	sp,fp
 100bbac:	dfc00117 	ldw	ra,4(sp)
 100bbb0:	df000017 	ldw	fp,0(sp)
 100bbb4:	dec00204 	addi	sp,sp,8
 100bbb8:	f800283a 	ret

0100bbbc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100bbbc:	defff904 	addi	sp,sp,-28
 100bbc0:	dfc00615 	stw	ra,24(sp)
 100bbc4:	df000515 	stw	fp,20(sp)
 100bbc8:	df000504 	addi	fp,sp,20
 100bbcc:	e13ffc15 	stw	r4,-16(fp)
 100bbd0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100bbd4:	e0bffd17 	ldw	r2,-12(fp)
 100bbd8:	1005003a 	cmpeq	r2,r2,zero
 100bbdc:	10001e1e 	bne	r2,zero,100bc58 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100bbe0:	e0bffd17 	ldw	r2,-12(fp)
 100bbe4:	10800050 	cmplti	r2,r2,1
 100bbe8:	1000031e 	bne	r2,zero,100bbf8 <alt_up_character_lcd_shift_display+0x3c>
 100bbec:	00800704 	movi	r2,28
 100bbf0:	e0bfff05 	stb	r2,-4(fp)
 100bbf4:	00000206 	br	100bc00 <alt_up_character_lcd_shift_display+0x44>
 100bbf8:	00c00604 	movi	r3,24
 100bbfc:	e0ffff05 	stb	r3,-4(fp)
 100bc00:	e0bfff03 	ldbu	r2,-4(fp)
 100bc04:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100bc08:	e0fffd17 	ldw	r3,-12(fp)
 100bc0c:	e0fffe15 	stw	r3,-8(fp)
 100bc10:	e0fffe17 	ldw	r3,-8(fp)
 100bc14:	1804403a 	cmpge	r2,r3,zero
 100bc18:	1000031e 	bne	r2,zero,100bc28 <alt_up_character_lcd_shift_display+0x6c>
 100bc1c:	e0bffe17 	ldw	r2,-8(fp)
 100bc20:	0085c83a 	sub	r2,zero,r2
 100bc24:	e0bffe15 	stw	r2,-8(fp)
 100bc28:	e0fffe17 	ldw	r3,-8(fp)
 100bc2c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100bc30:	00000306 	br	100bc40 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100bc34:	e17ffb43 	ldbu	r5,-19(fp)
 100bc38:	e13ffc17 	ldw	r4,-16(fp)
 100bc3c:	100b8b00 	call	100b8b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100bc40:	e0bffb03 	ldbu	r2,-20(fp)
 100bc44:	10bfffc4 	addi	r2,r2,-1
 100bc48:	e0bffb05 	stb	r2,-20(fp)
 100bc4c:	e0bffb03 	ldbu	r2,-20(fp)
 100bc50:	10803fd8 	cmpnei	r2,r2,255
 100bc54:	103ff71e 	bne	r2,zero,100bc34 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100bc58:	e037883a 	mov	sp,fp
 100bc5c:	dfc00117 	ldw	ra,4(sp)
 100bc60:	df000017 	ldw	fp,0(sp)
 100bc64:	dec00204 	addi	sp,sp,8
 100bc68:	f800283a 	ret

0100bc6c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100bc6c:	defff904 	addi	sp,sp,-28
 100bc70:	dfc00615 	stw	ra,24(sp)
 100bc74:	df000515 	stw	fp,20(sp)
 100bc78:	df000504 	addi	fp,sp,20
 100bc7c:	e13ffc15 	stw	r4,-16(fp)
 100bc80:	e17ffd15 	stw	r5,-12(fp)
 100bc84:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100bc88:	e0bffd17 	ldw	r2,-12(fp)
 100bc8c:	10800a28 	cmpgeui	r2,r2,40
 100bc90:	1000031e 	bne	r2,zero,100bca0 <alt_up_character_lcd_erase_pos+0x34>
 100bc94:	e0bffe17 	ldw	r2,-8(fp)
 100bc98:	108000b0 	cmpltui	r2,r2,2
 100bc9c:	1000031e 	bne	r2,zero,100bcac <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100bca0:	00bfffc4 	movi	r2,-1
 100bca4:	e0bfff15 	stw	r2,-4(fp)
 100bca8:	00000e06 	br	100bce4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100bcac:	e13ffd17 	ldw	r4,-12(fp)
 100bcb0:	e17ffe17 	ldw	r5,-8(fp)
 100bcb4:	100b8340 	call	100b834 <get_DDRAM_addr>
 100bcb8:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100bcbc:	e17ffb03 	ldbu	r5,-20(fp)
 100bcc0:	e13ffc17 	ldw	r4,-16(fp)
 100bcc4:	100b8b00 	call	100b8b0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100bcc8:	e0bffc17 	ldw	r2,-16(fp)
 100bccc:	10800a17 	ldw	r2,40(r2)
 100bcd0:	10800044 	addi	r2,r2,1
 100bcd4:	1007883a 	mov	r3,r2
 100bcd8:	00800084 	movi	r2,2
 100bcdc:	18800025 	stbio	r2,0(r3)
	return 0;
 100bce0:	e03fff15 	stw	zero,-4(fp)
 100bce4:	e0bfff17 	ldw	r2,-4(fp)
}
 100bce8:	e037883a 	mov	sp,fp
 100bcec:	dfc00117 	ldw	ra,4(sp)
 100bcf0:	df000017 	ldw	fp,0(sp)
 100bcf4:	dec00204 	addi	sp,sp,8
 100bcf8:	f800283a 	ret

0100bcfc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100bcfc:	defffd04 	addi	sp,sp,-12
 100bd00:	dfc00215 	stw	ra,8(sp)
 100bd04:	df000115 	stw	fp,4(sp)
 100bd08:	df000104 	addi	fp,sp,4
 100bd0c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100bd10:	e13fff17 	ldw	r4,-4(fp)
 100bd14:	01400304 	movi	r5,12
 100bd18:	100b8b00 	call	100b8b0 <alt_up_character_lcd_send_cmd>
}
 100bd1c:	e037883a 	mov	sp,fp
 100bd20:	dfc00117 	ldw	ra,4(sp)
 100bd24:	df000017 	ldw	fp,0(sp)
 100bd28:	dec00204 	addi	sp,sp,8
 100bd2c:	f800283a 	ret

0100bd30 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100bd30:	defffd04 	addi	sp,sp,-12
 100bd34:	dfc00215 	stw	ra,8(sp)
 100bd38:	df000115 	stw	fp,4(sp)
 100bd3c:	df000104 	addi	fp,sp,4
 100bd40:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100bd44:	e13fff17 	ldw	r4,-4(fp)
 100bd48:	014003c4 	movi	r5,15
 100bd4c:	100b8b00 	call	100b8b0 <alt_up_character_lcd_send_cmd>
}
 100bd50:	e037883a 	mov	sp,fp
 100bd54:	dfc00117 	ldw	ra,4(sp)
 100bd58:	df000017 	ldw	fp,0(sp)
 100bd5c:	dec00204 	addi	sp,sp,8
 100bd60:	f800283a 	ret

0100bd64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100bd64:	defff404 	addi	sp,sp,-48
 100bd68:	df000b15 	stw	fp,44(sp)
 100bd6c:	df000b04 	addi	fp,sp,44
 100bd70:	e13ffb15 	stw	r4,-20(fp)
 100bd74:	e17ffc15 	stw	r5,-16(fp)
 100bd78:	e1bffd15 	stw	r6,-12(fp)
 100bd7c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100bd80:	e03ff915 	stw	zero,-28(fp)
 100bd84:	00804074 	movhi	r2,257
 100bd88:	10835c04 	addi	r2,r2,3440
 100bd8c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100bd90:	1005003a 	cmpeq	r2,r2,zero
 100bd94:	1000411e 	bne	r2,zero,100be9c <alt_alarm_start+0x138>
  {
    if (alarm)
 100bd98:	e0bffb17 	ldw	r2,-20(fp)
 100bd9c:	1005003a 	cmpeq	r2,r2,zero
 100bda0:	10003b1e 	bne	r2,zero,100be90 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100bda4:	e0fffb17 	ldw	r3,-20(fp)
 100bda8:	e0bffd17 	ldw	r2,-12(fp)
 100bdac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100bdb0:	e0fffb17 	ldw	r3,-20(fp)
 100bdb4:	e0bffe17 	ldw	r2,-8(fp)
 100bdb8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bdbc:	0005303a 	rdctl	r2,status
 100bdc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bdc4:	e0fff817 	ldw	r3,-32(fp)
 100bdc8:	00bfff84 	movi	r2,-2
 100bdcc:	1884703a 	and	r2,r3,r2
 100bdd0:	1001703a 	wrctl	status,r2
  
  return context;
 100bdd4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100bdd8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100bddc:	00804074 	movhi	r2,257
 100bde0:	10835d04 	addi	r2,r2,3444
 100bde4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100bde8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100bdec:	e0fffc17 	ldw	r3,-16(fp)
 100bdf0:	e0bff917 	ldw	r2,-28(fp)
 100bdf4:	1885883a 	add	r2,r3,r2
 100bdf8:	10c00044 	addi	r3,r2,1
 100bdfc:	e0bffb17 	ldw	r2,-20(fp)
 100be00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100be04:	e0bffb17 	ldw	r2,-20(fp)
 100be08:	10c00217 	ldw	r3,8(r2)
 100be0c:	e0bff917 	ldw	r2,-28(fp)
 100be10:	1880042e 	bgeu	r3,r2,100be24 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100be14:	e0fffb17 	ldw	r3,-20(fp)
 100be18:	00800044 	movi	r2,1
 100be1c:	18800405 	stb	r2,16(r3)
 100be20:	00000206 	br	100be2c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100be24:	e0bffb17 	ldw	r2,-20(fp)
 100be28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100be2c:	e0fffb17 	ldw	r3,-20(fp)
 100be30:	00804074 	movhi	r2,257
 100be34:	10bcad04 	addi	r2,r2,-3404
 100be38:	e0bff615 	stw	r2,-40(fp)
 100be3c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100be40:	e0fff717 	ldw	r3,-36(fp)
 100be44:	e0bff617 	ldw	r2,-40(fp)
 100be48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100be4c:	e0bff617 	ldw	r2,-40(fp)
 100be50:	10c00017 	ldw	r3,0(r2)
 100be54:	e0bff717 	ldw	r2,-36(fp)
 100be58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100be5c:	e0bff617 	ldw	r2,-40(fp)
 100be60:	10c00017 	ldw	r3,0(r2)
 100be64:	e0bff717 	ldw	r2,-36(fp)
 100be68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100be6c:	e0fff617 	ldw	r3,-40(fp)
 100be70:	e0bff717 	ldw	r2,-36(fp)
 100be74:	18800015 	stw	r2,0(r3)
 100be78:	e0bffa17 	ldw	r2,-24(fp)
 100be7c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100be80:	e0bff517 	ldw	r2,-44(fp)
 100be84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100be88:	e03fff15 	stw	zero,-4(fp)
 100be8c:	00000506 	br	100bea4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100be90:	00bffa84 	movi	r2,-22
 100be94:	e0bfff15 	stw	r2,-4(fp)
 100be98:	00000206 	br	100bea4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100be9c:	00bfde84 	movi	r2,-134
 100bea0:	e0bfff15 	stw	r2,-4(fp)
 100bea4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100bea8:	e037883a 	mov	sp,fp
 100beac:	df000017 	ldw	fp,0(sp)
 100beb0:	dec00104 	addi	sp,sp,4
 100beb4:	f800283a 	ret

0100beb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100beb8:	deffff04 	addi	sp,sp,-4
 100bebc:	df000015 	stw	fp,0(sp)
 100bec0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100bec4:	e037883a 	mov	sp,fp
 100bec8:	df000017 	ldw	fp,0(sp)
 100becc:	dec00104 	addi	sp,sp,4
 100bed0:	f800283a 	ret

0100bed4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100bed4:	defff904 	addi	sp,sp,-28
 100bed8:	dfc00615 	stw	ra,24(sp)
 100bedc:	df000515 	stw	fp,20(sp)
 100bee0:	df000504 	addi	fp,sp,20
 100bee4:	e13ffd15 	stw	r4,-12(fp)
 100bee8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100beec:	e0bffd17 	ldw	r2,-12(fp)
 100bef0:	1005003a 	cmpeq	r2,r2,zero
 100bef4:	1000041e 	bne	r2,zero,100bf08 <alt_dev_llist_insert+0x34>
 100bef8:	e0bffd17 	ldw	r2,-12(fp)
 100befc:	10800217 	ldw	r2,8(r2)
 100bf00:	1004c03a 	cmpne	r2,r2,zero
 100bf04:	1000071e 	bne	r2,zero,100bf24 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100bf08:	100bf880 	call	100bf88 <alt_get_errno>
 100bf0c:	1007883a 	mov	r3,r2
 100bf10:	00800584 	movi	r2,22
 100bf14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100bf18:	00bffa84 	movi	r2,-22
 100bf1c:	e0bfff15 	stw	r2,-4(fp)
 100bf20:	00001306 	br	100bf70 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100bf24:	e0fffd17 	ldw	r3,-12(fp)
 100bf28:	e0bffe17 	ldw	r2,-8(fp)
 100bf2c:	e0bffb15 	stw	r2,-20(fp)
 100bf30:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100bf34:	e0fffc17 	ldw	r3,-16(fp)
 100bf38:	e0bffb17 	ldw	r2,-20(fp)
 100bf3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100bf40:	e0bffb17 	ldw	r2,-20(fp)
 100bf44:	10c00017 	ldw	r3,0(r2)
 100bf48:	e0bffc17 	ldw	r2,-16(fp)
 100bf4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100bf50:	e0bffb17 	ldw	r2,-20(fp)
 100bf54:	10c00017 	ldw	r3,0(r2)
 100bf58:	e0bffc17 	ldw	r2,-16(fp)
 100bf5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100bf60:	e0fffb17 	ldw	r3,-20(fp)
 100bf64:	e0bffc17 	ldw	r2,-16(fp)
 100bf68:	18800015 	stw	r2,0(r3)

  return 0;  
 100bf6c:	e03fff15 	stw	zero,-4(fp)
 100bf70:	e0bfff17 	ldw	r2,-4(fp)
}
 100bf74:	e037883a 	mov	sp,fp
 100bf78:	dfc00117 	ldw	ra,4(sp)
 100bf7c:	df000017 	ldw	fp,0(sp)
 100bf80:	dec00204 	addi	sp,sp,8
 100bf84:	f800283a 	ret

0100bf88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bf88:	defffd04 	addi	sp,sp,-12
 100bf8c:	dfc00215 	stw	ra,8(sp)
 100bf90:	df000115 	stw	fp,4(sp)
 100bf94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bf98:	00804074 	movhi	r2,257
 100bf9c:	10bcaa04 	addi	r2,r2,-3416
 100bfa0:	10800017 	ldw	r2,0(r2)
 100bfa4:	1005003a 	cmpeq	r2,r2,zero
 100bfa8:	1000061e 	bne	r2,zero,100bfc4 <alt_get_errno+0x3c>
 100bfac:	00804074 	movhi	r2,257
 100bfb0:	10bcaa04 	addi	r2,r2,-3416
 100bfb4:	10800017 	ldw	r2,0(r2)
 100bfb8:	103ee83a 	callr	r2
 100bfbc:	e0bfff15 	stw	r2,-4(fp)
 100bfc0:	00000306 	br	100bfd0 <alt_get_errno+0x48>
 100bfc4:	00804074 	movhi	r2,257
 100bfc8:	10835704 	addi	r2,r2,3420
 100bfcc:	e0bfff15 	stw	r2,-4(fp)
 100bfd0:	e0bfff17 	ldw	r2,-4(fp)
}
 100bfd4:	e037883a 	mov	sp,fp
 100bfd8:	dfc00117 	ldw	ra,4(sp)
 100bfdc:	df000017 	ldw	fp,0(sp)
 100bfe0:	dec00204 	addi	sp,sp,8
 100bfe4:	f800283a 	ret

0100bfe8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100bfe8:	defffd04 	addi	sp,sp,-12
 100bfec:	dfc00215 	stw	ra,8(sp)
 100bff0:	df000115 	stw	fp,4(sp)
 100bff4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100bff8:	00bfff04 	movi	r2,-4
 100bffc:	00c04074 	movhi	r3,257
 100c000:	18f51a04 	addi	r3,r3,-11160
 100c004:	1885883a 	add	r2,r3,r2
 100c008:	e0bfff15 	stw	r2,-4(fp)
 100c00c:	00000606 	br	100c028 <_do_ctors+0x40>
        (*ctor) (); 
 100c010:	e0bfff17 	ldw	r2,-4(fp)
 100c014:	10800017 	ldw	r2,0(r2)
 100c018:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100c01c:	e0bfff17 	ldw	r2,-4(fp)
 100c020:	10bfff04 	addi	r2,r2,-4
 100c024:	e0bfff15 	stw	r2,-4(fp)
 100c028:	e0ffff17 	ldw	r3,-4(fp)
 100c02c:	00804074 	movhi	r2,257
 100c030:	10b51904 	addi	r2,r2,-11164
 100c034:	18bff62e 	bgeu	r3,r2,100c010 <_do_ctors+0x28>
        (*ctor) (); 
}
 100c038:	e037883a 	mov	sp,fp
 100c03c:	dfc00117 	ldw	ra,4(sp)
 100c040:	df000017 	ldw	fp,0(sp)
 100c044:	dec00204 	addi	sp,sp,8
 100c048:	f800283a 	ret

0100c04c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100c04c:	defffd04 	addi	sp,sp,-12
 100c050:	dfc00215 	stw	ra,8(sp)
 100c054:	df000115 	stw	fp,4(sp)
 100c058:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100c05c:	00bfff04 	movi	r2,-4
 100c060:	00c04074 	movhi	r3,257
 100c064:	18f51a04 	addi	r3,r3,-11160
 100c068:	1885883a 	add	r2,r3,r2
 100c06c:	e0bfff15 	stw	r2,-4(fp)
 100c070:	00000606 	br	100c08c <_do_dtors+0x40>
        (*dtor) (); 
 100c074:	e0bfff17 	ldw	r2,-4(fp)
 100c078:	10800017 	ldw	r2,0(r2)
 100c07c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100c080:	e0bfff17 	ldw	r2,-4(fp)
 100c084:	10bfff04 	addi	r2,r2,-4
 100c088:	e0bfff15 	stw	r2,-4(fp)
 100c08c:	e0ffff17 	ldw	r3,-4(fp)
 100c090:	00804074 	movhi	r2,257
 100c094:	10b51a04 	addi	r2,r2,-11160
 100c098:	18bff62e 	bgeu	r3,r2,100c074 <_do_dtors+0x28>
        (*dtor) (); 
}
 100c09c:	e037883a 	mov	sp,fp
 100c0a0:	dfc00117 	ldw	ra,4(sp)
 100c0a4:	df000017 	ldw	fp,0(sp)
 100c0a8:	dec00204 	addi	sp,sp,8
 100c0ac:	f800283a 	ret

0100c0b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100c0b0:	defff904 	addi	sp,sp,-28
 100c0b4:	dfc00615 	stw	ra,24(sp)
 100c0b8:	df000515 	stw	fp,20(sp)
 100c0bc:	df000504 	addi	fp,sp,20
 100c0c0:	e13ffd15 	stw	r4,-12(fp)
 100c0c4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100c0c8:	e0bffe17 	ldw	r2,-8(fp)
 100c0cc:	10800017 	ldw	r2,0(r2)
 100c0d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100c0d4:	e13ffd17 	ldw	r4,-12(fp)
 100c0d8:	10073c80 	call	10073c8 <strlen>
 100c0dc:	10800044 	addi	r2,r2,1
 100c0e0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100c0e4:	00000d06 	br	100c11c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100c0e8:	e0bffc17 	ldw	r2,-16(fp)
 100c0ec:	11000217 	ldw	r4,8(r2)
 100c0f0:	e1bffb17 	ldw	r6,-20(fp)
 100c0f4:	e17ffd17 	ldw	r5,-12(fp)
 100c0f8:	100cd040 	call	100cd04 <memcmp>
 100c0fc:	1004c03a 	cmpne	r2,r2,zero
 100c100:	1000031e 	bne	r2,zero,100c110 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100c104:	e0bffc17 	ldw	r2,-16(fp)
 100c108:	e0bfff15 	stw	r2,-4(fp)
 100c10c:	00000706 	br	100c12c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100c110:	e0bffc17 	ldw	r2,-16(fp)
 100c114:	10800017 	ldw	r2,0(r2)
 100c118:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100c11c:	e0fffe17 	ldw	r3,-8(fp)
 100c120:	e0bffc17 	ldw	r2,-16(fp)
 100c124:	10fff01e 	bne	r2,r3,100c0e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100c128:	e03fff15 	stw	zero,-4(fp)
 100c12c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c130:	e037883a 	mov	sp,fp
 100c134:	dfc00117 	ldw	ra,4(sp)
 100c138:	df000017 	ldw	fp,0(sp)
 100c13c:	dec00204 	addi	sp,sp,8
 100c140:	f800283a 	ret

0100c144 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100c144:	defffe04 	addi	sp,sp,-8
 100c148:	dfc00115 	stw	ra,4(sp)
 100c14c:	df000015 	stw	fp,0(sp)
 100c150:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100c154:	0009883a 	mov	r4,zero
 100c158:	01440004 	movi	r5,4096
 100c15c:	100cc280 	call	100cc28 <alt_icache_flush>
#endif
}
 100c160:	e037883a 	mov	sp,fp
 100c164:	dfc00117 	ldw	ra,4(sp)
 100c168:	df000017 	ldw	fp,0(sp)
 100c16c:	dec00204 	addi	sp,sp,8
 100c170:	f800283a 	ret

0100c174 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100c174:	defff904 	addi	sp,sp,-28
 100c178:	dfc00615 	stw	ra,24(sp)
 100c17c:	df000515 	stw	fp,20(sp)
 100c180:	df000504 	addi	fp,sp,20
 100c184:	e13ffc15 	stw	r4,-16(fp)
 100c188:	e17ffd15 	stw	r5,-12(fp)
 100c18c:	e1bffe15 	stw	r6,-8(fp)
 100c190:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100c194:	e0800217 	ldw	r2,8(fp)
 100c198:	d8800015 	stw	r2,0(sp)
 100c19c:	e13ffc17 	ldw	r4,-16(fp)
 100c1a0:	e17ffd17 	ldw	r5,-12(fp)
 100c1a4:	e1bffe17 	ldw	r6,-8(fp)
 100c1a8:	e1ffff17 	ldw	r7,-4(fp)
 100c1ac:	100c3480 	call	100c348 <alt_iic_isr_register>
}  
 100c1b0:	e037883a 	mov	sp,fp
 100c1b4:	dfc00117 	ldw	ra,4(sp)
 100c1b8:	df000017 	ldw	fp,0(sp)
 100c1bc:	dec00204 	addi	sp,sp,8
 100c1c0:	f800283a 	ret

0100c1c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100c1c4:	defff904 	addi	sp,sp,-28
 100c1c8:	df000615 	stw	fp,24(sp)
 100c1cc:	df000604 	addi	fp,sp,24
 100c1d0:	e13ffe15 	stw	r4,-8(fp)
 100c1d4:	e17fff15 	stw	r5,-4(fp)
 100c1d8:	e0bfff17 	ldw	r2,-4(fp)
 100c1dc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c1e0:	0005303a 	rdctl	r2,status
 100c1e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c1e8:	e0fffb17 	ldw	r3,-20(fp)
 100c1ec:	00bfff84 	movi	r2,-2
 100c1f0:	1884703a 	and	r2,r3,r2
 100c1f4:	1001703a 	wrctl	status,r2
  
  return context;
 100c1f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100c1fc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 100c200:	e0fffc17 	ldw	r3,-16(fp)
 100c204:	00800044 	movi	r2,1
 100c208:	10c4983a 	sll	r2,r2,r3
 100c20c:	1007883a 	mov	r3,r2
 100c210:	00804074 	movhi	r2,257
 100c214:	10835b04 	addi	r2,r2,3436
 100c218:	10800017 	ldw	r2,0(r2)
 100c21c:	1886b03a 	or	r3,r3,r2
 100c220:	00804074 	movhi	r2,257
 100c224:	10835b04 	addi	r2,r2,3436
 100c228:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100c22c:	00804074 	movhi	r2,257
 100c230:	10835b04 	addi	r2,r2,3436
 100c234:	10800017 	ldw	r2,0(r2)
 100c238:	100170fa 	wrctl	ienable,r2
 100c23c:	e0bffd17 	ldw	r2,-12(fp)
 100c240:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c244:	e0bffa17 	ldw	r2,-24(fp)
 100c248:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100c24c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100c250:	e037883a 	mov	sp,fp
 100c254:	df000017 	ldw	fp,0(sp)
 100c258:	dec00104 	addi	sp,sp,4
 100c25c:	f800283a 	ret

0100c260 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100c260:	defff904 	addi	sp,sp,-28
 100c264:	df000615 	stw	fp,24(sp)
 100c268:	df000604 	addi	fp,sp,24
 100c26c:	e13ffe15 	stw	r4,-8(fp)
 100c270:	e17fff15 	stw	r5,-4(fp)
 100c274:	e0bfff17 	ldw	r2,-4(fp)
 100c278:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c27c:	0005303a 	rdctl	r2,status
 100c280:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c284:	e0fffb17 	ldw	r3,-20(fp)
 100c288:	00bfff84 	movi	r2,-2
 100c28c:	1884703a 	and	r2,r3,r2
 100c290:	1001703a 	wrctl	status,r2
  
  return context;
 100c294:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100c298:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 100c29c:	e0fffc17 	ldw	r3,-16(fp)
 100c2a0:	00800044 	movi	r2,1
 100c2a4:	10c4983a 	sll	r2,r2,r3
 100c2a8:	0084303a 	nor	r2,zero,r2
 100c2ac:	1007883a 	mov	r3,r2
 100c2b0:	00804074 	movhi	r2,257
 100c2b4:	10835b04 	addi	r2,r2,3436
 100c2b8:	10800017 	ldw	r2,0(r2)
 100c2bc:	1886703a 	and	r3,r3,r2
 100c2c0:	00804074 	movhi	r2,257
 100c2c4:	10835b04 	addi	r2,r2,3436
 100c2c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100c2cc:	00804074 	movhi	r2,257
 100c2d0:	10835b04 	addi	r2,r2,3436
 100c2d4:	10800017 	ldw	r2,0(r2)
 100c2d8:	100170fa 	wrctl	ienable,r2
 100c2dc:	e0bffd17 	ldw	r2,-12(fp)
 100c2e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c2e4:	e0bffa17 	ldw	r2,-24(fp)
 100c2e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100c2ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 100c2f0:	e037883a 	mov	sp,fp
 100c2f4:	df000017 	ldw	fp,0(sp)
 100c2f8:	dec00104 	addi	sp,sp,4
 100c2fc:	f800283a 	ret

0100c300 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100c300:	defffc04 	addi	sp,sp,-16
 100c304:	df000315 	stw	fp,12(sp)
 100c308:	df000304 	addi	fp,sp,12
 100c30c:	e13ffe15 	stw	r4,-8(fp)
 100c310:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100c314:	000530fa 	rdctl	r2,ienable
 100c318:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100c31c:	e0ffff17 	ldw	r3,-4(fp)
 100c320:	00800044 	movi	r2,1
 100c324:	10c4983a 	sll	r2,r2,r3
 100c328:	1007883a 	mov	r3,r2
 100c32c:	e0bffd17 	ldw	r2,-12(fp)
 100c330:	1884703a 	and	r2,r3,r2
 100c334:	1004c03a 	cmpne	r2,r2,zero
}
 100c338:	e037883a 	mov	sp,fp
 100c33c:	df000017 	ldw	fp,0(sp)
 100c340:	dec00104 	addi	sp,sp,4
 100c344:	f800283a 	ret

0100c348 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100c348:	defff404 	addi	sp,sp,-48
 100c34c:	dfc00b15 	stw	ra,44(sp)
 100c350:	df000a15 	stw	fp,40(sp)
 100c354:	df000a04 	addi	fp,sp,40
 100c358:	e13ffb15 	stw	r4,-20(fp)
 100c35c:	e17ffc15 	stw	r5,-16(fp)
 100c360:	e1bffd15 	stw	r6,-12(fp)
 100c364:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 100c368:	00bffa84 	movi	r2,-22
 100c36c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100c370:	e0bffc17 	ldw	r2,-16(fp)
 100c374:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100c378:	e0bff917 	ldw	r2,-28(fp)
 100c37c:	10800808 	cmpgei	r2,r2,32
 100c380:	1000291e 	bne	r2,zero,100c428 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c384:	0005303a 	rdctl	r2,status
 100c388:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c38c:	e0fff717 	ldw	r3,-36(fp)
 100c390:	00bfff84 	movi	r2,-2
 100c394:	1884703a 	and	r2,r3,r2
 100c398:	1001703a 	wrctl	status,r2
  
  return context;
 100c39c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100c3a0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 100c3a4:	e0bff917 	ldw	r2,-28(fp)
 100c3a8:	00c04074 	movhi	r3,257
 100c3ac:	18c36804 	addi	r3,r3,3488
 100c3b0:	100490fa 	slli	r2,r2,3
 100c3b4:	10c7883a 	add	r3,r2,r3
 100c3b8:	e0bffd17 	ldw	r2,-12(fp)
 100c3bc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 100c3c0:	e0bff917 	ldw	r2,-28(fp)
 100c3c4:	00c04074 	movhi	r3,257
 100c3c8:	18c36804 	addi	r3,r3,3488
 100c3cc:	100490fa 	slli	r2,r2,3
 100c3d0:	10c5883a 	add	r2,r2,r3
 100c3d4:	10c00104 	addi	r3,r2,4
 100c3d8:	e0bffe17 	ldw	r2,-8(fp)
 100c3dc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100c3e0:	e0bffd17 	ldw	r2,-12(fp)
 100c3e4:	1005003a 	cmpeq	r2,r2,zero
 100c3e8:	1000051e 	bne	r2,zero,100c400 <alt_iic_isr_register+0xb8>
 100c3ec:	e17ff917 	ldw	r5,-28(fp)
 100c3f0:	e13ffb17 	ldw	r4,-20(fp)
 100c3f4:	100c1c40 	call	100c1c4 <alt_ic_irq_enable>
 100c3f8:	e0bfff15 	stw	r2,-4(fp)
 100c3fc:	00000406 	br	100c410 <alt_iic_isr_register+0xc8>
 100c400:	e17ff917 	ldw	r5,-28(fp)
 100c404:	e13ffb17 	ldw	r4,-20(fp)
 100c408:	100c2600 	call	100c260 <alt_ic_irq_disable>
 100c40c:	e0bfff15 	stw	r2,-4(fp)
 100c410:	e0bfff17 	ldw	r2,-4(fp)
 100c414:	e0bffa15 	stw	r2,-24(fp)
 100c418:	e0bff817 	ldw	r2,-32(fp)
 100c41c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c420:	e0bff617 	ldw	r2,-40(fp)
 100c424:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100c428:	e0bffa17 	ldw	r2,-24(fp)
}
 100c42c:	e037883a 	mov	sp,fp
 100c430:	dfc00117 	ldw	ra,4(sp)
 100c434:	df000017 	ldw	fp,0(sp)
 100c438:	dec00204 	addi	sp,sp,8
 100c43c:	f800283a 	ret

0100c440 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100c440:	defff804 	addi	sp,sp,-32
 100c444:	dfc00715 	stw	ra,28(sp)
 100c448:	df000615 	stw	fp,24(sp)
 100c44c:	dc000515 	stw	r16,20(sp)
 100c450:	df000504 	addi	fp,sp,20
 100c454:	e13ffc15 	stw	r4,-16(fp)
 100c458:	e17ffd15 	stw	r5,-12(fp)
 100c45c:	e1bffe15 	stw	r6,-8(fp)
 100c460:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100c464:	e13ffd17 	ldw	r4,-12(fp)
 100c468:	e17ffe17 	ldw	r5,-8(fp)
 100c46c:	e1bfff17 	ldw	r6,-4(fp)
 100c470:	100c6880 	call	100c688 <open>
 100c474:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100c478:	e0bffb17 	ldw	r2,-20(fp)
 100c47c:	1004803a 	cmplt	r2,r2,zero
 100c480:	10001f1e 	bne	r2,zero,100c500 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100c484:	e13ffb17 	ldw	r4,-20(fp)
 100c488:	04004074 	movhi	r16,257
 100c48c:	84381c04 	addi	r16,r16,-8080
 100c490:	01400304 	movi	r5,12
 100c494:	10098280 	call	1009828 <__mulsi3>
 100c498:	1405883a 	add	r2,r2,r16
 100c49c:	10c00017 	ldw	r3,0(r2)
 100c4a0:	e0bffc17 	ldw	r2,-16(fp)
 100c4a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100c4a8:	e13ffb17 	ldw	r4,-20(fp)
 100c4ac:	04004074 	movhi	r16,257
 100c4b0:	84381c04 	addi	r16,r16,-8080
 100c4b4:	01400304 	movi	r5,12
 100c4b8:	10098280 	call	1009828 <__mulsi3>
 100c4bc:	1405883a 	add	r2,r2,r16
 100c4c0:	10800104 	addi	r2,r2,4
 100c4c4:	10c00017 	ldw	r3,0(r2)
 100c4c8:	e0bffc17 	ldw	r2,-16(fp)
 100c4cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100c4d0:	e13ffb17 	ldw	r4,-20(fp)
 100c4d4:	04004074 	movhi	r16,257
 100c4d8:	84381c04 	addi	r16,r16,-8080
 100c4dc:	01400304 	movi	r5,12
 100c4e0:	10098280 	call	1009828 <__mulsi3>
 100c4e4:	1405883a 	add	r2,r2,r16
 100c4e8:	10800204 	addi	r2,r2,8
 100c4ec:	10c00017 	ldw	r3,0(r2)
 100c4f0:	e0bffc17 	ldw	r2,-16(fp)
 100c4f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100c4f8:	e13ffb17 	ldw	r4,-20(fp)
 100c4fc:	100aa080 	call	100aa08 <alt_release_fd>
  }
} 
 100c500:	e037883a 	mov	sp,fp
 100c504:	dfc00217 	ldw	ra,8(sp)
 100c508:	df000117 	ldw	fp,4(sp)
 100c50c:	dc000017 	ldw	r16,0(sp)
 100c510:	dec00304 	addi	sp,sp,12
 100c514:	f800283a 	ret

0100c518 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100c518:	defffb04 	addi	sp,sp,-20
 100c51c:	dfc00415 	stw	ra,16(sp)
 100c520:	df000315 	stw	fp,12(sp)
 100c524:	df000304 	addi	fp,sp,12
 100c528:	e13ffd15 	stw	r4,-12(fp)
 100c52c:	e17ffe15 	stw	r5,-8(fp)
 100c530:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100c534:	01004074 	movhi	r4,257
 100c538:	21381f04 	addi	r4,r4,-8068
 100c53c:	e17ffd17 	ldw	r5,-12(fp)
 100c540:	01800044 	movi	r6,1
 100c544:	01c07fc4 	movi	r7,511
 100c548:	100c4400 	call	100c440 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100c54c:	01004074 	movhi	r4,257
 100c550:	21381c04 	addi	r4,r4,-8080
 100c554:	e17ffe17 	ldw	r5,-8(fp)
 100c558:	000d883a 	mov	r6,zero
 100c55c:	01c07fc4 	movi	r7,511
 100c560:	100c4400 	call	100c440 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100c564:	01004074 	movhi	r4,257
 100c568:	21382204 	addi	r4,r4,-8056
 100c56c:	e17fff17 	ldw	r5,-4(fp)
 100c570:	01800044 	movi	r6,1
 100c574:	01c07fc4 	movi	r7,511
 100c578:	100c4400 	call	100c440 <alt_open_fd>
}  
 100c57c:	e037883a 	mov	sp,fp
 100c580:	dfc00117 	ldw	ra,4(sp)
 100c584:	df000017 	ldw	fp,0(sp)
 100c588:	dec00204 	addi	sp,sp,8
 100c58c:	f800283a 	ret

0100c590 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100c590:	defffa04 	addi	sp,sp,-24
 100c594:	dfc00515 	stw	ra,20(sp)
 100c598:	df000415 	stw	fp,16(sp)
 100c59c:	dc000315 	stw	r16,12(sp)
 100c5a0:	df000304 	addi	fp,sp,12
 100c5a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100c5a8:	e0bffe17 	ldw	r2,-8(fp)
 100c5ac:	10800217 	ldw	r2,8(r2)
 100c5b0:	10d00034 	orhi	r3,r2,16384
 100c5b4:	e0bffe17 	ldw	r2,-8(fp)
 100c5b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c5bc:	e03ffd15 	stw	zero,-12(fp)
 100c5c0:	00002306 	br	100c650 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100c5c4:	e13ffd17 	ldw	r4,-12(fp)
 100c5c8:	04004074 	movhi	r16,257
 100c5cc:	84381c04 	addi	r16,r16,-8080
 100c5d0:	01400304 	movi	r5,12
 100c5d4:	10098280 	call	1009828 <__mulsi3>
 100c5d8:	1405883a 	add	r2,r2,r16
 100c5dc:	10c00017 	ldw	r3,0(r2)
 100c5e0:	e0bffe17 	ldw	r2,-8(fp)
 100c5e4:	10800017 	ldw	r2,0(r2)
 100c5e8:	1880161e 	bne	r3,r2,100c644 <alt_file_locked+0xb4>
 100c5ec:	e13ffd17 	ldw	r4,-12(fp)
 100c5f0:	04004074 	movhi	r16,257
 100c5f4:	84381c04 	addi	r16,r16,-8080
 100c5f8:	01400304 	movi	r5,12
 100c5fc:	10098280 	call	1009828 <__mulsi3>
 100c600:	1405883a 	add	r2,r2,r16
 100c604:	10800204 	addi	r2,r2,8
 100c608:	10800017 	ldw	r2,0(r2)
 100c60c:	1004403a 	cmpge	r2,r2,zero
 100c610:	10000c1e 	bne	r2,zero,100c644 <alt_file_locked+0xb4>
 100c614:	e13ffd17 	ldw	r4,-12(fp)
 100c618:	01400304 	movi	r5,12
 100c61c:	10098280 	call	1009828 <__mulsi3>
 100c620:	1007883a 	mov	r3,r2
 100c624:	00804074 	movhi	r2,257
 100c628:	10b81c04 	addi	r2,r2,-8080
 100c62c:	1887883a 	add	r3,r3,r2
 100c630:	e0bffe17 	ldw	r2,-8(fp)
 100c634:	18800326 	beq	r3,r2,100c644 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100c638:	00bffcc4 	movi	r2,-13
 100c63c:	e0bfff15 	stw	r2,-4(fp)
 100c640:	00000a06 	br	100c66c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c644:	e0bffd17 	ldw	r2,-12(fp)
 100c648:	10800044 	addi	r2,r2,1
 100c64c:	e0bffd15 	stw	r2,-12(fp)
 100c650:	00804074 	movhi	r2,257
 100c654:	10bca904 	addi	r2,r2,-3420
 100c658:	10800017 	ldw	r2,0(r2)
 100c65c:	1007883a 	mov	r3,r2
 100c660:	e0bffd17 	ldw	r2,-12(fp)
 100c664:	18bfd72e 	bgeu	r3,r2,100c5c4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100c668:	e03fff15 	stw	zero,-4(fp)
 100c66c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c670:	e037883a 	mov	sp,fp
 100c674:	dfc00217 	ldw	ra,8(sp)
 100c678:	df000117 	ldw	fp,4(sp)
 100c67c:	dc000017 	ldw	r16,0(sp)
 100c680:	dec00304 	addi	sp,sp,12
 100c684:	f800283a 	ret

0100c688 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100c688:	defff404 	addi	sp,sp,-48
 100c68c:	dfc00b15 	stw	ra,44(sp)
 100c690:	df000a15 	stw	fp,40(sp)
 100c694:	df000a04 	addi	fp,sp,40
 100c698:	e13ffb15 	stw	r4,-20(fp)
 100c69c:	e17ffc15 	stw	r5,-16(fp)
 100c6a0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100c6a4:	00bfffc4 	movi	r2,-1
 100c6a8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100c6ac:	00bffb44 	movi	r2,-19
 100c6b0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100c6b4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100c6b8:	e13ffb17 	ldw	r4,-20(fp)
 100c6bc:	01404074 	movhi	r5,257
 100c6c0:	297ca704 	addi	r5,r5,-3428
 100c6c4:	100c0b00 	call	100c0b0 <alt_find_dev>
 100c6c8:	e0bffa15 	stw	r2,-24(fp)
 100c6cc:	e0bffa17 	ldw	r2,-24(fp)
 100c6d0:	1004c03a 	cmpne	r2,r2,zero
 100c6d4:	1000051e 	bne	r2,zero,100c6ec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100c6d8:	e13ffb17 	ldw	r4,-20(fp)
 100c6dc:	100ca380 	call	100ca38 <alt_find_file>
 100c6e0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100c6e4:	00800044 	movi	r2,1
 100c6e8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100c6ec:	e0bffa17 	ldw	r2,-24(fp)
 100c6f0:	1005003a 	cmpeq	r2,r2,zero
 100c6f4:	1000311e 	bne	r2,zero,100c7bc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100c6f8:	e13ffa17 	ldw	r4,-24(fp)
 100c6fc:	100cb580 	call	100cb58 <alt_get_fd>
 100c700:	e0bff815 	stw	r2,-32(fp)
 100c704:	e0bff817 	ldw	r2,-32(fp)
 100c708:	1004403a 	cmpge	r2,r2,zero
 100c70c:	1000031e 	bne	r2,zero,100c71c <open+0x94>
    {
      status = index;
 100c710:	e0bff817 	ldw	r2,-32(fp)
 100c714:	e0bff715 	stw	r2,-36(fp)
 100c718:	00002a06 	br	100c7c4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 100c71c:	e13ff817 	ldw	r4,-32(fp)
 100c720:	01400304 	movi	r5,12
 100c724:	10098280 	call	1009828 <__mulsi3>
 100c728:	1007883a 	mov	r3,r2
 100c72c:	00804074 	movhi	r2,257
 100c730:	10b81c04 	addi	r2,r2,-8080
 100c734:	1885883a 	add	r2,r3,r2
 100c738:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100c73c:	e0fffc17 	ldw	r3,-16(fp)
 100c740:	00900034 	movhi	r2,16384
 100c744:	10bfffc4 	addi	r2,r2,-1
 100c748:	1886703a 	and	r3,r3,r2
 100c74c:	e0bff917 	ldw	r2,-28(fp)
 100c750:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100c754:	e0bff617 	ldw	r2,-40(fp)
 100c758:	1004c03a 	cmpne	r2,r2,zero
 100c75c:	1000061e 	bne	r2,zero,100c778 <open+0xf0>
 100c760:	e13ff917 	ldw	r4,-28(fp)
 100c764:	100c5900 	call	100c590 <alt_file_locked>
 100c768:	e0bff715 	stw	r2,-36(fp)
 100c76c:	e0bff717 	ldw	r2,-36(fp)
 100c770:	1004803a 	cmplt	r2,r2,zero
 100c774:	1000131e 	bne	r2,zero,100c7c4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100c778:	e0bffa17 	ldw	r2,-24(fp)
 100c77c:	10800317 	ldw	r2,12(r2)
 100c780:	1005003a 	cmpeq	r2,r2,zero
 100c784:	1000091e 	bne	r2,zero,100c7ac <open+0x124>
 100c788:	e0bffa17 	ldw	r2,-24(fp)
 100c78c:	10800317 	ldw	r2,12(r2)
 100c790:	e13ff917 	ldw	r4,-28(fp)
 100c794:	e17ffb17 	ldw	r5,-20(fp)
 100c798:	e1bffc17 	ldw	r6,-16(fp)
 100c79c:	e1fffd17 	ldw	r7,-12(fp)
 100c7a0:	103ee83a 	callr	r2
 100c7a4:	e0bfff15 	stw	r2,-4(fp)
 100c7a8:	00000106 	br	100c7b0 <open+0x128>
 100c7ac:	e03fff15 	stw	zero,-4(fp)
 100c7b0:	e0bfff17 	ldw	r2,-4(fp)
 100c7b4:	e0bff715 	stw	r2,-36(fp)
 100c7b8:	00000206 	br	100c7c4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100c7bc:	00bffb44 	movi	r2,-19
 100c7c0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100c7c4:	e0bff717 	ldw	r2,-36(fp)
 100c7c8:	1004403a 	cmpge	r2,r2,zero
 100c7cc:	1000091e 	bne	r2,zero,100c7f4 <open+0x16c>
  {
    alt_release_fd (index);  
 100c7d0:	e13ff817 	ldw	r4,-32(fp)
 100c7d4:	100aa080 	call	100aa08 <alt_release_fd>
    ALT_ERRNO = -status;
 100c7d8:	100c8140 	call	100c814 <alt_get_errno>
 100c7dc:	e0fff717 	ldw	r3,-36(fp)
 100c7e0:	00c7c83a 	sub	r3,zero,r3
 100c7e4:	10c00015 	stw	r3,0(r2)
    return -1;
 100c7e8:	00bfffc4 	movi	r2,-1
 100c7ec:	e0bffe15 	stw	r2,-8(fp)
 100c7f0:	00000206 	br	100c7fc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 100c7f4:	e0bff817 	ldw	r2,-32(fp)
 100c7f8:	e0bffe15 	stw	r2,-8(fp)
 100c7fc:	e0bffe17 	ldw	r2,-8(fp)
}
 100c800:	e037883a 	mov	sp,fp
 100c804:	dfc00117 	ldw	ra,4(sp)
 100c808:	df000017 	ldw	fp,0(sp)
 100c80c:	dec00204 	addi	sp,sp,8
 100c810:	f800283a 	ret

0100c814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c814:	defffd04 	addi	sp,sp,-12
 100c818:	dfc00215 	stw	ra,8(sp)
 100c81c:	df000115 	stw	fp,4(sp)
 100c820:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c824:	00804074 	movhi	r2,257
 100c828:	10bcaa04 	addi	r2,r2,-3416
 100c82c:	10800017 	ldw	r2,0(r2)
 100c830:	1005003a 	cmpeq	r2,r2,zero
 100c834:	1000061e 	bne	r2,zero,100c850 <alt_get_errno+0x3c>
 100c838:	00804074 	movhi	r2,257
 100c83c:	10bcaa04 	addi	r2,r2,-3416
 100c840:	10800017 	ldw	r2,0(r2)
 100c844:	103ee83a 	callr	r2
 100c848:	e0bfff15 	stw	r2,-4(fp)
 100c84c:	00000306 	br	100c85c <alt_get_errno+0x48>
 100c850:	00804074 	movhi	r2,257
 100c854:	10835704 	addi	r2,r2,3420
 100c858:	e0bfff15 	stw	r2,-4(fp)
 100c85c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c860:	e037883a 	mov	sp,fp
 100c864:	dfc00117 	ldw	ra,4(sp)
 100c868:	df000017 	ldw	fp,0(sp)
 100c86c:	dec00204 	addi	sp,sp,8
 100c870:	f800283a 	ret

0100c874 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100c874:	defffa04 	addi	sp,sp,-24
 100c878:	df000515 	stw	fp,20(sp)
 100c87c:	df000504 	addi	fp,sp,20
 100c880:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c884:	0005303a 	rdctl	r2,status
 100c888:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c88c:	e0fffd17 	ldw	r3,-12(fp)
 100c890:	00bfff84 	movi	r2,-2
 100c894:	1884703a 	and	r2,r3,r2
 100c898:	1001703a 	wrctl	status,r2
  
  return context;
 100c89c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100c8a0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100c8a4:	e0bfff17 	ldw	r2,-4(fp)
 100c8a8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100c8ac:	e0bffc17 	ldw	r2,-16(fp)
 100c8b0:	10c00017 	ldw	r3,0(r2)
 100c8b4:	e0bffc17 	ldw	r2,-16(fp)
 100c8b8:	10800117 	ldw	r2,4(r2)
 100c8bc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100c8c0:	e0bffc17 	ldw	r2,-16(fp)
 100c8c4:	10c00117 	ldw	r3,4(r2)
 100c8c8:	e0bffc17 	ldw	r2,-16(fp)
 100c8cc:	10800017 	ldw	r2,0(r2)
 100c8d0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100c8d4:	e0fffc17 	ldw	r3,-16(fp)
 100c8d8:	e0bffc17 	ldw	r2,-16(fp)
 100c8dc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100c8e0:	e0fffc17 	ldw	r3,-16(fp)
 100c8e4:	e0bffc17 	ldw	r2,-16(fp)
 100c8e8:	18800015 	stw	r2,0(r3)
 100c8ec:	e0bffe17 	ldw	r2,-8(fp)
 100c8f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c8f4:	e0bffb17 	ldw	r2,-20(fp)
 100c8f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100c8fc:	e037883a 	mov	sp,fp
 100c900:	df000017 	ldw	fp,0(sp)
 100c904:	dec00104 	addi	sp,sp,4
 100c908:	f800283a 	ret

0100c90c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100c90c:	defffb04 	addi	sp,sp,-20
 100c910:	dfc00415 	stw	ra,16(sp)
 100c914:	df000315 	stw	fp,12(sp)
 100c918:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100c91c:	d0a00e17 	ldw	r2,-32712(gp)
 100c920:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100c924:	d0a6be17 	ldw	r2,-25864(gp)
 100c928:	10800044 	addi	r2,r2,1
 100c92c:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c930:	00003106 	br	100c9f8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100c934:	e0bffe17 	ldw	r2,-8(fp)
 100c938:	10800017 	ldw	r2,0(r2)
 100c93c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100c940:	e0bffe17 	ldw	r2,-8(fp)
 100c944:	10800403 	ldbu	r2,16(r2)
 100c948:	10803fcc 	andi	r2,r2,255
 100c94c:	1005003a 	cmpeq	r2,r2,zero
 100c950:	1000051e 	bne	r2,zero,100c968 <alt_tick+0x5c>
 100c954:	d0a6be17 	ldw	r2,-25864(gp)
 100c958:	1004c03a 	cmpne	r2,r2,zero
 100c95c:	1000021e 	bne	r2,zero,100c968 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100c960:	e0bffe17 	ldw	r2,-8(fp)
 100c964:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100c968:	e0bffe17 	ldw	r2,-8(fp)
 100c96c:	10c00217 	ldw	r3,8(r2)
 100c970:	d0a6be17 	ldw	r2,-25864(gp)
 100c974:	10c01e36 	bltu	r2,r3,100c9f0 <alt_tick+0xe4>
 100c978:	e0bffe17 	ldw	r2,-8(fp)
 100c97c:	10800403 	ldbu	r2,16(r2)
 100c980:	10803fcc 	andi	r2,r2,255
 100c984:	1004c03a 	cmpne	r2,r2,zero
 100c988:	1000191e 	bne	r2,zero,100c9f0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100c98c:	e0bffe17 	ldw	r2,-8(fp)
 100c990:	10c00317 	ldw	r3,12(r2)
 100c994:	e0bffe17 	ldw	r2,-8(fp)
 100c998:	11000517 	ldw	r4,20(r2)
 100c99c:	183ee83a 	callr	r3
 100c9a0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100c9a4:	e0bffd17 	ldw	r2,-12(fp)
 100c9a8:	1004c03a 	cmpne	r2,r2,zero
 100c9ac:	1000031e 	bne	r2,zero,100c9bc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100c9b0:	e13ffe17 	ldw	r4,-8(fp)
 100c9b4:	100c8740 	call	100c874 <alt_alarm_stop>
 100c9b8:	00000d06 	br	100c9f0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100c9bc:	e0bffe17 	ldw	r2,-8(fp)
 100c9c0:	10c00217 	ldw	r3,8(r2)
 100c9c4:	e0bffd17 	ldw	r2,-12(fp)
 100c9c8:	1887883a 	add	r3,r3,r2
 100c9cc:	e0bffe17 	ldw	r2,-8(fp)
 100c9d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100c9d4:	e0bffe17 	ldw	r2,-8(fp)
 100c9d8:	10c00217 	ldw	r3,8(r2)
 100c9dc:	d0a6be17 	ldw	r2,-25864(gp)
 100c9e0:	1880032e 	bgeu	r3,r2,100c9f0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100c9e4:	e0fffe17 	ldw	r3,-8(fp)
 100c9e8:	00800044 	movi	r2,1
 100c9ec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100c9f0:	e0bfff17 	ldw	r2,-4(fp)
 100c9f4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c9f8:	d0e00e04 	addi	r3,gp,-32712
 100c9fc:	e0bffe17 	ldw	r2,-8(fp)
 100ca00:	10ffcc1e 	bne	r2,r3,100c934 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100ca04:	e037883a 	mov	sp,fp
 100ca08:	dfc00117 	ldw	ra,4(sp)
 100ca0c:	df000017 	ldw	fp,0(sp)
 100ca10:	dec00204 	addi	sp,sp,8
 100ca14:	f800283a 	ret

0100ca18 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100ca18:	deffff04 	addi	sp,sp,-4
 100ca1c:	df000015 	stw	fp,0(sp)
 100ca20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100ca24:	000170fa 	wrctl	ienable,zero
}
 100ca28:	e037883a 	mov	sp,fp
 100ca2c:	df000017 	ldw	fp,0(sp)
 100ca30:	dec00104 	addi	sp,sp,4
 100ca34:	f800283a 	ret

0100ca38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100ca38:	defffa04 	addi	sp,sp,-24
 100ca3c:	dfc00515 	stw	ra,20(sp)
 100ca40:	df000415 	stw	fp,16(sp)
 100ca44:	df000404 	addi	fp,sp,16
 100ca48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100ca4c:	00804074 	movhi	r2,257
 100ca50:	10bca504 	addi	r2,r2,-3436
 100ca54:	10800017 	ldw	r2,0(r2)
 100ca58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100ca5c:	00003306 	br	100cb2c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100ca60:	e0bffd17 	ldw	r2,-12(fp)
 100ca64:	11000217 	ldw	r4,8(r2)
 100ca68:	10073c80 	call	10073c8 <strlen>
 100ca6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100ca70:	e0bffd17 	ldw	r2,-12(fp)
 100ca74:	10c00217 	ldw	r3,8(r2)
 100ca78:	e0bffc17 	ldw	r2,-16(fp)
 100ca7c:	1885883a 	add	r2,r3,r2
 100ca80:	10bfffc4 	addi	r2,r2,-1
 100ca84:	10800003 	ldbu	r2,0(r2)
 100ca88:	10803fcc 	andi	r2,r2,255
 100ca8c:	1080201c 	xori	r2,r2,128
 100ca90:	10bfe004 	addi	r2,r2,-128
 100ca94:	10800bd8 	cmpnei	r2,r2,47
 100ca98:	1000031e 	bne	r2,zero,100caa8 <alt_find_file+0x70>
    {
      len -= 1;
 100ca9c:	e0bffc17 	ldw	r2,-16(fp)
 100caa0:	10bfffc4 	addi	r2,r2,-1
 100caa4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100caa8:	e0bffc17 	ldw	r2,-16(fp)
 100caac:	1007883a 	mov	r3,r2
 100cab0:	e0bffe17 	ldw	r2,-8(fp)
 100cab4:	1885883a 	add	r2,r3,r2
 100cab8:	10800003 	ldbu	r2,0(r2)
 100cabc:	10803fcc 	andi	r2,r2,255
 100cac0:	1080201c 	xori	r2,r2,128
 100cac4:	10bfe004 	addi	r2,r2,-128
 100cac8:	10800be0 	cmpeqi	r2,r2,47
 100cacc:	10000a1e 	bne	r2,zero,100caf8 <alt_find_file+0xc0>
 100cad0:	e0bffc17 	ldw	r2,-16(fp)
 100cad4:	1007883a 	mov	r3,r2
 100cad8:	e0bffe17 	ldw	r2,-8(fp)
 100cadc:	1885883a 	add	r2,r3,r2
 100cae0:	10800003 	ldbu	r2,0(r2)
 100cae4:	10803fcc 	andi	r2,r2,255
 100cae8:	1080201c 	xori	r2,r2,128
 100caec:	10bfe004 	addi	r2,r2,-128
 100caf0:	1004c03a 	cmpne	r2,r2,zero
 100caf4:	10000a1e 	bne	r2,zero,100cb20 <alt_find_file+0xe8>
 100caf8:	e0bffd17 	ldw	r2,-12(fp)
 100cafc:	11000217 	ldw	r4,8(r2)
 100cb00:	e1bffc17 	ldw	r6,-16(fp)
 100cb04:	e17ffe17 	ldw	r5,-8(fp)
 100cb08:	100cd040 	call	100cd04 <memcmp>
 100cb0c:	1004c03a 	cmpne	r2,r2,zero
 100cb10:	1000031e 	bne	r2,zero,100cb20 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100cb14:	e0bffd17 	ldw	r2,-12(fp)
 100cb18:	e0bfff15 	stw	r2,-4(fp)
 100cb1c:	00000806 	br	100cb40 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100cb20:	e0bffd17 	ldw	r2,-12(fp)
 100cb24:	10800017 	ldw	r2,0(r2)
 100cb28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100cb2c:	00c04074 	movhi	r3,257
 100cb30:	18fca504 	addi	r3,r3,-3436
 100cb34:	e0bffd17 	ldw	r2,-12(fp)
 100cb38:	10ffc91e 	bne	r2,r3,100ca60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100cb3c:	e03fff15 	stw	zero,-4(fp)
 100cb40:	e0bfff17 	ldw	r2,-4(fp)
}
 100cb44:	e037883a 	mov	sp,fp
 100cb48:	dfc00117 	ldw	ra,4(sp)
 100cb4c:	df000017 	ldw	fp,0(sp)
 100cb50:	dec00204 	addi	sp,sp,8
 100cb54:	f800283a 	ret

0100cb58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100cb58:	defffa04 	addi	sp,sp,-24
 100cb5c:	dfc00515 	stw	ra,20(sp)
 100cb60:	df000415 	stw	fp,16(sp)
 100cb64:	dc000315 	stw	r16,12(sp)
 100cb68:	df000304 	addi	fp,sp,12
 100cb6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100cb70:	00bffa04 	movi	r2,-24
 100cb74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100cb78:	e03ffe15 	stw	zero,-8(fp)
 100cb7c:	00002006 	br	100cc00 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 100cb80:	e13ffe17 	ldw	r4,-8(fp)
 100cb84:	04004074 	movhi	r16,257
 100cb88:	84381c04 	addi	r16,r16,-8080
 100cb8c:	01400304 	movi	r5,12
 100cb90:	10098280 	call	1009828 <__mulsi3>
 100cb94:	1405883a 	add	r2,r2,r16
 100cb98:	10800017 	ldw	r2,0(r2)
 100cb9c:	1004c03a 	cmpne	r2,r2,zero
 100cba0:	1000141e 	bne	r2,zero,100cbf4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 100cba4:	e13ffe17 	ldw	r4,-8(fp)
 100cba8:	04004074 	movhi	r16,257
 100cbac:	84381c04 	addi	r16,r16,-8080
 100cbb0:	01400304 	movi	r5,12
 100cbb4:	10098280 	call	1009828 <__mulsi3>
 100cbb8:	1407883a 	add	r3,r2,r16
 100cbbc:	e0bfff17 	ldw	r2,-4(fp)
 100cbc0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100cbc4:	00804074 	movhi	r2,257
 100cbc8:	10bca904 	addi	r2,r2,-3420
 100cbcc:	10c00017 	ldw	r3,0(r2)
 100cbd0:	e0bffe17 	ldw	r2,-8(fp)
 100cbd4:	1880040e 	bge	r3,r2,100cbe8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 100cbd8:	00c04074 	movhi	r3,257
 100cbdc:	18fca904 	addi	r3,r3,-3420
 100cbe0:	e0bffe17 	ldw	r2,-8(fp)
 100cbe4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100cbe8:	e0bffe17 	ldw	r2,-8(fp)
 100cbec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100cbf0:	00000606 	br	100cc0c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100cbf4:	e0bffe17 	ldw	r2,-8(fp)
 100cbf8:	10800044 	addi	r2,r2,1
 100cbfc:	e0bffe15 	stw	r2,-8(fp)
 100cc00:	e0bffe17 	ldw	r2,-8(fp)
 100cc04:	10800810 	cmplti	r2,r2,32
 100cc08:	103fdd1e 	bne	r2,zero,100cb80 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100cc0c:	e0bffd17 	ldw	r2,-12(fp)
}
 100cc10:	e037883a 	mov	sp,fp
 100cc14:	dfc00217 	ldw	ra,8(sp)
 100cc18:	df000117 	ldw	fp,4(sp)
 100cc1c:	dc000017 	ldw	r16,0(sp)
 100cc20:	dec00304 	addi	sp,sp,12
 100cc24:	f800283a 	ret

0100cc28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100cc28:	defffb04 	addi	sp,sp,-20
 100cc2c:	df000415 	stw	fp,16(sp)
 100cc30:	df000404 	addi	fp,sp,16
 100cc34:	e13ffe15 	stw	r4,-8(fp)
 100cc38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100cc3c:	e0bfff17 	ldw	r2,-4(fp)
 100cc40:	10840070 	cmpltui	r2,r2,4097
 100cc44:	1000021e 	bne	r2,zero,100cc50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100cc48:	00840004 	movi	r2,4096
 100cc4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100cc50:	e0fffe17 	ldw	r3,-8(fp)
 100cc54:	e0bfff17 	ldw	r2,-4(fp)
 100cc58:	1885883a 	add	r2,r3,r2
 100cc5c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100cc60:	e0bffe17 	ldw	r2,-8(fp)
 100cc64:	e0bffd15 	stw	r2,-12(fp)
 100cc68:	00000506 	br	100cc80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100cc6c:	e0bffd17 	ldw	r2,-12(fp)
 100cc70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100cc74:	e0bffd17 	ldw	r2,-12(fp)
 100cc78:	10800804 	addi	r2,r2,32
 100cc7c:	e0bffd15 	stw	r2,-12(fp)
 100cc80:	e0fffd17 	ldw	r3,-12(fp)
 100cc84:	e0bffc17 	ldw	r2,-16(fp)
 100cc88:	18bff836 	bltu	r3,r2,100cc6c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100cc8c:	e0bffe17 	ldw	r2,-8(fp)
 100cc90:	108007cc 	andi	r2,r2,31
 100cc94:	1005003a 	cmpeq	r2,r2,zero
 100cc98:	1000021e 	bne	r2,zero,100cca4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100cc9c:	e0bffd17 	ldw	r2,-12(fp)
 100cca0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100cca4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100cca8:	e037883a 	mov	sp,fp
 100ccac:	df000017 	ldw	fp,0(sp)
 100ccb0:	dec00104 	addi	sp,sp,4
 100ccb4:	f800283a 	ret

0100ccb8 <atexit>:
 100ccb8:	200b883a 	mov	r5,r4
 100ccbc:	000d883a 	mov	r6,zero
 100ccc0:	0009883a 	mov	r4,zero
 100ccc4:	000f883a 	mov	r7,zero
 100ccc8:	100d0b01 	jmpi	100d0b0 <__register_exitproc>

0100cccc <exit>:
 100cccc:	defffe04 	addi	sp,sp,-8
 100ccd0:	000b883a 	mov	r5,zero
 100ccd4:	dc000015 	stw	r16,0(sp)
 100ccd8:	dfc00115 	stw	ra,4(sp)
 100ccdc:	2021883a 	mov	r16,r4
 100cce0:	100d1e80 	call	100d1e8 <__call_exitprocs>
 100cce4:	00804074 	movhi	r2,257
 100cce8:	10bca004 	addi	r2,r2,-3456
 100ccec:	11000017 	ldw	r4,0(r2)
 100ccf0:	20800f17 	ldw	r2,60(r4)
 100ccf4:	10000126 	beq	r2,zero,100ccfc <exit+0x30>
 100ccf8:	103ee83a 	callr	r2
 100ccfc:	8009883a 	mov	r4,r16
 100cd00:	100d3d80 	call	100d3d8 <_exit>

0100cd04 <memcmp>:
 100cd04:	00c000c4 	movi	r3,3
 100cd08:	1980032e 	bgeu	r3,r6,100cd18 <memcmp+0x14>
 100cd0c:	2144b03a 	or	r2,r4,r5
 100cd10:	10c4703a 	and	r2,r2,r3
 100cd14:	10000f26 	beq	r2,zero,100cd54 <memcmp+0x50>
 100cd18:	31ffffc4 	addi	r7,r6,-1
 100cd1c:	3000061e 	bne	r6,zero,100cd38 <memcmp+0x34>
 100cd20:	00000a06 	br	100cd4c <memcmp+0x48>
 100cd24:	39ffffc4 	addi	r7,r7,-1
 100cd28:	00bfffc4 	movi	r2,-1
 100cd2c:	21000044 	addi	r4,r4,1
 100cd30:	29400044 	addi	r5,r5,1
 100cd34:	38800526 	beq	r7,r2,100cd4c <memcmp+0x48>
 100cd38:	20c00003 	ldbu	r3,0(r4)
 100cd3c:	28800003 	ldbu	r2,0(r5)
 100cd40:	18bff826 	beq	r3,r2,100cd24 <memcmp+0x20>
 100cd44:	1885c83a 	sub	r2,r3,r2
 100cd48:	f800283a 	ret
 100cd4c:	0005883a 	mov	r2,zero
 100cd50:	f800283a 	ret
 100cd54:	180f883a 	mov	r7,r3
 100cd58:	20c00017 	ldw	r3,0(r4)
 100cd5c:	28800017 	ldw	r2,0(r5)
 100cd60:	18bfed1e 	bne	r3,r2,100cd18 <memcmp+0x14>
 100cd64:	31bfff04 	addi	r6,r6,-4
 100cd68:	21000104 	addi	r4,r4,4
 100cd6c:	29400104 	addi	r5,r5,4
 100cd70:	39bff936 	bltu	r7,r6,100cd58 <memcmp+0x54>
 100cd74:	003fe806 	br	100cd18 <memcmp+0x14>

0100cd78 <putc>:
 100cd78:	defffc04 	addi	sp,sp,-16
 100cd7c:	dc800215 	stw	r18,8(sp)
 100cd80:	04804074 	movhi	r18,257
 100cd84:	94bc9f04 	addi	r18,r18,-3460
 100cd88:	90c00017 	ldw	r3,0(r18)
 100cd8c:	dc400115 	stw	r17,4(sp)
 100cd90:	dc000015 	stw	r16,0(sp)
 100cd94:	dfc00315 	stw	ra,12(sp)
 100cd98:	2023883a 	mov	r17,r4
 100cd9c:	2821883a 	mov	r16,r5
 100cda0:	18000226 	beq	r3,zero,100cdac <putc+0x34>
 100cda4:	18800e17 	ldw	r2,56(r3)
 100cda8:	10001126 	beq	r2,zero,100cdf0 <putc+0x78>
 100cdac:	80800217 	ldw	r2,8(r16)
 100cdb0:	10ffffc4 	addi	r3,r2,-1
 100cdb4:	80c00215 	stw	r3,8(r16)
 100cdb8:	18001316 	blt	r3,zero,100ce08 <putc+0x90>
 100cdbc:	80800017 	ldw	r2,0(r16)
 100cdc0:	14400005 	stb	r17,0(r2)
 100cdc4:	80c00017 	ldw	r3,0(r16)
 100cdc8:	18800044 	addi	r2,r3,1
 100cdcc:	18c00003 	ldbu	r3,0(r3)
 100cdd0:	80800015 	stw	r2,0(r16)
 100cdd4:	1805883a 	mov	r2,r3
 100cdd8:	dfc00317 	ldw	ra,12(sp)
 100cddc:	dc800217 	ldw	r18,8(sp)
 100cde0:	dc400117 	ldw	r17,4(sp)
 100cde4:	dc000017 	ldw	r16,0(sp)
 100cde8:	dec00404 	addi	sp,sp,16
 100cdec:	f800283a 	ret
 100cdf0:	1809883a 	mov	r4,r3
 100cdf4:	10040e40 	call	10040e4 <__sinit>
 100cdf8:	80800217 	ldw	r2,8(r16)
 100cdfc:	10ffffc4 	addi	r3,r2,-1
 100ce00:	80c00215 	stw	r3,8(r16)
 100ce04:	183fed0e 	bge	r3,zero,100cdbc <putc+0x44>
 100ce08:	80800617 	ldw	r2,24(r16)
 100ce0c:	18800f16 	blt	r3,r2,100ce4c <putc+0xd4>
 100ce10:	80800017 	ldw	r2,0(r16)
 100ce14:	14400005 	stb	r17,0(r2)
 100ce18:	81000017 	ldw	r4,0(r16)
 100ce1c:	00800284 	movi	r2,10
 100ce20:	20c00003 	ldbu	r3,0(r4)
 100ce24:	18801226 	beq	r3,r2,100ce70 <putc+0xf8>
 100ce28:	20800044 	addi	r2,r4,1
 100ce2c:	80800015 	stw	r2,0(r16)
 100ce30:	1805883a 	mov	r2,r3
 100ce34:	dfc00317 	ldw	ra,12(sp)
 100ce38:	dc800217 	ldw	r18,8(sp)
 100ce3c:	dc400117 	ldw	r17,4(sp)
 100ce40:	dc000017 	ldw	r16,0(sp)
 100ce44:	dec00404 	addi	sp,sp,16
 100ce48:	f800283a 	ret
 100ce4c:	91000017 	ldw	r4,0(r18)
 100ce50:	880b883a 	mov	r5,r17
 100ce54:	800d883a 	mov	r6,r16
 100ce58:	dfc00317 	ldw	ra,12(sp)
 100ce5c:	dc800217 	ldw	r18,8(sp)
 100ce60:	dc400117 	ldw	r17,4(sp)
 100ce64:	dc000017 	ldw	r16,0(sp)
 100ce68:	dec00404 	addi	sp,sp,16
 100ce6c:	100cf641 	jmpi	100cf64 <__swbuf_r>
 100ce70:	91000017 	ldw	r4,0(r18)
 100ce74:	180b883a 	mov	r5,r3
 100ce78:	003ff606 	br	100ce54 <putc+0xdc>

0100ce7c <_putc_r>:
 100ce7c:	defffc04 	addi	sp,sp,-16
 100ce80:	dc400215 	stw	r17,8(sp)
 100ce84:	dc000115 	stw	r16,4(sp)
 100ce88:	dfc00315 	stw	ra,12(sp)
 100ce8c:	2021883a 	mov	r16,r4
 100ce90:	2823883a 	mov	r17,r5
 100ce94:	20000226 	beq	r4,zero,100cea0 <_putc_r+0x24>
 100ce98:	20800e17 	ldw	r2,56(r4)
 100ce9c:	10001026 	beq	r2,zero,100cee0 <_putc_r+0x64>
 100cea0:	30800217 	ldw	r2,8(r6)
 100cea4:	10ffffc4 	addi	r3,r2,-1
 100cea8:	30c00215 	stw	r3,8(r6)
 100ceac:	18001316 	blt	r3,zero,100cefc <_putc_r+0x80>
 100ceb0:	30800017 	ldw	r2,0(r6)
 100ceb4:	14400005 	stb	r17,0(r2)
 100ceb8:	30c00017 	ldw	r3,0(r6)
 100cebc:	18800044 	addi	r2,r3,1
 100cec0:	18c00003 	ldbu	r3,0(r3)
 100cec4:	30800015 	stw	r2,0(r6)
 100cec8:	1805883a 	mov	r2,r3
 100cecc:	dfc00317 	ldw	ra,12(sp)
 100ced0:	dc400217 	ldw	r17,8(sp)
 100ced4:	dc000117 	ldw	r16,4(sp)
 100ced8:	dec00404 	addi	sp,sp,16
 100cedc:	f800283a 	ret
 100cee0:	d9800015 	stw	r6,0(sp)
 100cee4:	10040e40 	call	10040e4 <__sinit>
 100cee8:	d9800017 	ldw	r6,0(sp)
 100ceec:	30800217 	ldw	r2,8(r6)
 100cef0:	10ffffc4 	addi	r3,r2,-1
 100cef4:	30c00215 	stw	r3,8(r6)
 100cef8:	183fed0e 	bge	r3,zero,100ceb0 <_putc_r+0x34>
 100cefc:	30800617 	ldw	r2,24(r6)
 100cf00:	18800e16 	blt	r3,r2,100cf3c <_putc_r+0xc0>
 100cf04:	30800017 	ldw	r2,0(r6)
 100cf08:	14400005 	stb	r17,0(r2)
 100cf0c:	31000017 	ldw	r4,0(r6)
 100cf10:	00800284 	movi	r2,10
 100cf14:	20c00003 	ldbu	r3,0(r4)
 100cf18:	18800f26 	beq	r3,r2,100cf58 <_putc_r+0xdc>
 100cf1c:	20800044 	addi	r2,r4,1
 100cf20:	30800015 	stw	r2,0(r6)
 100cf24:	1805883a 	mov	r2,r3
 100cf28:	dfc00317 	ldw	ra,12(sp)
 100cf2c:	dc400217 	ldw	r17,8(sp)
 100cf30:	dc000117 	ldw	r16,4(sp)
 100cf34:	dec00404 	addi	sp,sp,16
 100cf38:	f800283a 	ret
 100cf3c:	8009883a 	mov	r4,r16
 100cf40:	880b883a 	mov	r5,r17
 100cf44:	dfc00317 	ldw	ra,12(sp)
 100cf48:	dc400217 	ldw	r17,8(sp)
 100cf4c:	dc000117 	ldw	r16,4(sp)
 100cf50:	dec00404 	addi	sp,sp,16
 100cf54:	100cf641 	jmpi	100cf64 <__swbuf_r>
 100cf58:	8009883a 	mov	r4,r16
 100cf5c:	180b883a 	mov	r5,r3
 100cf60:	003ff806 	br	100cf44 <_putc_r+0xc8>

0100cf64 <__swbuf_r>:
 100cf64:	defffc04 	addi	sp,sp,-16
 100cf68:	dc400215 	stw	r17,8(sp)
 100cf6c:	dc000115 	stw	r16,4(sp)
 100cf70:	dfc00315 	stw	ra,12(sp)
 100cf74:	2023883a 	mov	r17,r4
 100cf78:	2821883a 	mov	r16,r5
 100cf7c:	20000226 	beq	r4,zero,100cf88 <__swbuf_r+0x24>
 100cf80:	20800e17 	ldw	r2,56(r4)
 100cf84:	10002f26 	beq	r2,zero,100d044 <__swbuf_r+0xe0>
 100cf88:	3080030b 	ldhu	r2,12(r6)
 100cf8c:	30c00617 	ldw	r3,24(r6)
 100cf90:	1080020c 	andi	r2,r2,8
 100cf94:	30c00215 	stw	r3,8(r6)
 100cf98:	10002226 	beq	r2,zero,100d024 <__swbuf_r+0xc0>
 100cf9c:	30c00417 	ldw	r3,16(r6)
 100cfa0:	18002026 	beq	r3,zero,100d024 <__swbuf_r+0xc0>
 100cfa4:	31000017 	ldw	r4,0(r6)
 100cfa8:	30800517 	ldw	r2,20(r6)
 100cfac:	20c7c83a 	sub	r3,r4,r3
 100cfb0:	18802f0e 	bge	r3,r2,100d070 <__swbuf_r+0x10c>
 100cfb4:	19400044 	addi	r5,r3,1
 100cfb8:	30800217 	ldw	r2,8(r6)
 100cfbc:	84003fcc 	andi	r16,r16,255
 100cfc0:	20c00044 	addi	r3,r4,1
 100cfc4:	10bfffc4 	addi	r2,r2,-1
 100cfc8:	30800215 	stw	r2,8(r6)
 100cfcc:	24000005 	stb	r16,0(r4)
 100cfd0:	30800517 	ldw	r2,20(r6)
 100cfd4:	30c00015 	stw	r3,0(r6)
 100cfd8:	11400c26 	beq	r2,r5,100d00c <__swbuf_r+0xa8>
 100cfdc:	3080030b 	ldhu	r2,12(r6)
 100cfe0:	1080004c 	andi	r2,r2,1
 100cfe4:	1005003a 	cmpeq	r2,r2,zero
 100cfe8:	10000626 	beq	r2,zero,100d004 <__swbuf_r+0xa0>
 100cfec:	8005883a 	mov	r2,r16
 100cff0:	dfc00317 	ldw	ra,12(sp)
 100cff4:	dc400217 	ldw	r17,8(sp)
 100cff8:	dc000117 	ldw	r16,4(sp)
 100cffc:	dec00404 	addi	sp,sp,16
 100d000:	f800283a 	ret
 100d004:	00800284 	movi	r2,10
 100d008:	80bff81e 	bne	r16,r2,100cfec <__swbuf_r+0x88>
 100d00c:	8809883a 	mov	r4,r17
 100d010:	300b883a 	mov	r5,r6
 100d014:	1003e4c0 	call	1003e4c <_fflush_r>
 100d018:	103ff426 	beq	r2,zero,100cfec <__swbuf_r+0x88>
 100d01c:	043fffc4 	movi	r16,-1
 100d020:	003ff206 	br	100cfec <__swbuf_r+0x88>
 100d024:	300b883a 	mov	r5,r6
 100d028:	8809883a 	mov	r4,r17
 100d02c:	d9800015 	stw	r6,0(sp)
 100d030:	10025180 	call	1002518 <__swsetup_r>
 100d034:	d9800017 	ldw	r6,0(sp)
 100d038:	1000061e 	bne	r2,zero,100d054 <__swbuf_r+0xf0>
 100d03c:	30c00417 	ldw	r3,16(r6)
 100d040:	003fd806 	br	100cfa4 <__swbuf_r+0x40>
 100d044:	d9800015 	stw	r6,0(sp)
 100d048:	10040e40 	call	10040e4 <__sinit>
 100d04c:	d9800017 	ldw	r6,0(sp)
 100d050:	003fcd06 	br	100cf88 <__swbuf_r+0x24>
 100d054:	3080030b 	ldhu	r2,12(r6)
 100d058:	00c00244 	movi	r3,9
 100d05c:	043fffc4 	movi	r16,-1
 100d060:	10801014 	ori	r2,r2,64
 100d064:	3080030d 	sth	r2,12(r6)
 100d068:	88c00015 	stw	r3,0(r17)
 100d06c:	003fdf06 	br	100cfec <__swbuf_r+0x88>
 100d070:	300b883a 	mov	r5,r6
 100d074:	8809883a 	mov	r4,r17
 100d078:	d9800015 	stw	r6,0(sp)
 100d07c:	1003e4c0 	call	1003e4c <_fflush_r>
 100d080:	d9800017 	ldw	r6,0(sp)
 100d084:	103fe51e 	bne	r2,zero,100d01c <__swbuf_r+0xb8>
 100d088:	31000017 	ldw	r4,0(r6)
 100d08c:	01400044 	movi	r5,1
 100d090:	003fc906 	br	100cfb8 <__swbuf_r+0x54>

0100d094 <__swbuf>:
 100d094:	01804074 	movhi	r6,257
 100d098:	31bc9f04 	addi	r6,r6,-3460
 100d09c:	2007883a 	mov	r3,r4
 100d0a0:	31000017 	ldw	r4,0(r6)
 100d0a4:	280d883a 	mov	r6,r5
 100d0a8:	180b883a 	mov	r5,r3
 100d0ac:	100cf641 	jmpi	100cf64 <__swbuf_r>

0100d0b0 <__register_exitproc>:
 100d0b0:	defffa04 	addi	sp,sp,-24
 100d0b4:	00804074 	movhi	r2,257
 100d0b8:	10bca004 	addi	r2,r2,-3456
 100d0bc:	dc000015 	stw	r16,0(sp)
 100d0c0:	14000017 	ldw	r16,0(r2)
 100d0c4:	dd000415 	stw	r20,16(sp)
 100d0c8:	2829883a 	mov	r20,r5
 100d0cc:	81405217 	ldw	r5,328(r16)
 100d0d0:	dcc00315 	stw	r19,12(sp)
 100d0d4:	dc800215 	stw	r18,8(sp)
 100d0d8:	dc400115 	stw	r17,4(sp)
 100d0dc:	dfc00515 	stw	ra,20(sp)
 100d0e0:	2023883a 	mov	r17,r4
 100d0e4:	3027883a 	mov	r19,r6
 100d0e8:	3825883a 	mov	r18,r7
 100d0ec:	28002526 	beq	r5,zero,100d184 <__register_exitproc+0xd4>
 100d0f0:	29000117 	ldw	r4,4(r5)
 100d0f4:	008007c4 	movi	r2,31
 100d0f8:	11002716 	blt	r2,r4,100d198 <__register_exitproc+0xe8>
 100d0fc:	8800101e 	bne	r17,zero,100d140 <__register_exitproc+0x90>
 100d100:	2105883a 	add	r2,r4,r4
 100d104:	1085883a 	add	r2,r2,r2
 100d108:	20c00044 	addi	r3,r4,1
 100d10c:	1145883a 	add	r2,r2,r5
 100d110:	0009883a 	mov	r4,zero
 100d114:	15000215 	stw	r20,8(r2)
 100d118:	28c00115 	stw	r3,4(r5)
 100d11c:	2005883a 	mov	r2,r4
 100d120:	dfc00517 	ldw	ra,20(sp)
 100d124:	dd000417 	ldw	r20,16(sp)
 100d128:	dcc00317 	ldw	r19,12(sp)
 100d12c:	dc800217 	ldw	r18,8(sp)
 100d130:	dc400117 	ldw	r17,4(sp)
 100d134:	dc000017 	ldw	r16,0(sp)
 100d138:	dec00604 	addi	sp,sp,24
 100d13c:	f800283a 	ret
 100d140:	29802204 	addi	r6,r5,136
 100d144:	00800044 	movi	r2,1
 100d148:	110e983a 	sll	r7,r2,r4
 100d14c:	30c04017 	ldw	r3,256(r6)
 100d150:	2105883a 	add	r2,r4,r4
 100d154:	1085883a 	add	r2,r2,r2
 100d158:	1185883a 	add	r2,r2,r6
 100d15c:	19c6b03a 	or	r3,r3,r7
 100d160:	14802015 	stw	r18,128(r2)
 100d164:	14c00015 	stw	r19,0(r2)
 100d168:	00800084 	movi	r2,2
 100d16c:	30c04015 	stw	r3,256(r6)
 100d170:	88bfe31e 	bne	r17,r2,100d100 <__register_exitproc+0x50>
 100d174:	30804117 	ldw	r2,260(r6)
 100d178:	11c4b03a 	or	r2,r2,r7
 100d17c:	30804115 	stw	r2,260(r6)
 100d180:	003fdf06 	br	100d100 <__register_exitproc+0x50>
 100d184:	00804074 	movhi	r2,257
 100d188:	1083a804 	addi	r2,r2,3744
 100d18c:	100b883a 	mov	r5,r2
 100d190:	80805215 	stw	r2,328(r16)
 100d194:	003fd606 	br	100d0f0 <__register_exitproc+0x40>
 100d198:	00800034 	movhi	r2,0
 100d19c:	10800004 	addi	r2,r2,0
 100d1a0:	1000021e 	bne	r2,zero,100d1ac <__register_exitproc+0xfc>
 100d1a4:	013fffc4 	movi	r4,-1
 100d1a8:	003fdc06 	br	100d11c <__register_exitproc+0x6c>
 100d1ac:	01006404 	movi	r4,400
 100d1b0:	103ee83a 	callr	r2
 100d1b4:	1007883a 	mov	r3,r2
 100d1b8:	103ffa26 	beq	r2,zero,100d1a4 <__register_exitproc+0xf4>
 100d1bc:	80805217 	ldw	r2,328(r16)
 100d1c0:	180b883a 	mov	r5,r3
 100d1c4:	18000115 	stw	zero,4(r3)
 100d1c8:	18800015 	stw	r2,0(r3)
 100d1cc:	80c05215 	stw	r3,328(r16)
 100d1d0:	18006215 	stw	zero,392(r3)
 100d1d4:	18006315 	stw	zero,396(r3)
 100d1d8:	0009883a 	mov	r4,zero
 100d1dc:	883fc826 	beq	r17,zero,100d100 <__register_exitproc+0x50>
 100d1e0:	003fd706 	br	100d140 <__register_exitproc+0x90>

0100d1e4 <register_fini>:
 100d1e4:	f800283a 	ret

0100d1e8 <__call_exitprocs>:
 100d1e8:	00804074 	movhi	r2,257
 100d1ec:	10bca004 	addi	r2,r2,-3456
 100d1f0:	10800017 	ldw	r2,0(r2)
 100d1f4:	defff304 	addi	sp,sp,-52
 100d1f8:	df000b15 	stw	fp,44(sp)
 100d1fc:	d8800115 	stw	r2,4(sp)
 100d200:	00800034 	movhi	r2,0
 100d204:	10800004 	addi	r2,r2,0
 100d208:	1005003a 	cmpeq	r2,r2,zero
 100d20c:	d8800215 	stw	r2,8(sp)
 100d210:	d8800117 	ldw	r2,4(sp)
 100d214:	dd400815 	stw	r21,32(sp)
 100d218:	dd000715 	stw	r20,28(sp)
 100d21c:	10805204 	addi	r2,r2,328
 100d220:	dfc00c15 	stw	ra,48(sp)
 100d224:	ddc00a15 	stw	r23,40(sp)
 100d228:	dd800915 	stw	r22,36(sp)
 100d22c:	dcc00615 	stw	r19,24(sp)
 100d230:	dc800515 	stw	r18,20(sp)
 100d234:	dc400415 	stw	r17,16(sp)
 100d238:	dc000315 	stw	r16,12(sp)
 100d23c:	282b883a 	mov	r21,r5
 100d240:	2039883a 	mov	fp,r4
 100d244:	d8800015 	stw	r2,0(sp)
 100d248:	2829003a 	cmpeq	r20,r5,zero
 100d24c:	d8800117 	ldw	r2,4(sp)
 100d250:	14405217 	ldw	r17,328(r2)
 100d254:	88001026 	beq	r17,zero,100d298 <__call_exitprocs+0xb0>
 100d258:	ddc00017 	ldw	r23,0(sp)
 100d25c:	88800117 	ldw	r2,4(r17)
 100d260:	8c802204 	addi	r18,r17,136
 100d264:	143fffc4 	addi	r16,r2,-1
 100d268:	80000916 	blt	r16,zero,100d290 <__call_exitprocs+0xa8>
 100d26c:	05bfffc4 	movi	r22,-1
 100d270:	a000151e 	bne	r20,zero,100d2c8 <__call_exitprocs+0xe0>
 100d274:	8409883a 	add	r4,r16,r16
 100d278:	2105883a 	add	r2,r4,r4
 100d27c:	1485883a 	add	r2,r2,r18
 100d280:	10c02017 	ldw	r3,128(r2)
 100d284:	a8c01126 	beq	r21,r3,100d2cc <__call_exitprocs+0xe4>
 100d288:	843fffc4 	addi	r16,r16,-1
 100d28c:	85bff81e 	bne	r16,r22,100d270 <__call_exitprocs+0x88>
 100d290:	d8800217 	ldw	r2,8(sp)
 100d294:	10003126 	beq	r2,zero,100d35c <__call_exitprocs+0x174>
 100d298:	dfc00c17 	ldw	ra,48(sp)
 100d29c:	df000b17 	ldw	fp,44(sp)
 100d2a0:	ddc00a17 	ldw	r23,40(sp)
 100d2a4:	dd800917 	ldw	r22,36(sp)
 100d2a8:	dd400817 	ldw	r21,32(sp)
 100d2ac:	dd000717 	ldw	r20,28(sp)
 100d2b0:	dcc00617 	ldw	r19,24(sp)
 100d2b4:	dc800517 	ldw	r18,20(sp)
 100d2b8:	dc400417 	ldw	r17,16(sp)
 100d2bc:	dc000317 	ldw	r16,12(sp)
 100d2c0:	dec00d04 	addi	sp,sp,52
 100d2c4:	f800283a 	ret
 100d2c8:	8409883a 	add	r4,r16,r16
 100d2cc:	88c00117 	ldw	r3,4(r17)
 100d2d0:	2105883a 	add	r2,r4,r4
 100d2d4:	1445883a 	add	r2,r2,r17
 100d2d8:	18ffffc4 	addi	r3,r3,-1
 100d2dc:	11800217 	ldw	r6,8(r2)
 100d2e0:	1c001526 	beq	r3,r16,100d338 <__call_exitprocs+0x150>
 100d2e4:	10000215 	stw	zero,8(r2)
 100d2e8:	303fe726 	beq	r6,zero,100d288 <__call_exitprocs+0xa0>
 100d2ec:	00c00044 	movi	r3,1
 100d2f0:	1c06983a 	sll	r3,r3,r16
 100d2f4:	90804017 	ldw	r2,256(r18)
 100d2f8:	8cc00117 	ldw	r19,4(r17)
 100d2fc:	1884703a 	and	r2,r3,r2
 100d300:	10001426 	beq	r2,zero,100d354 <__call_exitprocs+0x16c>
 100d304:	90804117 	ldw	r2,260(r18)
 100d308:	1884703a 	and	r2,r3,r2
 100d30c:	10000c1e 	bne	r2,zero,100d340 <__call_exitprocs+0x158>
 100d310:	2105883a 	add	r2,r4,r4
 100d314:	1485883a 	add	r2,r2,r18
 100d318:	11400017 	ldw	r5,0(r2)
 100d31c:	e009883a 	mov	r4,fp
 100d320:	303ee83a 	callr	r6
 100d324:	88800117 	ldw	r2,4(r17)
 100d328:	98bfc81e 	bne	r19,r2,100d24c <__call_exitprocs+0x64>
 100d32c:	b8800017 	ldw	r2,0(r23)
 100d330:	147fd526 	beq	r2,r17,100d288 <__call_exitprocs+0xa0>
 100d334:	003fc506 	br	100d24c <__call_exitprocs+0x64>
 100d338:	8c000115 	stw	r16,4(r17)
 100d33c:	003fea06 	br	100d2e8 <__call_exitprocs+0x100>
 100d340:	2105883a 	add	r2,r4,r4
 100d344:	1485883a 	add	r2,r2,r18
 100d348:	11000017 	ldw	r4,0(r2)
 100d34c:	303ee83a 	callr	r6
 100d350:	003ff406 	br	100d324 <__call_exitprocs+0x13c>
 100d354:	303ee83a 	callr	r6
 100d358:	003ff206 	br	100d324 <__call_exitprocs+0x13c>
 100d35c:	88800117 	ldw	r2,4(r17)
 100d360:	1000081e 	bne	r2,zero,100d384 <__call_exitprocs+0x19c>
 100d364:	89000017 	ldw	r4,0(r17)
 100d368:	20000726 	beq	r4,zero,100d388 <__call_exitprocs+0x1a0>
 100d36c:	b9000015 	stw	r4,0(r23)
 100d370:	8809883a 	mov	r4,r17
 100d374:	00000000 	call	0 <__alt_mem_onchip_memory>
 100d378:	bc400017 	ldw	r17,0(r23)
 100d37c:	883fb71e 	bne	r17,zero,100d25c <__call_exitprocs+0x74>
 100d380:	003fc506 	br	100d298 <__call_exitprocs+0xb0>
 100d384:	89000017 	ldw	r4,0(r17)
 100d388:	882f883a 	mov	r23,r17
 100d38c:	2023883a 	mov	r17,r4
 100d390:	883fb21e 	bne	r17,zero,100d25c <__call_exitprocs+0x74>
 100d394:	003fc006 	br	100d298 <__call_exitprocs+0xb0>

0100d398 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100d398:	defffd04 	addi	sp,sp,-12
 100d39c:	df000215 	stw	fp,8(sp)
 100d3a0:	df000204 	addi	fp,sp,8
 100d3a4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100d3a8:	e0bfff17 	ldw	r2,-4(fp)
 100d3ac:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100d3b0:	e0bffe17 	ldw	r2,-8(fp)
 100d3b4:	1005003a 	cmpeq	r2,r2,zero
 100d3b8:	1000021e 	bne	r2,zero,100d3c4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100d3bc:	002af070 	cmpltui	zero,zero,43969
 100d3c0:	00000106 	br	100d3c8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100d3c4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100d3c8:	e037883a 	mov	sp,fp
 100d3cc:	df000017 	ldw	fp,0(sp)
 100d3d0:	dec00104 	addi	sp,sp,4
 100d3d4:	f800283a 	ret

0100d3d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100d3d8:	defffd04 	addi	sp,sp,-12
 100d3dc:	dfc00215 	stw	ra,8(sp)
 100d3e0:	df000115 	stw	fp,4(sp)
 100d3e4:	df000104 	addi	fp,sp,4
 100d3e8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100d3ec:	e13fff17 	ldw	r4,-4(fp)
 100d3f0:	100d3980 	call	100d398 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100d3f4:	003fff06 	br	100d3f4 <_exit+0x1c>
 100d3f8:	00000010 	cmplti	zero,zero,0
 100d3fc:	00000000 	call	0 <__alt_mem_onchip_memory>
 100d400:	00527a01 	jmpi	527a0 <__alt_mem_onchip_memory+0x527a0>
 100d404:	011f7c01 	jmpi	11f7c0 <__alt_mem_onchip_memory+0x11f7c0>
 100d408:	001b0c0b 	ldhu	zero,27696(zero)
 100d40c:	00000028 	cmpgeui	zero,zero,0
 100d410:	00000018 	cmpnei	zero,zero,0
 100d414:	010078e4 	muli	r4,zero,483
 100d418:	0000066c 	andhi	zero,zero,25
 100d41c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x240e440>
 100d420:	910a9074 	orhi	r4,r18,10817
 100d424:	94089209 	0x94089209
 100d428:	97049606 	br	100e684 <jtag_uart+0x494>
 100d42c:	93019f03 	ldbu	r12,1660(r18)
 100d430:	9c059507 	ldb	r16,5716(r19)
 100d434:	00000002 	0x2
 100d438:	00000028 	cmpgeui	zero,zero,0
 100d43c:	00000044 	movi	zero,1
 100d440:	01007f50 	cmplti	r4,zero,509
 100d444:	00000660 	cmpeqi	zero,zero,25
 100d448:	400e4400 	call	400e440 <__alt_data_end+0x280e440>
 100d44c:	92099170 	cmpltui	r8,r18,9797
 100d450:	96069408 	cmpgei	et,r18,6736
 100d454:	9c039704 	addi	r16,r19,3676
 100d458:	90019f02 	0x90019f02
 100d45c:	9507930a 	0x9507930a
 100d460:	00000005 	stb	zero,0(zero)
 100d464:	0100d1e4 	muli	r4,zero,839
